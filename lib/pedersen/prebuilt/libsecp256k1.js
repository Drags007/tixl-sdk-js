
// emscripton re-assigns Module (use var)
var Module = {} // eslint-disable-line no-var
// Module.noInitialRun = true;
// Module.noExitRuntime = true;

Module['initPromise'] = new Promise(resolve => {
  Module['onRuntimeInitialized'] = function () {
    // console.log('secp256k1-js Initialize');
    resolve()
  }
})

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.

if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function (ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () {
    return '[Emscripten Module object]';
  };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() {
      throw 'no read() available'
    };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function (status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function (x) {
      dump(x);
    }) : (function (x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function (title) {
      document.title = title
    };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}

if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function () {
  };
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function (status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;


// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1':
      case 'i8':
        return 1;
      case 'i16':
        return 2;
      case 'i32':
        return 4;
      case 'i64':
        return 8;
      case 'float':
        return 4;
      case 'double':
        return 8;
      default: {
        if (type[type.length - 1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits / 8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length - 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2 * (1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index - 2) / 2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) {
    var ret = STACKTOP;
    STACKTOP = (STACKTOP + size) | 0;
    STACKTOP = (((STACKTOP) + 15) & -16);
    (assert((((STACKTOP | 0) < (STACK_MAX | 0)) | 0)) | 0);
    return ret;
  },
  staticAlloc: function (size) {
    var ret = STATICTOP;
    STATICTOP = (STATICTOP + (assert(!staticSealed), size)) | 0;
    STATICTOP = (((STATICTOP) + 15) & -16);
    return ret;
  },
  dynamicAlloc: function (size) {
    assert(DYNAMICTOP_PTR);
    var ret = HEAP32[DYNAMICTOP_PTR >> 2];
    var end = (((ret + size + 15) | 0) & -16);
    HEAP32[DYNAMICTOP_PTR >> 2] = end;
    if (end >= TOTAL_MEMORY) {
      var success = enlargeMemory();
      if (!success) {
        HEAP32[DYNAMICTOP_PTR >> 2] = ret;
        return 0;
      }
    }
    return ret;
  },
  alignMemory: function (size, quantum) {
    var ret = size = Math.ceil((size) / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
    return ret;
  },
  makeBigInt: function (low, high, unsigned) {
    var ret = (unsigned ? ((+((low >>> 0))) + ((+((high >>> 0))) * 4294967296.0)) : ((+((low >>> 0))) + ((+((high | 0))) * 4294967296.0)));
    return ret;
  },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module["Runtime"] = Runtime;


//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident);
    } catch (e) {
    }
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function () {
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function () {
      Runtime.stackSave()
    },
    'stackRestore': function () {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC': function (arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC': function (str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = { 'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC'] };

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function () {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;

  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return { arguments: parsed[0], body: parsed[1], returnValue: parsed[2] }
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;

  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function (type) {
      return type === 'number'
    });
    var numericRet = (returnType !== 'string');
    if (numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function (x, i) {
      return '$' + i
    });
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function () {
      return cfunc
    }).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function () {
        return Pointer_stringify
      }).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit
  switch (type) {
    case 'i1':
      HEAP8[((ptr) >> 0)] = value;
      break;
    case 'i8':
      HEAP8[((ptr) >> 0)] = value;
      break;
    case 'i16':
      HEAP16[((ptr) >> 1)] = value;
      break;
    case 'i32':
      HEAP32[((ptr) >> 2)] = value;
      break;
    case 'i64':
      (tempI64 = [value >>> 0, (tempDouble = value, (+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble) / 4294967296.0))), 4294967295.0)) | 0) >>> 0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296.0))))) >>> 0) : 0)], HEAP32[((ptr) >> 2)] = tempI64[0], HEAP32[(((ptr) + (4)) >> 2)] = tempI64[1]);
      break;
    case 'float':
      HEAPF32[((ptr) >> 2)] = value;
      break;
    case 'double':
      HEAPF64[((ptr) >> 3)] = value;
      break;
    default:
      abort('invalid type for setValue: ' + type);
  }
}

Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit
  switch (type) {
    case 'i1':
      return HEAP8[((ptr) >> 0)];
    case 'i8':
      return HEAP8[((ptr) >> 0)];
    case 'i16':
      return HEAP16[((ptr) >> 1)];
    case 'i32':
      return HEAP32[((ptr) >> 2)];
    case 'i64':
      return HEAP32[((ptr) >> 2)];
    case 'float':
      return HEAPF32[((ptr) >> 2)];
    case 'double':
      return HEAPF64[((ptr) >> 3)];
    default:
      abort('invalid type for setValue: ' + type);
  }
  return null;
}

Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr) >> 2)] = 0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++) >> 0)] = 0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret + i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}

Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr) + (i)) >> 0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}

Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++) >> 0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) {
        str += String.fromCharCode(u0);
        continue;
      }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) {
        str += String.fromCharCode(((u0 & 31) << 6) | u1);
        continue;
      }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}

Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}

Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr) + (i * 2)) >> 1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length * 2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr) >> 1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr) >> 1)] = 0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length * 2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr) + (i * 4)) >> 2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr) >> 2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr) >> 2)] = 0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s) + 1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch (e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function (x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch (e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
  /** @type {ArrayBuffer} */
  buffer,
  /** @type {Int8Array} */
  HEAP8,
  /** @type {Uint8Array} */
  HEAPU8,
  /** @type {Int16Array} */
  HEAP16,
  /** @type {Uint16Array} */
  HEAPU16,
  /** @type {Int32Array} */
  HEAP32,
  /** @type {Uint32Array} */
  HEAPU32,
  /** @type {Float32Array} */
  HEAPF32,
  /** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2) - 1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2) - 2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2) - 1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2) - 2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2) - 2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2) - 1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
  'JS engine does not provide full typed array support');


// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 0x63736d65;
/* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while (callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__ = []; // functions called before the runtime is initialized
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}

Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i) & 0xff);
    HEAP8[((buffer++) >> 0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer) >> 0)] = 0;
}

Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2 * Math.abs(1 << (bits - 1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
    : Math.pow(2, bits) + value;
}

function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits - 1)) // abs is needed if bits == 32
    : Math.pow(2, bits - 1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
    // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
    // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2 * half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah = a >>> 16;
  var al = a & 0xffff;
  var bh = b >>> 16;
  var bl = b & 0xffff;
  return (al * bl + ((ah * bl + al * bh) << 16)) | 0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function (x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function (x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function () {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;


var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function () {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function () {
    FS.error()
  },
  createDataFile: function () {
    FS.error()
  },
  createPreloadedFile: function () {
    FS.error()
  },
  createLazyFile: function () {
    FS.error()
  },
  open: function () {
    FS.error()
  },
  mkdev: function () {
    FS.error()
  },
  registerDevice: function () {
    FS.error()
  },
  analyzePath: function () {
    FS.error()
  },
  loadFilesFromDB: function () {
    FS.error()
  },

  ErrnoError: function ErrnoError() {
    FS.error()
  },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;


// === Body ===

var ASM_CONSTS = [];


STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 4784;
/* global initializers */
__ATINIT__.push();


/* memory initializer */
allocate([152, 23, 248, 2, 197, 86, 160, 0, 159, 149, 141, 2, 56, 183, 108, 3, 252, 155, 2, 3, 193, 194, 161, 3, 92, 41, 6, 2, 86, 177, 238, 2, 220, 249, 126, 2, 153, 111, 30, 0, 184, 212, 16, 3, 254, 35, 244, 1, 196, 153, 65, 1, 21, 154, 34, 1, 180, 23, 253, 0, 42, 66, 132, 3, 192, 191, 79, 2, 118, 149, 17, 3, 163, 38, 119, 2, 182, 14, 18, 0, 0, 0, 0, 0, 192, 58, 128, 2, 179, 166, 251, 3, 123, 84, 109, 1, 178, 163, 60, 0, 90, 138, 7, 2, 151, 94, 122, 1, 3, 182, 180, 0, 222, 82, 37, 1, 160, 193, 116, 3, 166, 36, 20, 0, 4, 137, 163, 3, 252, 196, 8, 3, 48, 140, 150, 2, 217, 197, 43, 2, 194, 218, 54, 2, 2, 125, 109, 0, 203, 55, 230, 1, 18, 184, 73, 2, 115, 57, 134, 2, 241, 116, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 189, 0, 0, 0, 20, 1, 0, 0, 104, 1, 0, 0, 182, 1, 0, 0, 254, 1, 0, 0, 67, 2, 0, 0, 130, 2, 0, 0, 187, 2, 0, 0, 241, 2, 0, 0, 33, 3, 0, 0, 75, 3, 0, 0, 114, 3, 0, 0, 147, 3, 0, 0, 174, 3, 0, 0, 198, 3, 0, 0, 216, 3, 0, 0, 228, 3, 0, 0, 237, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 1, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 176, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 115, 58, 37, 100, 58, 32, 37, 115, 10, 0, 46, 47, 115, 114, 99, 47, 98, 111, 114, 114, 111, 109, 101, 97, 110, 95, 105, 109, 112, 108, 46, 104, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 73, 78, 84, 95, 77, 65, 88, 32, 45, 32, 99, 111, 117, 110, 116, 32, 62, 32, 114, 115, 105, 122, 101, 115, 91, 105, 93, 0, 115, 114, 99, 47, 115, 101, 99, 112, 50, 53, 54, 107, 49, 46, 99, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 99, 116, 120, 32, 33, 61, 32, 78, 85, 76, 76, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 115, 101, 99, 112, 50, 53, 54, 107, 49, 95, 101, 99, 109, 117, 108, 116, 95, 99, 111, 110, 116, 101, 120, 116, 95, 105, 115, 95, 98, 117, 105, 108, 116, 40, 38, 99, 116, 120, 45, 62, 101, 99, 109, 117, 108, 116, 95, 99, 116, 120, 41, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 115, 101, 99, 112, 50, 53, 54, 107, 49, 95, 101, 99, 109, 117, 108, 116, 95, 103, 101, 110, 95, 99, 111, 110, 116, 101, 120, 116, 95, 105, 115, 95, 98, 117, 105, 108, 116, 40, 38, 99, 116, 120, 45, 62, 101, 99, 109, 117, 108, 116, 95, 103, 101, 110, 95, 99, 116, 120, 41, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 115, 101, 99, 112, 50, 53, 54, 107, 49, 95, 101, 99, 109, 117, 108, 116, 95, 103, 101, 110, 50, 95, 99, 111, 110, 116, 101, 120, 116, 95, 105, 115, 95, 98, 117, 105, 108, 116, 40, 38, 99, 116, 120, 45, 62, 101, 99, 109, 117, 108, 116, 95, 103, 101, 110, 50, 95, 99, 116, 120, 41, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 99, 111, 109, 109, 105, 116, 32, 33, 61, 32, 78, 85, 76, 76, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 98, 108, 105, 110, 100, 32, 33, 61, 32, 78, 85, 76, 76, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 98, 108, 105, 110, 100, 95, 111, 117, 116, 32, 33, 61, 32, 78, 85, 76, 76, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 98, 108, 105, 110, 100, 115, 32, 33, 61, 32, 78, 85, 76, 76, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 33, 112, 99, 110, 116, 32, 124, 124, 32, 40, 99, 111, 109, 109, 105, 116, 115, 32, 33, 61, 32, 78, 85, 76, 76, 41, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 33, 110, 99, 110, 116, 32, 124, 124, 32, 40, 110, 99, 111, 109, 109, 105, 116, 115, 32, 33, 61, 32, 78, 85, 76, 76, 41, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 101, 120, 112, 32, 33, 61, 32, 78, 85, 76, 76, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 109, 97, 110, 116, 105, 115, 115, 97, 32, 33, 61, 32, 78, 85, 76, 76, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 109, 105, 110, 95, 118, 97, 108, 117, 101, 32, 33, 61, 32, 78, 85, 76, 76, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 109, 97, 120, 95, 118, 97, 108, 117, 101, 32, 33, 61, 32, 78, 85, 76, 76, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 112, 114, 111, 111, 102, 32, 33, 61, 32, 78, 85, 76, 76, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 115, 101, 99, 112, 50, 53, 54, 107, 49, 95, 114, 97, 110, 103, 101, 112, 114, 111, 111, 102, 95, 99, 111, 110, 116, 101, 120, 116, 95, 105, 115, 95, 98, 117, 105, 108, 116, 40, 38, 99, 116, 120, 45, 62, 114, 97, 110, 103, 101, 112, 114, 111, 111, 102, 95, 99, 116, 120, 41, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 112, 108, 101, 110, 32, 33, 61, 32, 78, 85, 76, 76, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 110, 111, 110, 99, 101, 32, 33, 61, 32, 78, 85, 76, 76, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 47, 115, 114, 99, 47, 117, 116, 105, 108, 46, 104, 0, 116, 101, 115, 116, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 114, 101, 116, 32, 33, 61, 32, 78, 85, 76, 76, 0, 84, 104, 101, 32, 115, 99, 97, 108, 97, 114, 32, 102, 111, 114, 32, 116, 104, 105, 115, 32, 120, 32, 105, 115, 32, 117, 110, 107, 110, 111, 119, 110, 0, 84, 104, 101, 32, 115, 99, 97, 108, 97, 114, 32, 102, 111, 114, 32, 116, 104, 105, 115, 32, 120, 32, 105, 115, 32, 117, 110, 107, 110, 111, 119, 110, 0, 84, 33, 34, 25, 13, 1, 2, 3, 17, 75, 28, 12, 16, 4, 11, 29, 18, 30, 39, 104, 110, 111, 112, 113, 98, 32, 5, 6, 15, 19, 20, 21, 26, 8, 22, 7, 40, 36, 23, 24, 9, 10, 14, 27, 31, 37, 35, 131, 130, 125, 38, 42, 43, 60, 61, 62, 63, 67, 71, 74, 77, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 114, 115, 116, 121, 122, 123, 124, 0, 73, 108, 108, 101, 103, 97, 108, 32, 98, 121, 116, 101, 32, 115, 101, 113, 117, 101, 110, 99, 101, 0, 68, 111, 109, 97, 105, 110, 32, 101, 114, 114, 111, 114, 0, 82, 101, 115, 117, 108, 116, 32, 110, 111, 116, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 98, 108, 101, 0, 78, 111, 116, 32, 97, 32, 116, 116, 121, 0, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 100, 101, 110, 105, 101, 100, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 110, 111, 116, 32, 112, 101, 114, 109, 105, 116, 116, 101, 100, 0, 78, 111, 32, 115, 117, 99, 104, 32, 102, 105, 108, 101, 32, 111, 114, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 78, 111, 32, 115, 117, 99, 104, 32, 112, 114, 111, 99, 101, 115, 115, 0, 70, 105, 108, 101, 32, 101, 120, 105, 115, 116, 115, 0, 86, 97, 108, 117, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 32, 102, 111, 114, 32, 100, 97, 116, 97, 32, 116, 121, 112, 101, 0, 78, 111, 32, 115, 112, 97, 99, 101, 32, 108, 101, 102, 116, 32, 111, 110, 32, 100, 101, 118, 105, 99, 101, 0, 79, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 98, 117, 115, 121, 0, 73, 110, 116, 101, 114, 114, 117, 112, 116, 101, 100, 32, 115, 121, 115, 116, 101, 109, 32, 99, 97, 108, 108, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 116, 101, 109, 112, 111, 114, 97, 114, 105, 108, 121, 32, 117, 110, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 73, 110, 118, 97, 108, 105, 100, 32, 115, 101, 101, 107, 0, 67, 114, 111, 115, 115, 45, 100, 101, 118, 105, 99, 101, 32, 108, 105, 110, 107, 0, 82, 101, 97, 100, 45, 111, 110, 108, 121, 32, 102, 105, 108, 101, 32, 115, 121, 115, 116, 101, 109, 0, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 110, 111, 116, 32, 101, 109, 112, 116, 121, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 32, 98, 121, 32, 112, 101, 101, 114, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 116, 105, 109, 101, 100, 32, 111, 117, 116, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 102, 117, 115, 101, 100, 0, 72, 111, 115, 116, 32, 105, 115, 32, 100, 111, 119, 110, 0, 72, 111, 115, 116, 32, 105, 115, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0, 65, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 117, 115, 101, 0, 66, 114, 111, 107, 101, 110, 32, 112, 105, 112, 101, 0, 73, 47, 79, 32, 101, 114, 114, 111, 114, 0, 78, 111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99, 101, 32, 111, 114, 32, 97, 100, 100, 114, 101, 115, 115, 0, 66, 108, 111, 99, 107, 32, 100, 101, 118, 105, 99, 101, 32, 114, 101, 113, 117, 105, 114, 101, 100, 0, 78, 111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99, 101, 0, 78, 111, 116, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 73, 115, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 84, 101, 120, 116, 32, 102, 105, 108, 101, 32, 98, 117, 115, 121, 0, 69, 120, 101, 99, 32, 102, 111, 114, 109, 97, 116, 32, 101, 114, 114, 111, 114, 0, 73, 110, 118, 97, 108, 105, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 0, 65, 114, 103, 117, 109, 101, 110, 116, 32, 108, 105, 115, 116, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 83, 121, 109, 98, 111, 108, 105, 99, 32, 108, 105, 110, 107, 32, 108, 111, 111, 112, 0, 70, 105, 108, 101, 110, 97, 109, 101, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 84, 111, 111, 32, 109, 97, 110, 121, 32, 111, 112, 101, 110, 32, 102, 105, 108, 101, 115, 32, 105, 110, 32, 115, 121, 115, 116, 101, 109, 0, 78, 111, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 66, 97, 100, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 0, 78, 111, 32, 99, 104, 105, 108, 100, 32, 112, 114, 111, 99, 101, 115, 115, 0, 66, 97, 100, 32, 97, 100, 100, 114, 101, 115, 115, 0, 70, 105, 108, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0, 84, 111, 111, 32, 109, 97, 110, 121, 32, 108, 105, 110, 107, 115, 0, 78, 111, 32, 108, 111, 99, 107, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 100, 101, 97, 100, 108, 111, 99, 107, 32, 119, 111, 117, 108, 100, 32, 111, 99, 99, 117, 114, 0, 83, 116, 97, 116, 101, 32, 110, 111, 116, 32, 114, 101, 99, 111, 118, 101, 114, 97, 98, 108, 101, 0, 80, 114, 101, 118, 105, 111, 117, 115, 32, 111, 119, 110, 101, 114, 32, 100, 105, 101, 100, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 99, 97, 110, 99, 101, 108, 101, 100, 0, 70, 117, 110, 99, 116, 105, 111, 110, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 0, 78, 111, 32, 109, 101, 115, 115, 97, 103, 101, 32, 111, 102, 32, 100, 101, 115, 105, 114, 101, 100, 32, 116, 121, 112, 101, 0, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 114, 101, 109, 111, 118, 101, 100, 0, 68, 101, 118, 105, 99, 101, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114, 101, 97, 109, 0, 78, 111, 32, 100, 97, 116, 97, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 68, 101, 118, 105, 99, 101, 32, 116, 105, 109, 101, 111, 117, 116, 0, 79, 117, 116, 32, 111, 102, 32, 115, 116, 114, 101, 97, 109, 115, 32, 114, 101, 115, 111, 117, 114, 99, 101, 115, 0, 76, 105, 110, 107, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 115, 101, 118, 101, 114, 101, 100, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 101, 114, 114, 111, 114, 0, 66, 97, 100, 32, 109, 101, 115, 115, 97, 103, 101, 0, 70, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 32, 105, 110, 32, 98, 97, 100, 32, 115, 116, 97, 116, 101, 0, 78, 111, 116, 32, 97, 32, 115, 111, 99, 107, 101, 116, 0, 68, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32, 97, 100, 100, 114, 101, 115, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 0, 77, 101, 115, 115, 97, 103, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 119, 114, 111, 110, 103, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 115, 111, 99, 107, 101, 116, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 83, 111, 99, 107, 101, 116, 32, 116, 121, 112, 101, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 78, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 102, 97, 109, 105, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 65, 100, 100, 114, 101, 115, 115, 32, 102, 97, 109, 105, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 98, 121, 32, 112, 114, 111, 116, 111, 99, 111, 108, 0, 65, 100, 100, 114, 101, 115, 115, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 78, 101, 116, 119, 111, 114, 107, 32, 105, 115, 32, 100, 111, 119, 110, 0, 78, 101, 116, 119, 111, 114, 107, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 32, 98, 121, 32, 110, 101, 116, 119, 111, 114, 107, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 97, 98, 111, 114, 116, 101, 100, 0, 78, 111, 32, 98, 117, 102, 102, 101, 114, 32, 115, 112, 97, 99, 101, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 83, 111, 99, 107, 101, 116, 32, 105, 115, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 83, 111, 99, 107, 101, 116, 32, 110, 111, 116, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 67, 97, 110, 110, 111, 116, 32, 115, 101, 110, 100, 32, 97, 102, 116, 101, 114, 32, 115, 111, 99, 107, 101, 116, 32, 115, 104, 117, 116, 100, 111, 119, 110, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 97, 108, 114, 101, 97, 100, 121, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115, 0, 83, 116, 97, 108, 101, 32, 102, 105, 108, 101, 32, 104, 97, 110, 100, 108, 101, 0, 82, 101, 109, 111, 116, 101, 32, 73, 47, 79, 32, 101, 114, 114, 111, 114, 0, 81, 117, 111, 116, 97, 32, 101, 120, 99, 101, 101, 100, 101, 100, 0, 78, 111, 32, 109, 101, 100, 105, 117, 109, 32, 102, 111, 117, 110, 100, 0, 87, 114, 111, 110, 103, 32, 109, 101, 100, 105, 117, 109, 32, 116, 121, 112, 101, 0, 78, 111, 32, 101, 114, 114, 111, 114, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 0, 0, 17, 0, 10, 0, 17, 17, 17, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 15, 10, 17, 17, 17, 3, 10, 7, 0, 1, 19, 9, 11, 11, 0, 0, 9, 6, 11, 0, 0, 11, 0, 6, 17, 0, 0, 0, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 10, 10, 17, 17, 17, 0, 10, 0, 0, 2, 0, 9, 11, 0, 0, 0, 9, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 13, 0, 0, 0, 0, 9, 14, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 15, 0, 0, 0, 0, 9, 16, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10, 0, 0, 0, 0, 9, 11, 0, 0, 0, 0, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 45, 43, 32, 32, 32, 48, 88, 48, 120, 0, 40, 110, 117, 108, 108, 41, 0, 45, 48, 88, 43, 48, 88, 32, 48, 88, 45, 48, 120, 43, 48, 120, 32, 48, 120, 0, 105, 110, 102, 0, 73, 78, 70, 0, 110, 97, 110, 0, 78, 65, 78, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 46, 0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);


/* no memory initializer */
var tempDoublePtr = STATICTOP;
STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];

  HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];

  HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];

  HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];

  HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];

  HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];

  HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];

  HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];

  HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];

}

// {{PRE_LIBRARY}}


Module["_bitshift64Ashr"] = _bitshift64Ashr;


Module["_i64Subtract"] = _i64Subtract;


Module["_i64Add"] = _i64Add;


Module["_memset"] = _memset;


Module["_bitshift64Lshr"] = _bitshift64Lshr;


Module["_bitshift64Shl"] = _bitshift64Shl;

function _abort() {
  Module['abort']();
}


function _emscripten_memcpy_big(dest, src, num) {
  HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
  return dest;
}

Module["_memcpy"] = _memcpy;


var SYSCALLS = {
  varargs: 0, get: function (varargs) {
    SYSCALLS.varargs += 4;
    var ret = HEAP32[(((SYSCALLS.varargs) - (4)) >> 2)];
    return ret;
  }, getStr: function () {
    var ret = Pointer_stringify(SYSCALLS.get());
    return ret;
  }, get64: function () {
    var low = SYSCALLS.get(), high = SYSCALLS.get();
    if (low >= 0) assert(high === 0);
    else assert(high === -1);
    return low;
  }, getZero: function () {
    assert(SYSCALLS.get() === 0);
  }
};

function ___syscall6(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    // close
    var stream = SYSCALLS.getStreamFromFD();
    FS.close(stream);
    return 0;
  } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}


var cttz_i8 = allocate([8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0], "i8", ALLOC_STATIC);
Module["_llvm_cttz_i32"] = _llvm_cttz_i32;
Module["___udivmoddi4"] = ___udivmoddi4;
Module["___udivdi3"] = ___udivdi3;


Module["___muldsi3"] = ___muldsi3;
Module["___muldi3"] = ___muldi3;


function ___setErrNo(value) {
  if (Module['___errno_location']) HEAP32[((Module['___errno_location']()) >> 2)] = value;
  else Module.printErr('failed to set errno from JS');
  return value;
}

Module["_sbrk"] = _sbrk;


Module["___uremdi3"] = ___uremdi3;


Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

function ___syscall140(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    // llseek
    var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(),
      result = SYSCALLS.get(), whence = SYSCALLS.get();
    // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
    var offset = offset_low;
    FS.llseek(stream, offset, whence);
    HEAP32[((result) >> 2)] = stream.position;
    if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
    return 0;
  } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}

function ___syscall146(which, varargs) {
  SYSCALLS.varargs = varargs;
  try {
    // writev
    // hack to support printf in NO_FILESYSTEM
    var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
    var ret = 0;
    if (!___syscall146.buffer) {
      ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
      ___syscall146.printChar = function (stream, curr) {
        var buffer = ___syscall146.buffers[stream];
        assert(buffer);
        if (curr === 0 || curr === 10) {
          (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
          buffer.length = 0;
        } else {
          buffer.push(curr);
        }
      };
    }
    for (var i = 0; i < iovcnt; i++) {
      var ptr = HEAP32[(((iov) + (i * 8)) >> 2)];
      var len = HEAP32[(((iov) + (i * 8 + 4)) >> 2)];
      for (var j = 0; j < len; j++) {
        ___syscall146.printChar(stream, HEAPU8[ptr + j]);
      }
      ret += len;
    }
    return ret;
  } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
}


Module["_llvm_ctlz_i64"] = _llvm_ctlz_i64;
/* flush anything remaining in the buffer during shutdown */
__ATEXIT__.push(function () {
  var fflush = Module["_fflush"];
  if (fflush) fflush(0);
  var printChar = ___syscall146.printChar;
  if (!printChar) return;
  var buffers = ___syscall146.buffers;
  if (buffers[1].length) printChar(1, 10);
  if (buffers[2].length) printChar(2, 10);
});
;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_ii(x) {
  Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
  Module["printErr"]("Build with ASSERTIONS=2 for more info.");
  abort(x)
}

function nullFunc_iiii(x) {
  Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
  Module["printErr"]("Build with ASSERTIONS=2 for more info.");
  abort(x)
}

function invoke_ii(index, a1) {
  try {
    return Module["dynCall_ii"](index, a1);
  } catch (e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index, a1, a2, a3) {
  try {
    return Module["dynCall_iiii"](index, a1, a2, a3);
  } catch (e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = {
  "Math": Math,
  "Int8Array": Int8Array,
  "Int16Array": Int16Array,
  "Int32Array": Int32Array,
  "Uint8Array": Uint8Array,
  "Uint16Array": Uint16Array,
  "Uint32Array": Uint32Array,
  "Float32Array": Float32Array,
  "Float64Array": Float64Array,
  "NaN": NaN,
  "Infinity": Infinity
};

Module.asmLibraryArg = {
  "abort": abort,
  "assert": assert,
  "enlargeMemory": enlargeMemory,
  "getTotalMemory": getTotalMemory,
  "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
  "abortStackOverflow": abortStackOverflow,
  "nullFunc_ii": nullFunc_ii,
  "nullFunc_iiii": nullFunc_iiii,
  "invoke_ii": invoke_ii,
  "invoke_iiii": invoke_iiii,
  "___syscall6": ___syscall6,
  "___setErrNo": ___setErrNo,
  "_abort": _abort,
  "_emscripten_memcpy_big": _emscripten_memcpy_big,
  "___syscall140": ___syscall140,
  "___syscall146": ___syscall146,
  "DYNAMICTOP_PTR": DYNAMICTOP_PTR,
  "tempDoublePtr": tempDoublePtr,
  "ABORT": ABORT,
  "STACKTOP": STACKTOP,
  "STACK_MAX": STACK_MAX,
  "cttz_i8": cttz_i8
};
// EMSCRIPTEN_START_ASM
var asm = (function (global, env, buffer) {
  'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR = env.DYNAMICTOP_PTR | 0;
  var tempDoublePtr = env.tempDoublePtr | 0;
  var ABORT = env.ABORT | 0;
  var STACKTOP = env.STACKTOP | 0;
  var STACK_MAX = env.STACK_MAX | 0;
  var cttz_i8 = env.cttz_i8 | 0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor = global.Math.floor;
  var Math_abs = global.Math.abs;
  var Math_sqrt = global.Math.sqrt;
  var Math_pow = global.Math.pow;
  var Math_cos = global.Math.cos;
  var Math_sin = global.Math.sin;
  var Math_tan = global.Math.tan;
  var Math_acos = global.Math.acos;
  var Math_asin = global.Math.asin;
  var Math_atan = global.Math.atan;
  var Math_atan2 = global.Math.atan2;
  var Math_exp = global.Math.exp;
  var Math_log = global.Math.log;
  var Math_ceil = global.Math.ceil;
  var Math_imul = global.Math.imul;
  var Math_min = global.Math.min;
  var Math_max = global.Math.max;
  var Math_clz32 = global.Math.clz32;
  var abort = env.abort;
  var assert = env.assert;
  var enlargeMemory = env.enlargeMemory;
  var getTotalMemory = env.getTotalMemory;
  var abortOnCannotGrowMemory = env.abortOnCannotGrowMemory;
  var abortStackOverflow = env.abortStackOverflow;
  var nullFunc_ii = env.nullFunc_ii;
  var nullFunc_iiii = env.nullFunc_iiii;
  var invoke_ii = env.invoke_ii;
  var invoke_iiii = env.invoke_iiii;
  var ___syscall6 = env.___syscall6;
  var ___setErrNo = env.___setErrNo;
  var _abort = env._abort;
  var _emscripten_memcpy_big = env._emscripten_memcpy_big;
  var ___syscall140 = env.___syscall140;
  var ___syscall146 = env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

  function stackAlloc(size) {
    size = size | 0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size) | 0;
    STACKTOP = (STACKTOP + 15) & -16;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0);

    return ret | 0;
  }

  function stackSave() {
    return STACKTOP | 0;
  }

  function stackRestore(top) {
    top = top | 0;
    STACKTOP = top;
  }

  function establishStackSpace(stackBase, stackMax) {
    stackBase = stackBase | 0;
    stackMax = stackMax | 0;
    STACKTOP = stackBase;
    STACK_MAX = stackMax;
  }

  function setThrew(threw, value) {
    threw = threw | 0;
    value = value | 0;
    if ((__THREW__ | 0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }

  function setTempRet0(value) {
    value = value | 0;
    tempRet0 = value;
  }

  function getTempRet0() {
    return tempRet0 | 0;
  }

  function _secp256k1_scalar_set_b32($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$not$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0,
      $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
    var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0,
      $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
    var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0,
      $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
    var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0,
      $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
    var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0,
      $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
    var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0,
      $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
    var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0,
      $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
    var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0,
      $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
    var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0,
      $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
    var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0,
      $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
    var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0,
      $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
    var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0,
      $99 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $3 = ((($1)) + 31 | 0);
    $4 = HEAP8[$3 >> 0] | 0;
    $5 = $4 & 255;
    $6 = ((($1)) + 30 | 0);
    $7 = HEAP8[$6 >> 0] | 0;
    $8 = $7 & 255;
    $9 = $8 << 8;
    $10 = $9 | $5;
    $11 = ((($1)) + 29 | 0);
    $12 = HEAP8[$11 >> 0] | 0;
    $13 = $12 & 255;
    $14 = $13 << 16;
    $15 = $10 | $14;
    $16 = ((($1)) + 28 | 0);
    $17 = HEAP8[$16 >> 0] | 0;
    $18 = $17 & 255;
    $19 = $18 << 24;
    $20 = $15 | $19;
    HEAP32[$0 >> 2] = $20;
    $21 = ((($1)) + 27 | 0);
    $22 = HEAP8[$21 >> 0] | 0;
    $23 = $22 & 255;
    $24 = ((($1)) + 26 | 0);
    $25 = HEAP8[$24 >> 0] | 0;
    $26 = $25 & 255;
    $27 = $26 << 8;
    $28 = $27 | $23;
    $29 = ((($1)) + 25 | 0);
    $30 = HEAP8[$29 >> 0] | 0;
    $31 = $30 & 255;
    $32 = $31 << 16;
    $33 = $28 | $32;
    $34 = ((($1)) + 24 | 0);
    $35 = HEAP8[$34 >> 0] | 0;
    $36 = $35 & 255;
    $37 = $36 << 24;
    $38 = $33 | $37;
    $39 = ((($0)) + 4 | 0);
    HEAP32[$39 >> 2] = $38;
    $40 = ((($1)) + 23 | 0);
    $41 = HEAP8[$40 >> 0] | 0;
    $42 = $41 & 255;
    $43 = ((($1)) + 22 | 0);
    $44 = HEAP8[$43 >> 0] | 0;
    $45 = $44 & 255;
    $46 = $45 << 8;
    $47 = $46 | $42;
    $48 = ((($1)) + 21 | 0);
    $49 = HEAP8[$48 >> 0] | 0;
    $50 = $49 & 255;
    $51 = $50 << 16;
    $52 = $47 | $51;
    $53 = ((($1)) + 20 | 0);
    $54 = HEAP8[$53 >> 0] | 0;
    $55 = $54 & 255;
    $56 = $55 << 24;
    $57 = $52 | $56;
    $58 = ((($0)) + 8 | 0);
    HEAP32[$58 >> 2] = $57;
    $59 = ((($1)) + 19 | 0);
    $60 = HEAP8[$59 >> 0] | 0;
    $61 = $60 & 255;
    $62 = ((($1)) + 18 | 0);
    $63 = HEAP8[$62 >> 0] | 0;
    $64 = $63 & 255;
    $65 = $64 << 8;
    $66 = $65 | $61;
    $67 = ((($1)) + 17 | 0);
    $68 = HEAP8[$67 >> 0] | 0;
    $69 = $68 & 255;
    $70 = $69 << 16;
    $71 = $66 | $70;
    $72 = ((($1)) + 16 | 0);
    $73 = HEAP8[$72 >> 0] | 0;
    $74 = $73 & 255;
    $75 = $74 << 24;
    $76 = $71 | $75;
    $77 = ((($0)) + 12 | 0);
    HEAP32[$77 >> 2] = $76;
    $78 = ((($1)) + 15 | 0);
    $79 = HEAP8[$78 >> 0] | 0;
    $80 = $79 & 255;
    $81 = ((($1)) + 14 | 0);
    $82 = HEAP8[$81 >> 0] | 0;
    $83 = $82 & 255;
    $84 = $83 << 8;
    $85 = $84 | $80;
    $86 = ((($1)) + 13 | 0);
    $87 = HEAP8[$86 >> 0] | 0;
    $88 = $87 & 255;
    $89 = $88 << 16;
    $90 = $85 | $89;
    $91 = ((($1)) + 12 | 0);
    $92 = HEAP8[$91 >> 0] | 0;
    $93 = $92 & 255;
    $94 = $93 << 24;
    $95 = $90 | $94;
    $96 = ((($0)) + 16 | 0);
    HEAP32[$96 >> 2] = $95;
    $97 = ((($1)) + 11 | 0);
    $98 = HEAP8[$97 >> 0] | 0;
    $99 = $98 & 255;
    $100 = ((($1)) + 10 | 0);
    $101 = HEAP8[$100 >> 0] | 0;
    $102 = $101 & 255;
    $103 = $102 << 8;
    $104 = $103 | $99;
    $105 = ((($1)) + 9 | 0);
    $106 = HEAP8[$105 >> 0] | 0;
    $107 = $106 & 255;
    $108 = $107 << 16;
    $109 = $104 | $108;
    $110 = ((($1)) + 8 | 0);
    $111 = HEAP8[$110 >> 0] | 0;
    $112 = $111 & 255;
    $113 = $112 << 24;
    $114 = $109 | $113;
    $115 = ((($0)) + 20 | 0);
    HEAP32[$115 >> 2] = $114;
    $116 = ((($1)) + 7 | 0);
    $117 = HEAP8[$116 >> 0] | 0;
    $118 = $117 & 255;
    $119 = ((($1)) + 6 | 0);
    $120 = HEAP8[$119 >> 0] | 0;
    $121 = $120 & 255;
    $122 = $121 << 8;
    $123 = $122 | $118;
    $124 = ((($1)) + 5 | 0);
    $125 = HEAP8[$124 >> 0] | 0;
    $126 = $125 & 255;
    $127 = $126 << 16;
    $128 = $123 | $127;
    $129 = ((($1)) + 4 | 0);
    $130 = HEAP8[$129 >> 0] | 0;
    $131 = $130 & 255;
    $132 = $131 << 24;
    $133 = $128 | $132;
    $134 = ((($0)) + 24 | 0);
    HEAP32[$134 >> 2] = $133;
    $135 = ((($1)) + 3 | 0);
    $136 = HEAP8[$135 >> 0] | 0;
    $137 = $136 & 255;
    $138 = ((($1)) + 2 | 0);
    $139 = HEAP8[$138 >> 0] | 0;
    $140 = $139 & 255;
    $141 = $140 << 8;
    $142 = $141 | $137;
    $143 = ((($1)) + 1 | 0);
    $144 = HEAP8[$143 >> 0] | 0;
    $145 = $144 & 255;
    $146 = $145 << 16;
    $147 = $142 | $146;
    $148 = HEAP8[$1 >> 0] | 0;
    $149 = $148 & 255;
    $150 = $149 << 24;
    $151 = $147 | $150;
    $152 = ((($0)) + 28 | 0);
    HEAP32[$152 >> 2] = $151;
    $153 = $151 & $133;
    $154 = ($153 | 0) != (-1);
    $155 = ($114 | 0) != (-1);
    $156 = $155 | $154;
    $157 = ($95 >>> 0) < (4294967294);
    $158 = $157 | $156;
    $159 = $158 & 1;
    $160 = ($95 | 0) == (-1);
    $161 = $160 & 1;
    $162 = $159 ^ -1;
    $163 = $161 & $162;
    $164 = ($76 >>> 0) < (3132021990);
    $165 = $164 & 1;
    $$not$i = $161 ^ 1;
    $166 = $165 & $$not$i;
    $167 = $159 | $166;
    $168 = ($76 >>> 0) > (3132021990);
    $169 = $168 & 1;
    $170 = $167 ^ -1;
    $171 = $169 & $170;
    $172 = $171 | $163;
    $173 = HEAP32[$58 >> 2] | 0;
    $174 = ($173 >>> 0) < (2940772411);
    $175 = $174 & 1;
    $176 = $172 ^ -1;
    $177 = $175 & $176;
    $178 = $177 | $167;
    $179 = ($173 >>> 0) > (2940772411);
    $180 = $179 & 1;
    $181 = $178 ^ -1;
    $182 = $180 & $181;
    $183 = $182 | $172;
    $184 = HEAP32[$39 >> 2] | 0;
    $185 = ($184 >>> 0) < (3218235020);
    $186 = $185 & 1;
    $187 = $183 ^ -1;
    $188 = $186 & $187;
    $189 = $188 | $178;
    $190 = ($184 >>> 0) > (3218235020);
    $191 = $190 & 1;
    $192 = $189 ^ -1;
    $193 = $191 & $192;
    $194 = $193 | $183;
    $195 = HEAP32[$0 >> 2] | 0;
    $196 = ($195 >>> 0) > (3493216576);
    $197 = $196 & 1;
    $198 = $197 & $192;
    $199 = $194 | $198;
    $200 = (0 - ($199)) | 0;
    $201 = $200 & 801750719;
    $202 = (_i64Add(($201 | 0), 0, ($195 | 0), 0) | 0);
    $203 = tempRet0;
    HEAP32[$0 >> 2] = $202;
    $204 = $200 & 1076732275;
    $205 = (_i64Add(($204 | 0), 0, ($184 | 0), 0) | 0);
    $206 = tempRet0;
    $207 = (_i64Add(($205 | 0), ($206 | 0), ($203 | 0), 0) | 0);
    $208 = tempRet0;
    HEAP32[$39 >> 2] = $207;
    $209 = $200 & 1354194884;
    $210 = (_i64Add(($209 | 0), 0, ($173 | 0), 0) | 0);
    $211 = tempRet0;
    $212 = (_i64Add(($210 | 0), ($211 | 0), ($208 | 0), 0) | 0);
    $213 = tempRet0;
    HEAP32[$58 >> 2] = $212;
    $214 = HEAP32[$77 >> 2] | 0;
    $215 = $200 & 1162945305;
    $216 = (_i64Add(($215 | 0), 0, ($214 | 0), 0) | 0);
    $217 = tempRet0;
    $218 = (_i64Add(($216 | 0), ($217 | 0), ($213 | 0), 0) | 0);
    $219 = tempRet0;
    HEAP32[$77 >> 2] = $218;
    $220 = HEAP32[$96 >> 2] | 0;
    $221 = (_i64Add(($199 | 0), 0, ($220 | 0), 0) | 0);
    $222 = tempRet0;
    $223 = (_i64Add(($221 | 0), ($222 | 0), ($219 | 0), 0) | 0);
    $224 = tempRet0;
    HEAP32[$96 >> 2] = $223;
    $225 = HEAP32[$115 >> 2] | 0;
    $226 = (_i64Add(($224 | 0), 0, ($225 | 0), 0) | 0);
    $227 = tempRet0;
    HEAP32[$115 >> 2] = $226;
    $228 = HEAP32[$134 >> 2] | 0;
    $229 = (_i64Add(($227 | 0), 0, ($228 | 0), 0) | 0);
    $230 = tempRet0;
    HEAP32[$134 >> 2] = $229;
    $231 = HEAP32[$152 >> 2] | 0;
    $232 = (_i64Add(($230 | 0), 0, ($231 | 0), 0) | 0);
    $233 = tempRet0;
    HEAP32[$152 >> 2] = $232;
    $234 = ($2 | 0) == (0 | 0);
    if ($234) {
      return;
    }
    HEAP32[$2 >> 2] = $199;
    return;
  }

  function _secp256k1_ecmult($0, $1, $2, $3, $4) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    $4 = $4 | 0;
    var $$ = 0, $$045113 = 0, $$045113$in = 0, $$neg100 = 0, $$neg47 = 0, $$neg50 = 0, $$neg71 = 0, $$neg73 = 0,
      $$neg74 = 0, $$neg76 = 0, $$neg77 = 0, $$neg79 = 0, $$neg80 = 0, $$neg82 = 0, $$neg83 = 0, $$neg85 = 0,
      $$neg86 = 0, $$neg88 = 0, $$neg89 = 0, $$neg91 = 0;
    var $$neg92 = 0, $$neg94 = 0, $$neg95 = 0, $$neg97 = 0, $$neg98 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0,
      $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
    var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0,
      $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
    var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0,
      $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
    var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0,
      $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
    var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0,
      $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
    var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0,
      $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
    var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0,
      $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
    var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0,
      $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
    var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0,
      $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
    var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0,
      $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
    var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0,
      $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
    var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0,
      $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
    var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0,
      $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
    var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0,
      $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
    var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0,
      $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
    var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0,
      $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
    var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0,
      $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
    var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0,
      $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
    var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0,
      $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
    var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0,
      $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
    var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0,
      $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
    var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0,
      $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
    var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0,
      $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
    var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0,
      $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
    var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0,
      $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $55 = 0;
    var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0,
      $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
    var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0,
      $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
    var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, dest = 0, label = 0,
      sp = 0, src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 3424 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(3424 | 0);
    $5 = sp + 3376 | 0;
    $6 = sp + 3336 | 0;
    $7 = sp + 3296 | 0;
    $8 = sp + 3256 | 0;
    $9 = sp + 3216 | 0;
    $10 = sp + 3176 | 0;
    $11 = sp + 3136 | 0;
    $12 = sp + 3096 | 0;
    $13 = sp + 3056 | 0;
    $14 = sp + 3016 | 0;
    $15 = sp + 2976 | 0;
    $16 = sp + 2936 | 0;
    $17 = sp + 2896 | 0;
    $18 = sp + 2856 | 0;
    $19 = sp + 2184 | 0;
    $20 = sp + 2096 | 0;
    $21 = sp + 2056 | 0;
    $22 = sp + 1032 | 0;
    $23 = sp;
    $24 = (_secp256k1_ecmult_wnaf($22, $3, 5) | 0);
    _secp256k1_ecmult_odd_multiples_table_globalz_windowa($19, $21, $2);
    $25 = (_secp256k1_ecmult_wnaf($23, $4, 16) | 0);
    $26 = ($25 | 0) > ($24 | 0);
    $$ = $26 ? $25 : $24;
    $27 = ((($1)) + 120 | 0);
    HEAP32[$27 >> 2] = 1;
    dest = $1;
    stop = dest + 120 | 0;
    do {
      HEAP32[dest >> 2] = 0 | 0;
      dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $28 = ($$ | 0) > (0);
    if (!($28)) {
      STACKTOP = sp;
      return;
    }
    $29 = ((($20)) + 80 | 0);
    $30 = ((($1)) + 80 | 0);
    $31 = ((($7)) + 4 | 0);
    $32 = ((($7)) + 8 | 0);
    $33 = ((($7)) + 12 | 0);
    $34 = ((($7)) + 16 | 0);
    $35 = ((($7)) + 20 | 0);
    $36 = ((($7)) + 24 | 0);
    $37 = ((($7)) + 28 | 0);
    $38 = ((($7)) + 32 | 0);
    $39 = ((($7)) + 36 | 0);
    $40 = ((($1)) + 40 | 0);
    $41 = ((($9)) + 4 | 0);
    $42 = ((($9)) + 8 | 0);
    $43 = ((($9)) + 12 | 0);
    $44 = ((($9)) + 16 | 0);
    $45 = ((($9)) + 20 | 0);
    $46 = ((($9)) + 24 | 0);
    $47 = ((($9)) + 28 | 0);
    $48 = ((($9)) + 32 | 0);
    $49 = ((($9)) + 36 | 0);
    $50 = ((($20)) + 40 | 0);
    $51 = ((($11)) + 4 | 0);
    $52 = ((($11)) + 8 | 0);
    $53 = ((($11)) + 12 | 0);
    $54 = ((($11)) + 16 | 0);
    $55 = ((($11)) + 20 | 0);
    $56 = ((($11)) + 24 | 0);
    $57 = ((($11)) + 28 | 0);
    $58 = ((($11)) + 32 | 0);
    $59 = ((($11)) + 36 | 0);
    $60 = ((($8)) + 4 | 0);
    $61 = ((($8)) + 8 | 0);
    $62 = ((($8)) + 12 | 0);
    $63 = ((($8)) + 16 | 0);
    $64 = ((($8)) + 20 | 0);
    $65 = ((($8)) + 24 | 0);
    $66 = ((($8)) + 28 | 0);
    $67 = ((($8)) + 32 | 0);
    $68 = ((($8)) + 36 | 0);
    $69 = ((($12)) + 4 | 0);
    $70 = ((($12)) + 8 | 0);
    $71 = ((($12)) + 12 | 0);
    $72 = ((($12)) + 16 | 0);
    $73 = ((($12)) + 20 | 0);
    $74 = ((($12)) + 24 | 0);
    $75 = ((($12)) + 28 | 0);
    $76 = ((($12)) + 32 | 0);
    $77 = ((($12)) + 36 | 0);
    $78 = ((($10)) + 4 | 0);
    $79 = ((($10)) + 8 | 0);
    $80 = ((($10)) + 12 | 0);
    $81 = ((($10)) + 16 | 0);
    $82 = ((($10)) + 20 | 0);
    $83 = ((($10)) + 24 | 0);
    $84 = ((($10)) + 28 | 0);
    $85 = ((($10)) + 32 | 0);
    $86 = ((($10)) + 36 | 0);
    $87 = ((($1)) + 4 | 0);
    $88 = ((($1)) + 8 | 0);
    $89 = ((($1)) + 12 | 0);
    $90 = ((($1)) + 16 | 0);
    $91 = ((($1)) + 20 | 0);
    $92 = ((($1)) + 24 | 0);
    $93 = ((($1)) + 28 | 0);
    $94 = ((($1)) + 32 | 0);
    $95 = ((($1)) + 36 | 0);
    $96 = ((($15)) + 4 | 0);
    $97 = ((($15)) + 8 | 0);
    $98 = ((($15)) + 12 | 0);
    $99 = ((($15)) + 16 | 0);
    $100 = ((($15)) + 20 | 0);
    $101 = ((($15)) + 24 | 0);
    $102 = ((($15)) + 28 | 0);
    $103 = ((($15)) + 32 | 0);
    $104 = ((($15)) + 36 | 0);
    $105 = ((($13)) + 4 | 0);
    $106 = ((($13)) + 8 | 0);
    $107 = ((($13)) + 12 | 0);
    $108 = ((($13)) + 16 | 0);
    $109 = ((($13)) + 20 | 0);
    $110 = ((($13)) + 24 | 0);
    $111 = ((($13)) + 28 | 0);
    $112 = ((($13)) + 32 | 0);
    $113 = ((($13)) + 36 | 0);
    $114 = ((($1)) + 44 | 0);
    $115 = ((($1)) + 48 | 0);
    $116 = ((($1)) + 52 | 0);
    $117 = ((($1)) + 56 | 0);
    $118 = ((($1)) + 60 | 0);
    $119 = ((($1)) + 64 | 0);
    $120 = ((($1)) + 68 | 0);
    $121 = ((($1)) + 72 | 0);
    $122 = ((($1)) + 76 | 0);
    $123 = ((($16)) + 4 | 0);
    $124 = ((($16)) + 8 | 0);
    $125 = ((($16)) + 12 | 0);
    $126 = ((($16)) + 16 | 0);
    $127 = ((($16)) + 20 | 0);
    $128 = ((($16)) + 24 | 0);
    $129 = ((($16)) + 28 | 0);
    $130 = ((($16)) + 32 | 0);
    $131 = ((($16)) + 36 | 0);
    $132 = ((($1)) + 80 | 0);
    $133 = ((($1)) + 84 | 0);
    $134 = ((($20)) + 40 | 0);
    $135 = ((($20)) + 44 | 0);
    $136 = ((($20)) + 48 | 0);
    $137 = ((($20)) + 52 | 0);
    $138 = ((($20)) + 56 | 0);
    $139 = ((($20)) + 60 | 0);
    $140 = ((($20)) + 64 | 0);
    $141 = ((($20)) + 68 | 0);
    $142 = ((($20)) + 72 | 0);
    $143 = ((($20)) + 76 | 0);
    $$045113$in = $$;
    while (1) {
      $$045113 = (($$045113$in) + -1) | 0;
      _secp256k1_gej_double_var($1, $1, 0);
      $144 = ($$045113$in | 0) > ($24 | 0);
      if (!($144)) {
        $145 = (($22) + ($$045113 << 2) | 0);
        $146 = HEAP32[$145 >> 2] | 0;
        $147 = ($146 | 0) == (0);
        if (!($147)) {
          $148 = ($146 | 0) > (0);
          if ($148) {
            $149 = (($146) + -1) | 0;
            $150 = (($149 | 0) / 2) & -1;
            $151 = (($19) + (($150 * 84) | 0) | 0);
            dest = $20;
            src = $151;
            stop = dest + 84 | 0;
            do {
              HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
              dest = dest + 4 | 0;
              src = src + 4 | 0;
            } while ((dest | 0) < (stop | 0));
          } else {
            $152 = $146 ^ -1;
            $153 = (($152 | 0) / 2) & -1;
            $154 = (($19) + (($153 * 84) | 0) | 0);
            dest = $20;
            src = $154;
            stop = dest + 84 | 0;
            do {
              HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
              dest = dest + 4 | 0;
              src = src + 4 | 0;
            } while ((dest | 0) < (stop | 0));
            $155 = HEAP32[$134 >> 2] | 0;
            $156 = HEAP32[$135 >> 2] | 0;
            $157 = HEAP32[$136 >> 2] | 0;
            $158 = HEAP32[$137 >> 2] | 0;
            $159 = HEAP32[$138 >> 2] | 0;
            $160 = HEAP32[$139 >> 2] | 0;
            $161 = HEAP32[$140 >> 2] | 0;
            $162 = HEAP32[$141 >> 2] | 0;
            $163 = HEAP32[$142 >> 2] | 0;
            $164 = HEAP32[$143 >> 2] | 0;
            $165 = $164 >>> 22;
            $166 = $164 & 4194303;
            $167 = ($165 * 977) | 0;
            $168 = (($167) + ($155)) | 0;
            $169 = $165 << 6;
            $170 = (($169) + ($156)) | 0;
            $171 = $168 >>> 26;
            $172 = (($170) + ($171)) | 0;
            $173 = $168 & 67108863;
            $174 = $172 >>> 26;
            $175 = (($174) + ($157)) | 0;
            $176 = $172 & 67108863;
            $177 = $175 >>> 26;
            $178 = (($177) + ($158)) | 0;
            $179 = $175 & 67108863;
            $180 = $178 >>> 26;
            $181 = (($180) + ($159)) | 0;
            $182 = $178 & 67108863;
            $183 = $181 >>> 26;
            $184 = (($183) + ($160)) | 0;
            $185 = $181 & 67108863;
            $186 = $184 >>> 26;
            $187 = (($186) + ($161)) | 0;
            $188 = $184 & 67108863;
            $189 = $187 >>> 26;
            $190 = (($189) + ($162)) | 0;
            $191 = $187 & 67108863;
            $192 = $190 >>> 26;
            $193 = (($192) + ($163)) | 0;
            $194 = $190 & 67108863;
            $195 = $193 >>> 26;
            $196 = $193 & 67108863;
            $197 = (268431548 - ($173)) | 0;
            HEAP32[$134 >> 2] = $197;
            $198 = (268435196 - ($176)) | 0;
            HEAP32[$135 >> 2] = $198;
            $199 = (268435452 - ($179)) | 0;
            HEAP32[$136 >> 2] = $199;
            $200 = (268435452 - ($182)) | 0;
            HEAP32[$137 >> 2] = $200;
            $201 = (268435452 - ($185)) | 0;
            HEAP32[$138 >> 2] = $201;
            $202 = (268435452 - ($188)) | 0;
            HEAP32[$139 >> 2] = $202;
            $203 = (268435452 - ($191)) | 0;
            HEAP32[$140 >> 2] = $203;
            $204 = (268435452 - ($194)) | 0;
            HEAP32[$141 >> 2] = $204;
            $205 = (268435452 - ($196)) | 0;
            HEAP32[$142 >> 2] = $205;
            $$neg47 = (16777212 - ($166)) | 0;
            $206 = (($$neg47) - ($195)) | 0;
            HEAP32[$143 >> 2] = $206;
          }
          _secp256k1_gej_add_ge_var($1, $1, $20, 0);
        }
      }
      $207 = ($$045113$in | 0) > ($25 | 0);
      if (!($207)) {
        $208 = (($23) + ($$045113 << 2) | 0);
        $209 = HEAP32[$208 >> 2] | 0;
        $210 = ($209 | 0) == (0);
        if (!($210)) {
          $212 = ($209 | 0) > (0);
          $213 = HEAP32[$0 >> 2] | 0;
          if ($212) {
            $214 = (($209) + -1) | 0;
            $215 = (($214 | 0) / 2) & -1;
            $216 = (($213) + ($215 << 6) | 0);
            _secp256k1_ge_from_storage($20, $216);
          } else {
            $217 = $209 ^ -1;
            $218 = (($217 | 0) / 2) & -1;
            $219 = (($213) + ($218 << 6) | 0);
            _secp256k1_ge_from_storage($20, $219);
            $220 = HEAP32[$134 >> 2] | 0;
            $221 = HEAP32[$135 >> 2] | 0;
            $222 = HEAP32[$136 >> 2] | 0;
            $223 = HEAP32[$137 >> 2] | 0;
            $224 = HEAP32[$138 >> 2] | 0;
            $225 = HEAP32[$139 >> 2] | 0;
            $226 = HEAP32[$140 >> 2] | 0;
            $227 = HEAP32[$141 >> 2] | 0;
            $228 = HEAP32[$142 >> 2] | 0;
            $229 = HEAP32[$143 >> 2] | 0;
            $230 = $229 >>> 22;
            $231 = $229 & 4194303;
            $232 = ($230 * 977) | 0;
            $233 = (($232) + ($220)) | 0;
            $234 = $230 << 6;
            $235 = (($234) + ($221)) | 0;
            $236 = $233 >>> 26;
            $237 = (($235) + ($236)) | 0;
            $238 = $233 & 67108863;
            $239 = $237 >>> 26;
            $240 = (($239) + ($222)) | 0;
            $241 = $237 & 67108863;
            $242 = $240 >>> 26;
            $243 = (($242) + ($223)) | 0;
            $244 = $240 & 67108863;
            $245 = $243 >>> 26;
            $246 = (($245) + ($224)) | 0;
            $247 = $243 & 67108863;
            $248 = $246 >>> 26;
            $249 = (($248) + ($225)) | 0;
            $250 = $246 & 67108863;
            $251 = $249 >>> 26;
            $252 = (($251) + ($226)) | 0;
            $253 = $249 & 67108863;
            $254 = $252 >>> 26;
            $255 = (($254) + ($227)) | 0;
            $256 = $252 & 67108863;
            $257 = $255 >>> 26;
            $258 = (($257) + ($228)) | 0;
            $259 = $255 & 67108863;
            $260 = $258 >>> 26;
            $261 = $258 & 67108863;
            $262 = (268431548 - ($238)) | 0;
            HEAP32[$134 >> 2] = $262;
            $263 = (268435196 - ($241)) | 0;
            HEAP32[$135 >> 2] = $263;
            $264 = (268435452 - ($244)) | 0;
            HEAP32[$136 >> 2] = $264;
            $265 = (268435452 - ($247)) | 0;
            HEAP32[$137 >> 2] = $265;
            $266 = (268435452 - ($250)) | 0;
            HEAP32[$138 >> 2] = $266;
            $267 = (268435452 - ($253)) | 0;
            HEAP32[$139 >> 2] = $267;
            $268 = (268435452 - ($256)) | 0;
            HEAP32[$140 >> 2] = $268;
            $269 = (268435452 - ($259)) | 0;
            HEAP32[$141 >> 2] = $269;
            $270 = (268435452 - ($261)) | 0;
            HEAP32[$142 >> 2] = $270;
            $$neg50 = (16777212 - ($231)) | 0;
            $271 = (($$neg50) - ($260)) | 0;
            HEAP32[$143 >> 2] = $271;
          }
          $272 = HEAP32[$29 >> 2] | 0;
          $273 = ($272 | 0) == (0);
          do {
            if ($273) {
              $274 = HEAP32[$27 >> 2] | 0;
              $275 = ($274 | 0) == (0);
              if (!($275)) {
                HEAP32[$27 >> 2] = 0;
                _secp256k1_fe_sqr($17, $21);
                _secp256k1_fe_mul($18, $17, $21);
                _secp256k1_fe_mul($1, $20, $17);
                _secp256k1_fe_mul($40, $50, $18);
                HEAP32[$132 >> 2] = 1;
                dest = $133;
                stop = dest + 36 | 0;
                do {
                  HEAP32[dest >> 2] = 0 | 0;
                  dest = dest + 4 | 0;
                } while ((dest | 0) < (stop | 0));
                break;
              }
              HEAP32[$27 >> 2] = 0;
              _secp256k1_fe_mul($5, $30, $21);
              _secp256k1_fe_sqr($6, $5);
              dest = $7;
              src = $1;
              stop = dest + 40 | 0;
              do {
                HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
                dest = dest + 4 | 0;
                src = src + 4 | 0;
              } while ((dest | 0) < (stop | 0));
              $276 = HEAP32[$7 >> 2] | 0;
              $277 = HEAP32[$31 >> 2] | 0;
              $278 = HEAP32[$32 >> 2] | 0;
              $279 = HEAP32[$33 >> 2] | 0;
              $280 = HEAP32[$34 >> 2] | 0;
              $281 = HEAP32[$35 >> 2] | 0;
              $282 = HEAP32[$36 >> 2] | 0;
              $283 = HEAP32[$37 >> 2] | 0;
              $284 = HEAP32[$38 >> 2] | 0;
              $285 = HEAP32[$39 >> 2] | 0;
              $286 = $285 >>> 22;
              $287 = $285 & 4194303;
              $288 = ($286 * 977) | 0;
              $289 = (($288) + ($276)) | 0;
              $290 = $286 << 6;
              $291 = (($290) + ($277)) | 0;
              $292 = $289 >>> 26;
              $293 = (($291) + ($292)) | 0;
              $294 = $289 & 67108863;
              $295 = $293 >>> 26;
              $296 = (($295) + ($278)) | 0;
              $297 = $293 & 67108863;
              $298 = $296 >>> 26;
              $299 = (($298) + ($279)) | 0;
              $300 = $296 & 67108863;
              $301 = $299 >>> 26;
              $302 = (($301) + ($280)) | 0;
              $303 = $299 & 67108863;
              $304 = $302 >>> 26;
              $305 = (($304) + ($281)) | 0;
              $306 = $302 & 67108863;
              $307 = $305 >>> 26;
              $308 = (($307) + ($282)) | 0;
              $309 = $305 & 67108863;
              $310 = $308 >>> 26;
              $311 = (($310) + ($283)) | 0;
              $312 = $308 & 67108863;
              $313 = $311 >>> 26;
              $314 = (($313) + ($284)) | 0;
              $315 = $311 & 67108863;
              $316 = $314 >>> 26;
              $317 = (($316) + ($287)) | 0;
              $318 = $314 & 67108863;
              HEAP32[$7 >> 2] = $294;
              HEAP32[$31 >> 2] = $297;
              HEAP32[$32 >> 2] = $300;
              HEAP32[$33 >> 2] = $303;
              HEAP32[$34 >> 2] = $306;
              HEAP32[$35 >> 2] = $309;
              HEAP32[$36 >> 2] = $312;
              HEAP32[$37 >> 2] = $315;
              HEAP32[$38 >> 2] = $318;
              HEAP32[$39 >> 2] = $317;
              _secp256k1_fe_mul($8, $20, $6);
              dest = $9;
              src = $40;
              stop = dest + 40 | 0;
              do {
                HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
                dest = dest + 4 | 0;
                src = src + 4 | 0;
              } while ((dest | 0) < (stop | 0));
              $319 = HEAP32[$9 >> 2] | 0;
              $320 = HEAP32[$41 >> 2] | 0;
              $321 = HEAP32[$42 >> 2] | 0;
              $322 = HEAP32[$43 >> 2] | 0;
              $323 = HEAP32[$44 >> 2] | 0;
              $324 = HEAP32[$45 >> 2] | 0;
              $325 = HEAP32[$46 >> 2] | 0;
              $326 = HEAP32[$47 >> 2] | 0;
              $327 = HEAP32[$48 >> 2] | 0;
              $328 = HEAP32[$49 >> 2] | 0;
              $329 = $328 >>> 22;
              $330 = $328 & 4194303;
              $331 = ($329 * 977) | 0;
              $332 = (($331) + ($319)) | 0;
              $333 = $329 << 6;
              $334 = (($333) + ($320)) | 0;
              $335 = $332 >>> 26;
              $336 = (($334) + ($335)) | 0;
              $337 = $332 & 67108863;
              $338 = $336 >>> 26;
              $339 = (($338) + ($321)) | 0;
              $340 = $336 & 67108863;
              $341 = $339 >>> 26;
              $342 = (($341) + ($322)) | 0;
              $343 = $339 & 67108863;
              $344 = $342 >>> 26;
              $345 = (($344) + ($323)) | 0;
              $346 = $342 & 67108863;
              $347 = $345 >>> 26;
              $348 = (($347) + ($324)) | 0;
              $349 = $345 & 67108863;
              $350 = $348 >>> 26;
              $351 = (($350) + ($325)) | 0;
              $352 = $348 & 67108863;
              $353 = $351 >>> 26;
              $354 = (($353) + ($326)) | 0;
              $355 = $351 & 67108863;
              $356 = $354 >>> 26;
              $357 = (($356) + ($327)) | 0;
              $358 = $354 & 67108863;
              $359 = $357 >>> 26;
              $360 = (($359) + ($330)) | 0;
              $361 = $357 & 67108863;
              HEAP32[$9 >> 2] = $337;
              HEAP32[$41 >> 2] = $340;
              HEAP32[$42 >> 2] = $343;
              HEAP32[$43 >> 2] = $346;
              HEAP32[$44 >> 2] = $349;
              HEAP32[$45 >> 2] = $352;
              HEAP32[$46 >> 2] = $355;
              HEAP32[$47 >> 2] = $358;
              HEAP32[$48 >> 2] = $361;
              HEAP32[$49 >> 2] = $360;
              _secp256k1_fe_mul($10, $50, $6);
              _secp256k1_fe_mul($10, $10, $5);
              $362 = (268431548 - ($294)) | 0;
              $363 = (268435196 - ($297)) | 0;
              $364 = (268435452 - ($300)) | 0;
              $365 = (268435452 - ($303)) | 0;
              $366 = (268435452 - ($306)) | 0;
              $367 = (268435452 - ($309)) | 0;
              $368 = (268435452 - ($312)) | 0;
              $369 = (268435452 - ($315)) | 0;
              $370 = (268435452 - ($318)) | 0;
              $371 = (16777212 - ($317)) | 0;
              $372 = HEAP32[$8 >> 2] | 0;
              $373 = (($362) + ($372)) | 0;
              HEAP32[$11 >> 2] = $373;
              $374 = HEAP32[$60 >> 2] | 0;
              $375 = (($363) + ($374)) | 0;
              HEAP32[$51 >> 2] = $375;
              $376 = HEAP32[$61 >> 2] | 0;
              $377 = (($364) + ($376)) | 0;
              HEAP32[$52 >> 2] = $377;
              $378 = HEAP32[$62 >> 2] | 0;
              $379 = (($365) + ($378)) | 0;
              HEAP32[$53 >> 2] = $379;
              $380 = HEAP32[$63 >> 2] | 0;
              $381 = (($366) + ($380)) | 0;
              HEAP32[$54 >> 2] = $381;
              $382 = HEAP32[$64 >> 2] | 0;
              $383 = (($367) + ($382)) | 0;
              HEAP32[$55 >> 2] = $383;
              $384 = HEAP32[$65 >> 2] | 0;
              $385 = (($368) + ($384)) | 0;
              HEAP32[$56 >> 2] = $385;
              $386 = HEAP32[$66 >> 2] | 0;
              $387 = (($369) + ($386)) | 0;
              HEAP32[$57 >> 2] = $387;
              $388 = HEAP32[$67 >> 2] | 0;
              $389 = (($370) + ($388)) | 0;
              HEAP32[$58 >> 2] = $389;
              $390 = HEAP32[$68 >> 2] | 0;
              $391 = (($371) + ($390)) | 0;
              HEAP32[$59 >> 2] = $391;
              $392 = (268431548 - ($337)) | 0;
              $393 = (268435196 - ($340)) | 0;
              $394 = (268435452 - ($343)) | 0;
              $395 = (268435452 - ($346)) | 0;
              $396 = (268435452 - ($349)) | 0;
              $397 = (268435452 - ($352)) | 0;
              $398 = (268435452 - ($355)) | 0;
              $399 = (268435452 - ($358)) | 0;
              $400 = (268435452 - ($361)) | 0;
              $401 = (16777212 - ($360)) | 0;
              $402 = HEAP32[$10 >> 2] | 0;
              $403 = (($392) + ($402)) | 0;
              HEAP32[$12 >> 2] = $403;
              $404 = HEAP32[$78 >> 2] | 0;
              $405 = (($393) + ($404)) | 0;
              HEAP32[$69 >> 2] = $405;
              $406 = HEAP32[$79 >> 2] | 0;
              $407 = (($394) + ($406)) | 0;
              HEAP32[$70 >> 2] = $407;
              $408 = HEAP32[$80 >> 2] | 0;
              $409 = (($395) + ($408)) | 0;
              HEAP32[$71 >> 2] = $409;
              $410 = HEAP32[$81 >> 2] | 0;
              $411 = (($396) + ($410)) | 0;
              HEAP32[$72 >> 2] = $411;
              $412 = HEAP32[$82 >> 2] | 0;
              $413 = (($397) + ($412)) | 0;
              HEAP32[$73 >> 2] = $413;
              $414 = HEAP32[$83 >> 2] | 0;
              $415 = (($398) + ($414)) | 0;
              HEAP32[$74 >> 2] = $415;
              $416 = HEAP32[$84 >> 2] | 0;
              $417 = (($399) + ($416)) | 0;
              HEAP32[$75 >> 2] = $417;
              $418 = HEAP32[$85 >> 2] | 0;
              $419 = (($400) + ($418)) | 0;
              HEAP32[$76 >> 2] = $419;
              $420 = HEAP32[$86 >> 2] | 0;
              $421 = (($401) + ($420)) | 0;
              HEAP32[$77 >> 2] = $421;
              $422 = (_secp256k1_fe_normalizes_to_zero_var($11) | 0);
              $423 = ($422 | 0) == (0);
              if ($423) {
                _secp256k1_fe_sqr($13, $12);
                _secp256k1_fe_sqr($14, $11);
                _secp256k1_fe_mul($15, $11, $14);
                _secp256k1_fe_mul($30, $30, $11);
                _secp256k1_fe_mul($16, $7, $14);
                dest = $1;
                src = $16;
                stop = dest + 40 | 0;
                do {
                  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
                  dest = dest + 4 | 0;
                  src = src + 4 | 0;
                } while ((dest | 0) < (stop | 0));
                $426 = HEAP32[$1 >> 2] | 0;
                $427 = HEAP32[$87 >> 2] | 0;
                $428 = HEAP32[$88 >> 2] | 0;
                $429 = HEAP32[$89 >> 2] | 0;
                $430 = HEAP32[$90 >> 2] | 0;
                $431 = HEAP32[$91 >> 2] | 0;
                $432 = HEAP32[$92 >> 2] | 0;
                $433 = HEAP32[$93 >> 2] | 0;
                $434 = HEAP32[$94 >> 2] | 0;
                $435 = HEAP32[$95 >> 2] | 0;
                $436 = HEAP32[$15 >> 2] | 0;
                $437 = HEAP32[$96 >> 2] | 0;
                $438 = HEAP32[$97 >> 2] | 0;
                $439 = HEAP32[$98 >> 2] | 0;
                $440 = HEAP32[$99 >> 2] | 0;
                $441 = HEAP32[$100 >> 2] | 0;
                $442 = HEAP32[$101 >> 2] | 0;
                $443 = HEAP32[$102 >> 2] | 0;
                $444 = HEAP32[$103 >> 2] | 0;
                $445 = HEAP32[$104 >> 2] | 0;
                $$neg71 = Math_imul($426, -2) | 0;
                $$neg74 = Math_imul($427, -2) | 0;
                $$neg77 = Math_imul($428, -2) | 0;
                $$neg80 = Math_imul($429, -2) | 0;
                $$neg83 = Math_imul($430, -2) | 0;
                $$neg86 = Math_imul($431, -2) | 0;
                $$neg89 = Math_imul($432, -2) | 0;
                $$neg92 = Math_imul($433, -2) | 0;
                $$neg95 = Math_imul($434, -2) | 0;
                $$neg98 = Math_imul($435, -2) | 0;
                $446 = HEAP32[$13 >> 2] | 0;
                $$neg73 = (($$neg71) + 536863096) | 0;
                $447 = (($$neg73) - ($436)) | 0;
                $448 = (($447) + ($446)) | 0;
                HEAP32[$1 >> 2] = $448;
                $449 = HEAP32[$105 >> 2] | 0;
                $$neg76 = (($$neg74) + 536870392) | 0;
                $450 = (($$neg76) - ($437)) | 0;
                $451 = (($450) + ($449)) | 0;
                HEAP32[$87 >> 2] = $451;
                $452 = HEAP32[$106 >> 2] | 0;
                $$neg79 = (($$neg77) + 536870904) | 0;
                $453 = (($$neg79) - ($438)) | 0;
                $454 = (($453) + ($452)) | 0;
                HEAP32[$88 >> 2] = $454;
                $455 = HEAP32[$107 >> 2] | 0;
                $$neg82 = (($$neg80) + 536870904) | 0;
                $456 = (($$neg82) - ($439)) | 0;
                $457 = (($456) + ($455)) | 0;
                HEAP32[$89 >> 2] = $457;
                $458 = HEAP32[$108 >> 2] | 0;
                $$neg85 = (($$neg83) + 536870904) | 0;
                $459 = (($$neg85) - ($440)) | 0;
                $460 = (($459) + ($458)) | 0;
                HEAP32[$90 >> 2] = $460;
                $461 = HEAP32[$109 >> 2] | 0;
                $$neg88 = (($$neg86) + 536870904) | 0;
                $462 = (($$neg88) - ($441)) | 0;
                $463 = (($462) + ($461)) | 0;
                HEAP32[$91 >> 2] = $463;
                $464 = HEAP32[$110 >> 2] | 0;
                $$neg91 = (($$neg89) + 536870904) | 0;
                $465 = (($$neg91) - ($442)) | 0;
                $466 = (($465) + ($464)) | 0;
                HEAP32[$92 >> 2] = $466;
                $467 = HEAP32[$111 >> 2] | 0;
                $$neg94 = (($$neg92) + 536870904) | 0;
                $468 = (($$neg94) - ($443)) | 0;
                $469 = (($468) + ($467)) | 0;
                HEAP32[$93 >> 2] = $469;
                $470 = HEAP32[$112 >> 2] | 0;
                $$neg97 = (($$neg95) + 536870904) | 0;
                $471 = (($$neg97) - ($444)) | 0;
                $472 = (($471) + ($470)) | 0;
                HEAP32[$94 >> 2] = $472;
                $473 = HEAP32[$113 >> 2] | 0;
                $$neg100 = (($$neg98) + 33554424) | 0;
                $474 = (($$neg100) - ($445)) | 0;
                $475 = (($474) + ($473)) | 0;
                HEAP32[$95 >> 2] = $475;
                $476 = (805294644 - ($448)) | 0;
                $477 = (805305588 - ($451)) | 0;
                $478 = (805306356 - ($454)) | 0;
                $479 = (805306356 - ($457)) | 0;
                $480 = (805306356 - ($460)) | 0;
                $481 = (805306356 - ($463)) | 0;
                $482 = (805306356 - ($466)) | 0;
                $483 = (805306356 - ($469)) | 0;
                $484 = (805306356 - ($472)) | 0;
                $485 = (50331636 - ($475)) | 0;
                $486 = HEAP32[$16 >> 2] | 0;
                $487 = (($476) + ($486)) | 0;
                HEAP32[$40 >> 2] = $487;
                $488 = HEAP32[$123 >> 2] | 0;
                $489 = (($477) + ($488)) | 0;
                HEAP32[$114 >> 2] = $489;
                $490 = HEAP32[$124 >> 2] | 0;
                $491 = (($478) + ($490)) | 0;
                HEAP32[$115 >> 2] = $491;
                $492 = HEAP32[$125 >> 2] | 0;
                $493 = (($479) + ($492)) | 0;
                HEAP32[$116 >> 2] = $493;
                $494 = HEAP32[$126 >> 2] | 0;
                $495 = (($480) + ($494)) | 0;
                HEAP32[$117 >> 2] = $495;
                $496 = HEAP32[$127 >> 2] | 0;
                $497 = (($481) + ($496)) | 0;
                HEAP32[$118 >> 2] = $497;
                $498 = HEAP32[$128 >> 2] | 0;
                $499 = (($482) + ($498)) | 0;
                HEAP32[$119 >> 2] = $499;
                $500 = HEAP32[$129 >> 2] | 0;
                $501 = (($483) + ($500)) | 0;
                HEAP32[$120 >> 2] = $501;
                $502 = HEAP32[$130 >> 2] | 0;
                $503 = (($484) + ($502)) | 0;
                HEAP32[$121 >> 2] = $503;
                $504 = HEAP32[$131 >> 2] | 0;
                $505 = (($485) + ($504)) | 0;
                HEAP32[$122 >> 2] = $505;
                _secp256k1_fe_mul($40, $40, $12);
                _secp256k1_fe_mul($15, $15, $9);
                $506 = HEAP32[$15 >> 2] | 0;
                $507 = (268431548 - ($506)) | 0;
                HEAP32[$15 >> 2] = $507;
                $508 = HEAP32[$96 >> 2] | 0;
                $509 = (268435196 - ($508)) | 0;
                HEAP32[$96 >> 2] = $509;
                $510 = HEAP32[$97 >> 2] | 0;
                $511 = (268435452 - ($510)) | 0;
                HEAP32[$97 >> 2] = $511;
                $512 = HEAP32[$98 >> 2] | 0;
                $513 = (268435452 - ($512)) | 0;
                HEAP32[$98 >> 2] = $513;
                $514 = HEAP32[$99 >> 2] | 0;
                $515 = (268435452 - ($514)) | 0;
                HEAP32[$99 >> 2] = $515;
                $516 = HEAP32[$100 >> 2] | 0;
                $517 = (268435452 - ($516)) | 0;
                HEAP32[$100 >> 2] = $517;
                $518 = HEAP32[$101 >> 2] | 0;
                $519 = (268435452 - ($518)) | 0;
                HEAP32[$101 >> 2] = $519;
                $520 = HEAP32[$102 >> 2] | 0;
                $521 = (268435452 - ($520)) | 0;
                HEAP32[$102 >> 2] = $521;
                $522 = HEAP32[$103 >> 2] | 0;
                $523 = (268435452 - ($522)) | 0;
                HEAP32[$103 >> 2] = $523;
                $524 = HEAP32[$104 >> 2] | 0;
                $525 = (16777212 - ($524)) | 0;
                HEAP32[$104 >> 2] = $525;
                $526 = HEAP32[$40 >> 2] | 0;
                $527 = (($526) + ($507)) | 0;
                HEAP32[$40 >> 2] = $527;
                $528 = HEAP32[$114 >> 2] | 0;
                $529 = (($528) + ($509)) | 0;
                HEAP32[$114 >> 2] = $529;
                $530 = HEAP32[$115 >> 2] | 0;
                $531 = (($530) + ($511)) | 0;
                HEAP32[$115 >> 2] = $531;
                $532 = HEAP32[$116 >> 2] | 0;
                $533 = (($532) + ($513)) | 0;
                HEAP32[$116 >> 2] = $533;
                $534 = HEAP32[$117 >> 2] | 0;
                $535 = (($534) + ($515)) | 0;
                HEAP32[$117 >> 2] = $535;
                $536 = HEAP32[$118 >> 2] | 0;
                $537 = (($536) + ($517)) | 0;
                HEAP32[$118 >> 2] = $537;
                $538 = HEAP32[$119 >> 2] | 0;
                $539 = (($538) + ($519)) | 0;
                HEAP32[$119 >> 2] = $539;
                $540 = HEAP32[$120 >> 2] | 0;
                $541 = (($540) + ($521)) | 0;
                HEAP32[$120 >> 2] = $541;
                $542 = HEAP32[$121 >> 2] | 0;
                $543 = (($542) + ($523)) | 0;
                HEAP32[$121 >> 2] = $543;
                $544 = HEAP32[$122 >> 2] | 0;
                $545 = (($544) + ($525)) | 0;
                HEAP32[$122 >> 2] = $545;
                break;
              }
              $424 = (_secp256k1_fe_normalizes_to_zero_var($12) | 0);
              $425 = ($424 | 0) == (0);
              if ($425) {
                HEAP32[$27 >> 2] = 1;
                break;
              } else {
                _secp256k1_gej_double_var($1, $1, 0);
                break;
              }
            }
          } while (0);
        }
      }
      $211 = ($$045113$in | 0) > (1);
      if ($211) {
        $$045113$in = $$045113;
      } else {
        break;
      }
    }
    $$pre = HEAP32[$27 >> 2] | 0;
    $phitmp = ($$pre | 0) == (0);
    if (!($phitmp)) {
      STACKTOP = sp;
      return;
    }
    $546 = ((($1)) + 80 | 0);
    _secp256k1_fe_mul($546, $546, $21);
    STACKTOP = sp;
    return;
  }

  function _secp256k1_borromean_sign($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    $4 = $4 | 0;
    $5 = $5 | 0;
    $6 = $6 | 0;
    $7 = $7 | 0;
    $8 = $8 | 0;
    $9 = $9 | 0;
    $10 = $10 | 0;
    $11 = $11 | 0;
    var $$0$lcssa$i111349 = 0, $$0$lcssa$i120 = 0, $$0$lcssa$i139496 = 0, $$0$lcssa$i148 = 0, $$0$lcssa$i157364 = 0,
      $$0$lcssa$i166370 = 0, $$0$lcssa$i175367 = 0, $$0$lcssa$i184 = 0, $$0$lcssa$i204382 = 0, $$0$lcssa$i213379 = 0,
      $$0$lcssa$i222358 = 0, $$0$lcssa$i231361 = 0, $$0$lcssa$i240376 = 0, $$0$lcssa$i249388 = 0, $$0$lcssa$i258 = 0,
      $$0$lcssa$i267355 = 0, $$0$lcssa$i276373 = 0, $$0$lcssa$i285385 = 0, $$0$lcssa$i352 = 0, $$0100437 = 0;
    var $$0102 = 0, $$020$lcssa$i110348 = 0, $$020$lcssa$i119 = 0, $$020$lcssa$i138495 = 0, $$020$lcssa$i147 = 0,
      $$020$lcssa$i156363 = 0, $$020$lcssa$i165369 = 0, $$020$lcssa$i174366 = 0, $$020$lcssa$i183 = 0,
      $$020$lcssa$i203381 = 0, $$020$lcssa$i212378 = 0, $$020$lcssa$i221357 = 0, $$020$lcssa$i230360 = 0,
      $$020$lcssa$i239375 = 0, $$020$lcssa$i248387 = 0, $$020$lcssa$i257 = 0, $$020$lcssa$i266354 = 0,
      $$020$lcssa$i275372 = 0, $$020$lcssa$i284384 = 0, $$020$lcssa$i351 = 0;
    var $$02023$i = 0, $$02023$i107 = 0, $$02023$i116 = 0, $$02023$i135 = 0, $$02023$i144 = 0, $$02023$i153 = 0,
      $$02023$i162 = 0, $$02023$i171 = 0, $$02023$i180 = 0, $$02023$i200 = 0, $$02023$i209 = 0, $$02023$i218 = 0,
      $$02023$i227 = 0, $$02023$i236 = 0, $$02023$i245 = 0, $$02023$i254 = 0, $$02023$i263 = 0, $$02023$i272 = 0,
      $$02023$i281 = 0, $$021$lcssa$i109347 = 0;
    var $$021$lcssa$i118 = 0, $$021$lcssa$i137494 = 0, $$021$lcssa$i146 = 0, $$021$lcssa$i155362 = 0,
      $$021$lcssa$i164368 = 0, $$021$lcssa$i173365 = 0, $$021$lcssa$i182 = 0, $$021$lcssa$i202380 = 0,
      $$021$lcssa$i211377 = 0, $$021$lcssa$i220356 = 0, $$021$lcssa$i229359 = 0, $$021$lcssa$i238374 = 0,
      $$021$lcssa$i247386 = 0, $$021$lcssa$i256 = 0, $$021$lcssa$i265353 = 0, $$021$lcssa$i274371 = 0,
      $$021$lcssa$i283383 = 0, $$021$lcssa$i350 = 0, $$02122$i = 0, $$02122$i108 = 0;
    var $$02122$i117 = 0, $$02122$i136 = 0, $$02122$i145 = 0, $$02122$i154 = 0, $$02122$i163 = 0, $$02122$i172 = 0,
      $$02122$i181 = 0, $$02122$i201 = 0, $$02122$i210 = 0, $$02122$i219 = 0, $$02122$i228 = 0, $$02122$i237 = 0,
      $$02122$i246 = 0, $$02122$i255 = 0, $$02122$i264 = 0, $$02122$i273 = 0, $$02122$i282 = 0, $$024$i = 0,
      $$024$i106 = 0, $$024$i115 = 0;
    var $$024$i134 = 0, $$024$i143 = 0, $$024$i152 = 0, $$024$i161 = 0, $$024$i170 = 0, $$024$i179 = 0, $$024$i199 = 0,
      $$024$i208 = 0, $$024$i217 = 0, $$024$i226 = 0, $$024$i235 = 0, $$024$i244 = 0, $$024$i253 = 0, $$024$i262 = 0,
      $$024$i271 = 0, $$024$i280 = 0, $$028$i = 0, $$028$i129 = 0, $$028$i194 = 0, $$0438 = 0;
    var $$098 = 0, $$098581 = 0, $$098582 = 0, $$1101434 = 0, $$1435 = 0, $$199 = 0, $$idx = 0, $$idx$val = 0,
      $$idx103$val = 0, $$idx104$val = 0, $$idx12$val$i = 0, $$idx12$val$i126 = 0, $$idx12$val$i191 = 0, $$pre = 0,
      $$sroa$10$0$$sroa_idx = 0, $$sroa$10311$0$$sroa_idx = 0, $$sroa$10327$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx = 0,
      $$sroa$4299$0$$sroa_idx = 0, $$sroa$4315$0$$sroa_idx = 0;
    var $$sroa$5$0$$sroa_idx = 0, $$sroa$5301$0$$sroa_idx = 0, $$sroa$5317$0$$sroa_idx = 0, $$sroa$6$0$$sroa_idx = 0,
      $$sroa$6303$0$$sroa_idx = 0, $$sroa$6319$0$$sroa_idx = 0, $$sroa$7$0$$sroa_idx = 0, $$sroa$7305$0$$sroa_idx = 0,
      $$sroa$7321$0$$sroa_idx = 0, $$sroa$8$0$$sroa_idx = 0, $$sroa$8307$0$$sroa_idx = 0, $$sroa$8323$0$$sroa_idx = 0,
      $$sroa$9$0$$sroa_idx = 0, $$sroa$9309$0$$sroa_idx = 0, $$sroa$9325$0$$sroa_idx = 0, $100 = 0, $101 = 0, $102 = 0,
      $103 = 0, $104 = 0;
    var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0,
      $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
    var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0,
      $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
    var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0,
      $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
    var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0,
      $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
    var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0,
      $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
    var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0,
      $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
    var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0,
      $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
    var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0,
      $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
    var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0,
      $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
    var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0,
      $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
    var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0,
      $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
    var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0,
      $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
    var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0,
      $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
    var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0,
      $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
    var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0,
      $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
    var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0,
      $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
    var $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0,
      $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
    var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0,
      $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
    var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0,
      $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
    var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0,
      $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
    var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0,
      $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
    var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0,
      $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
    var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0,
      $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
    var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0,
      $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
    var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0,
      $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
    var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0,
      $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
    var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0,
      $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
    var $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0,
      $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
    var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0,
      $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
    var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0,
      $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
    var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0,
      $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
    var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0,
      $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
    var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $70 = 0, $71 = 0,
      $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
    var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0,
      $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0;
    var $exitcond$i130 = 0, $exitcond$i195 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0,
      $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 1408 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1408 | 0);
    $vararg_buffer3 = sp + 16 | 0;
    $vararg_buffer = sp;
    $12 = sp + 1392 | 0;
    $13 = sp + 1384 | 0;
    $14 = sp + 1376 | 0;
    $15 = sp + 1368 | 0;
    $16 = sp + 1364 | 0;
    $17 = sp + 1168 | 0;
    $18 = sp + 1128 | 0;
    $19 = sp + 1088 | 0;
    $20 = sp + 1080 | 0;
    $21 = sp + 1076 | 0;
    $22 = sp + 880 | 0;
    $23 = sp + 872 | 0;
    $24 = sp + 832 | 0;
    $25 = sp + 792 | 0;
    $26 = sp + 784 | 0;
    $27 = sp + 780 | 0;
    $28 = sp + 584 | 0;
    $29 = sp + 544 | 0;
    $30 = sp + 504 | 0;
    $31 = sp + 380 | 0;
    $32 = sp + 296 | 0;
    $33 = sp + 264 | 0;
    $34 = sp + 68 | 0;
    $35 = sp + 32 | 0;
    $36 = sp + 28 | 0;
    HEAP32[$34 >> 2] = 1779033703;
    $37 = ((($34)) + 4 | 0);
    HEAP32[$37 >> 2] = -1150833019;
    $38 = ((($34)) + 8 | 0);
    HEAP32[$38 >> 2] = 1013904242;
    $39 = ((($34)) + 12 | 0);
    HEAP32[$39 >> 2] = -1521486534;
    $40 = ((($34)) + 16 | 0);
    HEAP32[$40 >> 2] = 1359893119;
    $41 = ((($34)) + 20 | 0);
    HEAP32[$41 >> 2] = -1694144372;
    $42 = ((($34)) + 24 | 0);
    HEAP32[$42 >> 2] = 528734635;
    $43 = ((($34)) + 28 | 0);
    HEAP32[$43 >> 2] = 1541459225;
    $44 = ((($34)) + 192 | 0);
    HEAP32[$44 >> 2] = 0;
    $45 = ($9 | 0) > (0);
    do {
      if ($45) {
        $46 = ((($31)) + 120 | 0);
        $47 = ((($32)) + 80 | 0);
        $48 = ((($31)) + 80 | 0);
        $49 = ((($31)) + 40 | 0);
        $50 = ((($31)) + 84 | 0);
        $51 = ((($32)) + 40 | 0);
        $52 = ((($35)) + 1 | 0);
        $53 = ((($28)) + 4 | 0);
        $54 = ((($28)) + 8 | 0);
        $55 = ((($28)) + 12 | 0);
        $56 = ((($28)) + 16 | 0);
        $57 = ((($28)) + 20 | 0);
        $58 = ((($28)) + 24 | 0);
        $59 = ((($28)) + 28 | 0);
        $60 = ((($28)) + 192 | 0);
        $61 = ((($28)) + 128 | 0);
        $62 = (($11) + 33) | 0;
        $63 = ($62 >>> 0) > (63);
        $64 = ((($14)) + 4 | 0);
        $$sroa$4299$0$$sroa_idx = ((($35)) + 4 | 0);
        $$sroa$5301$0$$sroa_idx = ((($35)) + 8 | 0);
        $$sroa$6303$0$$sroa_idx = ((($35)) + 12 | 0);
        $$sroa$7305$0$$sroa_idx = ((($35)) + 16 | 0);
        $$sroa$8307$0$$sroa_idx = ((($35)) + 20 | 0);
        $$sroa$9309$0$$sroa_idx = ((($35)) + 24 | 0);
        $$sroa$10311$0$$sroa_idx = ((($35)) + 28 | 0);
        $65 = ((($33)) + 4 | 0);
        $66 = ((($33)) + 8 | 0);
        $67 = ((($33)) + 12 | 0);
        $68 = ((($33)) + 16 | 0);
        $69 = ((($33)) + 20 | 0);
        $70 = ((($33)) + 24 | 0);
        $71 = ((($33)) + 28 | 0);
        $72 = ((($34)) + 128 | 0);
        $$0100437 = 0;
        $$0438 = 0;
        L3: while (1) {
          $73 = (2147483647 - ($$0438)) | 0;
          $74 = (($7) + ($$0100437 << 2) | 0);
          $75 = HEAP32[$74 >> 2] | 0;
          $76 = ($73 | 0) > ($75 | 0);
          if (!($76)) {
            label = 4;
            break;
          }
          $78 = (($5) + ($$0100437 << 5) | 0);
          _secp256k1_ecmult_gen($1, $31, $78);
          $79 = HEAP32[$46 >> 2] | 0;
          HEAP32[$47 >> 2] = $79;
          _secp256k1_fe_inv($48, $48);
          _secp256k1_fe_sqr($29, $48);
          _secp256k1_fe_mul($30, $48, $29);
          _secp256k1_fe_mul($31, $31, $29);
          _secp256k1_fe_mul($49, $49, $30);
          HEAP32[$48 >> 2] = 1;
          dest = $50;
          stop = dest + 36 | 0;
          do {
            HEAP32[dest >> 2] = 0 | 0;
            dest = dest + 4 | 0;
          } while ((dest | 0) < (stop | 0));
          dest = $32;
          src = $31;
          stop = dest + 40 | 0;
          do {
            HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
            dest = dest + 4 | 0;
            src = src + 4 | 0;
          } while ((dest | 0) < (stop | 0));
          dest = $51;
          src = $49;
          stop = dest + 40 | 0;
          do {
            HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
            dest = dest + 4 | 0;
            src = src + 4 | 0;
          } while ((dest | 0) < (stop | 0));
          $$idx104$val = HEAP32[$46 >> 2] | 0;
          $80 = ($$idx104$val | 0) == (0);
          if (!($80)) {
            $$0102 = 0;
            label = 112;
            break;
          }
          $81 = ($79 | 0) == (0);
          if ($81) {
            _secp256k1_fe_normalize_var($32);
            _secp256k1_fe_normalize_var($51);
            $$028$i = 0;
            while (1) {
              $82 = $$028$i << 3;
              $83 = (($82 | 0) / 26) & -1;
              $84 = (($82 | 0) % 26) & -1;
              $85 = (($32) + ($83 << 2) | 0);
              $86 = HEAP32[$85 >> 2] | 0;
              $87 = $86 >>> $84;
              $88 = $87 & 3;
              $89 = $82 | 2;
              $90 = (($89 | 0) / 26) & -1;
              $91 = (($89 | 0) % 26) & -1;
              $92 = (($32) + ($90 << 2) | 0);
              $93 = HEAP32[$92 >> 2] | 0;
              $94 = $93 >>> $91;
              $95 = $94 << 2;
              $96 = $95 & 12;
              $97 = $96 | $88;
              $98 = $82 | 4;
              $99 = (($98 | 0) / 26) & -1;
              $100 = (($98 | 0) % 26) & -1;
              $101 = (($32) + ($99 << 2) | 0);
              $102 = HEAP32[$101 >> 2] | 0;
              $103 = $102 >>> $100;
              $104 = $103 << 4;
              $105 = $104 & 48;
              $106 = $97 | $105;
              $107 = $82 | 6;
              $108 = (($107 | 0) / 26) & -1;
              $109 = (($107 | 0) % 26) & -1;
              $110 = (($32) + ($108 << 2) | 0);
              $111 = HEAP32[$110 >> 2] | 0;
              $112 = $111 >>> $109;
              $113 = $112 << 6;
              $114 = $106 | $113;
              $115 = $114 & 255;
              $116 = (31 - ($$028$i)) | 0;
              $117 = (($52) + ($116) | 0);
              HEAP8[$117 >> 0] = $115;
              $118 = (($$028$i) + 1) | 0;
              $exitcond$i = ($118 | 0) == (32);
              if ($exitcond$i) {
                break;
              } else {
                $$028$i = $118;
              }
            }
            $$idx12$val$i = HEAP32[$51 >> 2] | 0;
            $119 = $$idx12$val$i & 1;
            $120 = $119 | 2;
            $121 = $120 & 255;
            HEAP8[$35 >> 0] = $121;
          }
          $122 = (($8) + ($$0100437 << 2) | 0);
          $123 = HEAP32[$122 >> 2] | 0;
          $124 = (_llvm_bswap_i32(($$0100437 | 0)) | 0);
          $$098581 = (($123) + 1) | 0;
          $125 = HEAP32[$74 >> 2] | 0;
          $126 = ($$098581 | 0) < ($125 | 0);
          if ($126) {
            $$098582 = $$098581;
            while (1) {
              HEAP32[$28 >> 2] = 1779033703;
              HEAP32[$53 >> 2] = -1150833019;
              HEAP32[$54 >> 2] = 1013904242;
              HEAP32[$55 >> 2] = -1521486534;
              HEAP32[$56 >> 2] = 1359893119;
              HEAP32[$57 >> 2] = -1694144372;
              HEAP32[$58 >> 2] = 528734635;
              HEAP32[$59 >> 2] = 1541459225;
              HEAP32[$26 >> 2] = $124;
              $127 = (_llvm_bswap_i32(($$098582 | 0)) | 0);
              HEAP32[$27 >> 2] = $127;
              ;HEAP32[$61 >> 2] = HEAP32[$35 >> 2] | 0;
              HEAP32[$61 + 4 >> 2] = HEAP32[$35 + 4 >> 2] | 0;
              HEAP32[$61 + 8 >> 2] = HEAP32[$35 + 8 >> 2] | 0;
              HEAP32[$61 + 12 >> 2] = HEAP32[$35 + 12 >> 2] | 0;
              HEAP32[$61 + 16 >> 2] = HEAP32[$35 + 16 >> 2] | 0;
              HEAP32[$61 + 20 >> 2] = HEAP32[$35 + 20 >> 2] | 0;
              HEAP32[$61 + 24 >> 2] = HEAP32[$35 + 24 >> 2] | 0;
              HEAP32[$61 + 28 >> 2] = HEAP32[$35 + 28 >> 2] | 0;
              HEAP8[$61 + 32 >> 0] = HEAP8[$35 + 32 >> 0] | 0;
              HEAP32[$60 >> 2] = $62;
              if ($63) {
                $$02023$i116 = $11;
                $$02122$i117 = $10;
                $$024$i115 = 33;
                while (1) {
                  $128 = (($61) + ($$024$i115) | 0);
                  $129 = (64 - ($$024$i115)) | 0;
                  _memcpy(($128 | 0), ($$02122$i117 | 0), ($129 | 0)) | 0;
                  $130 = (($$02122$i117) + ($129) | 0);
                  $131 = (($$02023$i116) - ($129)) | 0;
                  _secp256k1_sha256_transform($28, $61);
                  $132 = ($131 >>> 0) > (63);
                  if ($132) {
                    $$02023$i116 = $131;
                    $$02122$i117 = $130;
                    $$024$i115 = 0;
                  } else {
                    $$0$lcssa$i120 = 0;
                    $$020$lcssa$i119 = $131;
                    $$021$lcssa$i118 = $130;
                    break;
                  }
                }
              } else {
                $$0$lcssa$i120 = 33;
                $$020$lcssa$i119 = $11;
                $$021$lcssa$i118 = $10;
              }
              $133 = ($$020$lcssa$i119 | 0) == (0);
              if (!($133)) {
                $134 = (($61) + ($$0$lcssa$i120) | 0);
                _memcpy(($134 | 0), ($$021$lcssa$i118 | 0), ($$020$lcssa$i119 | 0)) | 0;
              }
              $135 = HEAP32[$60 >> 2] | 0;
              $136 = $135 & 63;
              $137 = (($135) + 4) | 0;
              HEAP32[$60 >> 2] = $137;
              $138 = (($136) + 4) | 0;
              $139 = ($138 >>> 0) > (63);
              if ($139) {
                $$02023$i107 = 4;
                $$02122$i108 = $26;
                $$024$i106 = $136;
                while (1) {
                  $140 = (($61) + ($$024$i106) | 0);
                  $141 = (64 - ($$024$i106)) | 0;
                  _memcpy(($140 | 0), ($$02122$i108 | 0), ($141 | 0)) | 0;
                  $142 = (($$02122$i108) + ($141) | 0);
                  $143 = (($$02023$i107) - ($141)) | 0;
                  _secp256k1_sha256_transform($28, $61);
                  $144 = ($143 >>> 0) > (63);
                  if ($144) {
                    $$02023$i107 = $143;
                    $$02122$i108 = $142;
                    $$024$i106 = 0;
                  } else {
                    break;
                  }
                }
                $145 = ($143 | 0) == (0);
                if (!($145)) {
                  $$0$lcssa$i111349 = 0;
                  $$020$lcssa$i110348 = $143;
                  $$021$lcssa$i109347 = $142;
                  label = 18;
                }
              } else {
                $$0$lcssa$i111349 = $136;
                $$020$lcssa$i110348 = 4;
                $$021$lcssa$i109347 = $26;
                label = 18;
              }
              if ((label | 0) == 18) {
                label = 0;
                $146 = (($61) + ($$0$lcssa$i111349) | 0);
                _memcpy(($146 | 0), ($$021$lcssa$i109347 | 0), ($$020$lcssa$i110348 | 0)) | 0;
              }
              $147 = HEAP32[$60 >> 2] | 0;
              $148 = $147 & 63;
              $149 = (($147) + 4) | 0;
              HEAP32[$60 >> 2] = $149;
              $150 = (($148) + 4) | 0;
              $151 = ($150 >>> 0) > (63);
              if ($151) {
                $$02023$i = 4;
                $$02122$i = $27;
                $$024$i = $148;
                while (1) {
                  $152 = (($61) + ($$024$i) | 0);
                  $153 = (64 - ($$024$i)) | 0;
                  _memcpy(($152 | 0), ($$02122$i | 0), ($153 | 0)) | 0;
                  $154 = (($$02122$i) + ($153) | 0);
                  $155 = (($$02023$i) - ($153)) | 0;
                  _secp256k1_sha256_transform($28, $61);
                  $156 = ($155 >>> 0) > (63);
                  if ($156) {
                    $$02023$i = $155;
                    $$02122$i = $154;
                    $$024$i = 0;
                  } else {
                    break;
                  }
                }
                $157 = ($155 | 0) == (0);
                if (!($157)) {
                  $$0$lcssa$i352 = 0;
                  $$020$lcssa$i351 = $155;
                  $$021$lcssa$i350 = $154;
                  label = 22;
                }
              } else {
                $$0$lcssa$i352 = $148;
                $$020$lcssa$i351 = 4;
                $$021$lcssa$i350 = $27;
                label = 22;
              }
              if ((label | 0) == 22) {
                label = 0;
                $158 = (($61) + ($$0$lcssa$i352) | 0);
                _memcpy(($158 | 0), ($$021$lcssa$i350 | 0), ($$020$lcssa$i351 | 0)) | 0;
              }
              $159 = HEAP32[$60 >> 2] | 0;
              $160 = $159 >>> 29;
              $161 = $160 << 24;
              HEAP32[$14 >> 2] = $161;
              $162 = $159 << 27;
              $163 = $159 << 11;
              $164 = $163 & 16711680;
              $165 = $164 | $162;
              $166 = $159 >>> 5;
              $167 = $166 & 65280;
              $168 = $165 | $167;
              $169 = $159 >>> 21;
              $170 = $169 & 255;
              $171 = $168 | $170;
              HEAP32[$64 >> 2] = $171;
              $172 = (119 - ($159)) | 0;
              $173 = $172 & 63;
              $174 = (($173) + 1) | 0;
              $175 = $159 & 63;
              $176 = (($159) + ($174)) | 0;
              HEAP32[$60 >> 2] = $176;
              $177 = (($175) + ($174)) | 0;
              $178 = ($177 >>> 0) > (63);
              if ($178) {
                $$02023$i263 = $174;
                $$02122$i264 = 1612;
                $$024$i262 = $175;
                while (1) {
                  $179 = (($61) + ($$024$i262) | 0);
                  $180 = (64 - ($$024$i262)) | 0;
                  _memcpy(($179 | 0), ($$02122$i264 | 0), ($180 | 0)) | 0;
                  $181 = (($$02122$i264) + ($180) | 0);
                  $182 = (($$02023$i263) - ($180)) | 0;
                  _secp256k1_sha256_transform($28, $61);
                  $183 = ($182 >>> 0) > (63);
                  if ($183) {
                    $$02023$i263 = $182;
                    $$02122$i264 = $181;
                    $$024$i262 = 0;
                  } else {
                    break;
                  }
                }
                $184 = ($182 | 0) == (0);
                if (!($184)) {
                  $$0$lcssa$i267355 = 0;
                  $$020$lcssa$i266354 = $182;
                  $$021$lcssa$i265353 = $181;
                  label = 26;
                }
              } else {
                $$0$lcssa$i267355 = $175;
                $$020$lcssa$i266354 = $174;
                $$021$lcssa$i265353 = 1612;
                label = 26;
              }
              if ((label | 0) == 26) {
                label = 0;
                $185 = (($61) + ($$0$lcssa$i267355) | 0);
                _memcpy(($185 | 0), ($$021$lcssa$i265353 | 0), ($$020$lcssa$i266354 | 0)) | 0;
              }
              $186 = HEAP32[$60 >> 2] | 0;
              $187 = $186 & 63;
              $188 = (($186) + 8) | 0;
              HEAP32[$60 >> 2] = $188;
              $189 = (($187) + 8) | 0;
              $190 = ($189 >>> 0) > (63);
              if ($190) {
                $$02023$i218 = 8;
                $$02122$i219 = $14;
                $$024$i217 = $187;
                while (1) {
                  $191 = (($61) + ($$024$i217) | 0);
                  $192 = (64 - ($$024$i217)) | 0;
                  _memcpy(($191 | 0), ($$02122$i219 | 0), ($192 | 0)) | 0;
                  $193 = (($$02122$i219) + ($192) | 0);
                  $194 = (($$02023$i218) - ($192)) | 0;
                  _secp256k1_sha256_transform($28, $61);
                  $195 = ($194 >>> 0) > (63);
                  if ($195) {
                    $$02023$i218 = $194;
                    $$02122$i219 = $193;
                    $$024$i217 = 0;
                  } else {
                    break;
                  }
                }
                $196 = ($194 | 0) == (0);
                if (!($196)) {
                  $$0$lcssa$i222358 = 0;
                  $$020$lcssa$i221357 = $194;
                  $$021$lcssa$i220356 = $193;
                  label = 30;
                }
              } else {
                $$0$lcssa$i222358 = $187;
                $$020$lcssa$i221357 = 8;
                $$021$lcssa$i220356 = $14;
                label = 30;
              }
              if ((label | 0) == 30) {
                label = 0;
                $197 = (($61) + ($$0$lcssa$i222358) | 0);
                _memcpy(($197 | 0), ($$021$lcssa$i220356 | 0), ($$020$lcssa$i221357 | 0)) | 0;
              }
              $198 = HEAP32[$28 >> 2] | 0;
              $199 = (_llvm_bswap_i32(($198 | 0)) | 0);
              HEAP32[$28 >> 2] = 0;
              $200 = HEAP32[$53 >> 2] | 0;
              $201 = (_llvm_bswap_i32(($200 | 0)) | 0);
              HEAP32[$53 >> 2] = 0;
              $202 = HEAP32[$54 >> 2] | 0;
              $203 = (_llvm_bswap_i32(($202 | 0)) | 0);
              HEAP32[$54 >> 2] = 0;
              $204 = HEAP32[$55 >> 2] | 0;
              $205 = (_llvm_bswap_i32(($204 | 0)) | 0);
              HEAP32[$55 >> 2] = 0;
              $206 = HEAP32[$56 >> 2] | 0;
              $207 = (_llvm_bswap_i32(($206 | 0)) | 0);
              HEAP32[$56 >> 2] = 0;
              $208 = HEAP32[$57 >> 2] | 0;
              $209 = (_llvm_bswap_i32(($208 | 0)) | 0);
              HEAP32[$57 >> 2] = 0;
              $210 = HEAP32[$58 >> 2] | 0;
              $211 = (_llvm_bswap_i32(($210 | 0)) | 0);
              HEAP32[$58 >> 2] = 0;
              $212 = HEAP32[$59 >> 2] | 0;
              $213 = (_llvm_bswap_i32(($212 | 0)) | 0);
              HEAP32[$35 >> 2] = $199;
              HEAP32[$$sroa$4299$0$$sroa_idx >> 2] = $201;
              HEAP32[$$sroa$5301$0$$sroa_idx >> 2] = $203;
              HEAP32[$$sroa$6303$0$$sroa_idx >> 2] = $205;
              HEAP32[$$sroa$7305$0$$sroa_idx >> 2] = $207;
              HEAP32[$$sroa$8307$0$$sroa_idx >> 2] = $209;
              HEAP32[$$sroa$9309$0$$sroa_idx >> 2] = $211;
              HEAP32[$$sroa$10311$0$$sroa_idx >> 2] = $213;
              _secp256k1_scalar_set_b32($33, $35, $36);
              $214 = HEAP32[$36 >> 2] | 0;
              $215 = ($214 | 0) == (0);
              if (!($215)) {
                $$0102 = 0;
                label = 112;
                break L3;
              }
              $216 = HEAP32[$33 >> 2] | 0;
              $217 = HEAP32[$65 >> 2] | 0;
              $218 = $217 | $216;
              $219 = HEAP32[$66 >> 2] | 0;
              $220 = $218 | $219;
              $221 = HEAP32[$67 >> 2] | 0;
              $222 = $220 | $221;
              $223 = HEAP32[$68 >> 2] | 0;
              $224 = $222 | $223;
              $225 = HEAP32[$69 >> 2] | 0;
              $226 = $224 | $225;
              $227 = HEAP32[$70 >> 2] | 0;
              $228 = $226 | $227;
              $229 = HEAP32[$71 >> 2] | 0;
              $230 = $228 | $229;
              $231 = ($230 | 0) == (0);
              if ($231) {
                $$0102 = 0;
                label = 112;
                break L3;
              }
              $232 = (($$098582) + ($$0438)) | 0;
              $233 = (($4) + (($232 * 124) | 0) | 0);
              $234 = (($3) + ($232 << 5) | 0);
              _secp256k1_ecmult($0, $31, $233, $33, $234);
              $$idx103$val = HEAP32[$46 >> 2] | 0;
              $235 = ($$idx103$val | 0) == (0);
              if (!($235)) {
                $$0102 = 0;
                label = 112;
                break L3;
              }
              HEAP32[$47 >> 2] = 0;
              _secp256k1_fe_inv($48, $48);
              _secp256k1_fe_sqr($24, $48);
              _secp256k1_fe_mul($25, $48, $24);
              _secp256k1_fe_mul($31, $31, $24);
              _secp256k1_fe_mul($49, $49, $25);
              HEAP32[$48 >> 2] = 1;
              dest = $50;
              stop = dest + 36 | 0;
              do {
                HEAP32[dest >> 2] = 0 | 0;
                dest = dest + 4 | 0;
              } while ((dest | 0) < (stop | 0));
              dest = $32;
              src = $31;
              stop = dest + 40 | 0;
              do {
                HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
                dest = dest + 4 | 0;
                src = src + 4 | 0;
              } while ((dest | 0) < (stop | 0));
              dest = $51;
              src = $49;
              stop = dest + 40 | 0;
              do {
                HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
                dest = dest + 4 | 0;
                src = src + 4 | 0;
              } while ((dest | 0) < (stop | 0));
              _secp256k1_fe_normalize_var($32);
              _secp256k1_fe_normalize_var($51);
              $$028$i129 = 0;
              while (1) {
                $236 = $$028$i129 << 3;
                $237 = (($236 | 0) / 26) & -1;
                $238 = (($236 | 0) % 26) & -1;
                $239 = (($32) + ($237 << 2) | 0);
                $240 = HEAP32[$239 >> 2] | 0;
                $241 = $240 >>> $238;
                $242 = $241 & 3;
                $243 = $236 | 2;
                $244 = (($243 | 0) / 26) & -1;
                $245 = (($243 | 0) % 26) & -1;
                $246 = (($32) + ($244 << 2) | 0);
                $247 = HEAP32[$246 >> 2] | 0;
                $248 = $247 >>> $245;
                $249 = $248 << 2;
                $250 = $249 & 12;
                $251 = $250 | $242;
                $252 = $236 | 4;
                $253 = (($252 | 0) / 26) & -1;
                $254 = (($252 | 0) % 26) & -1;
                $255 = (($32) + ($253 << 2) | 0);
                $256 = HEAP32[$255 >> 2] | 0;
                $257 = $256 >>> $254;
                $258 = $257 << 4;
                $259 = $258 & 48;
                $260 = $251 | $259;
                $261 = $236 | 6;
                $262 = (($261 | 0) / 26) & -1;
                $263 = (($261 | 0) % 26) & -1;
                $264 = (($32) + ($262 << 2) | 0);
                $265 = HEAP32[$264 >> 2] | 0;
                $266 = $265 >>> $263;
                $267 = $266 << 6;
                $268 = $260 | $267;
                $269 = $268 & 255;
                $270 = (31 - ($$028$i129)) | 0;
                $271 = (($52) + ($270) | 0);
                HEAP8[$271 >> 0] = $269;
                $272 = (($$028$i129) + 1) | 0;
                $exitcond$i130 = ($272 | 0) == (32);
                if ($exitcond$i130) {
                  break;
                } else {
                  $$028$i129 = $272;
                }
              }
              $$idx12$val$i126 = HEAP32[$51 >> 2] | 0;
              $273 = $$idx12$val$i126 & 1;
              $274 = $273 | 2;
              $275 = $274 & 255;
              HEAP8[$35 >> 0] = $275;
              $$098 = (($$098582) + 1) | 0;
              $276 = HEAP32[$74 >> 2] | 0;
              $277 = ($$098 | 0) < ($276 | 0);
              if ($277) {
                $$098582 = $$098;
              } else {
                break;
              }
            }
          }
          $278 = HEAP32[$44 >> 2] | 0;
          $279 = $278 & 63;
          $280 = (($278) + 33) | 0;
          HEAP32[$44 >> 2] = $280;
          $281 = (($279) + 33) | 0;
          $282 = ($281 >>> 0) > (63);
          if ($282) {
            $$02023$i135 = 33;
            $$02122$i136 = $35;
            $$024$i134 = $279;
            while (1) {
              $283 = (($72) + ($$024$i134) | 0);
              $284 = (64 - ($$024$i134)) | 0;
              _memcpy(($283 | 0), ($$02122$i136 | 0), ($284 | 0)) | 0;
              $285 = (($$02122$i136) + ($284) | 0);
              $286 = (($$02023$i135) - ($284)) | 0;
              _secp256k1_sha256_transform($34, $72);
              $287 = ($286 >>> 0) > (63);
              if ($287) {
                $$02023$i135 = $286;
                $$02122$i136 = $285;
                $$024$i134 = 0;
              } else {
                break;
              }
            }
            $288 = ($286 | 0) == (0);
            if (!($288)) {
              $$0$lcssa$i139496 = 0;
              $$020$lcssa$i138495 = $286;
              $$021$lcssa$i137494 = $285;
              label = 40;
            }
          } else {
            $$0$lcssa$i139496 = $279;
            $$020$lcssa$i138495 = 33;
            $$021$lcssa$i137494 = $35;
            label = 40;
          }
          if ((label | 0) == 40) {
            label = 0;
            $289 = (($72) + ($$0$lcssa$i139496) | 0);
            _memcpy(($289 | 0), ($$021$lcssa$i137494 | 0), ($$020$lcssa$i138495 | 0)) | 0;
          }
          $290 = HEAP32[$74 >> 2] | 0;
          $291 = (($290) + ($$0438)) | 0;
          $292 = (($$0100437) + 1) | 0;
          $293 = ($292 | 0) < ($9 | 0);
          if ($293) {
            $$0100437 = $292;
            $$0438 = $291;
          } else {
            label = 42;
            break;
          }
        }
        if ((label | 0) == 4) {
          $77 = HEAP32[125] | 0;
          HEAP32[$vararg_buffer >> 2] = 639;
          $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
          HEAP32[$vararg_ptr1 >> 2] = 135;
          $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
          HEAP32[$vararg_ptr2 >> 2] = 662;
          (_fprintf($77, 628, $vararg_buffer) | 0);
          _abort();
          // unreachable;
        }
        else if ((label | 0) == 42) {
          $$pre = HEAP32[$44 >> 2] | 0;
          $295 = $$pre;
          break;
        }
        else if ((label | 0) == 112) {
          STACKTOP = sp;
          return ($$0102 | 0);
        }
      } else {
        $295 = 0;
      }
    } while (0);
    $294 = $295 & 63;
    $296 = (($295) + ($11)) | 0;
    HEAP32[$44 >> 2] = $296;
    $297 = (($294) + ($11)) | 0;
    $298 = ($297 >>> 0) > (63);
    if ($298) {
      $299 = ((($34)) + 128 | 0);
      $$02023$i144 = $11;
      $$02122$i145 = $10;
      $$024$i143 = $294;
      while (1) {
        $300 = (($299) + ($$024$i143) | 0);
        $301 = (64 - ($$024$i143)) | 0;
        _memcpy(($300 | 0), ($$02122$i145 | 0), ($301 | 0)) | 0;
        $302 = (($$02122$i145) + ($301) | 0);
        $303 = (($$02023$i144) - ($301)) | 0;
        _secp256k1_sha256_transform($34, $299);
        $304 = ($303 >>> 0) > (63);
        if ($304) {
          $$02023$i144 = $303;
          $$02122$i145 = $302;
          $$024$i143 = 0;
        } else {
          $$0$lcssa$i148 = 0;
          $$020$lcssa$i147 = $303;
          $$021$lcssa$i146 = $302;
          break;
        }
      }
    } else {
      $$0$lcssa$i148 = $294;
      $$020$lcssa$i147 = $11;
      $$021$lcssa$i146 = $10;
    }
    $305 = ($$020$lcssa$i147 | 0) == (0);
    if (!($305)) {
      $306 = ((($34)) + 128 | 0);
      $307 = (($306) + ($$0$lcssa$i148) | 0);
      _memcpy(($307 | 0), ($$021$lcssa$i146 | 0), ($$020$lcssa$i147 | 0)) | 0;
    }
    $308 = HEAP32[$44 >> 2] | 0;
    $309 = $308 >>> 29;
    $310 = $309 << 24;
    HEAP32[$23 >> 2] = $310;
    $311 = $308 << 27;
    $312 = $308 << 11;
    $313 = $312 & 16711680;
    $314 = $313 | $311;
    $315 = $308 >>> 5;
    $316 = $315 & 65280;
    $317 = $314 | $316;
    $318 = $308 >>> 21;
    $319 = $318 & 255;
    $320 = $317 | $319;
    $321 = ((($23)) + 4 | 0);
    HEAP32[$321 >> 2] = $320;
    $322 = (119 - ($308)) | 0;
    $323 = $322 & 63;
    $324 = (($323) + 1) | 0;
    $325 = $308 & 63;
    $326 = (($308) + ($324)) | 0;
    HEAP32[$44 >> 2] = $326;
    $327 = (($325) + ($324)) | 0;
    $328 = ($327 >>> 0) > (63);
    $329 = ((($34)) + 128 | 0);
    if ($328) {
      $$02023$i227 = $324;
      $$02122$i228 = 1612;
      $$024$i226 = $325;
      while (1) {
        $330 = (($329) + ($$024$i226) | 0);
        $331 = (64 - ($$024$i226)) | 0;
        _memcpy(($330 | 0), ($$02122$i228 | 0), ($331 | 0)) | 0;
        $332 = (($$02122$i228) + ($331) | 0);
        $333 = (($$02023$i227) - ($331)) | 0;
        _secp256k1_sha256_transform($34, $329);
        $334 = ($333 >>> 0) > (63);
        if ($334) {
          $$02023$i227 = $333;
          $$02122$i228 = $332;
          $$024$i226 = 0;
        } else {
          break;
        }
      }
      $335 = ($333 | 0) == (0);
      if (!($335)) {
        $$0$lcssa$i231361 = 0;
        $$020$lcssa$i230360 = $333;
        $$021$lcssa$i229359 = $332;
        label = 51;
      }
    } else {
      $$0$lcssa$i231361 = $325;
      $$020$lcssa$i230360 = $324;
      $$021$lcssa$i229359 = 1612;
      label = 51;
    }
    if ((label | 0) == 51) {
      $336 = (($329) + ($$0$lcssa$i231361) | 0);
      _memcpy(($336 | 0), ($$021$lcssa$i229359 | 0), ($$020$lcssa$i230360 | 0)) | 0;
    }
    $337 = HEAP32[$44 >> 2] | 0;
    $338 = $337 & 63;
    $339 = (($337) + 8) | 0;
    HEAP32[$44 >> 2] = $339;
    $340 = (($338) + 8) | 0;
    $341 = ($340 >>> 0) > (63);
    $342 = ((($34)) + 128 | 0);
    if ($341) {
      $$02023$i153 = 8;
      $$02122$i154 = $23;
      $$024$i152 = $338;
      while (1) {
        $343 = (($342) + ($$024$i152) | 0);
        $344 = (64 - ($$024$i152)) | 0;
        _memcpy(($343 | 0), ($$02122$i154 | 0), ($344 | 0)) | 0;
        $345 = (($$02122$i154) + ($344) | 0);
        $346 = (($$02023$i153) - ($344)) | 0;
        _secp256k1_sha256_transform($34, $342);
        $347 = ($346 >>> 0) > (63);
        if ($347) {
          $$02023$i153 = $346;
          $$02122$i154 = $345;
          $$024$i152 = 0;
        } else {
          break;
        }
      }
      $348 = ($346 | 0) == (0);
      if (!($348)) {
        $$0$lcssa$i157364 = 0;
        $$020$lcssa$i156363 = $346;
        $$021$lcssa$i155362 = $345;
        label = 55;
      }
    } else {
      $$0$lcssa$i157364 = $338;
      $$020$lcssa$i156363 = 8;
      $$021$lcssa$i155362 = $23;
      label = 55;
    }
    if ((label | 0) == 55) {
      $349 = (($342) + ($$0$lcssa$i157364) | 0);
      _memcpy(($349 | 0), ($$021$lcssa$i155362 | 0), ($$020$lcssa$i156363 | 0)) | 0;
    }
    $350 = HEAP32[$34 >> 2] | 0;
    $351 = (_llvm_bswap_i32(($350 | 0)) | 0);
    HEAP32[$34 >> 2] = 0;
    $352 = HEAP32[$37 >> 2] | 0;
    $353 = (_llvm_bswap_i32(($352 | 0)) | 0);
    HEAP32[$37 >> 2] = 0;
    $354 = HEAP32[$38 >> 2] | 0;
    $355 = (_llvm_bswap_i32(($354 | 0)) | 0);
    HEAP32[$38 >> 2] = 0;
    $356 = HEAP32[$39 >> 2] | 0;
    $357 = (_llvm_bswap_i32(($356 | 0)) | 0);
    HEAP32[$39 >> 2] = 0;
    $358 = HEAP32[$40 >> 2] | 0;
    $359 = (_llvm_bswap_i32(($358 | 0)) | 0);
    HEAP32[$40 >> 2] = 0;
    $360 = HEAP32[$41 >> 2] | 0;
    $361 = (_llvm_bswap_i32(($360 | 0)) | 0);
    HEAP32[$41 >> 2] = 0;
    $362 = HEAP32[$42 >> 2] | 0;
    $363 = (_llvm_bswap_i32(($362 | 0)) | 0);
    HEAP32[$42 >> 2] = 0;
    $364 = HEAP32[$43 >> 2] | 0;
    $365 = (_llvm_bswap_i32(($364 | 0)) | 0);
    HEAP32[$43 >> 2] = 0;
    HEAP8[$2 >> 0] = $351 & 255;
    HEAP8[$2 + 1 >> 0] = ($351 >> 8) & 255;
    HEAP8[$2 + 2 >> 0] = ($351 >> 16) & 255;
    HEAP8[$2 + 3 >> 0] = $351 >> 24;
    $$sroa$4$0$$sroa_idx = ((($2)) + 4 | 0);
    HEAP8[$$sroa$4$0$$sroa_idx >> 0] = $353 & 255;
    HEAP8[$$sroa$4$0$$sroa_idx + 1 >> 0] = ($353 >> 8) & 255;
    HEAP8[$$sroa$4$0$$sroa_idx + 2 >> 0] = ($353 >> 16) & 255;
    HEAP8[$$sroa$4$0$$sroa_idx + 3 >> 0] = $353 >> 24;
    $$sroa$5$0$$sroa_idx = ((($2)) + 8 | 0);
    HEAP8[$$sroa$5$0$$sroa_idx >> 0] = $355 & 255;
    HEAP8[$$sroa$5$0$$sroa_idx + 1 >> 0] = ($355 >> 8) & 255;
    HEAP8[$$sroa$5$0$$sroa_idx + 2 >> 0] = ($355 >> 16) & 255;
    HEAP8[$$sroa$5$0$$sroa_idx + 3 >> 0] = $355 >> 24;
    $$sroa$6$0$$sroa_idx = ((($2)) + 12 | 0);
    HEAP8[$$sroa$6$0$$sroa_idx >> 0] = $357 & 255;
    HEAP8[$$sroa$6$0$$sroa_idx + 1 >> 0] = ($357 >> 8) & 255;
    HEAP8[$$sroa$6$0$$sroa_idx + 2 >> 0] = ($357 >> 16) & 255;
    HEAP8[$$sroa$6$0$$sroa_idx + 3 >> 0] = $357 >> 24;
    $$sroa$7$0$$sroa_idx = ((($2)) + 16 | 0);
    HEAP8[$$sroa$7$0$$sroa_idx >> 0] = $359 & 255;
    HEAP8[$$sroa$7$0$$sroa_idx + 1 >> 0] = ($359 >> 8) & 255;
    HEAP8[$$sroa$7$0$$sroa_idx + 2 >> 0] = ($359 >> 16) & 255;
    HEAP8[$$sroa$7$0$$sroa_idx + 3 >> 0] = $359 >> 24;
    $$sroa$8$0$$sroa_idx = ((($2)) + 20 | 0);
    HEAP8[$$sroa$8$0$$sroa_idx >> 0] = $361 & 255;
    HEAP8[$$sroa$8$0$$sroa_idx + 1 >> 0] = ($361 >> 8) & 255;
    HEAP8[$$sroa$8$0$$sroa_idx + 2 >> 0] = ($361 >> 16) & 255;
    HEAP8[$$sroa$8$0$$sroa_idx + 3 >> 0] = $361 >> 24;
    $$sroa$9$0$$sroa_idx = ((($2)) + 24 | 0);
    HEAP8[$$sroa$9$0$$sroa_idx >> 0] = $363 & 255;
    HEAP8[$$sroa$9$0$$sroa_idx + 1 >> 0] = ($363 >> 8) & 255;
    HEAP8[$$sroa$9$0$$sroa_idx + 2 >> 0] = ($363 >> 16) & 255;
    HEAP8[$$sroa$9$0$$sroa_idx + 3 >> 0] = $363 >> 24;
    $$sroa$10$0$$sroa_idx = ((($2)) + 28 | 0);
    HEAP8[$$sroa$10$0$$sroa_idx >> 0] = $365 & 255;
    HEAP8[$$sroa$10$0$$sroa_idx + 1 >> 0] = ($365 >> 8) & 255;
    HEAP8[$$sroa$10$0$$sroa_idx + 2 >> 0] = ($365 >> 16) & 255;
    HEAP8[$$sroa$10$0$$sroa_idx + 3 >> 0] = $365 >> 24;
    L95: do {
      if ($45) {
        $366 = ((($22)) + 4 | 0);
        $367 = ((($22)) + 8 | 0);
        $368 = ((($22)) + 12 | 0);
        $369 = ((($22)) + 16 | 0);
        $370 = ((($22)) + 20 | 0);
        $371 = ((($22)) + 24 | 0);
        $372 = ((($22)) + 28 | 0);
        $373 = ((($22)) + 192 | 0);
        $374 = ((($22)) + 128 | 0);
        $375 = (($11) + 32) | 0;
        $376 = ($375 >>> 0) > (63);
        $377 = ((($13)) + 4 | 0);
        $$sroa$4315$0$$sroa_idx = ((($35)) + 4 | 0);
        $$sroa$5317$0$$sroa_idx = ((($35)) + 8 | 0);
        $$sroa$6319$0$$sroa_idx = ((($35)) + 12 | 0);
        $$sroa$7321$0$$sroa_idx = ((($35)) + 16 | 0);
        $$sroa$8323$0$$sroa_idx = ((($35)) + 20 | 0);
        $$sroa$9325$0$$sroa_idx = ((($35)) + 24 | 0);
        $$sroa$10327$0$$sroa_idx = ((($35)) + 28 | 0);
        $378 = ((($33)) + 4 | 0);
        $379 = ((($33)) + 8 | 0);
        $380 = ((($33)) + 12 | 0);
        $381 = ((($33)) + 16 | 0);
        $382 = ((($33)) + 20 | 0);
        $383 = ((($33)) + 24 | 0);
        $384 = ((($33)) + 28 | 0);
        $$idx = ((($31)) + 120 | 0);
        $385 = ((($32)) + 80 | 0);
        $386 = ((($31)) + 80 | 0);
        $387 = ((($31)) + 40 | 0);
        $388 = ((($31)) + 84 | 0);
        $389 = ((($32)) + 40 | 0);
        $390 = ((($35)) + 1 | 0);
        $391 = ((($17)) + 4 | 0);
        $392 = ((($17)) + 8 | 0);
        $393 = ((($17)) + 12 | 0);
        $394 = ((($17)) + 16 | 0);
        $395 = ((($17)) + 20 | 0);
        $396 = ((($17)) + 24 | 0);
        $397 = ((($17)) + 28 | 0);
        $398 = ((($17)) + 192 | 0);
        $399 = ((($17)) + 128 | 0);
        $400 = (($11) + 33) | 0;
        $401 = ($400 >>> 0) > (63);
        $402 = ((($12)) + 4 | 0);
        $$1101434 = 0;
        $$1435 = 0;
        L97: while (1) {
          $403 = (2147483647 - ($$1435)) | 0;
          $404 = (($7) + ($$1101434 << 2) | 0);
          $405 = HEAP32[$404 >> 2] | 0;
          $406 = ($403 | 0) > ($405 | 0);
          if (!($406)) {
            label = 59;
            break;
          }
          HEAP32[$22 >> 2] = 1779033703;
          HEAP32[$366 >> 2] = -1150833019;
          HEAP32[$367 >> 2] = 1013904242;
          HEAP32[$368 >> 2] = -1521486534;
          HEAP32[$369 >> 2] = 1359893119;
          HEAP32[$370 >> 2] = -1694144372;
          HEAP32[$371 >> 2] = 528734635;
          HEAP32[$372 >> 2] = 1541459225;
          $408 = (_llvm_bswap_i32(($$1101434 | 0)) | 0);
          HEAP32[$20 >> 2] = $408;
          HEAP32[$21 >> 2] = 0;
          dest = $374;
          src = $2;
          stop = dest + 32 | 0;
          do {
            HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
            dest = dest + 1 | 0;
            src = src + 1 | 0;
          } while ((dest | 0) < (stop | 0));
          HEAP32[$373 >> 2] = $375;
          if ($376) {
            $$02023$i180 = $11;
            $$02122$i181 = $10;
            $$024$i179 = 32;
            while (1) {
              $409 = (($374) + ($$024$i179) | 0);
              $410 = (64 - ($$024$i179)) | 0;
              _memcpy(($409 | 0), ($$02122$i181 | 0), ($410 | 0)) | 0;
              $411 = (($$02122$i181) + ($410) | 0);
              $412 = (($$02023$i180) - ($410)) | 0;
              _secp256k1_sha256_transform($22, $374);
              $413 = ($412 >>> 0) > (63);
              if ($413) {
                $$02023$i180 = $412;
                $$02122$i181 = $411;
                $$024$i179 = 0;
              } else {
                $$0$lcssa$i184 = 0;
                $$020$lcssa$i183 = $412;
                $$021$lcssa$i182 = $411;
                break;
              }
            }
          } else {
            $$0$lcssa$i184 = 32;
            $$020$lcssa$i183 = $11;
            $$021$lcssa$i182 = $10;
          }
          $414 = ($$020$lcssa$i183 | 0) == (0);
          if (!($414)) {
            $415 = (($374) + ($$0$lcssa$i184) | 0);
            _memcpy(($415 | 0), ($$021$lcssa$i182 | 0), ($$020$lcssa$i183 | 0)) | 0;
          }
          $416 = HEAP32[$373 >> 2] | 0;
          $417 = $416 & 63;
          $418 = (($416) + 4) | 0;
          HEAP32[$373 >> 2] = $418;
          $419 = (($417) + 4) | 0;
          $420 = ($419 >>> 0) > (63);
          if ($420) {
            $$02023$i171 = 4;
            $$02122$i172 = $20;
            $$024$i170 = $417;
            while (1) {
              $421 = (($374) + ($$024$i170) | 0);
              $422 = (64 - ($$024$i170)) | 0;
              _memcpy(($421 | 0), ($$02122$i172 | 0), ($422 | 0)) | 0;
              $423 = (($$02122$i172) + ($422) | 0);
              $424 = (($$02023$i171) - ($422)) | 0;
              _secp256k1_sha256_transform($22, $374);
              $425 = ($424 >>> 0) > (63);
              if ($425) {
                $$02023$i171 = $424;
                $$02122$i172 = $423;
                $$024$i170 = 0;
              } else {
                break;
              }
            }
            $426 = ($424 | 0) == (0);
            if (!($426)) {
              $$0$lcssa$i175367 = 0;
              $$020$lcssa$i174366 = $424;
              $$021$lcssa$i173365 = $423;
              label = 67;
            }
          } else {
            $$0$lcssa$i175367 = $417;
            $$020$lcssa$i174366 = 4;
            $$021$lcssa$i173365 = $20;
            label = 67;
          }
          if ((label | 0) == 67) {
            label = 0;
            $427 = (($374) + ($$0$lcssa$i175367) | 0);
            _memcpy(($427 | 0), ($$021$lcssa$i173365 | 0), ($$020$lcssa$i174366 | 0)) | 0;
          }
          $428 = HEAP32[$373 >> 2] | 0;
          $429 = $428 & 63;
          $430 = (($428) + 4) | 0;
          HEAP32[$373 >> 2] = $430;
          $431 = (($429) + 4) | 0;
          $432 = ($431 >>> 0) > (63);
          if ($432) {
            $$02023$i162 = 4;
            $$02122$i163 = $21;
            $$024$i161 = $429;
            while (1) {
              $433 = (($374) + ($$024$i161) | 0);
              $434 = (64 - ($$024$i161)) | 0;
              _memcpy(($433 | 0), ($$02122$i163 | 0), ($434 | 0)) | 0;
              $435 = (($$02122$i163) + ($434) | 0);
              $436 = (($$02023$i162) - ($434)) | 0;
              _secp256k1_sha256_transform($22, $374);
              $437 = ($436 >>> 0) > (63);
              if ($437) {
                $$02023$i162 = $436;
                $$02122$i163 = $435;
                $$024$i161 = 0;
              } else {
                break;
              }
            }
            $438 = ($436 | 0) == (0);
            if (!($438)) {
              $$0$lcssa$i166370 = 0;
              $$020$lcssa$i165369 = $436;
              $$021$lcssa$i164368 = $435;
              label = 71;
            }
          } else {
            $$0$lcssa$i166370 = $429;
            $$020$lcssa$i165369 = 4;
            $$021$lcssa$i164368 = $21;
            label = 71;
          }
          if ((label | 0) == 71) {
            label = 0;
            $439 = (($374) + ($$0$lcssa$i166370) | 0);
            _memcpy(($439 | 0), ($$021$lcssa$i164368 | 0), ($$020$lcssa$i165369 | 0)) | 0;
          }
          $440 = HEAP32[$373 >> 2] | 0;
          $441 = $440 >>> 29;
          $442 = $441 << 24;
          HEAP32[$13 >> 2] = $442;
          $443 = $440 << 27;
          $444 = $440 << 11;
          $445 = $444 & 16711680;
          $446 = $445 | $443;
          $447 = $440 >>> 5;
          $448 = $447 & 65280;
          $449 = $446 | $448;
          $450 = $440 >>> 21;
          $451 = $450 & 255;
          $452 = $449 | $451;
          HEAP32[$377 >> 2] = $452;
          $453 = (119 - ($440)) | 0;
          $454 = $453 & 63;
          $455 = (($454) + 1) | 0;
          $456 = $440 & 63;
          $457 = (($440) + ($455)) | 0;
          HEAP32[$373 >> 2] = $457;
          $458 = (($456) + ($455)) | 0;
          $459 = ($458 >>> 0) > (63);
          if ($459) {
            $$02023$i272 = $455;
            $$02122$i273 = 1612;
            $$024$i271 = $456;
            while (1) {
              $460 = (($374) + ($$024$i271) | 0);
              $461 = (64 - ($$024$i271)) | 0;
              _memcpy(($460 | 0), ($$02122$i273 | 0), ($461 | 0)) | 0;
              $462 = (($$02122$i273) + ($461) | 0);
              $463 = (($$02023$i272) - ($461)) | 0;
              _secp256k1_sha256_transform($22, $374);
              $464 = ($463 >>> 0) > (63);
              if ($464) {
                $$02023$i272 = $463;
                $$02122$i273 = $462;
                $$024$i271 = 0;
              } else {
                break;
              }
            }
            $465 = ($463 | 0) == (0);
            if (!($465)) {
              $$0$lcssa$i276373 = 0;
              $$020$lcssa$i275372 = $463;
              $$021$lcssa$i274371 = $462;
              label = 75;
            }
          } else {
            $$0$lcssa$i276373 = $456;
            $$020$lcssa$i275372 = $455;
            $$021$lcssa$i274371 = 1612;
            label = 75;
          }
          if ((label | 0) == 75) {
            label = 0;
            $466 = (($374) + ($$0$lcssa$i276373) | 0);
            _memcpy(($466 | 0), ($$021$lcssa$i274371 | 0), ($$020$lcssa$i275372 | 0)) | 0;
          }
          $467 = HEAP32[$373 >> 2] | 0;
          $468 = $467 & 63;
          $469 = (($467) + 8) | 0;
          HEAP32[$373 >> 2] = $469;
          $470 = (($468) + 8) | 0;
          $471 = ($470 >>> 0) > (63);
          if ($471) {
            $$02023$i236 = 8;
            $$02122$i237 = $13;
            $$024$i235 = $468;
            while (1) {
              $472 = (($374) + ($$024$i235) | 0);
              $473 = (64 - ($$024$i235)) | 0;
              _memcpy(($472 | 0), ($$02122$i237 | 0), ($473 | 0)) | 0;
              $474 = (($$02122$i237) + ($473) | 0);
              $475 = (($$02023$i236) - ($473)) | 0;
              _secp256k1_sha256_transform($22, $374);
              $476 = ($475 >>> 0) > (63);
              if ($476) {
                $$02023$i236 = $475;
                $$02122$i237 = $474;
                $$024$i235 = 0;
              } else {
                break;
              }
            }
            $477 = ($475 | 0) == (0);
            if (!($477)) {
              $$0$lcssa$i240376 = 0;
              $$020$lcssa$i239375 = $475;
              $$021$lcssa$i238374 = $474;
              label = 79;
            }
          } else {
            $$0$lcssa$i240376 = $468;
            $$020$lcssa$i239375 = 8;
            $$021$lcssa$i238374 = $13;
            label = 79;
          }
          if ((label | 0) == 79) {
            label = 0;
            $478 = (($374) + ($$0$lcssa$i240376) | 0);
            _memcpy(($478 | 0), ($$021$lcssa$i238374 | 0), ($$020$lcssa$i239375 | 0)) | 0;
          }
          $479 = HEAP32[$22 >> 2] | 0;
          $480 = (_llvm_bswap_i32(($479 | 0)) | 0);
          HEAP32[$22 >> 2] = 0;
          $481 = HEAP32[$366 >> 2] | 0;
          $482 = (_llvm_bswap_i32(($481 | 0)) | 0);
          HEAP32[$366 >> 2] = 0;
          $483 = HEAP32[$367 >> 2] | 0;
          $484 = (_llvm_bswap_i32(($483 | 0)) | 0);
          HEAP32[$367 >> 2] = 0;
          $485 = HEAP32[$368 >> 2] | 0;
          $486 = (_llvm_bswap_i32(($485 | 0)) | 0);
          HEAP32[$368 >> 2] = 0;
          $487 = HEAP32[$369 >> 2] | 0;
          $488 = (_llvm_bswap_i32(($487 | 0)) | 0);
          HEAP32[$369 >> 2] = 0;
          $489 = HEAP32[$370 >> 2] | 0;
          $490 = (_llvm_bswap_i32(($489 | 0)) | 0);
          HEAP32[$370 >> 2] = 0;
          $491 = HEAP32[$371 >> 2] | 0;
          $492 = (_llvm_bswap_i32(($491 | 0)) | 0);
          HEAP32[$371 >> 2] = 0;
          $493 = HEAP32[$372 >> 2] | 0;
          $494 = (_llvm_bswap_i32(($493 | 0)) | 0);
          HEAP32[$35 >> 2] = $480;
          HEAP32[$$sroa$4315$0$$sroa_idx >> 2] = $482;
          HEAP32[$$sroa$5317$0$$sroa_idx >> 2] = $484;
          HEAP32[$$sroa$6319$0$$sroa_idx >> 2] = $486;
          HEAP32[$$sroa$7321$0$$sroa_idx >> 2] = $488;
          HEAP32[$$sroa$8323$0$$sroa_idx >> 2] = $490;
          HEAP32[$$sroa$9325$0$$sroa_idx >> 2] = $492;
          HEAP32[$$sroa$10327$0$$sroa_idx >> 2] = $494;
          _secp256k1_scalar_set_b32($33, $35, $36);
          $495 = HEAP32[$36 >> 2] | 0;
          $496 = ($495 | 0) == (0);
          if (!($496)) {
            $$0102 = 0;
            label = 112;
            break;
          }
          $497 = HEAP32[$33 >> 2] | 0;
          $498 = HEAP32[$378 >> 2] | 0;
          $499 = $498 | $497;
          $500 = HEAP32[$379 >> 2] | 0;
          $501 = $499 | $500;
          $502 = HEAP32[$380 >> 2] | 0;
          $503 = $501 | $502;
          $504 = HEAP32[$381 >> 2] | 0;
          $505 = $503 | $504;
          $506 = HEAP32[$382 >> 2] | 0;
          $507 = $505 | $506;
          $508 = HEAP32[$383 >> 2] | 0;
          $509 = $507 | $508;
          $510 = HEAP32[$384 >> 2] | 0;
          $511 = $509 | $510;
          $512 = ($511 | 0) == (0);
          if ($512) {
            $$0102 = 0;
            label = 112;
            break;
          }
          $513 = (($8) + ($$1101434 << 2) | 0);
          $$199 = 0;
          while (1) {
            $514 = HEAP32[$513 >> 2] | 0;
            $515 = ($$199 | 0) < ($514 | 0);
            $516 = (($$199) + ($$1435)) | 0;
            if (!($515)) {
              break;
            }
            $517 = (($4) + (($516 * 124) | 0) | 0);
            $518 = (($3) + ($516 << 5) | 0);
            _secp256k1_ecmult($0, $31, $517, $33, $518);
            $$idx$val = HEAP32[$$idx >> 2] | 0;
            $519 = ($$idx$val | 0) == (0);
            if (!($519)) {
              $$0102 = 0;
              label = 112;
              break L97;
            }
            HEAP32[$385 >> 2] = 0;
            _secp256k1_fe_inv($386, $386);
            _secp256k1_fe_sqr($18, $386);
            _secp256k1_fe_mul($19, $386, $18);
            _secp256k1_fe_mul($31, $31, $18);
            _secp256k1_fe_mul($387, $387, $19);
            HEAP32[$386 >> 2] = 1;
            dest = $388;
            stop = dest + 36 | 0;
            do {
              HEAP32[dest >> 2] = 0 | 0;
              dest = dest + 4 | 0;
            } while ((dest | 0) < (stop | 0));
            dest = $32;
            src = $31;
            stop = dest + 40 | 0;
            do {
              HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
              dest = dest + 4 | 0;
              src = src + 4 | 0;
            } while ((dest | 0) < (stop | 0));
            dest = $389;
            src = $387;
            stop = dest + 40 | 0;
            do {
              HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
              dest = dest + 4 | 0;
              src = src + 4 | 0;
            } while ((dest | 0) < (stop | 0));
            _secp256k1_fe_normalize_var($32);
            _secp256k1_fe_normalize_var($389);
            $$028$i194 = 0;
            while (1) {
              $520 = $$028$i194 << 3;
              $521 = (($520 | 0) / 26) & -1;
              $522 = (($520 | 0) % 26) & -1;
              $523 = (($32) + ($521 << 2) | 0);
              $524 = HEAP32[$523 >> 2] | 0;
              $525 = $524 >>> $522;
              $526 = $525 & 3;
              $527 = $520 | 2;
              $528 = (($527 | 0) / 26) & -1;
              $529 = (($527 | 0) % 26) & -1;
              $530 = (($32) + ($528 << 2) | 0);
              $531 = HEAP32[$530 >> 2] | 0;
              $532 = $531 >>> $529;
              $533 = $532 << 2;
              $534 = $533 & 12;
              $535 = $534 | $526;
              $536 = $520 | 4;
              $537 = (($536 | 0) / 26) & -1;
              $538 = (($536 | 0) % 26) & -1;
              $539 = (($32) + ($537 << 2) | 0);
              $540 = HEAP32[$539 >> 2] | 0;
              $541 = $540 >>> $538;
              $542 = $541 << 4;
              $543 = $542 & 48;
              $544 = $535 | $543;
              $545 = $520 | 6;
              $546 = (($545 | 0) / 26) & -1;
              $547 = (($545 | 0) % 26) & -1;
              $548 = (($32) + ($546 << 2) | 0);
              $549 = HEAP32[$548 >> 2] | 0;
              $550 = $549 >>> $547;
              $551 = $550 << 6;
              $552 = $544 | $551;
              $553 = $552 & 255;
              $554 = (31 - ($$028$i194)) | 0;
              $555 = (($390) + ($554) | 0);
              HEAP8[$555 >> 0] = $553;
              $556 = (($$028$i194) + 1) | 0;
              $exitcond$i195 = ($556 | 0) == (32);
              if ($exitcond$i195) {
                break;
              } else {
                $$028$i194 = $556;
              }
            }
            $$idx12$val$i191 = HEAP32[$389 >> 2] | 0;
            $557 = $$idx12$val$i191 & 1;
            $558 = $557 | 2;
            $559 = $558 & 255;
            HEAP8[$35 >> 0] = $559;
            $560 = (($$199) + 1) | 0;
            HEAP32[$17 >> 2] = 1779033703;
            HEAP32[$391 >> 2] = -1150833019;
            HEAP32[$392 >> 2] = 1013904242;
            HEAP32[$393 >> 2] = -1521486534;
            HEAP32[$394 >> 2] = 1359893119;
            HEAP32[$395 >> 2] = -1694144372;
            HEAP32[$396 >> 2] = 528734635;
            HEAP32[$397 >> 2] = 1541459225;
            HEAP32[$15 >> 2] = $408;
            $561 = (_llvm_bswap_i32(($560 | 0)) | 0);
            HEAP32[$16 >> 2] = $561;
            ;HEAP32[$399 >> 2] = HEAP32[$35 >> 2] | 0;
            HEAP32[$399 + 4 >> 2] = HEAP32[$35 + 4 >> 2] | 0;
            HEAP32[$399 + 8 >> 2] = HEAP32[$35 + 8 >> 2] | 0;
            HEAP32[$399 + 12 >> 2] = HEAP32[$35 + 12 >> 2] | 0;
            HEAP32[$399 + 16 >> 2] = HEAP32[$35 + 16 >> 2] | 0;
            HEAP32[$399 + 20 >> 2] = HEAP32[$35 + 20 >> 2] | 0;
            HEAP32[$399 + 24 >> 2] = HEAP32[$35 + 24 >> 2] | 0;
            HEAP32[$399 + 28 >> 2] = HEAP32[$35 + 28 >> 2] | 0;
            HEAP8[$399 + 32 >> 0] = HEAP8[$35 + 32 >> 0] | 0;
            HEAP32[$398 >> 2] = $400;
            if ($401) {
              $$02023$i254 = $11;
              $$02122$i255 = $10;
              $$024$i253 = 33;
              while (1) {
                $562 = (($399) + ($$024$i253) | 0);
                $563 = (64 - ($$024$i253)) | 0;
                _memcpy(($562 | 0), ($$02122$i255 | 0), ($563 | 0)) | 0;
                $564 = (($$02122$i255) + ($563) | 0);
                $565 = (($$02023$i254) - ($563)) | 0;
                _secp256k1_sha256_transform($17, $399);
                $566 = ($565 >>> 0) > (63);
                if ($566) {
                  $$02023$i254 = $565;
                  $$02122$i255 = $564;
                  $$024$i253 = 0;
                } else {
                  $$0$lcssa$i258 = 0;
                  $$020$lcssa$i257 = $565;
                  $$021$lcssa$i256 = $564;
                  break;
                }
              }
            } else {
              $$0$lcssa$i258 = 33;
              $$020$lcssa$i257 = $11;
              $$021$lcssa$i256 = $10;
            }
            $567 = ($$020$lcssa$i257 | 0) == (0);
            if (!($567)) {
              $568 = (($399) + ($$0$lcssa$i258) | 0);
              _memcpy(($568 | 0), ($$021$lcssa$i256 | 0), ($$020$lcssa$i257 | 0)) | 0;
            }
            $569 = HEAP32[$398 >> 2] | 0;
            $570 = $569 & 63;
            $571 = (($569) + 4) | 0;
            HEAP32[$398 >> 2] = $571;
            $572 = (($570) + 4) | 0;
            $573 = ($572 >>> 0) > (63);
            if ($573) {
              $$02023$i209 = 4;
              $$02122$i210 = $15;
              $$024$i208 = $570;
              while (1) {
                $574 = (($399) + ($$024$i208) | 0);
                $575 = (64 - ($$024$i208)) | 0;
                _memcpy(($574 | 0), ($$02122$i210 | 0), ($575 | 0)) | 0;
                $576 = (($$02122$i210) + ($575) | 0);
                $577 = (($$02023$i209) - ($575)) | 0;
                _secp256k1_sha256_transform($17, $399);
                $578 = ($577 >>> 0) > (63);
                if ($578) {
                  $$02023$i209 = $577;
                  $$02122$i210 = $576;
                  $$024$i208 = 0;
                } else {
                  break;
                }
              }
              $579 = ($577 | 0) == (0);
              if (!($579)) {
                $$0$lcssa$i213379 = 0;
                $$020$lcssa$i212378 = $577;
                $$021$lcssa$i211377 = $576;
                label = 94;
              }
            } else {
              $$0$lcssa$i213379 = $570;
              $$020$lcssa$i212378 = 4;
              $$021$lcssa$i211377 = $15;
              label = 94;
            }
            if ((label | 0) == 94) {
              label = 0;
              $580 = (($399) + ($$0$lcssa$i213379) | 0);
              _memcpy(($580 | 0), ($$021$lcssa$i211377 | 0), ($$020$lcssa$i212378 | 0)) | 0;
            }
            $581 = HEAP32[$398 >> 2] | 0;
            $582 = $581 & 63;
            $583 = (($581) + 4) | 0;
            HEAP32[$398 >> 2] = $583;
            $584 = (($582) + 4) | 0;
            $585 = ($584 >>> 0) > (63);
            if ($585) {
              $$02023$i200 = 4;
              $$02122$i201 = $16;
              $$024$i199 = $582;
              while (1) {
                $586 = (($399) + ($$024$i199) | 0);
                $587 = (64 - ($$024$i199)) | 0;
                _memcpy(($586 | 0), ($$02122$i201 | 0), ($587 | 0)) | 0;
                $588 = (($$02122$i201) + ($587) | 0);
                $589 = (($$02023$i200) - ($587)) | 0;
                _secp256k1_sha256_transform($17, $399);
                $590 = ($589 >>> 0) > (63);
                if ($590) {
                  $$02023$i200 = $589;
                  $$02122$i201 = $588;
                  $$024$i199 = 0;
                } else {
                  break;
                }
              }
              $591 = ($589 | 0) == (0);
              if (!($591)) {
                $$0$lcssa$i204382 = 0;
                $$020$lcssa$i203381 = $589;
                $$021$lcssa$i202380 = $588;
                label = 98;
              }
            } else {
              $$0$lcssa$i204382 = $582;
              $$020$lcssa$i203381 = 4;
              $$021$lcssa$i202380 = $16;
              label = 98;
            }
            if ((label | 0) == 98) {
              label = 0;
              $592 = (($399) + ($$0$lcssa$i204382) | 0);
              _memcpy(($592 | 0), ($$021$lcssa$i202380 | 0), ($$020$lcssa$i203381 | 0)) | 0;
            }
            $593 = HEAP32[$398 >> 2] | 0;
            $594 = $593 >>> 29;
            $595 = $594 << 24;
            HEAP32[$12 >> 2] = $595;
            $596 = $593 << 27;
            $597 = $593 << 11;
            $598 = $597 & 16711680;
            $599 = $598 | $596;
            $600 = $593 >>> 5;
            $601 = $600 & 65280;
            $602 = $599 | $601;
            $603 = $593 >>> 21;
            $604 = $603 & 255;
            $605 = $602 | $604;
            HEAP32[$402 >> 2] = $605;
            $606 = (119 - ($593)) | 0;
            $607 = $606 & 63;
            $608 = (($607) + 1) | 0;
            $609 = $593 & 63;
            $610 = (($593) + ($608)) | 0;
            HEAP32[$398 >> 2] = $610;
            $611 = (($609) + ($608)) | 0;
            $612 = ($611 >>> 0) > (63);
            if ($612) {
              $$02023$i281 = $608;
              $$02122$i282 = 1612;
              $$024$i280 = $609;
              while (1) {
                $613 = (($399) + ($$024$i280) | 0);
                $614 = (64 - ($$024$i280)) | 0;
                _memcpy(($613 | 0), ($$02122$i282 | 0), ($614 | 0)) | 0;
                $615 = (($$02122$i282) + ($614) | 0);
                $616 = (($$02023$i281) - ($614)) | 0;
                _secp256k1_sha256_transform($17, $399);
                $617 = ($616 >>> 0) > (63);
                if ($617) {
                  $$02023$i281 = $616;
                  $$02122$i282 = $615;
                  $$024$i280 = 0;
                } else {
                  break;
                }
              }
              $618 = ($616 | 0) == (0);
              if (!($618)) {
                $$0$lcssa$i285385 = 0;
                $$020$lcssa$i284384 = $616;
                $$021$lcssa$i283383 = $615;
                label = 102;
              }
            } else {
              $$0$lcssa$i285385 = $609;
              $$020$lcssa$i284384 = $608;
              $$021$lcssa$i283383 = 1612;
              label = 102;
            }
            if ((label | 0) == 102) {
              label = 0;
              $619 = (($399) + ($$0$lcssa$i285385) | 0);
              _memcpy(($619 | 0), ($$021$lcssa$i283383 | 0), ($$020$lcssa$i284384 | 0)) | 0;
            }
            $620 = HEAP32[$398 >> 2] | 0;
            $621 = $620 & 63;
            $622 = (($620) + 8) | 0;
            HEAP32[$398 >> 2] = $622;
            $623 = (($621) + 8) | 0;
            $624 = ($623 >>> 0) > (63);
            if ($624) {
              $$02023$i245 = 8;
              $$02122$i246 = $12;
              $$024$i244 = $621;
              while (1) {
                $625 = (($399) + ($$024$i244) | 0);
                $626 = (64 - ($$024$i244)) | 0;
                _memcpy(($625 | 0), ($$02122$i246 | 0), ($626 | 0)) | 0;
                $627 = (($$02122$i246) + ($626) | 0);
                $628 = (($$02023$i245) - ($626)) | 0;
                _secp256k1_sha256_transform($17, $399);
                $629 = ($628 >>> 0) > (63);
                if ($629) {
                  $$02023$i245 = $628;
                  $$02122$i246 = $627;
                  $$024$i244 = 0;
                } else {
                  break;
                }
              }
              $630 = ($628 | 0) == (0);
              if (!($630)) {
                $$0$lcssa$i249388 = 0;
                $$020$lcssa$i248387 = $628;
                $$021$lcssa$i247386 = $627;
                label = 106;
              }
            } else {
              $$0$lcssa$i249388 = $621;
              $$020$lcssa$i248387 = 8;
              $$021$lcssa$i247386 = $12;
              label = 106;
            }
            if ((label | 0) == 106) {
              label = 0;
              $631 = (($399) + ($$0$lcssa$i249388) | 0);
              _memcpy(($631 | 0), ($$021$lcssa$i247386 | 0), ($$020$lcssa$i248387 | 0)) | 0;
            }
            $632 = HEAP32[$17 >> 2] | 0;
            $633 = (_llvm_bswap_i32(($632 | 0)) | 0);
            HEAP32[$17 >> 2] = 0;
            $634 = HEAP32[$391 >> 2] | 0;
            $635 = (_llvm_bswap_i32(($634 | 0)) | 0);
            HEAP32[$391 >> 2] = 0;
            $636 = HEAP32[$392 >> 2] | 0;
            $637 = (_llvm_bswap_i32(($636 | 0)) | 0);
            HEAP32[$392 >> 2] = 0;
            $638 = HEAP32[$393 >> 2] | 0;
            $639 = (_llvm_bswap_i32(($638 | 0)) | 0);
            HEAP32[$393 >> 2] = 0;
            $640 = HEAP32[$394 >> 2] | 0;
            $641 = (_llvm_bswap_i32(($640 | 0)) | 0);
            HEAP32[$394 >> 2] = 0;
            $642 = HEAP32[$395 >> 2] | 0;
            $643 = (_llvm_bswap_i32(($642 | 0)) | 0);
            HEAP32[$395 >> 2] = 0;
            $644 = HEAP32[$396 >> 2] | 0;
            $645 = (_llvm_bswap_i32(($644 | 0)) | 0);
            HEAP32[$396 >> 2] = 0;
            $646 = HEAP32[$397 >> 2] | 0;
            $647 = (_llvm_bswap_i32(($646 | 0)) | 0);
            HEAP32[$35 >> 2] = $633;
            HEAP32[$$sroa$4315$0$$sroa_idx >> 2] = $635;
            HEAP32[$$sroa$5317$0$$sroa_idx >> 2] = $637;
            HEAP32[$$sroa$6319$0$$sroa_idx >> 2] = $639;
            HEAP32[$$sroa$7321$0$$sroa_idx >> 2] = $641;
            HEAP32[$$sroa$8323$0$$sroa_idx >> 2] = $643;
            HEAP32[$$sroa$9325$0$$sroa_idx >> 2] = $645;
            HEAP32[$$sroa$10327$0$$sroa_idx >> 2] = $647;
            _secp256k1_scalar_set_b32($33, $35, $36);
            $648 = HEAP32[$36 >> 2] | 0;
            $649 = ($648 | 0) == (0);
            if (!($649)) {
              $$0102 = 0;
              label = 112;
              break L97;
            }
            $650 = HEAP32[$33 >> 2] | 0;
            $651 = HEAP32[$378 >> 2] | 0;
            $652 = $651 | $650;
            $653 = HEAP32[$379 >> 2] | 0;
            $654 = $652 | $653;
            $655 = HEAP32[$380 >> 2] | 0;
            $656 = $654 | $655;
            $657 = HEAP32[$381 >> 2] | 0;
            $658 = $656 | $657;
            $659 = HEAP32[$382 >> 2] | 0;
            $660 = $658 | $659;
            $661 = HEAP32[$383 >> 2] | 0;
            $662 = $660 | $661;
            $663 = HEAP32[$384 >> 2] | 0;
            $664 = $662 | $663;
            $665 = ($664 | 0) == (0);
            if ($665) {
              $$0102 = 0;
              label = 112;
              break L97;
            } else {
              $$199 = $560;
            }
          }
          $666 = (($3) + ($516 << 5) | 0);
          $667 = (($6) + ($$1101434 << 5) | 0);
          _secp256k1_scalar_mul($666, $33, $667);
          _secp256k1_scalar_negate($666, $666);
          $668 = (($5) + ($$1101434 << 5) | 0);
          _secp256k1_scalar_add($666, $666, $668);
          $669 = HEAP32[$666 >> 2] | 0;
          $670 = (((($3) + ($516 << 5) | 0)) + 4 | 0);
          $671 = HEAP32[$670 >> 2] | 0;
          $672 = $671 | $669;
          $673 = (((($3) + ($516 << 5) | 0)) + 8 | 0);
          $674 = HEAP32[$673 >> 2] | 0;
          $675 = $672 | $674;
          $676 = (((($3) + ($516 << 5) | 0)) + 12 | 0);
          $677 = HEAP32[$676 >> 2] | 0;
          $678 = $675 | $677;
          $679 = (((($3) + ($516 << 5) | 0)) + 16 | 0);
          $680 = HEAP32[$679 >> 2] | 0;
          $681 = $678 | $680;
          $682 = (((($3) + ($516 << 5) | 0)) + 20 | 0);
          $683 = HEAP32[$682 >> 2] | 0;
          $684 = $681 | $683;
          $685 = (((($3) + ($516 << 5) | 0)) + 24 | 0);
          $686 = HEAP32[$685 >> 2] | 0;
          $687 = $684 | $686;
          $688 = (((($3) + ($516 << 5) | 0)) + 28 | 0);
          $689 = HEAP32[$688 >> 2] | 0;
          $690 = $687 | $689;
          $691 = ($690 | 0) == (0);
          if ($691) {
            $$0102 = 0;
            label = 112;
            break;
          }
          $692 = HEAP32[$404 >> 2] | 0;
          $693 = (($692) + ($$1435)) | 0;
          $694 = (($$1101434) + 1) | 0;
          $695 = ($694 | 0) < ($9 | 0);
          if ($695) {
            $$1101434 = $694;
            $$1435 = $693;
          } else {
            break L95;
          }
        }
        if ((label | 0) == 59) {
          $407 = HEAP32[125] | 0;
          HEAP32[$vararg_buffer3 >> 2] = 639;
          $vararg_ptr6 = ((($vararg_buffer3)) + 4 | 0);
          HEAP32[$vararg_ptr6 >> 2] = 166;
          $vararg_ptr7 = ((($vararg_buffer3)) + 8 | 0);
          HEAP32[$vararg_ptr7 >> 2] = 662;
          (_fprintf($407, 628, $vararg_buffer3) | 0);
          _abort();
          // unreachable;
        }
        else if ((label | 0) == 112) {
          STACKTOP = sp;
          return ($$0102 | 0);
        }
      }
    } while (0);
    ;HEAP32[$33 >> 2] = 0 | 0;
    HEAP32[$33 + 4 >> 2] = 0 | 0;
    HEAP32[$33 + 8 >> 2] = 0 | 0;
    HEAP32[$33 + 12 >> 2] = 0 | 0;
    HEAP32[$33 + 16 >> 2] = 0 | 0;
    HEAP32[$33 + 20 >> 2] = 0 | 0;
    HEAP32[$33 + 24 >> 2] = 0 | 0;
    HEAP32[$33 + 28 >> 2] = 0 | 0;
    dest = $32;
    stop = dest + 84 | 0;
    do {
      HEAP32[dest >> 2] = 0 | 0;
      dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $31;
    stop = dest + 124 | 0;
    do {
      HEAP32[dest >> 2] = 0 | 0;
      dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    ;HEAP32[$35 >> 2] = 0 | 0;
    HEAP32[$35 + 4 >> 2] = 0 | 0;
    HEAP32[$35 + 8 >> 2] = 0 | 0;
    HEAP32[$35 + 12 >> 2] = 0 | 0;
    HEAP32[$35 + 16 >> 2] = 0 | 0;
    HEAP32[$35 + 20 >> 2] = 0 | 0;
    HEAP32[$35 + 24 >> 2] = 0 | 0;
    HEAP32[$35 + 28 >> 2] = 0 | 0;
    HEAP8[$35 + 32 >> 0] = 0 | 0;
    $$0102 = 1;
    STACKTOP = sp;
    return ($$0102 | 0);
  }

  function _secp256k1_ecmult_gen($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$0104 = 0, $$02087 = 0, $$sroa$0$0103 = 0, $$sroa$0$186 = 0, $$sroa$11$0101 = 0, $$sroa$11$184 = 0,
      $$sroa$15$0100 = 0, $$sroa$15$183 = 0, $$sroa$19$099 = 0, $$sroa$19$182 = 0, $$sroa$24$098 = 0, $$sroa$24$181 = 0,
      $$sroa$28$097 = 0, $$sroa$28$180 = 0, $$sroa$32$096 = 0, $$sroa$32$179 = 0, $$sroa$36$095 = 0, $$sroa$36$178 = 0,
      $$sroa$40$094 = 0, $$sroa$40$177 = 0;
    var $$sroa$44$093 = 0, $$sroa$44$176 = 0, $$sroa$48$092 = 0, $$sroa$48$175 = 0, $$sroa$52$091 = 0,
      $$sroa$52$174 = 0, $$sroa$57$090 = 0, $$sroa$57$173 = 0, $$sroa$61$089 = 0, $$sroa$61$172 = 0, $$sroa$65$088 = 0,
      $$sroa$65$171 = 0, $$sroa$7$0102 = 0, $$sroa$7$185 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
    var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0,
      $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
    var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0,
      $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
    var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0,
      $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
    var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0,
      $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
    var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0,
      $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
    var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0,
      $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
    var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0,
      $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
    var $98 = 0, $99 = 0, $exitcond = 0, $exitcond120 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 128 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128 | 0);
    $3 = sp + 32 | 0;
    $4 = sp;
    $5 = ((($0)) + 36 | 0);
    dest = $1;
    src = $5;
    stop = dest + 124 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $6 = ((($0)) + 4 | 0);
    _secp256k1_scalar_add($4, $2, $6);
    $7 = ((($3)) + 80 | 0);
    HEAP32[$7 >> 2] = 0;
    $8 = ((($3)) + 4 | 0);
    $9 = ((($3)) + 8 | 0);
    $10 = ((($3)) + 12 | 0);
    $11 = ((($3)) + 16 | 0);
    $12 = ((($3)) + 20 | 0);
    $13 = ((($3)) + 24 | 0);
    $14 = ((($3)) + 28 | 0);
    $15 = ((($3)) + 32 | 0);
    $16 = ((($3)) + 36 | 0);
    $17 = ((($3)) + 40 | 0);
    $18 = ((($3)) + 44 | 0);
    $19 = ((($3)) + 48 | 0);
    $20 = ((($3)) + 52 | 0);
    $21 = ((($3)) + 56 | 0);
    $22 = ((($3)) + 60 | 0);
    $23 = ((($3)) + 64 | 0);
    $24 = ((($3)) + 68 | 0);
    $25 = ((($3)) + 72 | 0);
    $26 = ((($3)) + 76 | 0);
    $$0104 = 0;
    $$sroa$0$0103 = 0;
    $$sroa$11$0101 = 0;
    $$sroa$15$0100 = 0;
    $$sroa$19$099 = 0;
    $$sroa$24$098 = 0;
    $$sroa$28$097 = 0;
    $$sroa$32$096 = 0;
    $$sroa$36$095 = 0;
    $$sroa$40$094 = 0;
    $$sroa$44$093 = 0;
    $$sroa$48$092 = 0;
    $$sroa$52$091 = 0;
    $$sroa$57$090 = 0;
    $$sroa$61$089 = 0;
    $$sroa$65$088 = 0;
    $$sroa$7$0102 = 0;
    while (1) {
      $27 = $$0104 << 2;
      $28 = $$0104 >>> 3;
      $29 = $28 & 134217727;
      $30 = (($4) + ($29 << 2) | 0);
      $31 = HEAP32[$30 >> 2] | 0;
      $32 = $27 & 28;
      $33 = $31 >>> $32;
      $34 = $33 & 15;
      $35 = HEAP32[$0 >> 2] | 0;
      $$02087 = 0;
      $$sroa$0$186 = $$sroa$0$0103;
      $$sroa$11$184 = $$sroa$11$0101;
      $$sroa$15$183 = $$sroa$15$0100;
      $$sroa$19$182 = $$sroa$19$099;
      $$sroa$24$181 = $$sroa$24$098;
      $$sroa$28$180 = $$sroa$28$097;
      $$sroa$32$179 = $$sroa$32$096;
      $$sroa$36$178 = $$sroa$36$095;
      $$sroa$40$177 = $$sroa$40$094;
      $$sroa$44$176 = $$sroa$44$093;
      $$sroa$48$175 = $$sroa$48$092;
      $$sroa$52$174 = $$sroa$52$091;
      $$sroa$57$173 = $$sroa$57$090;
      $$sroa$61$172 = $$sroa$61$089;
      $$sroa$65$171 = $$sroa$65$088;
      $$sroa$7$185 = $$sroa$7$0102;
      while (1) {
        $36 = ($$02087 | 0) == ($34 | 0);
        $37 = ((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0);
        $38 = HEAP32[$37 >> 2] | 0;
        $39 = $36 ? $38 : $$sroa$0$186;
        $40 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 4 | 0);
        $41 = HEAP32[$40 >> 2] | 0;
        $42 = $36 ? $41 : $$sroa$7$185;
        $43 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 8 | 0);
        $44 = HEAP32[$43 >> 2] | 0;
        $45 = $36 ? $44 : $$sroa$11$184;
        $46 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 12 | 0);
        $47 = HEAP32[$46 >> 2] | 0;
        $48 = $36 ? $47 : $$sroa$15$183;
        $49 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 16 | 0);
        $50 = HEAP32[$49 >> 2] | 0;
        $51 = $36 ? $50 : $$sroa$19$182;
        $52 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 20 | 0);
        $53 = HEAP32[$52 >> 2] | 0;
        $54 = $36 ? $53 : $$sroa$24$181;
        $55 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 24 | 0);
        $56 = HEAP32[$55 >> 2] | 0;
        $57 = $36 ? $56 : $$sroa$28$180;
        $58 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 28 | 0);
        $59 = HEAP32[$58 >> 2] | 0;
        $60 = $36 ? $59 : $$sroa$32$179;
        $61 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 32 | 0);
        $62 = HEAP32[$61 >> 2] | 0;
        $63 = $36 ? $62 : $$sroa$36$178;
        $64 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 36 | 0);
        $65 = HEAP32[$64 >> 2] | 0;
        $66 = $36 ? $65 : $$sroa$40$177;
        $67 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 40 | 0);
        $68 = HEAP32[$67 >> 2] | 0;
        $69 = $36 ? $68 : $$sroa$44$176;
        $70 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 44 | 0);
        $71 = HEAP32[$70 >> 2] | 0;
        $72 = $36 ? $71 : $$sroa$48$175;
        $73 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 48 | 0);
        $74 = HEAP32[$73 >> 2] | 0;
        $75 = $36 ? $74 : $$sroa$52$174;
        $76 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 52 | 0);
        $77 = HEAP32[$76 >> 2] | 0;
        $78 = $36 ? $77 : $$sroa$57$173;
        $79 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 56 | 0);
        $80 = HEAP32[$79 >> 2] | 0;
        $81 = $36 ? $80 : $$sroa$61$172;
        $82 = ((((($35) + ($$0104 << 10) | 0) + ($$02087 << 6) | 0)) + 60 | 0);
        $83 = HEAP32[$82 >> 2] | 0;
        $84 = $36 ? $83 : $$sroa$65$171;
        $85 = (($$02087) + 1) | 0;
        $exitcond = ($85 | 0) == (16);
        if ($exitcond) {
          break;
        } else {
          $$02087 = $85;
          $$sroa$0$186 = $39;
          $$sroa$11$184 = $45;
          $$sroa$15$183 = $48;
          $$sroa$19$182 = $51;
          $$sroa$24$181 = $54;
          $$sroa$28$180 = $57;
          $$sroa$32$179 = $60;
          $$sroa$36$178 = $63;
          $$sroa$40$177 = $66;
          $$sroa$44$176 = $69;
          $$sroa$48$175 = $72;
          $$sroa$52$174 = $75;
          $$sroa$57$173 = $78;
          $$sroa$61$172 = $81;
          $$sroa$65$171 = $84;
          $$sroa$7$185 = $42;
        }
      }
      $86 = $39 & 67108863;
      HEAP32[$3 >> 2] = $86;
      $87 = $39 >>> 26;
      $88 = $42 << 6;
      $89 = $88 & 67108800;
      $90 = $89 | $87;
      HEAP32[$8 >> 2] = $90;
      $91 = $42 >>> 20;
      $92 = $45 << 12;
      $93 = $92 & 67104768;
      $94 = $93 | $91;
      HEAP32[$9 >> 2] = $94;
      $95 = $45 >>> 14;
      $96 = $48 << 18;
      $97 = $96 & 66846720;
      $98 = $97 | $95;
      HEAP32[$10 >> 2] = $98;
      $99 = $48 >>> 8;
      $100 = $51 << 24;
      $101 = $100 & 50331648;
      $102 = $101 | $99;
      HEAP32[$11 >> 2] = $102;
      $103 = $51 >>> 2;
      $104 = $103 & 67108863;
      HEAP32[$12 >> 2] = $104;
      $105 = $51 >>> 28;
      $106 = $54 << 4;
      $107 = $106 & 67108848;
      $108 = $107 | $105;
      HEAP32[$13 >> 2] = $108;
      $109 = $54 >>> 22;
      $110 = $57 << 10;
      $111 = $110 & 67107840;
      $112 = $111 | $109;
      HEAP32[$14 >> 2] = $112;
      $113 = $57 >>> 16;
      $114 = $60 << 16;
      $115 = $114 & 67043328;
      $116 = $115 | $113;
      HEAP32[$15 >> 2] = $116;
      $117 = $60 >>> 10;
      HEAP32[$16 >> 2] = $117;
      $118 = $63 & 67108863;
      HEAP32[$17 >> 2] = $118;
      $119 = $63 >>> 26;
      $120 = $66 << 6;
      $121 = $120 & 67108800;
      $122 = $121 | $119;
      HEAP32[$18 >> 2] = $122;
      $123 = $66 >>> 20;
      $124 = $69 << 12;
      $125 = $124 & 67104768;
      $126 = $125 | $123;
      HEAP32[$19 >> 2] = $126;
      $127 = $69 >>> 14;
      $128 = $72 << 18;
      $129 = $128 & 66846720;
      $130 = $129 | $127;
      HEAP32[$20 >> 2] = $130;
      $131 = $72 >>> 8;
      $132 = $75 << 24;
      $133 = $132 & 50331648;
      $134 = $133 | $131;
      HEAP32[$21 >> 2] = $134;
      $135 = $75 >>> 2;
      $136 = $135 & 67108863;
      HEAP32[$22 >> 2] = $136;
      $137 = $75 >>> 28;
      $138 = $78 << 4;
      $139 = $138 & 67108848;
      $140 = $139 | $137;
      HEAP32[$23 >> 2] = $140;
      $141 = $78 >>> 22;
      $142 = $81 << 10;
      $143 = $142 & 67107840;
      $144 = $143 | $141;
      HEAP32[$24 >> 2] = $144;
      $145 = $81 >>> 16;
      $146 = $84 << 16;
      $147 = $146 & 67043328;
      $148 = $147 | $145;
      HEAP32[$25 >> 2] = $148;
      $149 = $84 >>> 10;
      HEAP32[$26 >> 2] = $149;
      HEAP32[$7 >> 2] = 0;
      _secp256k1_gej_add_ge($1, $1, $3);
      $150 = (($$0104) + 1) | 0;
      $exitcond120 = ($150 | 0) == (64);
      if ($exitcond120) {
        break;
      } else {
        $$0104 = $150;
        $$sroa$0$0103 = $39;
        $$sroa$11$0101 = $45;
        $$sroa$15$0100 = $48;
        $$sroa$19$099 = $51;
        $$sroa$24$098 = $54;
        $$sroa$28$097 = $57;
        $$sroa$32$096 = $60;
        $$sroa$36$095 = $63;
        $$sroa$40$094 = $66;
        $$sroa$44$093 = $69;
        $$sroa$48$092 = $72;
        $$sroa$52$091 = $75;
        $$sroa$57$090 = $78;
        $$sroa$61$089 = $81;
        $$sroa$65$088 = $84;
        $$sroa$7$0102 = $42;
      }
    }
    STACKTOP = sp;
    return;
  }

  function _secp256k1_scalar_mul($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0,
      $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
    var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0,
      $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
    var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0,
      $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
    var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0,
      $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
    var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0,
      $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
    var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0,
      $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
    var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0,
      $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
    var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0,
      $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
    var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0,
      $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
    var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0,
      $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
    var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0,
      $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
    var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0,
      $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
    var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0,
      $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
    var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0,
      $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
    var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0,
      $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
    var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0,
      $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
    var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0,
      $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
    var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0,
      $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
    var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0,
      $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
    var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0,
      $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
    var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0,
      $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
    var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0,
      $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
    var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0,
      $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
    var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0,
      $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
    var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0,
      $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
    var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0,
      $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
    var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0,
      $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
    var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0,
      $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
    var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0,
      $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
    var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0,
      $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
    var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0,
      $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
    var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0,
      $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
    var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0,
      $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
    var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0,
      $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
    var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0,
      $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
    var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0,
      $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
    var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 64 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $3 = sp;
    $4 = HEAP32[$1 >> 2] | 0;
    $5 = HEAP32[$2 >> 2] | 0;
    $6 = (___muldi3(($5 | 0), 0, ($4 | 0), 0) | 0);
    $7 = tempRet0;
    HEAP32[$3 >> 2] = $6;
    $8 = ((($2)) + 4 | 0);
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = (___muldi3(($9 | 0), 0, ($4 | 0), 0) | 0);
    $11 = tempRet0;
    $12 = (($10) + ($7)) | 0;
    $13 = ($12 >>> 0) < ($10 >>> 0);
    $14 = $13 & 1;
    $15 = (($14) + ($11)) | 0;
    $16 = ((($1)) + 4 | 0);
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = (___muldi3(($5 | 0), 0, ($17 | 0), 0) | 0);
    $19 = tempRet0;
    $20 = (($18) + ($12)) | 0;
    $21 = ($20 >>> 0) < ($18 >>> 0);
    $22 = $21 & 1;
    $23 = (($22) + ($19)) | 0;
    $24 = (($15) + ($23)) | 0;
    $25 = ($24 >>> 0) < ($23 >>> 0);
    $26 = $25 & 1;
    $27 = ((($3)) + 4 | 0);
    HEAP32[$27 >> 2] = $20;
    $28 = ((($2)) + 8 | 0);
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = (___muldi3(($29 | 0), 0, ($4 | 0), 0) | 0);
    $31 = tempRet0;
    $32 = (($24) + ($30)) | 0;
    $33 = ($32 >>> 0) < ($30 >>> 0);
    $34 = $33 & 1;
    $35 = (($34) + ($31)) | 0;
    $36 = (($35) + ($26)) | 0;
    $37 = ($36 >>> 0) < ($35 >>> 0);
    $38 = $37 & 1;
    $39 = (___muldi3(($9 | 0), 0, ($17 | 0), 0) | 0);
    $40 = tempRet0;
    $41 = (($32) + ($39)) | 0;
    $42 = ($41 >>> 0) < ($39 >>> 0);
    $43 = $42 & 1;
    $44 = (($43) + ($40)) | 0;
    $45 = (($36) + ($44)) | 0;
    $46 = ($45 >>> 0) < ($44 >>> 0);
    $47 = $46 & 1;
    $48 = (($47) + ($38)) | 0;
    $49 = ((($1)) + 8 | 0);
    $50 = HEAP32[$49 >> 2] | 0;
    $51 = (___muldi3(($5 | 0), 0, ($50 | 0), 0) | 0);
    $52 = tempRet0;
    $53 = (($41) + ($51)) | 0;
    $54 = ($53 >>> 0) < ($51 >>> 0);
    $55 = $54 & 1;
    $56 = (($55) + ($52)) | 0;
    $57 = (($45) + ($56)) | 0;
    $58 = ($57 >>> 0) < ($56 >>> 0);
    $59 = $58 & 1;
    $60 = (($48) + ($59)) | 0;
    $61 = ((($3)) + 8 | 0);
    HEAP32[$61 >> 2] = $53;
    $62 = ((($2)) + 12 | 0);
    $63 = HEAP32[$62 >> 2] | 0;
    $64 = (___muldi3(($63 | 0), 0, ($4 | 0), 0) | 0);
    $65 = tempRet0;
    $66 = (($57) + ($64)) | 0;
    $67 = ($66 >>> 0) < ($64 >>> 0);
    $68 = $67 & 1;
    $69 = (($68) + ($65)) | 0;
    $70 = (($60) + ($69)) | 0;
    $71 = ($70 >>> 0) < ($69 >>> 0);
    $72 = $71 & 1;
    $73 = (___muldi3(($29 | 0), 0, ($17 | 0), 0) | 0);
    $74 = tempRet0;
    $75 = (($66) + ($73)) | 0;
    $76 = ($75 >>> 0) < ($73 >>> 0);
    $77 = $76 & 1;
    $78 = (($77) + ($74)) | 0;
    $79 = (($70) + ($78)) | 0;
    $80 = ($79 >>> 0) < ($78 >>> 0);
    $81 = $80 & 1;
    $82 = (($81) + ($72)) | 0;
    $83 = (___muldi3(($9 | 0), 0, ($50 | 0), 0) | 0);
    $84 = tempRet0;
    $85 = (($75) + ($83)) | 0;
    $86 = ($85 >>> 0) < ($83 >>> 0);
    $87 = $86 & 1;
    $88 = (($87) + ($84)) | 0;
    $89 = (($79) + ($88)) | 0;
    $90 = ($89 >>> 0) < ($88 >>> 0);
    $91 = $90 & 1;
    $92 = (($82) + ($91)) | 0;
    $93 = ((($1)) + 12 | 0);
    $94 = HEAP32[$93 >> 2] | 0;
    $95 = HEAP32[$2 >> 2] | 0;
    $96 = (___muldi3(($95 | 0), 0, ($94 | 0), 0) | 0);
    $97 = tempRet0;
    $98 = (($96) + ($85)) | 0;
    $99 = ($98 >>> 0) < ($96 >>> 0);
    $100 = $99 & 1;
    $101 = (($100) + ($97)) | 0;
    $102 = (($101) + ($89)) | 0;
    $103 = ($102 >>> 0) < ($101 >>> 0);
    $104 = $103 & 1;
    $105 = (($92) + ($104)) | 0;
    $106 = ((($3)) + 12 | 0);
    HEAP32[$106 >> 2] = $98;
    $107 = HEAP32[$1 >> 2] | 0;
    $108 = ((($2)) + 16 | 0);
    $109 = HEAP32[$108 >> 2] | 0;
    $110 = (___muldi3(($109 | 0), 0, ($107 | 0), 0) | 0);
    $111 = tempRet0;
    $112 = (($102) + ($110)) | 0;
    $113 = ($112 >>> 0) < ($110 >>> 0);
    $114 = $113 & 1;
    $115 = (($114) + ($111)) | 0;
    $116 = (($105) + ($115)) | 0;
    $117 = ($116 >>> 0) < ($115 >>> 0);
    $118 = $117 & 1;
    $119 = HEAP32[$16 >> 2] | 0;
    $120 = (___muldi3(($63 | 0), 0, ($119 | 0), 0) | 0);
    $121 = tempRet0;
    $122 = (($112) + ($120)) | 0;
    $123 = ($122 >>> 0) < ($120 >>> 0);
    $124 = $123 & 1;
    $125 = (($124) + ($121)) | 0;
    $126 = (($116) + ($125)) | 0;
    $127 = ($126 >>> 0) < ($125 >>> 0);
    $128 = $127 & 1;
    $129 = (($128) + ($118)) | 0;
    $130 = HEAP32[$49 >> 2] | 0;
    $131 = HEAP32[$28 >> 2] | 0;
    $132 = (___muldi3(($131 | 0), 0, ($130 | 0), 0) | 0);
    $133 = tempRet0;
    $134 = (($122) + ($132)) | 0;
    $135 = ($134 >>> 0) < ($132 >>> 0);
    $136 = $135 & 1;
    $137 = (($136) + ($133)) | 0;
    $138 = (($126) + ($137)) | 0;
    $139 = ($138 >>> 0) < ($137 >>> 0);
    $140 = $139 & 1;
    $141 = (($129) + ($140)) | 0;
    $142 = HEAP32[$8 >> 2] | 0;
    $143 = (___muldi3(($142 | 0), 0, ($94 | 0), 0) | 0);
    $144 = tempRet0;
    $145 = (($143) + ($134)) | 0;
    $146 = ($145 >>> 0) < ($143 >>> 0);
    $147 = $146 & 1;
    $148 = (($147) + ($144)) | 0;
    $149 = (($148) + ($138)) | 0;
    $150 = ($149 >>> 0) < ($148 >>> 0);
    $151 = $150 & 1;
    $152 = (($141) + ($151)) | 0;
    $153 = ((($1)) + 16 | 0);
    $154 = HEAP32[$153 >> 2] | 0;
    $155 = (___muldi3(($95 | 0), 0, ($154 | 0), 0) | 0);
    $156 = tempRet0;
    $157 = (($155) + ($145)) | 0;
    $158 = ($157 >>> 0) < ($155 >>> 0);
    $159 = $158 & 1;
    $160 = (($159) + ($156)) | 0;
    $161 = (($160) + ($149)) | 0;
    $162 = ($161 >>> 0) < ($160 >>> 0);
    $163 = $162 & 1;
    $164 = (($152) + ($163)) | 0;
    $165 = ((($3)) + 16 | 0);
    HEAP32[$165 >> 2] = $157;
    $166 = ((($2)) + 20 | 0);
    $167 = HEAP32[$166 >> 2] | 0;
    $168 = (___muldi3(($167 | 0), 0, ($107 | 0), 0) | 0);
    $169 = tempRet0;
    $170 = (($161) + ($168)) | 0;
    $171 = ($170 >>> 0) < ($168 >>> 0);
    $172 = $171 & 1;
    $173 = (($172) + ($169)) | 0;
    $174 = (($164) + ($173)) | 0;
    $175 = ($174 >>> 0) < ($173 >>> 0);
    $176 = $175 & 1;
    $177 = (___muldi3(($109 | 0), 0, ($119 | 0), 0) | 0);
    $178 = tempRet0;
    $179 = (($170) + ($177)) | 0;
    $180 = ($179 >>> 0) < ($177 >>> 0);
    $181 = $180 & 1;
    $182 = (($181) + ($178)) | 0;
    $183 = (($174) + ($182)) | 0;
    $184 = ($183 >>> 0) < ($182 >>> 0);
    $185 = $184 & 1;
    $186 = (($185) + ($176)) | 0;
    $187 = HEAP32[$62 >> 2] | 0;
    $188 = (___muldi3(($187 | 0), 0, ($130 | 0), 0) | 0);
    $189 = tempRet0;
    $190 = (($179) + ($188)) | 0;
    $191 = ($190 >>> 0) < ($188 >>> 0);
    $192 = $191 & 1;
    $193 = (($192) + ($189)) | 0;
    $194 = (($183) + ($193)) | 0;
    $195 = ($194 >>> 0) < ($193 >>> 0);
    $196 = $195 & 1;
    $197 = (($186) + ($196)) | 0;
    $198 = HEAP32[$93 >> 2] | 0;
    $199 = (___muldi3(($131 | 0), 0, ($198 | 0), 0) | 0);
    $200 = tempRet0;
    $201 = (($199) + ($190)) | 0;
    $202 = ($201 >>> 0) < ($199 >>> 0);
    $203 = $202 & 1;
    $204 = (($203) + ($200)) | 0;
    $205 = (($204) + ($194)) | 0;
    $206 = ($205 >>> 0) < ($204 >>> 0);
    $207 = $206 & 1;
    $208 = (($197) + ($207)) | 0;
    $209 = (___muldi3(($142 | 0), 0, ($154 | 0), 0) | 0);
    $210 = tempRet0;
    $211 = (($209) + ($201)) | 0;
    $212 = ($211 >>> 0) < ($209 >>> 0);
    $213 = $212 & 1;
    $214 = (($213) + ($210)) | 0;
    $215 = (($214) + ($205)) | 0;
    $216 = ($215 >>> 0) < ($214 >>> 0);
    $217 = $216 & 1;
    $218 = (($208) + ($217)) | 0;
    $219 = ((($1)) + 20 | 0);
    $220 = HEAP32[$219 >> 2] | 0;
    $221 = HEAP32[$2 >> 2] | 0;
    $222 = (___muldi3(($221 | 0), 0, ($220 | 0), 0) | 0);
    $223 = tempRet0;
    $224 = (($222) + ($211)) | 0;
    $225 = ($224 >>> 0) < ($222 >>> 0);
    $226 = $225 & 1;
    $227 = (($226) + ($223)) | 0;
    $228 = (($227) + ($215)) | 0;
    $229 = ($228 >>> 0) < ($227 >>> 0);
    $230 = $229 & 1;
    $231 = (($218) + ($230)) | 0;
    $232 = ((($3)) + 20 | 0);
    HEAP32[$232 >> 2] = $224;
    $233 = HEAP32[$1 >> 2] | 0;
    $234 = ((($2)) + 24 | 0);
    $235 = HEAP32[$234 >> 2] | 0;
    $236 = (___muldi3(($235 | 0), 0, ($233 | 0), 0) | 0);
    $237 = tempRet0;
    $238 = (($228) + ($236)) | 0;
    $239 = ($238 >>> 0) < ($236 >>> 0);
    $240 = $239 & 1;
    $241 = (($240) + ($237)) | 0;
    $242 = (($231) + ($241)) | 0;
    $243 = ($242 >>> 0) < ($241 >>> 0);
    $244 = $243 & 1;
    $245 = HEAP32[$16 >> 2] | 0;
    $246 = HEAP32[$166 >> 2] | 0;
    $247 = (___muldi3(($246 | 0), 0, ($245 | 0), 0) | 0);
    $248 = tempRet0;
    $249 = (($238) + ($247)) | 0;
    $250 = ($249 >>> 0) < ($247 >>> 0);
    $251 = $250 & 1;
    $252 = (($251) + ($248)) | 0;
    $253 = (($242) + ($252)) | 0;
    $254 = ($253 >>> 0) < ($252 >>> 0);
    $255 = $254 & 1;
    $256 = (($255) + ($244)) | 0;
    $257 = HEAP32[$49 >> 2] | 0;
    $258 = HEAP32[$108 >> 2] | 0;
    $259 = (___muldi3(($258 | 0), 0, ($257 | 0), 0) | 0);
    $260 = tempRet0;
    $261 = (($249) + ($259)) | 0;
    $262 = ($261 >>> 0) < ($259 >>> 0);
    $263 = $262 & 1;
    $264 = (($263) + ($260)) | 0;
    $265 = (($253) + ($264)) | 0;
    $266 = ($265 >>> 0) < ($264 >>> 0);
    $267 = $266 & 1;
    $268 = (($256) + ($267)) | 0;
    $269 = HEAP32[$62 >> 2] | 0;
    $270 = (___muldi3(($269 | 0), 0, ($198 | 0), 0) | 0);
    $271 = tempRet0;
    $272 = (($270) + ($261)) | 0;
    $273 = ($272 >>> 0) < ($270 >>> 0);
    $274 = $273 & 1;
    $275 = (($274) + ($271)) | 0;
    $276 = (($275) + ($265)) | 0;
    $277 = ($276 >>> 0) < ($275 >>> 0);
    $278 = $277 & 1;
    $279 = (($268) + ($278)) | 0;
    $280 = HEAP32[$153 >> 2] | 0;
    $281 = HEAP32[$28 >> 2] | 0;
    $282 = (___muldi3(($281 | 0), 0, ($280 | 0), 0) | 0);
    $283 = tempRet0;
    $284 = (($282) + ($272)) | 0;
    $285 = ($284 >>> 0) < ($282 >>> 0);
    $286 = $285 & 1;
    $287 = (($286) + ($283)) | 0;
    $288 = (($287) + ($276)) | 0;
    $289 = ($288 >>> 0) < ($287 >>> 0);
    $290 = $289 & 1;
    $291 = (($279) + ($290)) | 0;
    $292 = HEAP32[$8 >> 2] | 0;
    $293 = (___muldi3(($292 | 0), 0, ($220 | 0), 0) | 0);
    $294 = tempRet0;
    $295 = (($293) + ($284)) | 0;
    $296 = ($295 >>> 0) < ($293 >>> 0);
    $297 = $296 & 1;
    $298 = (($297) + ($294)) | 0;
    $299 = (($298) + ($288)) | 0;
    $300 = ($299 >>> 0) < ($298 >>> 0);
    $301 = $300 & 1;
    $302 = (($291) + ($301)) | 0;
    $303 = ((($1)) + 24 | 0);
    $304 = HEAP32[$303 >> 2] | 0;
    $305 = HEAP32[$2 >> 2] | 0;
    $306 = (___muldi3(($305 | 0), 0, ($304 | 0), 0) | 0);
    $307 = tempRet0;
    $308 = (($306) + ($295)) | 0;
    $309 = ($308 >>> 0) < ($306 >>> 0);
    $310 = $309 & 1;
    $311 = (($310) + ($307)) | 0;
    $312 = (($311) + ($299)) | 0;
    $313 = ($312 >>> 0) < ($311 >>> 0);
    $314 = $313 & 1;
    $315 = (($302) + ($314)) | 0;
    $316 = ((($3)) + 24 | 0);
    HEAP32[$316 >> 2] = $308;
    $317 = HEAP32[$1 >> 2] | 0;
    $318 = ((($2)) + 28 | 0);
    $319 = HEAP32[$318 >> 2] | 0;
    $320 = (___muldi3(($319 | 0), 0, ($317 | 0), 0) | 0);
    $321 = tempRet0;
    $322 = (($312) + ($320)) | 0;
    $323 = ($322 >>> 0) < ($320 >>> 0);
    $324 = $323 & 1;
    $325 = (($324) + ($321)) | 0;
    $326 = (($315) + ($325)) | 0;
    $327 = ($326 >>> 0) < ($325 >>> 0);
    $328 = $327 & 1;
    $329 = HEAP32[$16 >> 2] | 0;
    $330 = HEAP32[$234 >> 2] | 0;
    $331 = (___muldi3(($330 | 0), 0, ($329 | 0), 0) | 0);
    $332 = tempRet0;
    $333 = (($322) + ($331)) | 0;
    $334 = ($333 >>> 0) < ($331 >>> 0);
    $335 = $334 & 1;
    $336 = (($335) + ($332)) | 0;
    $337 = (($326) + ($336)) | 0;
    $338 = ($337 >>> 0) < ($336 >>> 0);
    $339 = $338 & 1;
    $340 = (($339) + ($328)) | 0;
    $341 = HEAP32[$49 >> 2] | 0;
    $342 = HEAP32[$166 >> 2] | 0;
    $343 = (___muldi3(($342 | 0), 0, ($341 | 0), 0) | 0);
    $344 = tempRet0;
    $345 = (($333) + ($343)) | 0;
    $346 = ($345 >>> 0) < ($343 >>> 0);
    $347 = $346 & 1;
    $348 = (($347) + ($344)) | 0;
    $349 = (($337) + ($348)) | 0;
    $350 = ($349 >>> 0) < ($348 >>> 0);
    $351 = $350 & 1;
    $352 = (($340) + ($351)) | 0;
    $353 = HEAP32[$93 >> 2] | 0;
    $354 = HEAP32[$108 >> 2] | 0;
    $355 = (___muldi3(($354 | 0), 0, ($353 | 0), 0) | 0);
    $356 = tempRet0;
    $357 = (($355) + ($345)) | 0;
    $358 = ($357 >>> 0) < ($355 >>> 0);
    $359 = $358 & 1;
    $360 = (($359) + ($356)) | 0;
    $361 = (($360) + ($349)) | 0;
    $362 = ($361 >>> 0) < ($360 >>> 0);
    $363 = $362 & 1;
    $364 = (($352) + ($363)) | 0;
    $365 = HEAP32[$153 >> 2] | 0;
    $366 = HEAP32[$62 >> 2] | 0;
    $367 = (___muldi3(($366 | 0), 0, ($365 | 0), 0) | 0);
    $368 = tempRet0;
    $369 = (($367) + ($357)) | 0;
    $370 = ($369 >>> 0) < ($367 >>> 0);
    $371 = $370 & 1;
    $372 = (($371) + ($368)) | 0;
    $373 = (($372) + ($361)) | 0;
    $374 = ($373 >>> 0) < ($372 >>> 0);
    $375 = $374 & 1;
    $376 = (($364) + ($375)) | 0;
    $377 = HEAP32[$219 >> 2] | 0;
    $378 = HEAP32[$28 >> 2] | 0;
    $379 = (___muldi3(($378 | 0), 0, ($377 | 0), 0) | 0);
    $380 = tempRet0;
    $381 = (($379) + ($369)) | 0;
    $382 = ($381 >>> 0) < ($379 >>> 0);
    $383 = $382 & 1;
    $384 = (($383) + ($380)) | 0;
    $385 = (($384) + ($373)) | 0;
    $386 = ($385 >>> 0) < ($384 >>> 0);
    $387 = $386 & 1;
    $388 = (($376) + ($387)) | 0;
    $389 = HEAP32[$303 >> 2] | 0;
    $390 = HEAP32[$8 >> 2] | 0;
    $391 = (___muldi3(($390 | 0), 0, ($389 | 0), 0) | 0);
    $392 = tempRet0;
    $393 = (($391) + ($381)) | 0;
    $394 = ($393 >>> 0) < ($391 >>> 0);
    $395 = $394 & 1;
    $396 = (($395) + ($392)) | 0;
    $397 = (($396) + ($385)) | 0;
    $398 = ($397 >>> 0) < ($396 >>> 0);
    $399 = $398 & 1;
    $400 = (($388) + ($399)) | 0;
    $401 = ((($1)) + 28 | 0);
    $402 = HEAP32[$401 >> 2] | 0;
    $403 = HEAP32[$2 >> 2] | 0;
    $404 = (___muldi3(($403 | 0), 0, ($402 | 0), 0) | 0);
    $405 = tempRet0;
    $406 = (($404) + ($393)) | 0;
    $407 = ($406 >>> 0) < ($404 >>> 0);
    $408 = $407 & 1;
    $409 = (($408) + ($405)) | 0;
    $410 = (($409) + ($397)) | 0;
    $411 = ($410 >>> 0) < ($409 >>> 0);
    $412 = $411 & 1;
    $413 = (($400) + ($412)) | 0;
    $414 = ((($3)) + 28 | 0);
    HEAP32[$414 >> 2] = $406;
    $415 = HEAP32[$16 >> 2] | 0;
    $416 = HEAP32[$318 >> 2] | 0;
    $417 = (___muldi3(($416 | 0), 0, ($415 | 0), 0) | 0);
    $418 = tempRet0;
    $419 = (($410) + ($417)) | 0;
    $420 = ($419 >>> 0) < ($417 >>> 0);
    $421 = $420 & 1;
    $422 = (($421) + ($418)) | 0;
    $423 = (($413) + ($422)) | 0;
    $424 = ($423 >>> 0) < ($422 >>> 0);
    $425 = $424 & 1;
    $426 = HEAP32[$49 >> 2] | 0;
    $427 = HEAP32[$234 >> 2] | 0;
    $428 = (___muldi3(($427 | 0), 0, ($426 | 0), 0) | 0);
    $429 = tempRet0;
    $430 = (($419) + ($428)) | 0;
    $431 = ($430 >>> 0) < ($428 >>> 0);
    $432 = $431 & 1;
    $433 = (($432) + ($429)) | 0;
    $434 = (($423) + ($433)) | 0;
    $435 = ($434 >>> 0) < ($433 >>> 0);
    $436 = $435 & 1;
    $437 = (($436) + ($425)) | 0;
    $438 = HEAP32[$93 >> 2] | 0;
    $439 = HEAP32[$166 >> 2] | 0;
    $440 = (___muldi3(($439 | 0), 0, ($438 | 0), 0) | 0);
    $441 = tempRet0;
    $442 = (($430) + ($440)) | 0;
    $443 = ($442 >>> 0) < ($440 >>> 0);
    $444 = $443 & 1;
    $445 = (($444) + ($441)) | 0;
    $446 = (($434) + ($445)) | 0;
    $447 = ($446 >>> 0) < ($445 >>> 0);
    $448 = $447 & 1;
    $449 = (($437) + ($448)) | 0;
    $450 = HEAP32[$153 >> 2] | 0;
    $451 = HEAP32[$108 >> 2] | 0;
    $452 = (___muldi3(($451 | 0), 0, ($450 | 0), 0) | 0);
    $453 = tempRet0;
    $454 = (($452) + ($442)) | 0;
    $455 = ($454 >>> 0) < ($452 >>> 0);
    $456 = $455 & 1;
    $457 = (($456) + ($453)) | 0;
    $458 = (($457) + ($446)) | 0;
    $459 = ($458 >>> 0) < ($457 >>> 0);
    $460 = $459 & 1;
    $461 = (($449) + ($460)) | 0;
    $462 = HEAP32[$219 >> 2] | 0;
    $463 = HEAP32[$62 >> 2] | 0;
    $464 = (___muldi3(($463 | 0), 0, ($462 | 0), 0) | 0);
    $465 = tempRet0;
    $466 = (($464) + ($454)) | 0;
    $467 = ($466 >>> 0) < ($464 >>> 0);
    $468 = $467 & 1;
    $469 = (($468) + ($465)) | 0;
    $470 = (($469) + ($458)) | 0;
    $471 = ($470 >>> 0) < ($469 >>> 0);
    $472 = $471 & 1;
    $473 = (($461) + ($472)) | 0;
    $474 = HEAP32[$303 >> 2] | 0;
    $475 = HEAP32[$28 >> 2] | 0;
    $476 = (___muldi3(($475 | 0), 0, ($474 | 0), 0) | 0);
    $477 = tempRet0;
    $478 = (($476) + ($466)) | 0;
    $479 = ($478 >>> 0) < ($476 >>> 0);
    $480 = $479 & 1;
    $481 = (($480) + ($477)) | 0;
    $482 = (($481) + ($470)) | 0;
    $483 = ($482 >>> 0) < ($481 >>> 0);
    $484 = $483 & 1;
    $485 = (($473) + ($484)) | 0;
    $486 = HEAP32[$401 >> 2] | 0;
    $487 = HEAP32[$8 >> 2] | 0;
    $488 = (___muldi3(($487 | 0), 0, ($486 | 0), 0) | 0);
    $489 = tempRet0;
    $490 = (($488) + ($478)) | 0;
    $491 = ($490 >>> 0) < ($488 >>> 0);
    $492 = $491 & 1;
    $493 = (($492) + ($489)) | 0;
    $494 = (($493) + ($482)) | 0;
    $495 = ($494 >>> 0) < ($493 >>> 0);
    $496 = $495 & 1;
    $497 = (($485) + ($496)) | 0;
    $498 = ((($3)) + 32 | 0);
    HEAP32[$498 >> 2] = $490;
    $499 = HEAP32[$318 >> 2] | 0;
    $500 = (___muldi3(($499 | 0), 0, ($426 | 0), 0) | 0);
    $501 = tempRet0;
    $502 = (($494) + ($500)) | 0;
    $503 = ($502 >>> 0) < ($500 >>> 0);
    $504 = $503 & 1;
    $505 = (($504) + ($501)) | 0;
    $506 = (($497) + ($505)) | 0;
    $507 = ($506 >>> 0) < ($505 >>> 0);
    $508 = $507 & 1;
    $509 = HEAP32[$234 >> 2] | 0;
    $510 = (___muldi3(($509 | 0), 0, ($438 | 0), 0) | 0);
    $511 = tempRet0;
    $512 = (($502) + ($510)) | 0;
    $513 = ($512 >>> 0) < ($510 >>> 0);
    $514 = $513 & 1;
    $515 = (($514) + ($511)) | 0;
    $516 = (($506) + ($515)) | 0;
    $517 = ($516 >>> 0) < ($515 >>> 0);
    $518 = $517 & 1;
    $519 = (($518) + ($508)) | 0;
    $520 = HEAP32[$166 >> 2] | 0;
    $521 = (___muldi3(($520 | 0), 0, ($450 | 0), 0) | 0);
    $522 = tempRet0;
    $523 = (($512) + ($521)) | 0;
    $524 = ($523 >>> 0) < ($521 >>> 0);
    $525 = $524 & 1;
    $526 = (($525) + ($522)) | 0;
    $527 = (($516) + ($526)) | 0;
    $528 = ($527 >>> 0) < ($526 >>> 0);
    $529 = $528 & 1;
    $530 = (($519) + ($529)) | 0;
    $531 = HEAP32[$108 >> 2] | 0;
    $532 = (___muldi3(($531 | 0), 0, ($462 | 0), 0) | 0);
    $533 = tempRet0;
    $534 = (($532) + ($523)) | 0;
    $535 = ($534 >>> 0) < ($532 >>> 0);
    $536 = $535 & 1;
    $537 = (($536) + ($533)) | 0;
    $538 = (($537) + ($527)) | 0;
    $539 = ($538 >>> 0) < ($537 >>> 0);
    $540 = $539 & 1;
    $541 = (($530) + ($540)) | 0;
    $542 = HEAP32[$62 >> 2] | 0;
    $543 = (___muldi3(($542 | 0), 0, ($474 | 0), 0) | 0);
    $544 = tempRet0;
    $545 = (($543) + ($534)) | 0;
    $546 = ($545 >>> 0) < ($543 >>> 0);
    $547 = $546 & 1;
    $548 = (($547) + ($544)) | 0;
    $549 = (($548) + ($538)) | 0;
    $550 = ($549 >>> 0) < ($548 >>> 0);
    $551 = $550 & 1;
    $552 = (($541) + ($551)) | 0;
    $553 = HEAP32[$28 >> 2] | 0;
    $554 = (___muldi3(($553 | 0), 0, ($486 | 0), 0) | 0);
    $555 = tempRet0;
    $556 = (($554) + ($545)) | 0;
    $557 = ($556 >>> 0) < ($554 >>> 0);
    $558 = $557 & 1;
    $559 = (($558) + ($555)) | 0;
    $560 = (($559) + ($549)) | 0;
    $561 = ($560 >>> 0) < ($559 >>> 0);
    $562 = $561 & 1;
    $563 = (($552) + ($562)) | 0;
    $564 = ((($3)) + 36 | 0);
    HEAP32[$564 >> 2] = $556;
    $565 = HEAP32[$93 >> 2] | 0;
    $566 = (___muldi3(($499 | 0), 0, ($565 | 0), 0) | 0);
    $567 = tempRet0;
    $568 = (($560) + ($566)) | 0;
    $569 = ($568 >>> 0) < ($566 >>> 0);
    $570 = $569 & 1;
    $571 = (($570) + ($567)) | 0;
    $572 = (($563) + ($571)) | 0;
    $573 = ($572 >>> 0) < ($571 >>> 0);
    $574 = $573 & 1;
    $575 = HEAP32[$153 >> 2] | 0;
    $576 = (___muldi3(($509 | 0), 0, ($575 | 0), 0) | 0);
    $577 = tempRet0;
    $578 = (($568) + ($576)) | 0;
    $579 = ($578 >>> 0) < ($576 >>> 0);
    $580 = $579 & 1;
    $581 = (($580) + ($577)) | 0;
    $582 = (($572) + ($581)) | 0;
    $583 = ($582 >>> 0) < ($581 >>> 0);
    $584 = $583 & 1;
    $585 = (($584) + ($574)) | 0;
    $586 = HEAP32[$219 >> 2] | 0;
    $587 = (___muldi3(($520 | 0), 0, ($586 | 0), 0) | 0);
    $588 = tempRet0;
    $589 = (($578) + ($587)) | 0;
    $590 = ($589 >>> 0) < ($587 >>> 0);
    $591 = $590 & 1;
    $592 = (($591) + ($588)) | 0;
    $593 = (($582) + ($592)) | 0;
    $594 = ($593 >>> 0) < ($592 >>> 0);
    $595 = $594 & 1;
    $596 = (($585) + ($595)) | 0;
    $597 = HEAP32[$303 >> 2] | 0;
    $598 = (___muldi3(($531 | 0), 0, ($597 | 0), 0) | 0);
    $599 = tempRet0;
    $600 = (($598) + ($589)) | 0;
    $601 = ($600 >>> 0) < ($598 >>> 0);
    $602 = $601 & 1;
    $603 = (($602) + ($599)) | 0;
    $604 = (($603) + ($593)) | 0;
    $605 = ($604 >>> 0) < ($603 >>> 0);
    $606 = $605 & 1;
    $607 = (($596) + ($606)) | 0;
    $608 = HEAP32[$401 >> 2] | 0;
    $609 = (___muldi3(($542 | 0), 0, ($608 | 0), 0) | 0);
    $610 = tempRet0;
    $611 = (($609) + ($600)) | 0;
    $612 = ($611 >>> 0) < ($609 >>> 0);
    $613 = $612 & 1;
    $614 = (($613) + ($610)) | 0;
    $615 = (($614) + ($604)) | 0;
    $616 = ($615 >>> 0) < ($614 >>> 0);
    $617 = $616 & 1;
    $618 = (($607) + ($617)) | 0;
    $619 = ((($3)) + 40 | 0);
    HEAP32[$619 >> 2] = $611;
    $620 = HEAP32[$318 >> 2] | 0;
    $621 = (___muldi3(($620 | 0), 0, ($575 | 0), 0) | 0);
    $622 = tempRet0;
    $623 = (($615) + ($621)) | 0;
    $624 = ($623 >>> 0) < ($621 >>> 0);
    $625 = $624 & 1;
    $626 = (($625) + ($622)) | 0;
    $627 = (($618) + ($626)) | 0;
    $628 = ($627 >>> 0) < ($626 >>> 0);
    $629 = $628 & 1;
    $630 = HEAP32[$234 >> 2] | 0;
    $631 = (___muldi3(($630 | 0), 0, ($586 | 0), 0) | 0);
    $632 = tempRet0;
    $633 = (($623) + ($631)) | 0;
    $634 = ($633 >>> 0) < ($631 >>> 0);
    $635 = $634 & 1;
    $636 = (($635) + ($632)) | 0;
    $637 = (($627) + ($636)) | 0;
    $638 = ($637 >>> 0) < ($636 >>> 0);
    $639 = $638 & 1;
    $640 = (($639) + ($629)) | 0;
    $641 = HEAP32[$166 >> 2] | 0;
    $642 = (___muldi3(($641 | 0), 0, ($597 | 0), 0) | 0);
    $643 = tempRet0;
    $644 = (($633) + ($642)) | 0;
    $645 = ($644 >>> 0) < ($642 >>> 0);
    $646 = $645 & 1;
    $647 = (($646) + ($643)) | 0;
    $648 = (($637) + ($647)) | 0;
    $649 = ($648 >>> 0) < ($647 >>> 0);
    $650 = $649 & 1;
    $651 = (($640) + ($650)) | 0;
    $652 = HEAP32[$108 >> 2] | 0;
    $653 = (___muldi3(($652 | 0), 0, ($608 | 0), 0) | 0);
    $654 = tempRet0;
    $655 = (($653) + ($644)) | 0;
    $656 = ($655 >>> 0) < ($653 >>> 0);
    $657 = $656 & 1;
    $658 = (($657) + ($654)) | 0;
    $659 = (($658) + ($648)) | 0;
    $660 = ($659 >>> 0) < ($658 >>> 0);
    $661 = $660 & 1;
    $662 = (($651) + ($661)) | 0;
    $663 = ((($3)) + 44 | 0);
    HEAP32[$663 >> 2] = $655;
    $664 = HEAP32[$219 >> 2] | 0;
    $665 = (___muldi3(($620 | 0), 0, ($664 | 0), 0) | 0);
    $666 = tempRet0;
    $667 = (($659) + ($665)) | 0;
    $668 = ($667 >>> 0) < ($665 >>> 0);
    $669 = $668 & 1;
    $670 = (($669) + ($666)) | 0;
    $671 = (($662) + ($670)) | 0;
    $672 = ($671 >>> 0) < ($670 >>> 0);
    $673 = $672 & 1;
    $674 = HEAP32[$303 >> 2] | 0;
    $675 = (___muldi3(($630 | 0), 0, ($674 | 0), 0) | 0);
    $676 = tempRet0;
    $677 = (($667) + ($675)) | 0;
    $678 = ($677 >>> 0) < ($675 >>> 0);
    $679 = $678 & 1;
    $680 = (($679) + ($676)) | 0;
    $681 = (($671) + ($680)) | 0;
    $682 = ($681 >>> 0) < ($680 >>> 0);
    $683 = $682 & 1;
    $684 = (($683) + ($673)) | 0;
    $685 = HEAP32[$401 >> 2] | 0;
    $686 = (___muldi3(($641 | 0), 0, ($685 | 0), 0) | 0);
    $687 = tempRet0;
    $688 = (($677) + ($686)) | 0;
    $689 = ($688 >>> 0) < ($686 >>> 0);
    $690 = $689 & 1;
    $691 = (($690) + ($687)) | 0;
    $692 = (($681) + ($691)) | 0;
    $693 = ($692 >>> 0) < ($691 >>> 0);
    $694 = $693 & 1;
    $695 = (($684) + ($694)) | 0;
    $696 = ((($3)) + 48 | 0);
    HEAP32[$696 >> 2] = $688;
    $697 = HEAP32[$318 >> 2] | 0;
    $698 = (___muldi3(($697 | 0), 0, ($674 | 0), 0) | 0);
    $699 = tempRet0;
    $700 = (($692) + ($698)) | 0;
    $701 = ($700 >>> 0) < ($698 >>> 0);
    $702 = $701 & 1;
    $703 = (($702) + ($699)) | 0;
    $704 = (($695) + ($703)) | 0;
    $705 = ($704 >>> 0) < ($703 >>> 0);
    $706 = $705 & 1;
    $707 = HEAP32[$234 >> 2] | 0;
    $708 = (___muldi3(($707 | 0), 0, ($685 | 0), 0) | 0);
    $709 = tempRet0;
    $710 = (($700) + ($708)) | 0;
    $711 = ($710 >>> 0) < ($708 >>> 0);
    $712 = $711 & 1;
    $713 = (($712) + ($709)) | 0;
    $714 = (($704) + ($713)) | 0;
    $715 = ($714 >>> 0) < ($713 >>> 0);
    $716 = $715 & 1;
    $717 = ((($3)) + 52 | 0);
    HEAP32[$717 >> 2] = $710;
    $718 = (___muldi3(($697 | 0), 0, ($685 | 0), 0) | 0);
    $719 = tempRet0;
    $720 = (($714) + ($718)) | 0;
    $721 = ($720 >>> 0) < ($718 >>> 0);
    $722 = $721 & 1;
    $723 = (($706) + ($719)) | 0;
    $724 = (($723) + ($716)) | 0;
    $725 = (($724) + ($722)) | 0;
    $726 = ((($3)) + 56 | 0);
    HEAP32[$726 >> 2] = $720;
    $727 = ((($3)) + 60 | 0);
    HEAP32[$727 >> 2] = $725;
    _secp256k1_scalar_reduce_512($0, $3);
    STACKTOP = sp;
    return;
  }

  function _secp256k1_scalar_negate($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0,
      $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
    var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0,
      $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
    var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0,
      $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
    var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0,
      $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
    var $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ((($1)) + 4 | 0);
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 | $2;
    $6 = ((($1)) + 8 | 0);
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $5 | $7;
    $9 = ((($1)) + 12 | 0);
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $8 | $10;
    $12 = ((($1)) + 16 | 0);
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $11 | $13;
    $15 = ((($1)) + 20 | 0);
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $14 | $16;
    $18 = ((($1)) + 24 | 0);
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $17 | $19;
    $21 = ((($1)) + 28 | 0);
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $20 | $22;
    $24 = ($23 | 0) != (0);
    $25 = $24 << 31 >> 31;
    $26 = $2 ^ -1;
    $27 = (_i64Add(($26 | 0), 0, -801750718, 0) | 0);
    $28 = tempRet0;
    $29 = $25 & $27;
    HEAP32[$0 >> 2] = $29;
    $30 = HEAP32[$3 >> 2] | 0;
    $31 = $30 ^ -1;
    $32 = $28 | -1076732276;
    $33 = (_i64Add(($32 | 0), 0, ($31 | 0), 0) | 0);
    $34 = tempRet0;
    $35 = $33 & $25;
    $36 = ((($0)) + 4 | 0);
    HEAP32[$36 >> 2] = $35;
    $37 = HEAP32[$6 >> 2] | 0;
    $38 = $37 ^ -1;
    $39 = (_i64Add(($38 | 0), 0, -1354194885, 0) | 0);
    $40 = tempRet0;
    $41 = (_i64Add(($39 | 0), ($40 | 0), ($34 | 0), 0) | 0);
    $42 = tempRet0;
    $43 = $41 & $25;
    $44 = ((($0)) + 8 | 0);
    HEAP32[$44 >> 2] = $43;
    $45 = HEAP32[$9 >> 2] | 0;
    $46 = $45 ^ -1;
    $47 = (_i64Add(($46 | 0), 0, -1162945306, 0) | 0);
    $48 = tempRet0;
    $49 = (_i64Add(($47 | 0), ($48 | 0), ($42 | 0), 0) | 0);
    $50 = tempRet0;
    $51 = $49 & $25;
    $52 = ((($0)) + 12 | 0);
    HEAP32[$52 >> 2] = $51;
    $53 = HEAP32[$12 >> 2] | 0;
    $54 = $53 ^ -1;
    $55 = (_i64Add(($54 | 0), 0, -2, 0) | 0);
    $56 = tempRet0;
    $57 = (_i64Add(($55 | 0), ($56 | 0), ($50 | 0), 0) | 0);
    $58 = tempRet0;
    $59 = $57 & $25;
    $60 = ((($0)) + 16 | 0);
    HEAP32[$60 >> 2] = $59;
    $61 = HEAP32[$15 >> 2] | 0;
    $62 = $61 ^ -1;
    $63 = (_i64Add(($62 | 0), 0, -1, 0) | 0);
    $64 = tempRet0;
    $65 = (_i64Add(($63 | 0), ($64 | 0), ($58 | 0), 0) | 0);
    $66 = tempRet0;
    $67 = $65 & $25;
    $68 = ((($0)) + 20 | 0);
    HEAP32[$68 >> 2] = $67;
    $69 = HEAP32[$18 >> 2] | 0;
    $70 = $69 ^ -1;
    $71 = (_i64Add(($70 | 0), 0, -1, 0) | 0);
    $72 = tempRet0;
    $73 = (_i64Add(($71 | 0), ($72 | 0), ($66 | 0), 0) | 0);
    $74 = tempRet0;
    $75 = $73 & $25;
    $76 = ((($0)) + 24 | 0);
    HEAP32[$76 >> 2] = $75;
    $77 = HEAP32[$21 >> 2] | 0;
    $78 = $77 ^ -1;
    $79 = (_i64Add(($78 | 0), 0, -1, 0) | 0);
    $80 = tempRet0;
    $81 = (_i64Add(($79 | 0), ($80 | 0), ($74 | 0), 0) | 0);
    $82 = tempRet0;
    $83 = $81 & $25;
    $84 = ((($0)) + 28 | 0);
    HEAP32[$84 >> 2] = $83;
    return;
  }

  function _secp256k1_scalar_add($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$not$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0,
      $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
    var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0,
      $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
    var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0,
      $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0;
    var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0,
      $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
    var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0,
      $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
    var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0,
      $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
    var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0,
      $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
    var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $3 = HEAP32[$1 >> 2] | 0;
    $4 = HEAP32[$2 >> 2] | 0;
    $5 = (_i64Add(($4 | 0), 0, ($3 | 0), 0) | 0);
    $6 = tempRet0;
    HEAP32[$0 >> 2] = $5;
    $7 = ((($1)) + 4 | 0);
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ((($2)) + 4 | 0);
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = (_i64Add(($6 | 0), 0, ($8 | 0), 0) | 0);
    $12 = tempRet0;
    $13 = (_i64Add(($11 | 0), ($12 | 0), ($10 | 0), 0) | 0);
    $14 = tempRet0;
    $15 = ((($0)) + 4 | 0);
    HEAP32[$15 >> 2] = $13;
    $16 = ((($1)) + 8 | 0);
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = ((($2)) + 8 | 0);
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = (_i64Add(($19 | 0), 0, ($17 | 0), 0) | 0);
    $21 = tempRet0;
    $22 = (_i64Add(($20 | 0), ($21 | 0), ($14 | 0), 0) | 0);
    $23 = tempRet0;
    $24 = ((($0)) + 8 | 0);
    HEAP32[$24 >> 2] = $22;
    $25 = ((($1)) + 12 | 0);
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = ((($2)) + 12 | 0);
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = (_i64Add(($28 | 0), 0, ($26 | 0), 0) | 0);
    $30 = tempRet0;
    $31 = (_i64Add(($29 | 0), ($30 | 0), ($23 | 0), 0) | 0);
    $32 = tempRet0;
    $33 = ((($0)) + 12 | 0);
    HEAP32[$33 >> 2] = $31;
    $34 = ((($1)) + 16 | 0);
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = ((($2)) + 16 | 0);
    $37 = HEAP32[$36 >> 2] | 0;
    $38 = (_i64Add(($37 | 0), 0, ($35 | 0), 0) | 0);
    $39 = tempRet0;
    $40 = (_i64Add(($38 | 0), ($39 | 0), ($32 | 0), 0) | 0);
    $41 = tempRet0;
    $42 = ((($0)) + 16 | 0);
    HEAP32[$42 >> 2] = $40;
    $43 = ((($1)) + 20 | 0);
    $44 = HEAP32[$43 >> 2] | 0;
    $45 = ((($2)) + 20 | 0);
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = (_i64Add(($46 | 0), 0, ($44 | 0), 0) | 0);
    $48 = tempRet0;
    $49 = (_i64Add(($47 | 0), ($48 | 0), ($41 | 0), 0) | 0);
    $50 = tempRet0;
    $51 = ((($0)) + 20 | 0);
    HEAP32[$51 >> 2] = $49;
    $52 = ((($1)) + 24 | 0);
    $53 = HEAP32[$52 >> 2] | 0;
    $54 = ((($2)) + 24 | 0);
    $55 = HEAP32[$54 >> 2] | 0;
    $56 = (_i64Add(($55 | 0), 0, ($53 | 0), 0) | 0);
    $57 = tempRet0;
    $58 = (_i64Add(($56 | 0), ($57 | 0), ($50 | 0), 0) | 0);
    $59 = tempRet0;
    $60 = ((($0)) + 24 | 0);
    HEAP32[$60 >> 2] = $58;
    $61 = ((($1)) + 28 | 0);
    $62 = HEAP32[$61 >> 2] | 0;
    $63 = ((($2)) + 28 | 0);
    $64 = HEAP32[$63 >> 2] | 0;
    $65 = (_i64Add(($64 | 0), 0, ($62 | 0), 0) | 0);
    $66 = tempRet0;
    $67 = (_i64Add(($65 | 0), ($66 | 0), ($59 | 0), 0) | 0);
    $68 = tempRet0;
    $69 = ((($0)) + 28 | 0);
    HEAP32[$69 >> 2] = $67;
    $70 = $67 & $58;
    $71 = $68 & $59;
    $72 = $49 & $70;
    $50 & $71;
    $73 = ($72 | 0) != (-1);
    $74 = ($40 >>> 0) < (4294967294);
    $75 = $74 | $73;
    $76 = $75 & 1;
    $77 = ($40 | 0) == (-1);
    $78 = $77 & 1;
    $79 = $76 ^ -1;
    $80 = $78 & $79;
    $81 = ($31 >>> 0) < (3132021990);
    $82 = $81 & 1;
    $$not$i = $78 ^ 1;
    $83 = $82 & $$not$i;
    $84 = $76 | $83;
    $85 = ($31 >>> 0) > (3132021990);
    $86 = $85 & 1;
    $87 = $84 ^ -1;
    $88 = $86 & $87;
    $89 = $88 | $80;
    $90 = ($22 >>> 0) < (2940772411);
    $91 = $90 & 1;
    $92 = $89 ^ -1;
    $93 = $91 & $92;
    $94 = $93 | $84;
    $95 = ($22 >>> 0) > (2940772411);
    $96 = $95 & 1;
    $97 = $94 ^ -1;
    $98 = $96 & $97;
    $99 = $98 | $89;
    $100 = HEAP32[$15 >> 2] | 0;
    $101 = ($100 >>> 0) < (3218235020);
    $102 = $101 & 1;
    $103 = $99 ^ -1;
    $104 = $102 & $103;
    $105 = $104 | $94;
    $106 = ($100 >>> 0) > (3218235020);
    $107 = $106 & 1;
    $108 = $105 ^ -1;
    $109 = $107 & $108;
    $110 = $109 | $99;
    $111 = HEAP32[$0 >> 2] | 0;
    $112 = ($111 >>> 0) > (3493216576);
    $113 = $112 & 1;
    $114 = $113 & $108;
    $115 = $110 | $114;
    $116 = (_i64Add(($115 | 0), 0, ($68 | 0), 0) | 0);
    $117 = tempRet0;
    $118 = Math_imul($116, 801750719) | 0;
    $119 = (_i64Add(($118 | 0), 0, ($111 | 0), 0) | 0);
    $120 = tempRet0;
    HEAP32[$0 >> 2] = $119;
    $121 = Math_imul($116, 1076732275) | 0;
    $122 = (_i64Add(($121 | 0), 0, ($100 | 0), 0) | 0);
    $123 = tempRet0;
    $124 = (_i64Add(($122 | 0), ($123 | 0), ($120 | 0), 0) | 0);
    $125 = tempRet0;
    HEAP32[$15 >> 2] = $124;
    $126 = HEAP32[$24 >> 2] | 0;
    $127 = Math_imul($116, 1354194884) | 0;
    $128 = (_i64Add(($127 | 0), 0, ($126 | 0), 0) | 0);
    $129 = tempRet0;
    $130 = (_i64Add(($128 | 0), ($129 | 0), ($125 | 0), 0) | 0);
    $131 = tempRet0;
    HEAP32[$24 >> 2] = $130;
    $132 = HEAP32[$33 >> 2] | 0;
    $133 = Math_imul($116, 1162945305) | 0;
    $134 = (_i64Add(($133 | 0), 0, ($132 | 0), 0) | 0);
    $135 = tempRet0;
    $136 = (_i64Add(($134 | 0), ($135 | 0), ($131 | 0), 0) | 0);
    $137 = tempRet0;
    HEAP32[$33 >> 2] = $136;
    $138 = HEAP32[$42 >> 2] | 0;
    $139 = (_i64Add(($116 | 0), 0, ($138 | 0), 0) | 0);
    $140 = tempRet0;
    $141 = (_i64Add(($139 | 0), ($140 | 0), ($137 | 0), 0) | 0);
    $142 = tempRet0;
    HEAP32[$42 >> 2] = $141;
    $143 = HEAP32[$51 >> 2] | 0;
    $144 = (_i64Add(($142 | 0), 0, ($143 | 0), 0) | 0);
    $145 = tempRet0;
    HEAP32[$51 >> 2] = $144;
    $146 = HEAP32[$60 >> 2] | 0;
    $147 = (_i64Add(($145 | 0), 0, ($146 | 0), 0) | 0);
    $148 = tempRet0;
    HEAP32[$60 >> 2] = $147;
    $149 = HEAP32[$69 >> 2] | 0;
    $150 = (_i64Add(($148 | 0), 0, ($149 | 0), 0) | 0);
    $151 = tempRet0;
    HEAP32[$69 >> 2] = $150;
    return;
  }

  function _secp256k1_context_create($0) {
    $0 = $0 | 0;
    var $$01$i$i$i = 0, $$021$i$i$i = 0, $$03$i$i = 0, $$04756$i = 0, $$048$i = 0, $$049$i = 0, $$057$i = 0,
      $$145$i = 0, $$146$i = 0, $$148$lcssa$i = 0, $$14855$i = 0, $$neg42$i = 0, $$neg43$i = 0, $$pre$i = 0,
      $$sroa$0$40$sroa_idx$i = 0, $$sroa$0$40$sroa_idx$i16 = 0, $$sroa$0$i = 0, $$sroa$0$i15 = 0,
      $$sroa$5$0$$sroa_idx31$i = 0, $$sroa$5$0$$sroa_idx32$i = 0;
    var $$sroa$6$0$$sroa_idx$i = 0, $$sroa$6$0$$sroa_idx$i18 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0,
      $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0,
      $113 = 0, $114 = 0;
    var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0,
      $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
    var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0,
      $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
    var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0,
      $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
    var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0,
      $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
    var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0,
      $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
    var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0,
      $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
    var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0,
      $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
    var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0,
      $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
    var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0,
      $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
    var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0,
      $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
    var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0,
      $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
    var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0,
      $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
    var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0,
      $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
    var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0,
      $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
    var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0,
      $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
    var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0,
      $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
    var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0,
      $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
    var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0,
      $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
    var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0,
      $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
    var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0,
      $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
    var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0,
      $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
    var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0,
      $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
    var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0,
      $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
    var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $54 = 0, $55 = 0,
      $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
    var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0,
      $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
    var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0,
      $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0;
    var $exitcond$i$i = 0, $exitcond$i$i$i = 0, $exitcond$i13 = 0, $exitcond$i21 = 0, $exitcond52$i = 0,
      $exitcond53$i = 0, $exitcond58$i = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0,
      $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer33 = 0, $vararg_buffer38 = 0,
      $vararg_buffer43 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0;
    var $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0,
      $vararg_ptr27 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0,
      $vararg_ptr42 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0,
      sp = 0;
    var src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 268512 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(268512 | 0);
    $vararg_buffer43 = sp + 304 | 0;
    $vararg_buffer38 = sp + 288 | 0;
    $vararg_buffer33 = sp + 272 | 0;
    $vararg_buffer28 = sp + 256 | 0;
    $vararg_buffer23 = sp + 240 | 0;
    $vararg_buffer18 = sp + 224 | 0;
    $vararg_buffer13 = sp + 208 | 0;
    $vararg_buffer8 = sp + 192 | 0;
    $vararg_buffer3 = sp + 176 | 0;
    $vararg_buffer = sp + 160 | 0;
    $1 = sp + 247008 | 0;
    $$sroa$0$i15 = sp + 80 | 0;
    $2 = sp + 246880 | 0;
    $3 = sp + 246840 | 0;
    $4 = sp + 246752 | 0;
    $5 = sp + 215008 | 0;
    $6 = sp + 214884 | 0;
    $7 = sp + 214760 | 0;
    $8 = sp + 214720 | 0;
    $9 = sp + 214680 | 0;
    $10 = sp + 214640 | 0;
    $11 = sp + 214600 | 0;
    $12 = sp + 214560 | 0;
    $13 = sp + 214520 | 0;
    $14 = sp + 214480 | 0;
    $15 = sp + 214356 | 0;
    $16 = sp + 214272 | 0;
    $17 = sp + 214188 | 0;
    $18 = sp + 214064 | 0;
    $19 = sp + 128048 | 0;
    $$sroa$0$i = sp;
    $20 = sp + 127920 | 0;
    $21 = sp + 127880 | 0;
    $22 = sp + 127792 | 0;
    $23 = sp + 816 | 0;
    $24 = sp + 688 | 0;
    $25 = sp + 564 | 0;
    $26 = sp + 440 | 0;
    $27 = sp + 316 | 0;
    $28 = (_malloc(172) | 0);
    $29 = ($28 | 0) == (0 | 0);
    if ($29) {
      $30 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer >> 2] = 1676;
      $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
      HEAP32[$vararg_ptr1 >> 2] = 67;
      $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
      HEAP32[$vararg_ptr2 >> 2] = 1689;
      (_fprintf($30, 628, $vararg_buffer) | 0);
      _abort();
      // unreachable;
    }
    HEAP32[$28 >> 2] = 0;
    $31 = ((($28)) + 4 | 0);
    HEAP32[$31 >> 2] = 0;
    $32 = ((($28)) + 164 | 0);
    HEAP32[$32 >> 2] = 0;
    $33 = ((($28)) + 168 | 0);
    HEAP32[$33 >> 2] = 0;
    $34 = $0 & 2;
    $35 = ($34 | 0) == (0);
    if (!($35)) {
      $36 = (_malloc(65536) | 0);
      $37 = ($36 | 0) == (0 | 0);
      if ($37) {
        $38 = HEAP32[125] | 0;
        HEAP32[$vararg_buffer3 >> 2] = 1676;
        $vararg_ptr6 = ((($vararg_buffer3)) + 4 | 0);
        HEAP32[$vararg_ptr6 >> 2] = 67;
        $vararg_ptr7 = ((($vararg_buffer3)) + 8 | 0);
        HEAP32[$vararg_ptr7 >> 2] = 1689;
        (_fprintf($38, 628, $vararg_buffer3) | 0);
        _abort();
        // unreachable;
      }
      HEAP32[$31 >> 2] = $36;
      dest = $$sroa$0$i;
      src = 8;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $$sroa$0$40$sroa_idx$i = ((($$sroa$0$i)) + 40 | 0);
      dest = $$sroa$0$40$sroa_idx$i;
      src = (48);
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      (_secp256k1_fe_set_b32($21, 1724) | 0);
      (_secp256k1_ge_set_xo_var($22, $21, 0) | 0);
      $39 = ((($22)) + 80 | 0);
      $40 = HEAP32[$39 >> 2] | 0;
      $41 = ((($20)) + 120 | 0);
      HEAP32[$41 >> 2] = $40;
      dest = $20;
      src = $22;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $42 = ((($20)) + 40 | 0);
      $43 = ((($22)) + 40 | 0);
      dest = $42;
      src = $43;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $44 = ((($20)) + 80 | 0);
      HEAP32[$44 >> 2] = 1;
      $45 = ((($20)) + 84 | 0);
      dest = $45;
      stop = dest + 36 | 0;
      do {
        HEAP32[dest >> 2] = 0 | 0;
        dest = dest + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      _secp256k1_gej_add_ge_var($20, $20, 8, 0);
      dest = $24;
      src = $$sroa$0$i;
      stop = dest + 80 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $$sroa$5$0$$sroa_idx32$i = ((($24)) + 80 | 0);
      HEAP32[$$sroa$5$0$$sroa_idx32$i >> 2] = 1;
      $$sroa$6$0$$sroa_idx$i = ((($24)) + 84 | 0);
      dest = $$sroa$6$0$$sroa_idx$i;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = 0 | 0;
        dest = dest + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      dest = $25;
      src = $20;
      stop = dest + 124 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $46 = ((($25)) + 40 | 0);
      $47 = ((($25)) + 44 | 0);
      $48 = ((($25)) + 48 | 0);
      $49 = ((($25)) + 52 | 0);
      $50 = ((($25)) + 56 | 0);
      $51 = ((($25)) + 60 | 0);
      $52 = ((($25)) + 64 | 0);
      $53 = ((($25)) + 68 | 0);
      $54 = ((($25)) + 72 | 0);
      $55 = ((($25)) + 76 | 0);
      $$049$i = 0;
      while (1) {
        $56 = $$049$i << 4;
        $57 = (($23) + (($56 * 124) | 0) | 0);
        dest = $57;
        src = $25;
        stop = dest + 124 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $58 = $56 | 1;
        $59 = (($23) + (($58 * 124) | 0) | 0);
        _secp256k1_gej_add_var($59, $57, $24);
        $60 = $56 | 2;
        $61 = (($23) + (($60 * 124) | 0) | 0);
        $62 = (($60) + -1) | 0;
        $63 = (($23) + (($62 * 124) | 0) | 0);
        _secp256k1_gej_add_var($61, $63, $24);
        $64 = $56 | 3;
        $65 = (($23) + (($64 * 124) | 0) | 0);
        $66 = (($64) + -1) | 0;
        $67 = (($23) + (($66 * 124) | 0) | 0);
        _secp256k1_gej_add_var($65, $67, $24);
        $68 = $56 | 4;
        $69 = (($23) + (($68 * 124) | 0) | 0);
        $70 = (($68) + -1) | 0;
        $71 = (($23) + (($70 * 124) | 0) | 0);
        _secp256k1_gej_add_var($69, $71, $24);
        $72 = $56 | 5;
        $73 = (($23) + (($72 * 124) | 0) | 0);
        $74 = (($72) + -1) | 0;
        $75 = (($23) + (($74 * 124) | 0) | 0);
        _secp256k1_gej_add_var($73, $75, $24);
        $76 = $56 | 6;
        $77 = (($23) + (($76 * 124) | 0) | 0);
        $78 = (($76) + -1) | 0;
        $79 = (($23) + (($78 * 124) | 0) | 0);
        _secp256k1_gej_add_var($77, $79, $24);
        $80 = $56 | 7;
        $81 = (($23) + (($80 * 124) | 0) | 0);
        $82 = (($80) + -1) | 0;
        $83 = (($23) + (($82 * 124) | 0) | 0);
        _secp256k1_gej_add_var($81, $83, $24);
        $84 = $56 | 8;
        $85 = (($23) + (($84 * 124) | 0) | 0);
        $86 = (($84) + -1) | 0;
        $87 = (($23) + (($86 * 124) | 0) | 0);
        _secp256k1_gej_add_var($85, $87, $24);
        $88 = $56 | 9;
        $89 = (($23) + (($88 * 124) | 0) | 0);
        $90 = (($88) + -1) | 0;
        $91 = (($23) + (($90 * 124) | 0) | 0);
        _secp256k1_gej_add_var($89, $91, $24);
        $92 = $56 | 10;
        $93 = (($23) + (($92 * 124) | 0) | 0);
        $94 = (($92) + -1) | 0;
        $95 = (($23) + (($94 * 124) | 0) | 0);
        _secp256k1_gej_add_var($93, $95, $24);
        $96 = $56 | 11;
        $97 = (($23) + (($96 * 124) | 0) | 0);
        $98 = (($96) + -1) | 0;
        $99 = (($23) + (($98 * 124) | 0) | 0);
        _secp256k1_gej_add_var($97, $99, $24);
        $100 = $56 | 12;
        $101 = (($23) + (($100 * 124) | 0) | 0);
        $102 = (($100) + -1) | 0;
        $103 = (($23) + (($102 * 124) | 0) | 0);
        _secp256k1_gej_add_var($101, $103, $24);
        $104 = $56 | 13;
        $105 = (($23) + (($104 * 124) | 0) | 0);
        $106 = (($104) + -1) | 0;
        $107 = (($23) + (($106 * 124) | 0) | 0);
        _secp256k1_gej_add_var($105, $107, $24);
        $108 = $56 | 14;
        $109 = (($23) + (($108 * 124) | 0) | 0);
        $110 = (($108) + -1) | 0;
        $111 = (($23) + (($110 * 124) | 0) | 0);
        _secp256k1_gej_add_var($109, $111, $24);
        $112 = $56 | 15;
        $113 = (($23) + (($112 * 124) | 0) | 0);
        $114 = (($112) + -1) | 0;
        $115 = (($23) + (($114 * 124) | 0) | 0);
        _secp256k1_gej_add_var($113, $115, $24);
        _secp256k1_gej_double_var($24, $24, 0);
        _secp256k1_gej_double_var($24, $24, 0);
        _secp256k1_gej_double_var($24, $24, 0);
        _secp256k1_gej_double_var($24, $24, 0);
        _secp256k1_gej_double_var($25, $25, 0);
        $116 = ($$049$i | 0) == (62);
        if ($116) {
          $117 = HEAP32[$46 >> 2] | 0;
          $118 = HEAP32[$47 >> 2] | 0;
          $119 = HEAP32[$48 >> 2] | 0;
          $120 = HEAP32[$49 >> 2] | 0;
          $121 = HEAP32[$50 >> 2] | 0;
          $122 = HEAP32[$51 >> 2] | 0;
          $123 = HEAP32[$52 >> 2] | 0;
          $124 = HEAP32[$53 >> 2] | 0;
          $125 = HEAP32[$54 >> 2] | 0;
          $126 = HEAP32[$55 >> 2] | 0;
          $127 = $126 >>> 22;
          $128 = $126 & 4194303;
          $129 = ($127 * 977) | 0;
          $130 = (($129) + ($117)) | 0;
          $131 = $127 << 6;
          $132 = (($131) + ($118)) | 0;
          $133 = $130 >>> 26;
          $134 = (($132) + ($133)) | 0;
          $135 = $130 & 67108863;
          $136 = $134 >>> 26;
          $137 = (($136) + ($119)) | 0;
          $138 = $134 & 67108863;
          $139 = $137 >>> 26;
          $140 = (($139) + ($120)) | 0;
          $141 = $137 & 67108863;
          $142 = $140 >>> 26;
          $143 = (($142) + ($121)) | 0;
          $144 = $140 & 67108863;
          $145 = $143 >>> 26;
          $146 = (($145) + ($122)) | 0;
          $147 = $143 & 67108863;
          $148 = $146 >>> 26;
          $149 = (($148) + ($123)) | 0;
          $150 = $146 & 67108863;
          $151 = $149 >>> 26;
          $152 = (($151) + ($124)) | 0;
          $153 = $149 & 67108863;
          $154 = $152 >>> 26;
          $155 = (($154) + ($125)) | 0;
          $156 = $152 & 67108863;
          $157 = $155 >>> 26;
          $158 = $155 & 67108863;
          $159 = (268431548 - ($135)) | 0;
          HEAP32[$46 >> 2] = $159;
          $160 = (268435196 - ($138)) | 0;
          HEAP32[$47 >> 2] = $160;
          $161 = (268435452 - ($141)) | 0;
          HEAP32[$48 >> 2] = $161;
          $162 = (268435452 - ($144)) | 0;
          HEAP32[$49 >> 2] = $162;
          $163 = (268435452 - ($147)) | 0;
          HEAP32[$50 >> 2] = $163;
          $164 = (268435452 - ($150)) | 0;
          HEAP32[$51 >> 2] = $164;
          $165 = (268435452 - ($153)) | 0;
          HEAP32[$52 >> 2] = $165;
          $166 = (268435452 - ($156)) | 0;
          HEAP32[$53 >> 2] = $166;
          $167 = (268435452 - ($158)) | 0;
          HEAP32[$54 >> 2] = $167;
          $$neg43$i = (16777212 - ($128)) | 0;
          $168 = (($$neg43$i) - ($157)) | 0;
          HEAP32[$55 >> 2] = $168;
          _secp256k1_gej_add_var($25, $25, $20);
          $$049$i = 63;
          continue;
        } else {
          $169 = (($$049$i) + 1) | 0;
          $exitcond53$i = ($169 | 0) == (64);
          if ($exitcond53$i) {
            break;
          } else {
            $$049$i = $169;
            continue;
          }
        }
      }
      _secp256k1_ge_set_all_gej_var(1024, $19, $23);
      $$146$i = 0;
      while (1) {
        $170 = $$146$i << 4;
        $171 = HEAP32[$31 >> 2] | 0;
        $172 = (($171) + ($$146$i << 10) | 0);
        $173 = (($19) + (($170 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($172, $173);
        $174 = HEAP32[$31 >> 2] | 0;
        $175 = (((($174) + ($$146$i << 10) | 0)) + 64 | 0);
        $176 = $170 | 1;
        $177 = (($19) + (($176 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($175, $177);
        $178 = HEAP32[$31 >> 2] | 0;
        $179 = (((($178) + ($$146$i << 10) | 0)) + 128 | 0);
        $180 = $170 | 2;
        $181 = (($19) + (($180 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($179, $181);
        $182 = HEAP32[$31 >> 2] | 0;
        $183 = (((($182) + ($$146$i << 10) | 0)) + 192 | 0);
        $184 = $170 | 3;
        $185 = (($19) + (($184 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($183, $185);
        $186 = HEAP32[$31 >> 2] | 0;
        $187 = (((($186) + ($$146$i << 10) | 0)) + 256 | 0);
        $188 = $170 | 4;
        $189 = (($19) + (($188 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($187, $189);
        $190 = HEAP32[$31 >> 2] | 0;
        $191 = (((($190) + ($$146$i << 10) | 0)) + 320 | 0);
        $192 = $170 | 5;
        $193 = (($19) + (($192 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($191, $193);
        $194 = HEAP32[$31 >> 2] | 0;
        $195 = (((($194) + ($$146$i << 10) | 0)) + 384 | 0);
        $196 = $170 | 6;
        $197 = (($19) + (($196 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($195, $197);
        $198 = HEAP32[$31 >> 2] | 0;
        $199 = (((($198) + ($$146$i << 10) | 0)) + 448 | 0);
        $200 = $170 | 7;
        $201 = (($19) + (($200 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($199, $201);
        $202 = HEAP32[$31 >> 2] | 0;
        $203 = (((($202) + ($$146$i << 10) | 0)) + 512 | 0);
        $204 = $170 | 8;
        $205 = (($19) + (($204 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($203, $205);
        $206 = HEAP32[$31 >> 2] | 0;
        $207 = (((($206) + ($$146$i << 10) | 0)) + 576 | 0);
        $208 = $170 | 9;
        $209 = (($19) + (($208 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($207, $209);
        $210 = HEAP32[$31 >> 2] | 0;
        $211 = (((($210) + ($$146$i << 10) | 0)) + 640 | 0);
        $212 = $170 | 10;
        $213 = (($19) + (($212 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($211, $213);
        $214 = HEAP32[$31 >> 2] | 0;
        $215 = (((($214) + ($$146$i << 10) | 0)) + 704 | 0);
        $216 = $170 | 11;
        $217 = (($19) + (($216 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($215, $217);
        $218 = HEAP32[$31 >> 2] | 0;
        $219 = (((($218) + ($$146$i << 10) | 0)) + 768 | 0);
        $220 = $170 | 12;
        $221 = (($19) + (($220 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($219, $221);
        $222 = HEAP32[$31 >> 2] | 0;
        $223 = (((($222) + ($$146$i << 10) | 0)) + 832 | 0);
        $224 = $170 | 13;
        $225 = (($19) + (($224 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($223, $225);
        $226 = HEAP32[$31 >> 2] | 0;
        $227 = (((($226) + ($$146$i << 10) | 0)) + 896 | 0);
        $228 = $170 | 14;
        $229 = (($19) + (($228 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($227, $229);
        $230 = HEAP32[$31 >> 2] | 0;
        $231 = (((($230) + ($$146$i << 10) | 0)) + 960 | 0);
        $232 = $170 | 15;
        $233 = (($19) + (($232 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($231, $233);
        $234 = (($$146$i) + 1) | 0;
        $exitcond$i13 = ($234 | 0) == (64);
        if ($exitcond$i13) {
          break;
        } else {
          $$146$i = $234;
        }
      }
      _secp256k1_ecmult_gen_blind($31, 0);
    }
    $235 = $0 & 1;
    $236 = ($235 | 0) == (0);
    if (!($236)) {
      $237 = HEAP32[$28 >> 2] | 0;
      $238 = ($237 | 0) == (0 | 0);
      if ($238) {
        $239 = ((($18)) + 120 | 0);
        HEAP32[$239 >> 2] = 0;
        dest = $18;
        src = 8;
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $240 = ((($18)) + 40 | 0);
        dest = $240;
        src = (48);
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $241 = ((($18)) + 80 | 0);
        HEAP32[$241 >> 2] = 1;
        $242 = ((($18)) + 84 | 0);
        dest = $242;
        stop = dest + 36 | 0;
        do {
          HEAP32[dest >> 2] = 0 | 0;
          dest = dest + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $243 = (_malloc(1048576) | 0);
        $244 = ($243 | 0) == (0 | 0);
        if ($244) {
          $245 = HEAP32[125] | 0;
          HEAP32[$vararg_buffer8 >> 2] = 1676;
          $vararg_ptr11 = ((($vararg_buffer8)) + 4 | 0);
          HEAP32[$vararg_ptr11 >> 2] = 67;
          $vararg_ptr12 = ((($vararg_buffer8)) + 8 | 0);
          HEAP32[$vararg_ptr12 >> 2] = 1689;
          (_fprintf($245, 628, $vararg_buffer8) | 0);
          _abort();
          // unreachable;
        }
        HEAP32[$28 >> 2] = $243;
        $246 = (_malloc(2031616) | 0);
        $247 = ($246 | 0) == (0 | 0);
        if ($247) {
          $248 = HEAP32[125] | 0;
          HEAP32[$vararg_buffer13 >> 2] = 1676;
          $vararg_ptr16 = ((($vararg_buffer13)) + 4 | 0);
          HEAP32[$vararg_ptr16 >> 2] = 67;
          $vararg_ptr17 = ((($vararg_buffer13)) + 8 | 0);
          HEAP32[$vararg_ptr17 >> 2] = 1689;
          (_fprintf($248, 628, $vararg_buffer13) | 0);
          _abort();
          // unreachable;
        }
        $249 = (_malloc(1376256) | 0);
        $250 = ($249 | 0) == (0 | 0);
        if ($250) {
          $251 = HEAP32[125] | 0;
          HEAP32[$vararg_buffer18 >> 2] = 1676;
          $vararg_ptr21 = ((($vararg_buffer18)) + 4 | 0);
          HEAP32[$vararg_ptr21 >> 2] = 67;
          $vararg_ptr22 = ((($vararg_buffer18)) + 8 | 0);
          HEAP32[$vararg_ptr22 >> 2] = 1689;
          (_fprintf($251, 628, $vararg_buffer18) | 0);
          _abort();
          // unreachable;
        }
        $252 = (_malloc(655360) | 0);
        $253 = ($252 | 0) == (0 | 0);
        if ($253) {
          $254 = HEAP32[125] | 0;
          HEAP32[$vararg_buffer23 >> 2] = 1676;
          $vararg_ptr26 = ((($vararg_buffer23)) + 4 | 0);
          HEAP32[$vararg_ptr26 >> 2] = 67;
          $vararg_ptr27 = ((($vararg_buffer23)) + 8 | 0);
          HEAP32[$vararg_ptr27 >> 2] = 1689;
          (_fprintf($254, 628, $vararg_buffer23) | 0);
          _abort();
          // unreachable;
        }
        _secp256k1_gej_double_var($15, $18, 0);
        dest = $17;
        src = $15;
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $255 = ((($17)) + 40 | 0);
        $256 = ((($15)) + 40 | 0);
        dest = $255;
        src = $256;
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $257 = ((($17)) + 80 | 0);
        HEAP32[$257 >> 2] = 0;
        $258 = ((($15)) + 80 | 0);
        _secp256k1_fe_sqr($8, $258);
        _secp256k1_fe_mul($9, $8, $258);
        _secp256k1_fe_mul($16, $18, $8);
        $259 = ((($16)) + 40 | 0);
        _secp256k1_fe_mul($259, $240, $9);
        $260 = ((($16)) + 80 | 0);
        HEAP32[$260 >> 2] = 0;
        dest = $246;
        src = $16;
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $261 = ((($246)) + 40 | 0);
        dest = $261;
        src = $259;
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $262 = ((($246)) + 80 | 0);
        $263 = ((($18)) + 80 | 0);
        dest = $262;
        src = $263;
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $264 = ((($246)) + 120 | 0);
        HEAP32[$264 >> 2] = 0;
        dest = $252;
        src = $258;
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $$021$i$i$i = 1;
        while (1) {
          $265 = (($246) + (($$021$i$i$i * 124) | 0) | 0);
          $266 = (($$021$i$i$i) + -1) | 0;
          $267 = (($246) + (($266 * 124) | 0) | 0);
          $268 = (($252) + (($$021$i$i$i * 40) | 0) | 0);
          _secp256k1_gej_add_ge_var($265, $267, $17, $268);
          $269 = (($$021$i$i$i) + 1) | 0;
          $exitcond$i$i$i = ($269 | 0) == (16384);
          if ($exitcond$i$i$i) {
            break;
          } else {
            $$021$i$i$i = $269;
          }
        }
        $270 = ((($246)) + 2031572 | 0);
        _secp256k1_fe_mul($270, $270, $258);
        _secp256k1_fe_inv($14, $270);
        _secp256k1_fe_sqr($12, $14);
        _secp256k1_fe_mul($13, $12, $14);
        $271 = ((($249)) + 1376172 | 0);
        $272 = ((($246)) + 2031492 | 0);
        _secp256k1_fe_mul($271, $272, $12);
        $273 = ((($249)) + 1376212 | 0);
        $274 = ((($246)) + 2031532 | 0);
        _secp256k1_fe_mul($273, $274, $13);
        $275 = ((($246)) + 2031612 | 0);
        $276 = HEAP32[$275 >> 2] | 0;
        $277 = ((($249)) + 1376252 | 0);
        HEAP32[$277 >> 2] = $276;
        $$01$i$i$i = 16383;
        while (1) {
          $278 = (($252) + (($$01$i$i$i * 40) | 0) | 0);
          _secp256k1_fe_mul($14, $14, $278);
          $279 = (($$01$i$i$i) + -1) | 0;
          _secp256k1_fe_sqr($10, $14);
          _secp256k1_fe_mul($11, $10, $14);
          $280 = (($249) + (($279 * 84) | 0) | 0);
          $281 = (($246) + (($279 * 124) | 0) | 0);
          _secp256k1_fe_mul($280, $281, $10);
          $282 = (((($249) + (($279 * 84) | 0) | 0)) + 40 | 0);
          $283 = (((($246) + (($279 * 124) | 0) | 0)) + 40 | 0);
          _secp256k1_fe_mul($282, $283, $11);
          $284 = (((($246) + (($279 * 124) | 0) | 0)) + 120 | 0);
          $285 = HEAP32[$284 >> 2] | 0;
          $286 = (((($249) + (($279 * 84) | 0) | 0)) + 80 | 0);
          HEAP32[$286 >> 2] = $285;
          $287 = ($279 | 0) == (0);
          if ($287) {
            break;
          } else {
            $$01$i$i$i = $279;
          }
        }
        $$03$i$i = 0;
        while (1) {
          $288 = (($243) + ($$03$i$i << 6) | 0);
          $289 = (($249) + (($$03$i$i * 84) | 0) | 0);
          _secp256k1_ge_to_storage($288, $289);
          $290 = (($$03$i$i) + 1) | 0;
          $exitcond$i$i = ($290 | 0) == (16384);
          if ($exitcond$i$i) {
            break;
          } else {
            $$03$i$i = $290;
          }
        }
        _free($249);
        _free($246);
        _free($252);
      }
    }
    $291 = $0 & 128;
    $292 = ($291 | 0) == (0);
    if (!($292)) {
      $293 = HEAP32[$32 >> 2] | 0;
      $294 = ($293 | 0) == (0 | 0);
      if ($294) {
        $295 = (_malloc(16384) | 0);
        $296 = ($295 | 0) == (0 | 0);
        if ($296) {
          $297 = HEAP32[125] | 0;
          HEAP32[$vararg_buffer28 >> 2] = 1676;
          $vararg_ptr31 = ((($vararg_buffer28)) + 4 | 0);
          HEAP32[$vararg_ptr31 >> 2] = 67;
          $vararg_ptr32 = ((($vararg_buffer28)) + 8 | 0);
          HEAP32[$vararg_ptr32 >> 2] = 1689;
          (_fprintf($297, 628, $vararg_buffer28) | 0);
          _abort();
          // unreachable;
        }
        HEAP32[$32 >> 2] = $295;
        dest = $$sroa$0$i15;
        src = 92;
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $$sroa$0$40$sroa_idx$i16 = ((($$sroa$0$i15)) + 40 | 0);
        dest = $$sroa$0$40$sroa_idx$i16;
        src = (132);
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        (_secp256k1_fe_set_b32($3, 1757) | 0);
        (_secp256k1_ge_set_xo_var($4, $3, 0) | 0);
        $298 = ((($4)) + 80 | 0);
        $299 = HEAP32[$298 >> 2] | 0;
        $300 = ((($2)) + 120 | 0);
        HEAP32[$300 >> 2] = $299;
        dest = $2;
        src = $4;
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $301 = ((($2)) + 40 | 0);
        $302 = ((($4)) + 40 | 0);
        dest = $301;
        src = $302;
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $303 = ((($2)) + 80 | 0);
        HEAP32[$303 >> 2] = 1;
        $304 = ((($2)) + 84 | 0);
        dest = $304;
        stop = dest + 36 | 0;
        do {
          HEAP32[dest >> 2] = 0 | 0;
          dest = dest + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        _secp256k1_gej_add_ge_var($2, $2, 92, 0);
        dest = $6;
        src = $$sroa$0$i15;
        stop = dest + 80 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $$sroa$5$0$$sroa_idx31$i = ((($6)) + 80 | 0);
        HEAP32[$$sroa$5$0$$sroa_idx31$i >> 2] = 1;
        $$sroa$6$0$$sroa_idx$i18 = ((($6)) + 84 | 0);
        dest = $$sroa$6$0$$sroa_idx$i18;
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = 0 | 0;
          dest = dest + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        dest = $7;
        src = $2;
        stop = dest + 124 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $305 = ((($7)) + 40 | 0);
        $306 = ((($7)) + 44 | 0);
        $307 = ((($7)) + 48 | 0);
        $308 = ((($7)) + 52 | 0);
        $309 = ((($7)) + 56 | 0);
        $310 = ((($7)) + 60 | 0);
        $311 = ((($7)) + 64 | 0);
        $312 = ((($7)) + 68 | 0);
        $313 = ((($7)) + 72 | 0);
        $314 = ((($7)) + 76 | 0);
        $$048$i = 0;
        while (1) {
          $315 = $$048$i << 4;
          $316 = (($5) + (($315 * 124) | 0) | 0);
          dest = $316;
          src = $7;
          stop = dest + 124 | 0;
          do {
            HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
            dest = dest + 4 | 0;
            src = src + 4 | 0;
          } while ((dest | 0) < (stop | 0));
          $317 = $315 | 1;
          $318 = (($5) + (($317 * 124) | 0) | 0);
          _secp256k1_gej_add_var($318, $316, $6);
          $319 = $315 | 2;
          $320 = (($5) + (($319 * 124) | 0) | 0);
          $321 = (($319) + -1) | 0;
          $322 = (($5) + (($321 * 124) | 0) | 0);
          _secp256k1_gej_add_var($320, $322, $6);
          $323 = $315 | 3;
          $324 = (($5) + (($323 * 124) | 0) | 0);
          $325 = (($323) + -1) | 0;
          $326 = (($5) + (($325 * 124) | 0) | 0);
          _secp256k1_gej_add_var($324, $326, $6);
          $327 = $315 | 4;
          $328 = (($5) + (($327 * 124) | 0) | 0);
          $329 = (($327) + -1) | 0;
          $330 = (($5) + (($329 * 124) | 0) | 0);
          _secp256k1_gej_add_var($328, $330, $6);
          $331 = $315 | 5;
          $332 = (($5) + (($331 * 124) | 0) | 0);
          $333 = (($331) + -1) | 0;
          $334 = (($5) + (($333 * 124) | 0) | 0);
          _secp256k1_gej_add_var($332, $334, $6);
          $335 = $315 | 6;
          $336 = (($5) + (($335 * 124) | 0) | 0);
          $337 = (($335) + -1) | 0;
          $338 = (($5) + (($337 * 124) | 0) | 0);
          _secp256k1_gej_add_var($336, $338, $6);
          $339 = $315 | 7;
          $340 = (($5) + (($339 * 124) | 0) | 0);
          $341 = (($339) + -1) | 0;
          $342 = (($5) + (($341 * 124) | 0) | 0);
          _secp256k1_gej_add_var($340, $342, $6);
          $343 = $315 | 8;
          $344 = (($5) + (($343 * 124) | 0) | 0);
          $345 = (($343) + -1) | 0;
          $346 = (($5) + (($345 * 124) | 0) | 0);
          _secp256k1_gej_add_var($344, $346, $6);
          $347 = $315 | 9;
          $348 = (($5) + (($347 * 124) | 0) | 0);
          $349 = (($347) + -1) | 0;
          $350 = (($5) + (($349 * 124) | 0) | 0);
          _secp256k1_gej_add_var($348, $350, $6);
          $351 = $315 | 10;
          $352 = (($5) + (($351 * 124) | 0) | 0);
          $353 = (($351) + -1) | 0;
          $354 = (($5) + (($353 * 124) | 0) | 0);
          _secp256k1_gej_add_var($352, $354, $6);
          $355 = $315 | 11;
          $356 = (($5) + (($355 * 124) | 0) | 0);
          $357 = (($355) + -1) | 0;
          $358 = (($5) + (($357 * 124) | 0) | 0);
          _secp256k1_gej_add_var($356, $358, $6);
          $359 = $315 | 12;
          $360 = (($5) + (($359 * 124) | 0) | 0);
          $361 = (($359) + -1) | 0;
          $362 = (($5) + (($361 * 124) | 0) | 0);
          _secp256k1_gej_add_var($360, $362, $6);
          $363 = $315 | 13;
          $364 = (($5) + (($363 * 124) | 0) | 0);
          $365 = (($363) + -1) | 0;
          $366 = (($5) + (($365 * 124) | 0) | 0);
          _secp256k1_gej_add_var($364, $366, $6);
          $367 = $315 | 14;
          $368 = (($5) + (($367 * 124) | 0) | 0);
          $369 = (($367) + -1) | 0;
          $370 = (($5) + (($369 * 124) | 0) | 0);
          _secp256k1_gej_add_var($368, $370, $6);
          $371 = $315 | 15;
          $372 = (($5) + (($371 * 124) | 0) | 0);
          $373 = (($371) + -1) | 0;
          $374 = (($5) + (($373 * 124) | 0) | 0);
          _secp256k1_gej_add_var($372, $374, $6);
          _secp256k1_gej_double_var($6, $6, 0);
          _secp256k1_gej_double_var($6, $6, 0);
          _secp256k1_gej_double_var($6, $6, 0);
          _secp256k1_gej_double_var($6, $6, 0);
          _secp256k1_gej_double_var($7, $7, 0);
          $375 = ($$048$i | 0) == (14);
          if ($375) {
            $376 = HEAP32[$305 >> 2] | 0;
            $377 = HEAP32[$306 >> 2] | 0;
            $378 = HEAP32[$307 >> 2] | 0;
            $379 = HEAP32[$308 >> 2] | 0;
            $380 = HEAP32[$309 >> 2] | 0;
            $381 = HEAP32[$310 >> 2] | 0;
            $382 = HEAP32[$311 >> 2] | 0;
            $383 = HEAP32[$312 >> 2] | 0;
            $384 = HEAP32[$313 >> 2] | 0;
            $385 = HEAP32[$314 >> 2] | 0;
            $386 = $385 >>> 22;
            $387 = $385 & 4194303;
            $388 = ($386 * 977) | 0;
            $389 = (($388) + ($376)) | 0;
            $390 = $386 << 6;
            $391 = (($390) + ($377)) | 0;
            $392 = $389 >>> 26;
            $393 = (($391) + ($392)) | 0;
            $394 = $389 & 67108863;
            $395 = $393 >>> 26;
            $396 = (($395) + ($378)) | 0;
            $397 = $393 & 67108863;
            $398 = $396 >>> 26;
            $399 = (($398) + ($379)) | 0;
            $400 = $396 & 67108863;
            $401 = $399 >>> 26;
            $402 = (($401) + ($380)) | 0;
            $403 = $399 & 67108863;
            $404 = $402 >>> 26;
            $405 = (($404) + ($381)) | 0;
            $406 = $402 & 67108863;
            $407 = $405 >>> 26;
            $408 = (($407) + ($382)) | 0;
            $409 = $405 & 67108863;
            $410 = $408 >>> 26;
            $411 = (($410) + ($383)) | 0;
            $412 = $408 & 67108863;
            $413 = $411 >>> 26;
            $414 = (($413) + ($384)) | 0;
            $415 = $411 & 67108863;
            $416 = $414 >>> 26;
            $417 = $414 & 67108863;
            $418 = (268431548 - ($394)) | 0;
            HEAP32[$305 >> 2] = $418;
            $419 = (268435196 - ($397)) | 0;
            HEAP32[$306 >> 2] = $419;
            $420 = (268435452 - ($400)) | 0;
            HEAP32[$307 >> 2] = $420;
            $421 = (268435452 - ($403)) | 0;
            HEAP32[$308 >> 2] = $421;
            $422 = (268435452 - ($406)) | 0;
            HEAP32[$309 >> 2] = $422;
            $423 = (268435452 - ($409)) | 0;
            HEAP32[$310 >> 2] = $423;
            $424 = (268435452 - ($412)) | 0;
            HEAP32[$311 >> 2] = $424;
            $425 = (268435452 - ($415)) | 0;
            HEAP32[$312 >> 2] = $425;
            $426 = (268435452 - ($417)) | 0;
            HEAP32[$313 >> 2] = $426;
            $$neg42$i = (16777212 - ($387)) | 0;
            $427 = (($$neg42$i) - ($416)) | 0;
            HEAP32[$314 >> 2] = $427;
            _secp256k1_gej_add_var($7, $7, $2);
            $$048$i = 15;
            continue;
          } else {
            $428 = (($$048$i) + 1) | 0;
            $exitcond52$i = ($428 | 0) == (16);
            if ($exitcond52$i) {
              break;
            } else {
              $$048$i = $428;
              continue;
            }
          }
        }
        _secp256k1_ge_set_all_gej_var(256, $1, $5);
        $$145$i = 0;
        while (1) {
          $429 = $$145$i << 4;
          $430 = HEAP32[$32 >> 2] | 0;
          $431 = (($430) + ($$145$i << 10) | 0);
          $432 = (($1) + (($429 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($431, $432);
          $433 = HEAP32[$32 >> 2] | 0;
          $434 = (((($433) + ($$145$i << 10) | 0)) + 64 | 0);
          $435 = $429 | 1;
          $436 = (($1) + (($435 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($434, $436);
          $437 = HEAP32[$32 >> 2] | 0;
          $438 = (((($437) + ($$145$i << 10) | 0)) + 128 | 0);
          $439 = $429 | 2;
          $440 = (($1) + (($439 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($438, $440);
          $441 = HEAP32[$32 >> 2] | 0;
          $442 = (((($441) + ($$145$i << 10) | 0)) + 192 | 0);
          $443 = $429 | 3;
          $444 = (($1) + (($443 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($442, $444);
          $445 = HEAP32[$32 >> 2] | 0;
          $446 = (((($445) + ($$145$i << 10) | 0)) + 256 | 0);
          $447 = $429 | 4;
          $448 = (($1) + (($447 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($446, $448);
          $449 = HEAP32[$32 >> 2] | 0;
          $450 = (((($449) + ($$145$i << 10) | 0)) + 320 | 0);
          $451 = $429 | 5;
          $452 = (($1) + (($451 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($450, $452);
          $453 = HEAP32[$32 >> 2] | 0;
          $454 = (((($453) + ($$145$i << 10) | 0)) + 384 | 0);
          $455 = $429 | 6;
          $456 = (($1) + (($455 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($454, $456);
          $457 = HEAP32[$32 >> 2] | 0;
          $458 = (((($457) + ($$145$i << 10) | 0)) + 448 | 0);
          $459 = $429 | 7;
          $460 = (($1) + (($459 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($458, $460);
          $461 = HEAP32[$32 >> 2] | 0;
          $462 = (((($461) + ($$145$i << 10) | 0)) + 512 | 0);
          $463 = $429 | 8;
          $464 = (($1) + (($463 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($462, $464);
          $465 = HEAP32[$32 >> 2] | 0;
          $466 = (((($465) + ($$145$i << 10) | 0)) + 576 | 0);
          $467 = $429 | 9;
          $468 = (($1) + (($467 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($466, $468);
          $469 = HEAP32[$32 >> 2] | 0;
          $470 = (((($469) + ($$145$i << 10) | 0)) + 640 | 0);
          $471 = $429 | 10;
          $472 = (($1) + (($471 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($470, $472);
          $473 = HEAP32[$32 >> 2] | 0;
          $474 = (((($473) + ($$145$i << 10) | 0)) + 704 | 0);
          $475 = $429 | 11;
          $476 = (($1) + (($475 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($474, $476);
          $477 = HEAP32[$32 >> 2] | 0;
          $478 = (((($477) + ($$145$i << 10) | 0)) + 768 | 0);
          $479 = $429 | 12;
          $480 = (($1) + (($479 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($478, $480);
          $481 = HEAP32[$32 >> 2] | 0;
          $482 = (((($481) + ($$145$i << 10) | 0)) + 832 | 0);
          $483 = $429 | 13;
          $484 = (($1) + (($483 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($482, $484);
          $485 = HEAP32[$32 >> 2] | 0;
          $486 = (((($485) + ($$145$i << 10) | 0)) + 896 | 0);
          $487 = $429 | 14;
          $488 = (($1) + (($487 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($486, $488);
          $489 = HEAP32[$32 >> 2] | 0;
          $490 = (((($489) + ($$145$i << 10) | 0)) + 960 | 0);
          $491 = $429 | 15;
          $492 = (($1) + (($491 * 84) | 0) | 0);
          _secp256k1_ge_to_storage($490, $492);
          $493 = (($$145$i) + 1) | 0;
          $exitcond$i21 = ($493 | 0) == (16);
          if ($exitcond$i21) {
            break;
          } else {
            $$145$i = $493;
          }
        }
      }
    }
    $494 = $0 & 256;
    $495 = ($494 | 0) == (0);
    if ($495) {
      STACKTOP = sp;
      return ($28 | 0);
    }
    $496 = HEAP32[$33 >> 2] | 0;
    $497 = ($496 | 0) == (0 | 0);
    if ($497) {
      $498 = (_malloc(124620) | 0);
      $499 = ($498 | 0) == (0 | 0);
      if ($499) {
        $500 = HEAP32[125] | 0;
        HEAP32[$vararg_buffer33 >> 2] = 1676;
        $vararg_ptr36 = ((($vararg_buffer33)) + 4 | 0);
        HEAP32[$vararg_ptr36 >> 2] = 67;
        $vararg_ptr37 = ((($vararg_buffer33)) + 8 | 0);
        HEAP32[$vararg_ptr37 >> 2] = 1689;
        (_fprintf($500, 628, $vararg_buffer33) | 0);
        _abort();
        // unreachable;
      }
      $501 = (_malloc(84420) | 0);
      $502 = ($501 | 0) == (0 | 0);
      if ($502) {
        $503 = HEAP32[125] | 0;
        HEAP32[$vararg_buffer38 >> 2] = 1676;
        $vararg_ptr41 = ((($vararg_buffer38)) + 4 | 0);
        HEAP32[$vararg_ptr41 >> 2] = 67;
        $vararg_ptr42 = ((($vararg_buffer38)) + 8 | 0);
        HEAP32[$vararg_ptr42 >> 2] = 1689;
        (_fprintf($503, 628, $vararg_buffer38) | 0);
        _abort();
        // unreachable;
      }
      $504 = ((($27)) + 120 | 0);
      HEAP32[$504 >> 2] = 0;
      dest = $27;
      src = 92;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $505 = ((($27)) + 80 | 0);
      HEAP32[$505 >> 2] = 1;
      $506 = ((($27)) + 84 | 0);
      dest = $506;
      stop = dest + 36 | 0;
      do {
        HEAP32[dest >> 2] = 0 | 0;
        dest = dest + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $507 = ((($27)) + 40 | 0);
      $508 = ((($27)) + 44 | 0);
      $509 = ((($27)) + 48 | 0);
      $510 = ((($27)) + 52 | 0);
      $511 = ((($27)) + 56 | 0);
      $512 = ((($27)) + 60 | 0);
      $513 = ((($27)) + 64 | 0);
      $514 = ((($27)) + 68 | 0);
      $515 = ((($27)) + 72 | 0);
      $516 = ((($27)) + 76 | 0);
      HEAP32[$507 >> 2] = 207382456;
      HEAP32[$508 >> 2] = 217528832;
      HEAP32[$509 >> 2] = 225014732;
      HEAP32[$510 >> 2] = 232012323;
      HEAP32[$511 >> 2] = 231286074;
      HEAP32[$512 >> 2] = 261260026;
      HEAP32[$513 >> 2] = 236570673;
      HEAP32[$514 >> 2] = 230049770;
      HEAP32[$515 >> 2] = 226084489;
      HEAP32[$516 >> 2] = 15960843;
      $$04756$i = 0;
      $$057$i = 0;
      while (1) {
        $517 = (($$057$i) + 1) | 0;
        $518 = (176 + ($517 << 2) | 0);
        $519 = HEAP32[$518 >> 2] | 0;
        dest = $26;
        src = $27;
        stop = dest + 124 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $520 = ($$04756$i | 0) < ($519 | 0);
        if ($520) {
          $521 = (($519) + -1) | 0;
          $$14855$i = $$04756$i;
          while (1) {
            $522 = (($498) + (($$14855$i * 124) | 0) | 0);
            dest = $522;
            src = $26;
            stop = dest + 124 | 0;
            do {
              HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
              dest = dest + 4 | 0;
              src = src + 4 | 0;
            } while ((dest | 0) < (stop | 0));
            $523 = (($$14855$i) + 1) | 0;
            $524 = (($498) + (($523 * 124) | 0) | 0);
            _secp256k1_gej_double_var($524, $26, 0);
            $525 = (($$14855$i) + 2) | 0;
            $526 = (($498) + (($525 * 124) | 0) | 0);
            _secp256k1_gej_add_var($526, $524, $26);
            $527 = (($$14855$i) + 3) | 0;
            $528 = ($527 | 0) < ($521 | 0);
            if ($528) {
              _secp256k1_gej_double_var($26, $524, 0);
            }
            $529 = ($527 | 0) < ($519 | 0);
            if ($529) {
              $$14855$i = $527;
            } else {
              $$148$lcssa$i = $527;
              break;
            }
          }
        } else {
          $$148$lcssa$i = $$04756$i;
        }
        $530 = ($$057$i | 0) < (18);
        if ($530) {
          _secp256k1_gej_double_var($26, $27, 0);
          dest = $27;
          src = $26;
          stop = dest + 124 | 0;
          do {
            HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
            dest = dest + 4 | 0;
            src = src + 4 | 0;
          } while ((dest | 0) < (stop | 0));
          _secp256k1_gej_double_var($26, $26, 0);
          _secp256k1_gej_double_var($26, $26, 0);
          _secp256k1_gej_add_var($27, $27, $26);
        }
        $exitcond58$i = ($517 | 0) == (19);
        if ($exitcond58$i) {
          break;
        } else {
          $$04756$i = $$148$lcssa$i;
          $$057$i = $517;
        }
      }
      _secp256k1_ge_set_all_gej_var(1005, $501, $498);
      _free($498);
      $531 = (_malloc(64320) | 0);
      $532 = ($531 | 0) == (0 | 0);
      if ($532) {
        $533 = HEAP32[125] | 0;
        HEAP32[$vararg_buffer43 >> 2] = 1676;
        $vararg_ptr46 = ((($vararg_buffer43)) + 4 | 0);
        HEAP32[$vararg_ptr46 >> 2] = 67;
        $vararg_ptr47 = ((($vararg_buffer43)) + 8 | 0);
        HEAP32[$vararg_ptr47 >> 2] = 1689;
        (_fprintf($533, 628, $vararg_buffer43) | 0);
        _abort();
        // unreachable;
      }
      HEAP32[$33 >> 2] = $531;
      _secp256k1_ge_to_storage($531, $501);
      $535 = 1;
      while (1) {
        $$pre$i = HEAP32[$33 >> 2] | 0;
        $534 = (($$pre$i) + ($535 << 6) | 0);
        $536 = (($501) + (($535 * 84) | 0) | 0);
        _secp256k1_ge_to_storage($534, $536);
        $537 = (($535) + 1) | 0;
        $exitcond$i = ($537 | 0) == (1005);
        if ($exitcond$i) {
          break;
        } else {
          $535 = $537;
        }
      }
      _free($501);
    }
    STACKTOP = sp;
    return ($28 | 0);
  }

  function _secp256k1_context_destroy($0) {
    $0 = $0 | 0;
    var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $1 = HEAP32[$0 >> 2] | 0;
    _free($1);
    HEAP32[$0 >> 2] = 0;
    $2 = ((($0)) + 4 | 0);
    $3 = HEAP32[$2 >> 2] | 0;
    _free($3);
    _memset(($2 | 0), 0, 160) | 0;
    $4 = ((($0)) + 164 | 0);
    $5 = HEAP32[$4 >> 2] | 0;
    _free($5);
    HEAP32[$4 >> 2] = 0;
    $6 = ((($0)) + 168 | 0);
    $7 = HEAP32[$6 >> 2] | 0;
    _free($7);
    _free($0);
    return;
  }

  function _secp256k1_scalar_get_b32($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0,
      $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
    var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0,
      $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
    var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0,
      $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
    var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0,
      $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
    var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0,
      $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
    var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0,
      $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
    var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $2 = ((($1)) + 28 | 0);
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 >>> 24;
    $5 = $4 & 255;
    HEAP8[$0 >> 0] = $5;
    $6 = HEAP32[$2 >> 2] | 0;
    $7 = $6 >>> 16;
    $8 = $7 & 255;
    $9 = ((($0)) + 1 | 0);
    HEAP8[$9 >> 0] = $8;
    $10 = HEAP32[$2 >> 2] | 0;
    $11 = $10 >>> 8;
    $12 = $11 & 255;
    $13 = ((($0)) + 2 | 0);
    HEAP8[$13 >> 0] = $12;
    $14 = HEAP32[$2 >> 2] | 0;
    $15 = $14 & 255;
    $16 = ((($0)) + 3 | 0);
    HEAP8[$16 >> 0] = $15;
    $17 = ((($1)) + 24 | 0);
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18 >>> 24;
    $20 = $19 & 255;
    $21 = ((($0)) + 4 | 0);
    HEAP8[$21 >> 0] = $20;
    $22 = HEAP32[$17 >> 2] | 0;
    $23 = $22 >>> 16;
    $24 = $23 & 255;
    $25 = ((($0)) + 5 | 0);
    HEAP8[$25 >> 0] = $24;
    $26 = HEAP32[$17 >> 2] | 0;
    $27 = $26 >>> 8;
    $28 = $27 & 255;
    $29 = ((($0)) + 6 | 0);
    HEAP8[$29 >> 0] = $28;
    $30 = HEAP32[$17 >> 2] | 0;
    $31 = $30 & 255;
    $32 = ((($0)) + 7 | 0);
    HEAP8[$32 >> 0] = $31;
    $33 = ((($1)) + 20 | 0);
    $34 = HEAP32[$33 >> 2] | 0;
    $35 = $34 >>> 24;
    $36 = $35 & 255;
    $37 = ((($0)) + 8 | 0);
    HEAP8[$37 >> 0] = $36;
    $38 = HEAP32[$33 >> 2] | 0;
    $39 = $38 >>> 16;
    $40 = $39 & 255;
    $41 = ((($0)) + 9 | 0);
    HEAP8[$41 >> 0] = $40;
    $42 = HEAP32[$33 >> 2] | 0;
    $43 = $42 >>> 8;
    $44 = $43 & 255;
    $45 = ((($0)) + 10 | 0);
    HEAP8[$45 >> 0] = $44;
    $46 = HEAP32[$33 >> 2] | 0;
    $47 = $46 & 255;
    $48 = ((($0)) + 11 | 0);
    HEAP8[$48 >> 0] = $47;
    $49 = ((($1)) + 16 | 0);
    $50 = HEAP32[$49 >> 2] | 0;
    $51 = $50 >>> 24;
    $52 = $51 & 255;
    $53 = ((($0)) + 12 | 0);
    HEAP8[$53 >> 0] = $52;
    $54 = HEAP32[$49 >> 2] | 0;
    $55 = $54 >>> 16;
    $56 = $55 & 255;
    $57 = ((($0)) + 13 | 0);
    HEAP8[$57 >> 0] = $56;
    $58 = HEAP32[$49 >> 2] | 0;
    $59 = $58 >>> 8;
    $60 = $59 & 255;
    $61 = ((($0)) + 14 | 0);
    HEAP8[$61 >> 0] = $60;
    $62 = HEAP32[$49 >> 2] | 0;
    $63 = $62 & 255;
    $64 = ((($0)) + 15 | 0);
    HEAP8[$64 >> 0] = $63;
    $65 = ((($1)) + 12 | 0);
    $66 = HEAP32[$65 >> 2] | 0;
    $67 = $66 >>> 24;
    $68 = $67 & 255;
    $69 = ((($0)) + 16 | 0);
    HEAP8[$69 >> 0] = $68;
    $70 = HEAP32[$65 >> 2] | 0;
    $71 = $70 >>> 16;
    $72 = $71 & 255;
    $73 = ((($0)) + 17 | 0);
    HEAP8[$73 >> 0] = $72;
    $74 = HEAP32[$65 >> 2] | 0;
    $75 = $74 >>> 8;
    $76 = $75 & 255;
    $77 = ((($0)) + 18 | 0);
    HEAP8[$77 >> 0] = $76;
    $78 = HEAP32[$65 >> 2] | 0;
    $79 = $78 & 255;
    $80 = ((($0)) + 19 | 0);
    HEAP8[$80 >> 0] = $79;
    $81 = ((($1)) + 8 | 0);
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = $82 >>> 24;
    $84 = $83 & 255;
    $85 = ((($0)) + 20 | 0);
    HEAP8[$85 >> 0] = $84;
    $86 = HEAP32[$81 >> 2] | 0;
    $87 = $86 >>> 16;
    $88 = $87 & 255;
    $89 = ((($0)) + 21 | 0);
    HEAP8[$89 >> 0] = $88;
    $90 = HEAP32[$81 >> 2] | 0;
    $91 = $90 >>> 8;
    $92 = $91 & 255;
    $93 = ((($0)) + 22 | 0);
    HEAP8[$93 >> 0] = $92;
    $94 = HEAP32[$81 >> 2] | 0;
    $95 = $94 & 255;
    $96 = ((($0)) + 23 | 0);
    HEAP8[$96 >> 0] = $95;
    $97 = ((($1)) + 4 | 0);
    $98 = HEAP32[$97 >> 2] | 0;
    $99 = $98 >>> 24;
    $100 = $99 & 255;
    $101 = ((($0)) + 24 | 0);
    HEAP8[$101 >> 0] = $100;
    $102 = HEAP32[$97 >> 2] | 0;
    $103 = $102 >>> 16;
    $104 = $103 & 255;
    $105 = ((($0)) + 25 | 0);
    HEAP8[$105 >> 0] = $104;
    $106 = HEAP32[$97 >> 2] | 0;
    $107 = $106 >>> 8;
    $108 = $107 & 255;
    $109 = ((($0)) + 26 | 0);
    HEAP8[$109 >> 0] = $108;
    $110 = HEAP32[$97 >> 2] | 0;
    $111 = $110 & 255;
    $112 = ((($0)) + 27 | 0);
    HEAP8[$112 >> 0] = $111;
    $113 = HEAP32[$1 >> 2] | 0;
    $114 = $113 >>> 24;
    $115 = $114 & 255;
    $116 = ((($0)) + 28 | 0);
    HEAP8[$116 >> 0] = $115;
    $117 = HEAP32[$1 >> 2] | 0;
    $118 = $117 >>> 16;
    $119 = $118 & 255;
    $120 = ((($0)) + 29 | 0);
    HEAP8[$120 >> 0] = $119;
    $121 = HEAP32[$1 >> 2] | 0;
    $122 = $121 >>> 8;
    $123 = $122 & 255;
    $124 = ((($0)) + 30 | 0);
    HEAP8[$124 >> 0] = $123;
    $125 = HEAP32[$1 >> 2] | 0;
    $126 = $125 & 255;
    $127 = ((($0)) + 31 | 0);
    HEAP8[$127 >> 0] = $126;
    return;
  }

  function _secp256k1_ecmult_gen_blind($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0,
      $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
    var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0,
      $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
    var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0,
      $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
    var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0,
      $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
    var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0,
      $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
    var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0,
      $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
    var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0,
      $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
    var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0,
      label = 0, sp = 0, src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 352 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352 | 0);
    $2 = sp + 272 | 0;
    $3 = sp + 240 | 0;
    $4 = sp + 112 | 0;
    $5 = sp + 72 | 0;
    $6 = sp + 312 | 0;
    $7 = sp + 4 | 0;
    $8 = sp;
    $9 = ($1 | 0) != (0 | 0);
    if (!($9)) {
      $10 = ((($0)) + 36 | 0);
      $11 = ((($0)) + 156 | 0);
      HEAP32[$11 >> 2] = 0;
      dest = $10;
      src = 8;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $12 = ((($0)) + 116 | 0);
      HEAP32[$12 >> 2] = 1;
      $13 = ((($0)) + 120 | 0);
      dest = $13;
      stop = dest + 36 | 0;
      do {
        HEAP32[dest >> 2] = 0 | 0;
        dest = dest + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $14 = ((($0)) + 76 | 0);
      $15 = ((($0)) + 80 | 0);
      $16 = ((($0)) + 84 | 0);
      $17 = ((($0)) + 88 | 0);
      $18 = ((($0)) + 92 | 0);
      $19 = ((($0)) + 96 | 0);
      $20 = ((($0)) + 100 | 0);
      $21 = ((($0)) + 104 | 0);
      $22 = ((($0)) + 108 | 0);
      $23 = ((($0)) + 112 | 0);
      HEAP32[$14 >> 2] = 216996868;
      HEAP32[$15 >> 2] = 235657982;
      HEAP32[$16 >> 2] = 247359032;
      HEAP32[$17 >> 2] = 249390567;
      HEAP32[$18 >> 2] = 251848776;
      HEAP32[$19 >> 2] = 209436114;
      HEAP32[$20 >> 2] = 229654588;
      HEAP32[$21 >> 2] = 216951430;
      HEAP32[$22 >> 2] = 227072345;
      HEAP32[$23 >> 2] = 15593798;
      $24 = ((($0)) + 4 | 0);
      HEAP32[$24 >> 2] = 1;
      $25 = ((($0)) + 8 | 0);
      ;HEAP32[$25 >> 2] = 0 | 0;
      HEAP32[$25 + 4 >> 2] = 0 | 0;
      HEAP32[$25 + 8 >> 2] = 0 | 0;
      HEAP32[$25 + 12 >> 2] = 0 | 0;
      HEAP32[$25 + 16 >> 2] = 0 | 0;
      HEAP32[$25 + 20 >> 2] = 0 | 0;
      HEAP32[$25 + 24 >> 2] = 0 | 0;
    }
    $26 = ((($0)) + 4 | 0);
    _secp256k1_scalar_get_b32($6, $26);
    $27 = $9 ? $1 : $6;
    _secp256k1_rfc6979_hmac_sha256_initialize($7, $27, $6, 32, 0, 0);
    $28 = ((($5)) + 4 | 0);
    $29 = ((($5)) + 8 | 0);
    $30 = ((($5)) + 12 | 0);
    $31 = ((($5)) + 16 | 0);
    $32 = ((($5)) + 20 | 0);
    $33 = ((($5)) + 24 | 0);
    $34 = ((($5)) + 28 | 0);
    $35 = ((($5)) + 32 | 0);
    $36 = ((($5)) + 36 | 0);
    while (1) {
      _secp256k1_rfc6979_hmac_sha256_generate($7, $6);
      $37 = (_secp256k1_fe_set_b32($5, $6) | 0);
      $38 = ($37 | 0) == (0);
      $39 = HEAP32[$5 >> 2] | 0;
      $40 = HEAP32[$28 >> 2] | 0;
      $41 = $40 | $39;
      $42 = HEAP32[$29 >> 2] | 0;
      $43 = $41 | $42;
      $44 = HEAP32[$30 >> 2] | 0;
      $45 = $43 | $44;
      $46 = HEAP32[$31 >> 2] | 0;
      $47 = $45 | $46;
      $48 = HEAP32[$32 >> 2] | 0;
      $49 = $47 | $48;
      $50 = HEAP32[$33 >> 2] | 0;
      $51 = $49 | $50;
      $52 = HEAP32[$34 >> 2] | 0;
      $53 = $51 | $52;
      $54 = HEAP32[$35 >> 2] | 0;
      $55 = $53 | $54;
      $56 = HEAP32[$36 >> 2] | 0;
      $57 = $55 | $56;
      $58 = ($57 | 0) == (0);
      $59 = $38 | $58;
      $60 = $59 & 1;
      HEAP32[$8 >> 2] = $60;
      if (!($59)) {
        break;
      }
    }
    $61 = ((($0)) + 36 | 0);
    _secp256k1_fe_sqr($2, $5);
    _secp256k1_fe_mul($61, $61, $2);
    $62 = ((($0)) + 76 | 0);
    _secp256k1_fe_mul($62, $62, $2);
    _secp256k1_fe_mul($62, $62, $5);
    $63 = ((($0)) + 116 | 0);
    _secp256k1_fe_mul($63, $63, $5);
    dest = $5;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = 0 | 0;
      dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $64 = ((($3)) + 4 | 0);
    $65 = ((($3)) + 8 | 0);
    $66 = ((($3)) + 12 | 0);
    $67 = ((($3)) + 16 | 0);
    $68 = ((($3)) + 20 | 0);
    $69 = ((($3)) + 24 | 0);
    $70 = ((($3)) + 28 | 0);
    while (1) {
      _secp256k1_rfc6979_hmac_sha256_generate($7, $6);
      _secp256k1_scalar_set_b32($3, $6, $8);
      $71 = HEAP32[$3 >> 2] | 0;
      $72 = HEAP32[$64 >> 2] | 0;
      $73 = $72 | $71;
      $74 = HEAP32[$65 >> 2] | 0;
      $75 = $73 | $74;
      $76 = HEAP32[$66 >> 2] | 0;
      $77 = $75 | $76;
      $78 = HEAP32[$67 >> 2] | 0;
      $79 = $77 | $78;
      $80 = HEAP32[$68 >> 2] | 0;
      $81 = $79 | $80;
      $82 = HEAP32[$69 >> 2] | 0;
      $83 = $81 | $82;
      $84 = HEAP32[$70 >> 2] | 0;
      $85 = $83 | $84;
      $86 = ($85 | 0) == (0);
      $87 = $86 & 1;
      $88 = HEAP32[$8 >> 2] | 0;
      $89 = $87 | $88;
      HEAP32[$8 >> 2] = $89;
      $90 = ($89 | 0) == (0);
      if ($90) {
        break;
      }
    }
    dest = $6;
    stop = dest + 32 | 0;
    do {
      HEAP8[dest >> 0] = 0 | 0;
      dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_ecmult_gen($0, $4, $3);
    $91 = HEAP32[$3 >> 2] | 0;
    $92 = HEAP32[$64 >> 2] | 0;
    $93 = $92 | $91;
    $94 = HEAP32[$65 >> 2] | 0;
    $95 = $93 | $94;
    $96 = HEAP32[$66 >> 2] | 0;
    $97 = $95 | $96;
    $98 = HEAP32[$67 >> 2] | 0;
    $99 = $97 | $98;
    $100 = HEAP32[$68 >> 2] | 0;
    $101 = $99 | $100;
    $102 = HEAP32[$69 >> 2] | 0;
    $103 = $101 | $102;
    $104 = HEAP32[$70 >> 2] | 0;
    $105 = $103 | $104;
    $106 = ($105 | 0) != (0);
    $107 = $106 << 31 >> 31;
    $108 = $91 ^ -1;
    $109 = (_i64Add(($108 | 0), 0, -801750718, 0) | 0);
    $110 = tempRet0;
    $111 = $107 & $109;
    HEAP32[$3 >> 2] = $111;
    $112 = $92 ^ -1;
    $113 = $110 | -1076732276;
    $114 = (_i64Add(($112 | 0), 0, ($113 | 0), 0) | 0);
    $115 = tempRet0;
    $116 = $114 & $107;
    HEAP32[$64 >> 2] = $116;
    $117 = $94 ^ -1;
    $118 = (_i64Add(($117 | 0), 0, -1354194885, 0) | 0);
    $119 = tempRet0;
    $120 = (_i64Add(($118 | 0), ($119 | 0), ($115 | 0), 0) | 0);
    $121 = tempRet0;
    $122 = $120 & $107;
    HEAP32[$65 >> 2] = $122;
    $123 = $96 ^ -1;
    $124 = (_i64Add(($123 | 0), 0, -1162945306, 0) | 0);
    $125 = tempRet0;
    $126 = (_i64Add(($124 | 0), ($125 | 0), ($121 | 0), 0) | 0);
    $127 = tempRet0;
    $128 = $126 & $107;
    HEAP32[$66 >> 2] = $128;
    $129 = $98 ^ -1;
    $130 = (_i64Add(($129 | 0), 0, -2, 0) | 0);
    $131 = tempRet0;
    $132 = (_i64Add(($130 | 0), ($131 | 0), ($127 | 0), 0) | 0);
    $133 = tempRet0;
    $134 = $132 & $107;
    HEAP32[$67 >> 2] = $134;
    $135 = $100 ^ -1;
    $136 = (_i64Add(($135 | 0), 0, -1, 0) | 0);
    $137 = tempRet0;
    $138 = (_i64Add(($136 | 0), ($137 | 0), ($133 | 0), 0) | 0);
    $139 = tempRet0;
    $140 = $138 & $107;
    HEAP32[$68 >> 2] = $140;
    $141 = $102 ^ -1;
    $142 = (_i64Add(($141 | 0), 0, -1, 0) | 0);
    $143 = tempRet0;
    $144 = (_i64Add(($142 | 0), ($143 | 0), ($139 | 0), 0) | 0);
    $145 = tempRet0;
    $146 = $144 & $107;
    HEAP32[$69 >> 2] = $146;
    $147 = $104 ^ -1;
    $148 = (_i64Add(($147 | 0), 0, -1, 0) | 0);
    $149 = tempRet0;
    $150 = (_i64Add(($148 | 0), ($149 | 0), ($145 | 0), 0) | 0);
    $151 = tempRet0;
    $152 = $150 & $107;
    HEAP32[$70 >> 2] = $152;
    ;HEAP32[$26 >> 2] = HEAP32[$3 >> 2] | 0;
    HEAP32[$26 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0;
    HEAP32[$26 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0;
    HEAP32[$26 + 12 >> 2] = HEAP32[$3 + 12 >> 2] | 0;
    HEAP32[$26 + 16 >> 2] = HEAP32[$3 + 16 >> 2] | 0;
    HEAP32[$26 + 20 >> 2] = HEAP32[$3 + 20 >> 2] | 0;
    HEAP32[$26 + 24 >> 2] = HEAP32[$3 + 24 >> 2] | 0;
    HEAP32[$26 + 28 >> 2] = HEAP32[$3 + 28 >> 2] | 0;
    dest = $61;
    src = $4;
    stop = dest + 124 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    STACKTOP = sp;
    return;
  }

  function _secp256k1_pedersen_commit($0, $1, $2, $3, $4) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    $4 = $4 | 0;
    var $$0 = 0, $$028$i = 0, $$1 = 0, $$idx = 0, $$idx$val = 0, $$idx11$val = 0, $$idx12$val = 0, $$idx12$val$i = 0,
      $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
    var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0,
      $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
    var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0,
      $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
    var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0,
      $71 = 0, $72 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0;
    var $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0,
      $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr6 = 0,
      $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 528 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(528 | 0);
    $vararg_buffer18 = sp + 64 | 0;
    $vararg_buffer13 = sp + 48 | 0;
    $vararg_buffer8 = sp + 32 | 0;
    $vararg_buffer3 = sp + 16 | 0;
    $vararg_buffer = sp;
    $5 = sp + 488 | 0;
    $6 = sp + 448 | 0;
    $7 = sp + 320 | 0;
    $8 = sp + 196 | 0;
    $9 = sp + 112 | 0;
    $10 = sp + 80 | 0;
    $11 = sp + 76 | 0;
    $12 = ($0 | 0) == (0 | 0);
    if ($12) {
      $13 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer >> 2] = 713;
      $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
      HEAP32[$vararg_ptr1 >> 2] = 473;
      $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
      HEAP32[$vararg_ptr2 >> 2] = 729;
      (_fprintf($13, 628, $vararg_buffer) | 0);
      _abort();
      // unreachable;
    }
    $14 = ((($0)) + 4 | 0);
    $$idx11$val = HEAP32[$14 >> 2] | 0;
    $15 = ($$idx11$val | 0) == (0 | 0);
    if ($15) {
      $16 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer3 >> 2] = 713;
      $vararg_ptr6 = ((($vararg_buffer3)) + 4 | 0);
      HEAP32[$vararg_ptr6 >> 2] = 474;
      $vararg_ptr7 = ((($vararg_buffer3)) + 8 | 0);
      HEAP32[$vararg_ptr7 >> 2] = 839;
      (_fprintf($16, 628, $vararg_buffer3) | 0);
      _abort();
      // unreachable;
    }
    $17 = ((($0)) + 164 | 0);
    $$idx12$val = HEAP32[$17 >> 2] | 0;
    $18 = ($$idx12$val | 0) == (0 | 0);
    if ($18) {
      $19 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer8 >> 2] = 713;
      $vararg_ptr11 = ((($vararg_buffer8)) + 4 | 0);
      HEAP32[$vararg_ptr11 >> 2] = 475;
      $vararg_ptr12 = ((($vararg_buffer8)) + 8 | 0);
      HEAP32[$vararg_ptr12 >> 2] = 922;
      (_fprintf($19, 628, $vararg_buffer8) | 0);
      _abort();
      // unreachable;
    }
    $20 = ($1 | 0) == (0 | 0);
    if ($20) {
      $21 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer13 >> 2] = 713;
      $vararg_ptr16 = ((($vararg_buffer13)) + 4 | 0);
      HEAP32[$vararg_ptr16 >> 2] = 476;
      $vararg_ptr17 = ((($vararg_buffer13)) + 8 | 0);
      HEAP32[$vararg_ptr17 >> 2] = 1007;
      (_fprintf($21, 628, $vararg_buffer13) | 0);
      _abort();
      // unreachable;
    }
    $22 = ($2 | 0) == (0 | 0);
    if ($22) {
      $23 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer18 >> 2] = 713;
      $vararg_ptr21 = ((($vararg_buffer18)) + 4 | 0);
      HEAP32[$vararg_ptr21 >> 2] = 477;
      $vararg_ptr22 = ((($vararg_buffer18)) + 8 | 0);
      HEAP32[$vararg_ptr22 >> 2] = 1045;
      (_fprintf($23, 628, $vararg_buffer18) | 0);
      _abort();
      // unreachable;
    }
    _secp256k1_scalar_set_b32($10, $2, $11);
    $24 = HEAP32[$11 >> 2] | 0;
    $25 = ($24 | 0) == (0);
    if (!($25)) {
      $$1 = 0;
      STACKTOP = sp;
      return ($$1 | 0);
    }
    _secp256k1_ecmult_gen($14, $8, $10);
    _secp256k1_ecmult_gen2_small($17, $7, $3, $4);
    _secp256k1_gej_add_var($8, $8, $7);
    $$idx = ((($8)) + 120 | 0);
    $$idx$val = HEAP32[$$idx >> 2] | 0;
    $26 = ($$idx$val | 0) == (0);
    if ($26) {
      $27 = ((($9)) + 80 | 0);
      HEAP32[$27 >> 2] = 0;
      $28 = ((($8)) + 80 | 0);
      _secp256k1_fe_inv($28, $28);
      _secp256k1_fe_sqr($5, $28);
      _secp256k1_fe_mul($6, $28, $5);
      _secp256k1_fe_mul($8, $8, $5);
      $29 = ((($8)) + 40 | 0);
      _secp256k1_fe_mul($29, $29, $6);
      HEAP32[$28 >> 2] = 1;
      $30 = ((($8)) + 84 | 0);
      dest = $30;
      stop = dest + 36 | 0;
      do {
        HEAP32[dest >> 2] = 0 | 0;
        dest = dest + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      dest = $9;
      src = $8;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $31 = ((($9)) + 40 | 0);
      dest = $31;
      src = $29;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      _secp256k1_fe_normalize_var($9);
      _secp256k1_fe_normalize_var($31);
      $32 = ((($1)) + 1 | 0);
      $$028$i = 0;
      while (1) {
        $33 = $$028$i << 3;
        $34 = (($33 | 0) / 26) & -1;
        $35 = (($33 | 0) % 26) & -1;
        $36 = (($9) + ($34 << 2) | 0);
        $37 = HEAP32[$36 >> 2] | 0;
        $38 = $37 >>> $35;
        $39 = $38 & 3;
        $40 = $33 | 2;
        $41 = (($40 | 0) / 26) & -1;
        $42 = (($40 | 0) % 26) & -1;
        $43 = (($9) + ($41 << 2) | 0);
        $44 = HEAP32[$43 >> 2] | 0;
        $45 = $44 >>> $42;
        $46 = $45 << 2;
        $47 = $46 & 12;
        $48 = $47 | $39;
        $49 = $33 | 4;
        $50 = (($49 | 0) / 26) & -1;
        $51 = (($49 | 0) % 26) & -1;
        $52 = (($9) + ($50 << 2) | 0);
        $53 = HEAP32[$52 >> 2] | 0;
        $54 = $53 >>> $51;
        $55 = $54 << 4;
        $56 = $55 & 48;
        $57 = $48 | $56;
        $58 = $33 | 6;
        $59 = (($58 | 0) / 26) & -1;
        $60 = (($58 | 0) % 26) & -1;
        $61 = (($9) + ($59 << 2) | 0);
        $62 = HEAP32[$61 >> 2] | 0;
        $63 = $62 >>> $60;
        $64 = $63 << 6;
        $65 = $57 | $64;
        $66 = $65 & 255;
        $67 = (31 - ($$028$i)) | 0;
        $68 = (($32) + ($67) | 0);
        HEAP8[$68 >> 0] = $66;
        $69 = (($$028$i) + 1) | 0;
        $exitcond$i = ($69 | 0) == (32);
        if ($exitcond$i) {
          break;
        } else {
          $$028$i = $69;
        }
      }
      $$idx12$val$i = HEAP32[$31 >> 2] | 0;
      $70 = $$idx12$val$i & 1;
      $71 = $70 | 2;
      $72 = $71 & 255;
      HEAP8[$1 >> 0] = $72;
      $$0 = 1;
    } else {
      $$0 = 0;
    }
    dest = $8;
    stop = dest + 124 | 0;
    do {
      HEAP32[dest >> 2] = 0 | 0;
      dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $9;
    stop = dest + 84 | 0;
    do {
      HEAP32[dest >> 2] = 0 | 0;
      dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $$1 = $$0;
    STACKTOP = sp;
    return ($$1 | 0);
  }

  function _secp256k1_pedersen_blind_sum($0, $1, $2, $3, $4) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    $4 = $4 | 0;
    var $$012 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0,
      $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
    var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0,
      $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
    var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0,
      $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
    var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0,
      $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
    var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0,
      $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0,
      $vararg_ptr7 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 112 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112 | 0);
    $vararg_buffer8 = sp + 32 | 0;
    $vararg_buffer3 = sp + 16 | 0;
    $vararg_buffer = sp;
    $5 = sp + 80 | 0;
    $6 = sp + 48 | 0;
    $7 = sp + 44 | 0;
    $8 = ($0 | 0) == (0 | 0);
    if ($8) {
      $9 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer >> 2] = 713;
      $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
      HEAP32[$vararg_ptr1 >> 2] = 501;
      $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
      HEAP32[$vararg_ptr2 >> 2] = 729;
      (_fprintf($9, 628, $vararg_buffer) | 0);
      _abort();
      // unreachable;
    }
    $10 = ($1 | 0) == (0 | 0);
    if ($10) {
      $11 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer3 >> 2] = 713;
      $vararg_ptr6 = ((($vararg_buffer3)) + 4 | 0);
      HEAP32[$vararg_ptr6 >> 2] = 502;
      $vararg_ptr7 = ((($vararg_buffer3)) + 8 | 0);
      HEAP32[$vararg_ptr7 >> 2] = 1082;
      (_fprintf($11, 628, $vararg_buffer3) | 0);
      _abort();
      // unreachable;
    }
    $12 = ($2 | 0) == (0 | 0);
    if ($12) {
      $13 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer8 >> 2] = 713;
      $vararg_ptr11 = ((($vararg_buffer8)) + 4 | 0);
      HEAP32[$vararg_ptr11 >> 2] = 503;
      $vararg_ptr12 = ((($vararg_buffer8)) + 8 | 0);
      HEAP32[$vararg_ptr12 >> 2] = 1123;
      (_fprintf($13, 628, $vararg_buffer8) | 0);
      _abort();
      // unreachable;
    }
    $14 = ($3 | 0) > (0);
    ;HEAP32[$5 >> 2] = 0 | 0;
    HEAP32[$5 + 4 >> 2] = 0 | 0;
    HEAP32[$5 + 8 >> 2] = 0 | 0;
    HEAP32[$5 + 12 >> 2] = 0 | 0;
    HEAP32[$5 + 16 >> 2] = 0 | 0;
    HEAP32[$5 + 20 >> 2] = 0 | 0;
    HEAP32[$5 + 24 >> 2] = 0 | 0;
    HEAP32[$5 + 28 >> 2] = 0 | 0;
    L10: do {
      if ($14) {
        $15 = ((($6)) + 4 | 0);
        $16 = ((($6)) + 8 | 0);
        $17 = ((($6)) + 12 | 0);
        $18 = ((($6)) + 16 | 0);
        $19 = ((($6)) + 20 | 0);
        $20 = ((($6)) + 24 | 0);
        $21 = ((($6)) + 28 | 0);
        $$013 = 0;
        while (1) {
          $22 = (($2) + ($$013 << 2) | 0);
          $23 = HEAP32[$22 >> 2] | 0;
          _secp256k1_scalar_set_b32($6, $23, $7);
          $24 = HEAP32[$7 >> 2] | 0;
          $25 = ($24 | 0) == (0);
          if (!($25)) {
            $$012 = 0;
            break;
          }
          $26 = ($$013 | 0) < ($4 | 0);
          if (!($26)) {
            $27 = HEAP32[$6 >> 2] | 0;
            $28 = HEAP32[$15 >> 2] | 0;
            $29 = $28 | $27;
            $30 = HEAP32[$16 >> 2] | 0;
            $31 = $29 | $30;
            $32 = HEAP32[$17 >> 2] | 0;
            $33 = $31 | $32;
            $34 = HEAP32[$18 >> 2] | 0;
            $35 = $33 | $34;
            $36 = HEAP32[$19 >> 2] | 0;
            $37 = $35 | $36;
            $38 = HEAP32[$20 >> 2] | 0;
            $39 = $37 | $38;
            $40 = HEAP32[$21 >> 2] | 0;
            $41 = $39 | $40;
            $42 = ($41 | 0) != (0);
            $43 = $42 << 31 >> 31;
            $44 = $27 ^ -1;
            $45 = (_i64Add(($44 | 0), 0, -801750718, 0) | 0);
            $46 = tempRet0;
            $47 = $43 & $45;
            HEAP32[$6 >> 2] = $47;
            $48 = $28 ^ -1;
            $49 = $46 | -1076732276;
            $50 = (_i64Add(($48 | 0), 0, ($49 | 0), 0) | 0);
            $51 = tempRet0;
            $52 = $50 & $43;
            HEAP32[$15 >> 2] = $52;
            $53 = $30 ^ -1;
            $54 = (_i64Add(($53 | 0), 0, -1354194885, 0) | 0);
            $55 = tempRet0;
            $56 = (_i64Add(($54 | 0), ($55 | 0), ($51 | 0), 0) | 0);
            $57 = tempRet0;
            $58 = $56 & $43;
            HEAP32[$16 >> 2] = $58;
            $59 = $32 ^ -1;
            $60 = (_i64Add(($59 | 0), 0, -1162945306, 0) | 0);
            $61 = tempRet0;
            $62 = (_i64Add(($60 | 0), ($61 | 0), ($57 | 0), 0) | 0);
            $63 = tempRet0;
            $64 = $62 & $43;
            HEAP32[$17 >> 2] = $64;
            $65 = $34 ^ -1;
            $66 = (_i64Add(($65 | 0), 0, -2, 0) | 0);
            $67 = tempRet0;
            $68 = (_i64Add(($66 | 0), ($67 | 0), ($63 | 0), 0) | 0);
            $69 = tempRet0;
            $70 = $68 & $43;
            HEAP32[$18 >> 2] = $70;
            $71 = $36 ^ -1;
            $72 = (_i64Add(($71 | 0), 0, -1, 0) | 0);
            $73 = tempRet0;
            $74 = (_i64Add(($72 | 0), ($73 | 0), ($69 | 0), 0) | 0);
            $75 = tempRet0;
            $76 = $74 & $43;
            HEAP32[$19 >> 2] = $76;
            $77 = $38 ^ -1;
            $78 = (_i64Add(($77 | 0), 0, -1, 0) | 0);
            $79 = tempRet0;
            $80 = (_i64Add(($78 | 0), ($79 | 0), ($75 | 0), 0) | 0);
            $81 = tempRet0;
            $82 = $80 & $43;
            HEAP32[$20 >> 2] = $82;
            $83 = $40 ^ -1;
            $84 = (_i64Add(($83 | 0), 0, -1, 0) | 0);
            $85 = tempRet0;
            $86 = (_i64Add(($84 | 0), ($85 | 0), ($81 | 0), 0) | 0);
            $87 = tempRet0;
            $88 = $86 & $43;
            HEAP32[$21 >> 2] = $88;
          }
          _secp256k1_scalar_add($5, $5, $6);
          $89 = (($$013) + 1) | 0;
          $90 = ($89 | 0) < ($3 | 0);
          if ($90) {
            $$013 = $89;
          } else {
            break L10;
          }
        }
        STACKTOP = sp;
        return ($$012 | 0);
      }
    } while (0);
    _secp256k1_scalar_get_b32($1, $5);
    ;HEAP32[$5 >> 2] = 0 | 0;
    HEAP32[$5 + 4 >> 2] = 0 | 0;
    HEAP32[$5 + 8 >> 2] = 0 | 0;
    HEAP32[$5 + 12 >> 2] = 0 | 0;
    HEAP32[$5 + 16 >> 2] = 0 | 0;
    HEAP32[$5 + 20 >> 2] = 0 | 0;
    HEAP32[$5 + 24 >> 2] = 0 | 0;
    HEAP32[$5 + 28 >> 2] = 0 | 0;
    ;HEAP32[$6 >> 2] = 0 | 0;
    HEAP32[$6 + 4 >> 2] = 0 | 0;
    HEAP32[$6 + 8 >> 2] = 0 | 0;
    HEAP32[$6 + 12 >> 2] = 0 | 0;
    HEAP32[$6 + 16 >> 2] = 0 | 0;
    HEAP32[$6 + 20 >> 2] = 0 | 0;
    HEAP32[$6 + 24 >> 2] = 0 | 0;
    HEAP32[$6 + 28 >> 2] = 0 | 0;
    $$012 = 1;
    STACKTOP = sp;
    return ($$012 | 0);
  }

  function _secp256k1_pedersen_verify_tally($0, $1, $2, $3, $4, $5, $6) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    $4 = $4 | 0;
    $5 = $5 | 0;
    $6 = $6 | 0;
    var $$0 = 0, $$02348 = 0, $$147 = 0, $$idx$val = 0, $$idx26$val = 0, $$neg41 = 0, $$neg44 = 0, $10 = 0, $100 = 0,
      $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
    var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0,
      $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
    var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0,
      $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
    var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0,
      $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
    var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0,
      $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
    var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0,
      $194 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
    var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0,
      $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
    var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0,
      $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
    var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0,
      $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
    var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0,
      $97 = 0, $98 = 0, $99 = 0, $notlhs = 0, $notlhs24 = 0, $notrhs = 0, $notrhs25 = 0, $switch$i = 0;
    var $switch$i27 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0,
      $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0,
      $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 352 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352 | 0);
    $vararg_buffer13 = sp + 48 | 0;
    $vararg_buffer8 = sp + 32 | 0;
    $vararg_buffer3 = sp + 16 | 0;
    $vararg_buffer = sp;
    $7 = sp + 312 | 0;
    $8 = sp + 272 | 0;
    $9 = sp + 144 | 0;
    $10 = sp + 60 | 0;
    $11 = ($0 | 0) == (0 | 0);
    if ($11) {
      $12 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer >> 2] = 713;
      $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
      HEAP32[$vararg_ptr1 >> 2] = 526;
      $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
      HEAP32[$vararg_ptr2 >> 2] = 729;
      (_fprintf($12, 628, $vararg_buffer) | 0);
      _abort();
      // unreachable;
    }
    $notlhs = ($1 | 0) == (0 | 0);
    $notrhs = ($2 | 0) != (0);
    $13 = $notlhs & $notrhs;
    if ($13) {
      $14 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer3 >> 2] = 713;
      $vararg_ptr6 = ((($vararg_buffer3)) + 4 | 0);
      HEAP32[$vararg_ptr6 >> 2] = 527;
      $vararg_ptr7 = ((($vararg_buffer3)) + 8 | 0);
      HEAP32[$vararg_ptr7 >> 2] = 1161;
      (_fprintf($14, 628, $vararg_buffer3) | 0);
      _abort();
      // unreachable;
    }
    $notlhs24 = ($3 | 0) == (0 | 0);
    $notrhs25 = ($4 | 0) != (0);
    $15 = $notlhs24 & $notrhs25;
    if ($15) {
      $16 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer8 >> 2] = 713;
      $vararg_ptr11 = ((($vararg_buffer8)) + 4 | 0);
      HEAP32[$vararg_ptr11 >> 2] = 528;
      $vararg_ptr12 = ((($vararg_buffer8)) + 8 | 0);
      HEAP32[$vararg_ptr12 >> 2] = 1211;
      (_fprintf($16, 628, $vararg_buffer8) | 0);
      _abort();
      // unreachable;
    }
    $17 = ((($0)) + 164 | 0);
    $$idx26$val = HEAP32[$17 >> 2] | 0;
    $18 = ($$idx26$val | 0) == (0 | 0);
    if ($18) {
      $19 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer13 >> 2] = 713;
      $vararg_ptr16 = ((($vararg_buffer13)) + 4 | 0);
      HEAP32[$vararg_ptr16 >> 2] = 529;
      $vararg_ptr17 = ((($vararg_buffer13)) + 8 | 0);
      HEAP32[$vararg_ptr17 >> 2] = 922;
      (_fprintf($19, 628, $vararg_buffer13) | 0);
      _abort();
      // unreachable;
    }
    $20 = ((($9)) + 120 | 0);
    HEAP32[$20 >> 2] = 1;
    dest = $9;
    stop = dest + 120 | 0;
    do {
      HEAP32[dest >> 2] = 0 | 0;
      dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $21 = ($5 | 0) == (0);
    $22 = ($6 | 0) == (0);
    $23 = $21 & $22;
    if (!($23)) {
      $24 = (_bitshift64Lshr(($5 | 0), ($6 | 0), 63) | 0);
      $25 = tempRet0;
      $26 = (_i64Add(($24 | 0), ($25 | 0), -1, -1) | 0);
      $27 = tempRet0;
      $28 = (_bitshift64Ashr(($5 | 0), ($6 | 0), 63) | 0);
      $29 = tempRet0;
      $30 = $26 & $5;
      $31 = $27 & $6;
      $32 = (_i64Subtract(0, 0, ($5 | 0), ($6 | 0)) | 0);
      $33 = tempRet0;
      $34 = $28 & $32;
      $35 = $29 & $33;
      $36 = $30 | $34;
      $37 = $31 | $35;
      _secp256k1_ecmult_gen2_small($17, $9, $36, $37);
      $38 = ($24 | 0) == (0);
      $39 = ($25 | 0) == (0);
      $40 = $38 & $39;
      if (!($40)) {
        $41 = ((($9)) + 40 | 0);
        $42 = HEAP32[$41 >> 2] | 0;
        $43 = ((($9)) + 44 | 0);
        $44 = HEAP32[$43 >> 2] | 0;
        $45 = ((($9)) + 48 | 0);
        $46 = HEAP32[$45 >> 2] | 0;
        $47 = ((($9)) + 52 | 0);
        $48 = HEAP32[$47 >> 2] | 0;
        $49 = ((($9)) + 56 | 0);
        $50 = HEAP32[$49 >> 2] | 0;
        $51 = ((($9)) + 60 | 0);
        $52 = HEAP32[$51 >> 2] | 0;
        $53 = ((($9)) + 64 | 0);
        $54 = HEAP32[$53 >> 2] | 0;
        $55 = ((($9)) + 68 | 0);
        $56 = HEAP32[$55 >> 2] | 0;
        $57 = ((($9)) + 72 | 0);
        $58 = HEAP32[$57 >> 2] | 0;
        $59 = ((($9)) + 76 | 0);
        $60 = HEAP32[$59 >> 2] | 0;
        $61 = $60 >>> 22;
        $62 = $60 & 4194303;
        $63 = ($61 * 977) | 0;
        $64 = (($63) + ($42)) | 0;
        $65 = $61 << 6;
        $66 = (($65) + ($44)) | 0;
        $67 = $64 >>> 26;
        $68 = (($66) + ($67)) | 0;
        $69 = $64 & 67108863;
        $70 = $68 >>> 26;
        $71 = (($70) + ($46)) | 0;
        $72 = $68 & 67108863;
        $73 = $71 >>> 26;
        $74 = (($73) + ($48)) | 0;
        $75 = $71 & 67108863;
        $76 = $74 >>> 26;
        $77 = (($76) + ($50)) | 0;
        $78 = $74 & 67108863;
        $79 = $77 >>> 26;
        $80 = (($79) + ($52)) | 0;
        $81 = $77 & 67108863;
        $82 = $80 >>> 26;
        $83 = (($82) + ($54)) | 0;
        $84 = $80 & 67108863;
        $85 = $83 >>> 26;
        $86 = (($85) + ($56)) | 0;
        $87 = $83 & 67108863;
        $88 = $86 >>> 26;
        $89 = (($88) + ($58)) | 0;
        $90 = $86 & 67108863;
        $91 = $89 >>> 26;
        $92 = $89 & 67108863;
        $93 = (268431548 - ($69)) | 0;
        HEAP32[$41 >> 2] = $93;
        $94 = (268435196 - ($72)) | 0;
        HEAP32[$43 >> 2] = $94;
        $95 = (268435452 - ($75)) | 0;
        HEAP32[$45 >> 2] = $95;
        $96 = (268435452 - ($78)) | 0;
        HEAP32[$47 >> 2] = $96;
        $97 = (268435452 - ($81)) | 0;
        HEAP32[$49 >> 2] = $97;
        $98 = (268435452 - ($84)) | 0;
        HEAP32[$51 >> 2] = $98;
        $99 = (268435452 - ($87)) | 0;
        HEAP32[$53 >> 2] = $99;
        $100 = (268435452 - ($90)) | 0;
        HEAP32[$55 >> 2] = $100;
        $101 = (268435452 - ($92)) | 0;
        HEAP32[$57 >> 2] = $101;
        $$neg41 = (16777212 - ($62)) | 0;
        $102 = (($$neg41) - ($91)) | 0;
        HEAP32[$59 >> 2] = $102;
      }
    }
    $103 = ($4 | 0) > (0);
    L17: do {
      if ($103) {
        $$02348 = 0;
        while (1) {
          $104 = (($3) + ($$02348 << 2) | 0);
          $105 = HEAP32[$104 >> 2] | 0;
          $106 = HEAP8[$105 >> 0] | 0;
          $107 = $106 & -2;
          $switch$i27 = ($107 << 24 >> 24) == (2);
          if (!($switch$i27)) {
            $$0 = 0;
            label = 27;
            break;
          }
          $108 = ((($105)) + 1 | 0);
          $109 = (_secp256k1_fe_set_b32($7, $108) | 0);
          $110 = ($109 | 0) == (0);
          if ($110) {
            label = 16;
            break;
          }
          $111 = HEAP8[$105 >> 0] | 0;
          $112 = ($111 << 24 >> 24) == (3);
          $113 = $112 & 1;
          $114 = (_secp256k1_ge_set_xo_var($10, $7, $113) | 0);
          $115 = ($114 | 0) == (0);
          if ($115) {
            $$0 = 0;
            label = 27;
            break;
          }
          _secp256k1_gej_add_ge_var($9, $9, $10, 0);
          $116 = (($$02348) + 1) | 0;
          $117 = ($116 | 0) < ($4 | 0);
          if ($117) {
            $$02348 = $116;
          } else {
            break L17;
          }
        }
        if ((label | 0) == 16) {
          $$0 = 0;
          STACKTOP = sp;
          return ($$0 | 0);
        }
        else if ((label | 0) == 27) {
          STACKTOP = sp;
          return ($$0 | 0);
        }
      }
    } while (0);
    $118 = ((($9)) + 40 | 0);
    $119 = HEAP32[$118 >> 2] | 0;
    $120 = ((($9)) + 44 | 0);
    $121 = HEAP32[$120 >> 2] | 0;
    $122 = ((($9)) + 48 | 0);
    $123 = HEAP32[$122 >> 2] | 0;
    $124 = ((($9)) + 52 | 0);
    $125 = HEAP32[$124 >> 2] | 0;
    $126 = ((($9)) + 56 | 0);
    $127 = HEAP32[$126 >> 2] | 0;
    $128 = ((($9)) + 60 | 0);
    $129 = HEAP32[$128 >> 2] | 0;
    $130 = ((($9)) + 64 | 0);
    $131 = HEAP32[$130 >> 2] | 0;
    $132 = ((($9)) + 68 | 0);
    $133 = HEAP32[$132 >> 2] | 0;
    $134 = ((($9)) + 72 | 0);
    $135 = HEAP32[$134 >> 2] | 0;
    $136 = ((($9)) + 76 | 0);
    $137 = HEAP32[$136 >> 2] | 0;
    $138 = $137 >>> 22;
    $139 = $137 & 4194303;
    $140 = ($138 * 977) | 0;
    $141 = (($140) + ($119)) | 0;
    $142 = $138 << 6;
    $143 = (($142) + ($121)) | 0;
    $144 = $141 >>> 26;
    $145 = (($143) + ($144)) | 0;
    $146 = $141 & 67108863;
    $147 = $145 >>> 26;
    $148 = (($147) + ($123)) | 0;
    $149 = $145 & 67108863;
    $150 = $148 >>> 26;
    $151 = (($150) + ($125)) | 0;
    $152 = $148 & 67108863;
    $153 = $151 >>> 26;
    $154 = (($153) + ($127)) | 0;
    $155 = $151 & 67108863;
    $156 = $154 >>> 26;
    $157 = (($156) + ($129)) | 0;
    $158 = $154 & 67108863;
    $159 = $157 >>> 26;
    $160 = (($159) + ($131)) | 0;
    $161 = $157 & 67108863;
    $162 = $160 >>> 26;
    $163 = (($162) + ($133)) | 0;
    $164 = $160 & 67108863;
    $165 = $163 >>> 26;
    $166 = (($165) + ($135)) | 0;
    $167 = $163 & 67108863;
    $168 = $166 >>> 26;
    $169 = $166 & 67108863;
    $170 = (268431548 - ($146)) | 0;
    HEAP32[$118 >> 2] = $170;
    $171 = (268435196 - ($149)) | 0;
    HEAP32[$120 >> 2] = $171;
    $172 = (268435452 - ($152)) | 0;
    HEAP32[$122 >> 2] = $172;
    $173 = (268435452 - ($155)) | 0;
    HEAP32[$124 >> 2] = $173;
    $174 = (268435452 - ($158)) | 0;
    HEAP32[$126 >> 2] = $174;
    $175 = (268435452 - ($161)) | 0;
    HEAP32[$128 >> 2] = $175;
    $176 = (268435452 - ($164)) | 0;
    HEAP32[$130 >> 2] = $176;
    $177 = (268435452 - ($167)) | 0;
    HEAP32[$132 >> 2] = $177;
    $178 = (268435452 - ($169)) | 0;
    HEAP32[$134 >> 2] = $178;
    $$neg44 = (16777212 - ($139)) | 0;
    $179 = (($$neg44) - ($168)) | 0;
    HEAP32[$136 >> 2] = $179;
    $180 = ($2 | 0) > (0);
    L30: do {
      if ($180) {
        $$147 = 0;
        while (1) {
          $181 = (($1) + ($$147 << 2) | 0);
          $182 = HEAP32[$181 >> 2] | 0;
          $183 = HEAP8[$182 >> 0] | 0;
          $184 = $183 & -2;
          $switch$i = ($184 << 24 >> 24) == (2);
          if (!($switch$i)) {
            $$0 = 0;
            label = 27;
            break;
          }
          $185 = ((($182)) + 1 | 0);
          $186 = (_secp256k1_fe_set_b32($8, $185) | 0);
          $187 = ($186 | 0) == (0);
          if ($187) {
            label = 23;
            break;
          }
          $188 = HEAP8[$182 >> 0] | 0;
          $189 = ($188 << 24 >> 24) == (3);
          $190 = $189 & 1;
          $191 = (_secp256k1_ge_set_xo_var($10, $8, $190) | 0);
          $192 = ($191 | 0) == (0);
          if ($192) {
            $$0 = 0;
            label = 27;
            break;
          }
          _secp256k1_gej_add_ge_var($9, $9, $10, 0);
          $193 = (($$147) + 1) | 0;
          $194 = ($193 | 0) < ($2 | 0);
          if ($194) {
            $$147 = $193;
          } else {
            break L30;
          }
        }
        if ((label | 0) == 23) {
          $$0 = 0;
          STACKTOP = sp;
          return ($$0 | 0);
        }
        else if ((label | 0) == 27) {
          STACKTOP = sp;
          return ($$0 | 0);
        }
      }
    } while (0);
    $$idx$val = HEAP32[$20 >> 2] | 0;
    $$0 = $$idx$val;
    STACKTOP = sp;
    return ($$0 | 0);
  }

  function _secp256k1_ecmult_gen2_small($0, $1, $2, $3) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    var $$0102 = 0, $$01885 = 0, $$sroa$0$0101 = 0, $$sroa$0$184 = 0, $$sroa$11$099 = 0, $$sroa$11$182 = 0,
      $$sroa$15$098 = 0, $$sroa$15$181 = 0, $$sroa$19$097 = 0, $$sroa$19$180 = 0, $$sroa$24$096 = 0, $$sroa$24$179 = 0,
      $$sroa$28$095 = 0, $$sroa$28$178 = 0, $$sroa$32$094 = 0, $$sroa$32$177 = 0, $$sroa$36$093 = 0, $$sroa$36$176 = 0,
      $$sroa$40$092 = 0, $$sroa$40$175 = 0;
    var $$sroa$44$091 = 0, $$sroa$44$174 = 0, $$sroa$48$090 = 0, $$sroa$48$173 = 0, $$sroa$52$089 = 0,
      $$sroa$52$172 = 0, $$sroa$57$088 = 0, $$sroa$57$171 = 0, $$sroa$61$087 = 0, $$sroa$61$170 = 0, $$sroa$65$086 = 0,
      $$sroa$65$169 = 0, $$sroa$7$0100 = 0, $$sroa$7$183 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
    var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0,
      $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
    var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0,
      $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
    var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0,
      $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
    var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0,
      $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
    var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0,
      $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
    var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0,
      $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
    var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0,
      $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond118 = 0, dest = 0, label = 0;
    var sp = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 96 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96 | 0);
    $4 = sp;
    $5 = ((($1)) + 120 | 0);
    HEAP32[$5 >> 2] = 1;
    dest = $1;
    stop = dest + 120 | 0;
    do {
      HEAP32[dest >> 2] = 0 | 0;
      dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $6 = ((($4)) + 80 | 0);
    HEAP32[$6 >> 2] = 0;
    $7 = ((($4)) + 4 | 0);
    $8 = ((($4)) + 8 | 0);
    $9 = ((($4)) + 12 | 0);
    $10 = ((($4)) + 16 | 0);
    $11 = ((($4)) + 20 | 0);
    $12 = ((($4)) + 24 | 0);
    $13 = ((($4)) + 28 | 0);
    $14 = ((($4)) + 32 | 0);
    $15 = ((($4)) + 36 | 0);
    $16 = ((($4)) + 40 | 0);
    $17 = ((($4)) + 44 | 0);
    $18 = ((($4)) + 48 | 0);
    $19 = ((($4)) + 52 | 0);
    $20 = ((($4)) + 56 | 0);
    $21 = ((($4)) + 60 | 0);
    $22 = ((($4)) + 64 | 0);
    $23 = ((($4)) + 68 | 0);
    $24 = ((($4)) + 72 | 0);
    $25 = ((($4)) + 76 | 0);
    $$0102 = 0;
    $$sroa$0$0101 = 0;
    $$sroa$11$099 = 0;
    $$sroa$15$098 = 0;
    $$sroa$19$097 = 0;
    $$sroa$24$096 = 0;
    $$sroa$28$095 = 0;
    $$sroa$32$094 = 0;
    $$sroa$36$093 = 0;
    $$sroa$40$092 = 0;
    $$sroa$44$091 = 0;
    $$sroa$48$090 = 0;
    $$sroa$52$089 = 0;
    $$sroa$57$088 = 0;
    $$sroa$61$087 = 0;
    $$sroa$65$086 = 0;
    $$sroa$7$0100 = 0;
    while (1) {
      $26 = $$0102 << 2;
      $27 = (_bitshift64Lshr(($2 | 0), ($3 | 0), ($26 | 0)) | 0);
      $28 = tempRet0;
      $29 = $27 & 15;
      $30 = HEAP32[$0 >> 2] | 0;
      $$01885 = 0;
      $$sroa$0$184 = $$sroa$0$0101;
      $$sroa$11$182 = $$sroa$11$099;
      $$sroa$15$181 = $$sroa$15$098;
      $$sroa$19$180 = $$sroa$19$097;
      $$sroa$24$179 = $$sroa$24$096;
      $$sroa$28$178 = $$sroa$28$095;
      $$sroa$32$177 = $$sroa$32$094;
      $$sroa$36$176 = $$sroa$36$093;
      $$sroa$40$175 = $$sroa$40$092;
      $$sroa$44$174 = $$sroa$44$091;
      $$sroa$48$173 = $$sroa$48$090;
      $$sroa$52$172 = $$sroa$52$089;
      $$sroa$57$171 = $$sroa$57$088;
      $$sroa$61$170 = $$sroa$61$087;
      $$sroa$65$169 = $$sroa$65$086;
      $$sroa$7$183 = $$sroa$7$0100;
      while (1) {
        $31 = ($$01885 | 0) == ($29 | 0);
        $32 = ((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0);
        $33 = HEAP32[$32 >> 2] | 0;
        $34 = $31 ? $33 : $$sroa$0$184;
        $35 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 4 | 0);
        $36 = HEAP32[$35 >> 2] | 0;
        $37 = $31 ? $36 : $$sroa$7$183;
        $38 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 8 | 0);
        $39 = HEAP32[$38 >> 2] | 0;
        $40 = $31 ? $39 : $$sroa$11$182;
        $41 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 12 | 0);
        $42 = HEAP32[$41 >> 2] | 0;
        $43 = $31 ? $42 : $$sroa$15$181;
        $44 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 16 | 0);
        $45 = HEAP32[$44 >> 2] | 0;
        $46 = $31 ? $45 : $$sroa$19$180;
        $47 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 20 | 0);
        $48 = HEAP32[$47 >> 2] | 0;
        $49 = $31 ? $48 : $$sroa$24$179;
        $50 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 24 | 0);
        $51 = HEAP32[$50 >> 2] | 0;
        $52 = $31 ? $51 : $$sroa$28$178;
        $53 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 28 | 0);
        $54 = HEAP32[$53 >> 2] | 0;
        $55 = $31 ? $54 : $$sroa$32$177;
        $56 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 32 | 0);
        $57 = HEAP32[$56 >> 2] | 0;
        $58 = $31 ? $57 : $$sroa$36$176;
        $59 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 36 | 0);
        $60 = HEAP32[$59 >> 2] | 0;
        $61 = $31 ? $60 : $$sroa$40$175;
        $62 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 40 | 0);
        $63 = HEAP32[$62 >> 2] | 0;
        $64 = $31 ? $63 : $$sroa$44$174;
        $65 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 44 | 0);
        $66 = HEAP32[$65 >> 2] | 0;
        $67 = $31 ? $66 : $$sroa$48$173;
        $68 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 48 | 0);
        $69 = HEAP32[$68 >> 2] | 0;
        $70 = $31 ? $69 : $$sroa$52$172;
        $71 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 52 | 0);
        $72 = HEAP32[$71 >> 2] | 0;
        $73 = $31 ? $72 : $$sroa$57$171;
        $74 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 56 | 0);
        $75 = HEAP32[$74 >> 2] | 0;
        $76 = $31 ? $75 : $$sroa$61$170;
        $77 = ((((($30) + ($$0102 << 10) | 0) + ($$01885 << 6) | 0)) + 60 | 0);
        $78 = HEAP32[$77 >> 2] | 0;
        $79 = $31 ? $78 : $$sroa$65$169;
        $80 = (($$01885) + 1) | 0;
        $exitcond = ($80 | 0) == (16);
        if ($exitcond) {
          break;
        } else {
          $$01885 = $80;
          $$sroa$0$184 = $34;
          $$sroa$11$182 = $40;
          $$sroa$15$181 = $43;
          $$sroa$19$180 = $46;
          $$sroa$24$179 = $49;
          $$sroa$28$178 = $52;
          $$sroa$32$177 = $55;
          $$sroa$36$176 = $58;
          $$sroa$40$175 = $61;
          $$sroa$44$174 = $64;
          $$sroa$48$173 = $67;
          $$sroa$52$172 = $70;
          $$sroa$57$171 = $73;
          $$sroa$61$170 = $76;
          $$sroa$65$169 = $79;
          $$sroa$7$183 = $37;
        }
      }
      $81 = $34 & 67108863;
      HEAP32[$4 >> 2] = $81;
      $82 = $34 >>> 26;
      $83 = $37 << 6;
      $84 = $83 & 67108800;
      $85 = $84 | $82;
      HEAP32[$7 >> 2] = $85;
      $86 = $37 >>> 20;
      $87 = $40 << 12;
      $88 = $87 & 67104768;
      $89 = $88 | $86;
      HEAP32[$8 >> 2] = $89;
      $90 = $40 >>> 14;
      $91 = $43 << 18;
      $92 = $91 & 66846720;
      $93 = $92 | $90;
      HEAP32[$9 >> 2] = $93;
      $94 = $43 >>> 8;
      $95 = $46 << 24;
      $96 = $95 & 50331648;
      $97 = $96 | $94;
      HEAP32[$10 >> 2] = $97;
      $98 = $46 >>> 2;
      $99 = $98 & 67108863;
      HEAP32[$11 >> 2] = $99;
      $100 = $46 >>> 28;
      $101 = $49 << 4;
      $102 = $101 & 67108848;
      $103 = $102 | $100;
      HEAP32[$12 >> 2] = $103;
      $104 = $49 >>> 22;
      $105 = $52 << 10;
      $106 = $105 & 67107840;
      $107 = $106 | $104;
      HEAP32[$13 >> 2] = $107;
      $108 = $52 >>> 16;
      $109 = $55 << 16;
      $110 = $109 & 67043328;
      $111 = $110 | $108;
      HEAP32[$14 >> 2] = $111;
      $112 = $55 >>> 10;
      HEAP32[$15 >> 2] = $112;
      $113 = $58 & 67108863;
      HEAP32[$16 >> 2] = $113;
      $114 = $58 >>> 26;
      $115 = $61 << 6;
      $116 = $115 & 67108800;
      $117 = $116 | $114;
      HEAP32[$17 >> 2] = $117;
      $118 = $61 >>> 20;
      $119 = $64 << 12;
      $120 = $119 & 67104768;
      $121 = $120 | $118;
      HEAP32[$18 >> 2] = $121;
      $122 = $64 >>> 14;
      $123 = $67 << 18;
      $124 = $123 & 66846720;
      $125 = $124 | $122;
      HEAP32[$19 >> 2] = $125;
      $126 = $67 >>> 8;
      $127 = $70 << 24;
      $128 = $127 & 50331648;
      $129 = $128 | $126;
      HEAP32[$20 >> 2] = $129;
      $130 = $70 >>> 2;
      $131 = $130 & 67108863;
      HEAP32[$21 >> 2] = $131;
      $132 = $70 >>> 28;
      $133 = $73 << 4;
      $134 = $133 & 67108848;
      $135 = $134 | $132;
      HEAP32[$22 >> 2] = $135;
      $136 = $73 >>> 22;
      $137 = $76 << 10;
      $138 = $137 & 67107840;
      $139 = $138 | $136;
      HEAP32[$23 >> 2] = $139;
      $140 = $76 >>> 16;
      $141 = $79 << 16;
      $142 = $141 & 67043328;
      $143 = $142 | $140;
      HEAP32[$24 >> 2] = $143;
      $144 = $79 >>> 10;
      HEAP32[$25 >> 2] = $144;
      HEAP32[$6 >> 2] = 0;
      _secp256k1_gej_add_ge($1, $1, $4);
      $145 = (($$0102) + 1) | 0;
      $exitcond118 = ($145 | 0) == (16);
      if ($exitcond118) {
        break;
      } else {
        $$0102 = $145;
        $$sroa$0$0101 = $34;
        $$sroa$11$099 = $40;
        $$sroa$15$098 = $43;
        $$sroa$19$097 = $46;
        $$sroa$24$096 = $49;
        $$sroa$28$095 = $52;
        $$sroa$32$094 = $55;
        $$sroa$36$093 = $58;
        $$sroa$40$092 = $61;
        $$sroa$44$091 = $64;
        $$sroa$48$090 = $67;
        $$sroa$52$089 = $70;
        $$sroa$57$088 = $73;
        $$sroa$61$087 = $76;
        $$sroa$65$086 = $79;
        $$sroa$7$0100 = $37;
      }
    }
    STACKTOP = sp;
    return;
  }

  function _secp256k1_gej_add_ge_var($0, $1, $2, $3) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0,
      $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
    var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0,
      $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
    var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0,
      $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
    var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0,
      $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
    var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0,
      $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
    var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0,
      $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
    var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0,
      $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
    var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0,
      $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
    var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0,
      $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
    var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0,
      $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
    var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0,
      $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
    var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0,
      $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
    var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0,
      $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
    var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0,
      $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
    var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0,
      $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
    var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0,
      $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
    var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0,
      $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
    var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0,
      $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
    var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0,
      $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
    var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0,
      $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
    var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0,
      $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
    var $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 448 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(448 | 0);
    $4 = sp + 400 | 0;
    $5 = sp + 360 | 0;
    $6 = sp + 320 | 0;
    $7 = sp + 280 | 0;
    $8 = sp + 240 | 0;
    $9 = sp + 200 | 0;
    $10 = sp + 160 | 0;
    $11 = sp + 120 | 0;
    $12 = sp + 80 | 0;
    $13 = sp + 40 | 0;
    $14 = sp;
    $15 = ((($1)) + 120 | 0);
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ($16 | 0) == (0);
    $18 = ((($2)) + 80 | 0);
    $19 = HEAP32[$18 >> 2] | 0;
    if (!($17)) {
      $20 = ((($0)) + 120 | 0);
      HEAP32[$20 >> 2] = $19;
      dest = $0;
      src = $2;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $21 = ((($0)) + 40 | 0);
      $22 = ((($2)) + 40 | 0);
      dest = $21;
      src = $22;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $23 = ((($0)) + 80 | 0);
      HEAP32[$23 >> 2] = 1;
      $24 = ((($0)) + 84 | 0);
      dest = $24;
      stop = dest + 36 | 0;
      do {
        HEAP32[dest >> 2] = 0 | 0;
        dest = dest + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      STACKTOP = sp;
      return;
    }
    $25 = ($19 | 0) == (0);
    if (!($25)) {
      $26 = ($3 | 0) == (0 | 0);
      if (!($26)) {
        HEAP32[$3 >> 2] = 1;
        $27 = ((($3)) + 4 | 0);
        dest = $27;
        stop = dest + 36 | 0;
        do {
          HEAP32[dest >> 2] = 0 | 0;
          dest = dest + 4 | 0;
        } while ((dest | 0) < (stop | 0));
      }
      dest = $0;
      src = $1;
      stop = dest + 124 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      STACKTOP = sp;
      return;
    }
    $28 = ((($0)) + 120 | 0);
    HEAP32[$28 >> 2] = 0;
    $29 = ((($1)) + 80 | 0);
    _secp256k1_fe_sqr($4, $29);
    dest = $5;
    src = $1;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $30 = HEAP32[$5 >> 2] | 0;
    $31 = ((($5)) + 4 | 0);
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = ((($5)) + 8 | 0);
    $34 = HEAP32[$33 >> 2] | 0;
    $35 = ((($5)) + 12 | 0);
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = ((($5)) + 16 | 0);
    $38 = HEAP32[$37 >> 2] | 0;
    $39 = ((($5)) + 20 | 0);
    $40 = HEAP32[$39 >> 2] | 0;
    $41 = ((($5)) + 24 | 0);
    $42 = HEAP32[$41 >> 2] | 0;
    $43 = ((($5)) + 28 | 0);
    $44 = HEAP32[$43 >> 2] | 0;
    $45 = ((($5)) + 32 | 0);
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = ((($5)) + 36 | 0);
    $48 = HEAP32[$47 >> 2] | 0;
    $49 = $48 >>> 22;
    $50 = $48 & 4194303;
    $51 = ($49 * 977) | 0;
    $52 = (($51) + ($30)) | 0;
    $53 = $49 << 6;
    $54 = (($53) + ($32)) | 0;
    $55 = $52 >>> 26;
    $56 = (($54) + ($55)) | 0;
    $57 = $52 & 67108863;
    $58 = $56 >>> 26;
    $59 = (($58) + ($34)) | 0;
    $60 = $56 & 67108863;
    $61 = $59 >>> 26;
    $62 = (($61) + ($36)) | 0;
    $63 = $59 & 67108863;
    $64 = $62 >>> 26;
    $65 = (($64) + ($38)) | 0;
    $66 = $62 & 67108863;
    $67 = $65 >>> 26;
    $68 = (($67) + ($40)) | 0;
    $69 = $65 & 67108863;
    $70 = $68 >>> 26;
    $71 = (($70) + ($42)) | 0;
    $72 = $68 & 67108863;
    $73 = $71 >>> 26;
    $74 = (($73) + ($44)) | 0;
    $75 = $71 & 67108863;
    $76 = $74 >>> 26;
    $77 = (($76) + ($46)) | 0;
    $78 = $74 & 67108863;
    $79 = $77 >>> 26;
    $80 = (($79) + ($50)) | 0;
    $81 = $77 & 67108863;
    HEAP32[$5 >> 2] = $57;
    HEAP32[$31 >> 2] = $60;
    HEAP32[$33 >> 2] = $63;
    HEAP32[$35 >> 2] = $66;
    HEAP32[$37 >> 2] = $69;
    HEAP32[$39 >> 2] = $72;
    HEAP32[$41 >> 2] = $75;
    HEAP32[$43 >> 2] = $78;
    HEAP32[$45 >> 2] = $81;
    HEAP32[$47 >> 2] = $80;
    _secp256k1_fe_mul($6, $2, $4);
    $82 = ((($1)) + 40 | 0);
    dest = $7;
    src = $82;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $83 = HEAP32[$7 >> 2] | 0;
    $84 = ((($7)) + 4 | 0);
    $85 = HEAP32[$84 >> 2] | 0;
    $86 = ((($7)) + 8 | 0);
    $87 = HEAP32[$86 >> 2] | 0;
    $88 = ((($7)) + 12 | 0);
    $89 = HEAP32[$88 >> 2] | 0;
    $90 = ((($7)) + 16 | 0);
    $91 = HEAP32[$90 >> 2] | 0;
    $92 = ((($7)) + 20 | 0);
    $93 = HEAP32[$92 >> 2] | 0;
    $94 = ((($7)) + 24 | 0);
    $95 = HEAP32[$94 >> 2] | 0;
    $96 = ((($7)) + 28 | 0);
    $97 = HEAP32[$96 >> 2] | 0;
    $98 = ((($7)) + 32 | 0);
    $99 = HEAP32[$98 >> 2] | 0;
    $100 = ((($7)) + 36 | 0);
    $101 = HEAP32[$100 >> 2] | 0;
    $102 = $101 >>> 22;
    $103 = $101 & 4194303;
    $104 = ($102 * 977) | 0;
    $105 = (($104) + ($83)) | 0;
    $106 = $102 << 6;
    $107 = (($106) + ($85)) | 0;
    $108 = $105 >>> 26;
    $109 = (($107) + ($108)) | 0;
    $110 = $105 & 67108863;
    $111 = $109 >>> 26;
    $112 = (($111) + ($87)) | 0;
    $113 = $109 & 67108863;
    $114 = $112 >>> 26;
    $115 = (($114) + ($89)) | 0;
    $116 = $112 & 67108863;
    $117 = $115 >>> 26;
    $118 = (($117) + ($91)) | 0;
    $119 = $115 & 67108863;
    $120 = $118 >>> 26;
    $121 = (($120) + ($93)) | 0;
    $122 = $118 & 67108863;
    $123 = $121 >>> 26;
    $124 = (($123) + ($95)) | 0;
    $125 = $121 & 67108863;
    $126 = $124 >>> 26;
    $127 = (($126) + ($97)) | 0;
    $128 = $124 & 67108863;
    $129 = $127 >>> 26;
    $130 = (($129) + ($99)) | 0;
    $131 = $127 & 67108863;
    $132 = $130 >>> 26;
    $133 = (($132) + ($103)) | 0;
    $134 = $130 & 67108863;
    HEAP32[$7 >> 2] = $110;
    HEAP32[$84 >> 2] = $113;
    HEAP32[$86 >> 2] = $116;
    HEAP32[$88 >> 2] = $119;
    HEAP32[$90 >> 2] = $122;
    HEAP32[$92 >> 2] = $125;
    HEAP32[$94 >> 2] = $128;
    HEAP32[$96 >> 2] = $131;
    HEAP32[$98 >> 2] = $134;
    HEAP32[$100 >> 2] = $133;
    $135 = ((($2)) + 40 | 0);
    _secp256k1_fe_mul($8, $135, $4);
    _secp256k1_fe_mul($8, $8, $29);
    $136 = (268431548 - ($57)) | 0;
    $137 = (268435196 - ($60)) | 0;
    $138 = ((($9)) + 4 | 0);
    $139 = (268435452 - ($63)) | 0;
    $140 = ((($9)) + 8 | 0);
    $141 = (268435452 - ($66)) | 0;
    $142 = ((($9)) + 12 | 0);
    $143 = (268435452 - ($69)) | 0;
    $144 = ((($9)) + 16 | 0);
    $145 = (268435452 - ($72)) | 0;
    $146 = ((($9)) + 20 | 0);
    $147 = (268435452 - ($75)) | 0;
    $148 = ((($9)) + 24 | 0);
    $149 = (268435452 - ($78)) | 0;
    $150 = ((($9)) + 28 | 0);
    $151 = (268435452 - ($81)) | 0;
    $152 = ((($9)) + 32 | 0);
    $153 = (16777212 - ($80)) | 0;
    $154 = ((($9)) + 36 | 0);
    $155 = HEAP32[$6 >> 2] | 0;
    $156 = (($136) + ($155)) | 0;
    HEAP32[$9 >> 2] = $156;
    $157 = ((($6)) + 4 | 0);
    $158 = HEAP32[$157 >> 2] | 0;
    $159 = (($137) + ($158)) | 0;
    HEAP32[$138 >> 2] = $159;
    $160 = ((($6)) + 8 | 0);
    $161 = HEAP32[$160 >> 2] | 0;
    $162 = (($139) + ($161)) | 0;
    HEAP32[$140 >> 2] = $162;
    $163 = ((($6)) + 12 | 0);
    $164 = HEAP32[$163 >> 2] | 0;
    $165 = (($141) + ($164)) | 0;
    HEAP32[$142 >> 2] = $165;
    $166 = ((($6)) + 16 | 0);
    $167 = HEAP32[$166 >> 2] | 0;
    $168 = (($143) + ($167)) | 0;
    HEAP32[$144 >> 2] = $168;
    $169 = ((($6)) + 20 | 0);
    $170 = HEAP32[$169 >> 2] | 0;
    $171 = (($145) + ($170)) | 0;
    HEAP32[$146 >> 2] = $171;
    $172 = ((($6)) + 24 | 0);
    $173 = HEAP32[$172 >> 2] | 0;
    $174 = (($147) + ($173)) | 0;
    HEAP32[$148 >> 2] = $174;
    $175 = ((($6)) + 28 | 0);
    $176 = HEAP32[$175 >> 2] | 0;
    $177 = (($149) + ($176)) | 0;
    HEAP32[$150 >> 2] = $177;
    $178 = ((($6)) + 32 | 0);
    $179 = HEAP32[$178 >> 2] | 0;
    $180 = (($151) + ($179)) | 0;
    HEAP32[$152 >> 2] = $180;
    $181 = ((($6)) + 36 | 0);
    $182 = HEAP32[$181 >> 2] | 0;
    $183 = (($153) + ($182)) | 0;
    HEAP32[$154 >> 2] = $183;
    $184 = (268431548 - ($110)) | 0;
    $185 = (268435196 - ($113)) | 0;
    $186 = ((($10)) + 4 | 0);
    $187 = (268435452 - ($116)) | 0;
    $188 = ((($10)) + 8 | 0);
    $189 = (268435452 - ($119)) | 0;
    $190 = ((($10)) + 12 | 0);
    $191 = (268435452 - ($122)) | 0;
    $192 = ((($10)) + 16 | 0);
    $193 = (268435452 - ($125)) | 0;
    $194 = ((($10)) + 20 | 0);
    $195 = (268435452 - ($128)) | 0;
    $196 = ((($10)) + 24 | 0);
    $197 = (268435452 - ($131)) | 0;
    $198 = ((($10)) + 28 | 0);
    $199 = (268435452 - ($134)) | 0;
    $200 = ((($10)) + 32 | 0);
    $201 = HEAP32[$100 >> 2] | 0;
    $202 = (16777212 - ($201)) | 0;
    $203 = ((($10)) + 36 | 0);
    $204 = HEAP32[$8 >> 2] | 0;
    $205 = (($184) + ($204)) | 0;
    HEAP32[$10 >> 2] = $205;
    $206 = ((($8)) + 4 | 0);
    $207 = HEAP32[$206 >> 2] | 0;
    $208 = (($185) + ($207)) | 0;
    HEAP32[$186 >> 2] = $208;
    $209 = ((($8)) + 8 | 0);
    $210 = HEAP32[$209 >> 2] | 0;
    $211 = (($187) + ($210)) | 0;
    HEAP32[$188 >> 2] = $211;
    $212 = ((($8)) + 12 | 0);
    $213 = HEAP32[$212 >> 2] | 0;
    $214 = (($189) + ($213)) | 0;
    HEAP32[$190 >> 2] = $214;
    $215 = ((($8)) + 16 | 0);
    $216 = HEAP32[$215 >> 2] | 0;
    $217 = (($191) + ($216)) | 0;
    HEAP32[$192 >> 2] = $217;
    $218 = ((($8)) + 20 | 0);
    $219 = HEAP32[$218 >> 2] | 0;
    $220 = (($193) + ($219)) | 0;
    HEAP32[$194 >> 2] = $220;
    $221 = ((($8)) + 24 | 0);
    $222 = HEAP32[$221 >> 2] | 0;
    $223 = (($195) + ($222)) | 0;
    HEAP32[$196 >> 2] = $223;
    $224 = ((($8)) + 28 | 0);
    $225 = HEAP32[$224 >> 2] | 0;
    $226 = (($197) + ($225)) | 0;
    HEAP32[$198 >> 2] = $226;
    $227 = ((($8)) + 32 | 0);
    $228 = HEAP32[$227 >> 2] | 0;
    $229 = (($199) + ($228)) | 0;
    HEAP32[$200 >> 2] = $229;
    $230 = ((($8)) + 36 | 0);
    $231 = HEAP32[$230 >> 2] | 0;
    $232 = (($202) + ($231)) | 0;
    HEAP32[$203 >> 2] = $232;
    $233 = (_secp256k1_fe_normalizes_to_zero_var($9) | 0);
    $234 = ($233 | 0) == (0);
    if ($234) {
      _secp256k1_fe_sqr($11, $10);
      _secp256k1_fe_sqr($12, $9);
      _secp256k1_fe_mul($13, $9, $12);
      $238 = ($3 | 0) == (0 | 0);
      if (!($238)) {
        dest = $3;
        src = $9;
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
      }
      $239 = ((($0)) + 80 | 0);
      _secp256k1_fe_mul($239, $29, $9);
      _secp256k1_fe_mul($14, $5, $12);
      dest = $0;
      src = $14;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $240 = HEAP32[$0 >> 2] | 0;
      $241 = $240 << 1;
      $242 = ((($0)) + 4 | 0);
      $243 = HEAP32[$242 >> 2] | 0;
      $244 = $243 << 1;
      $245 = ((($0)) + 8 | 0);
      $246 = HEAP32[$245 >> 2] | 0;
      $247 = $246 << 1;
      $248 = ((($0)) + 12 | 0);
      $249 = HEAP32[$248 >> 2] | 0;
      $250 = $249 << 1;
      $251 = ((($0)) + 16 | 0);
      $252 = HEAP32[$251 >> 2] | 0;
      $253 = $252 << 1;
      $254 = ((($0)) + 20 | 0);
      $255 = HEAP32[$254 >> 2] | 0;
      $256 = $255 << 1;
      $257 = ((($0)) + 24 | 0);
      $258 = HEAP32[$257 >> 2] | 0;
      $259 = $258 << 1;
      $260 = ((($0)) + 28 | 0);
      $261 = HEAP32[$260 >> 2] | 0;
      $262 = $261 << 1;
      $263 = ((($0)) + 32 | 0);
      $264 = HEAP32[$263 >> 2] | 0;
      $265 = $264 << 1;
      $266 = ((($0)) + 36 | 0);
      $267 = HEAP32[$266 >> 2] | 0;
      $268 = $267 << 1;
      $269 = HEAP32[$13 >> 2] | 0;
      $270 = (($241) + ($269)) | 0;
      $271 = ((($13)) + 4 | 0);
      $272 = HEAP32[$271 >> 2] | 0;
      $273 = (($244) + ($272)) | 0;
      $274 = ((($13)) + 8 | 0);
      $275 = HEAP32[$274 >> 2] | 0;
      $276 = (($247) + ($275)) | 0;
      $277 = ((($13)) + 12 | 0);
      $278 = HEAP32[$277 >> 2] | 0;
      $279 = (($250) + ($278)) | 0;
      $280 = ((($13)) + 16 | 0);
      $281 = HEAP32[$280 >> 2] | 0;
      $282 = (($253) + ($281)) | 0;
      $283 = ((($13)) + 20 | 0);
      $284 = HEAP32[$283 >> 2] | 0;
      $285 = (($256) + ($284)) | 0;
      $286 = ((($13)) + 24 | 0);
      $287 = HEAP32[$286 >> 2] | 0;
      $288 = (($259) + ($287)) | 0;
      $289 = ((($13)) + 28 | 0);
      $290 = HEAP32[$289 >> 2] | 0;
      $291 = (($262) + ($290)) | 0;
      $292 = ((($13)) + 32 | 0);
      $293 = HEAP32[$292 >> 2] | 0;
      $294 = (($265) + ($293)) | 0;
      $295 = ((($13)) + 36 | 0);
      $296 = HEAP32[$295 >> 2] | 0;
      $297 = (($268) + ($296)) | 0;
      $298 = (536863096 - ($270)) | 0;
      $299 = (536870392 - ($273)) | 0;
      $300 = (536870904 - ($276)) | 0;
      $301 = (536870904 - ($279)) | 0;
      $302 = (536870904 - ($282)) | 0;
      $303 = (536870904 - ($285)) | 0;
      $304 = (536870904 - ($288)) | 0;
      $305 = (536870904 - ($291)) | 0;
      $306 = (536870904 - ($294)) | 0;
      $307 = (33554424 - ($297)) | 0;
      $308 = HEAP32[$11 >> 2] | 0;
      $309 = (($298) + ($308)) | 0;
      HEAP32[$0 >> 2] = $309;
      $310 = ((($11)) + 4 | 0);
      $311 = HEAP32[$310 >> 2] | 0;
      $312 = (($299) + ($311)) | 0;
      HEAP32[$242 >> 2] = $312;
      $313 = ((($11)) + 8 | 0);
      $314 = HEAP32[$313 >> 2] | 0;
      $315 = (($300) + ($314)) | 0;
      HEAP32[$245 >> 2] = $315;
      $316 = ((($11)) + 12 | 0);
      $317 = HEAP32[$316 >> 2] | 0;
      $318 = (($301) + ($317)) | 0;
      HEAP32[$248 >> 2] = $318;
      $319 = ((($11)) + 16 | 0);
      $320 = HEAP32[$319 >> 2] | 0;
      $321 = (($302) + ($320)) | 0;
      HEAP32[$251 >> 2] = $321;
      $322 = ((($11)) + 20 | 0);
      $323 = HEAP32[$322 >> 2] | 0;
      $324 = (($303) + ($323)) | 0;
      HEAP32[$254 >> 2] = $324;
      $325 = ((($11)) + 24 | 0);
      $326 = HEAP32[$325 >> 2] | 0;
      $327 = (($304) + ($326)) | 0;
      HEAP32[$257 >> 2] = $327;
      $328 = ((($11)) + 28 | 0);
      $329 = HEAP32[$328 >> 2] | 0;
      $330 = (($305) + ($329)) | 0;
      HEAP32[$260 >> 2] = $330;
      $331 = ((($11)) + 32 | 0);
      $332 = HEAP32[$331 >> 2] | 0;
      $333 = (($306) + ($332)) | 0;
      HEAP32[$263 >> 2] = $333;
      $334 = ((($11)) + 36 | 0);
      $335 = HEAP32[$334 >> 2] | 0;
      $336 = (($307) + ($335)) | 0;
      HEAP32[$266 >> 2] = $336;
      $337 = ((($0)) + 40 | 0);
      $338 = (805294644 - ($309)) | 0;
      $339 = (805305588 - ($312)) | 0;
      $340 = ((($0)) + 44 | 0);
      $341 = (805306356 - ($315)) | 0;
      $342 = ((($0)) + 48 | 0);
      $343 = (805306356 - ($318)) | 0;
      $344 = ((($0)) + 52 | 0);
      $345 = (805306356 - ($321)) | 0;
      $346 = ((($0)) + 56 | 0);
      $347 = (805306356 - ($324)) | 0;
      $348 = ((($0)) + 60 | 0);
      $349 = (805306356 - ($327)) | 0;
      $350 = ((($0)) + 64 | 0);
      $351 = (805306356 - ($330)) | 0;
      $352 = ((($0)) + 68 | 0);
      $353 = (805306356 - ($333)) | 0;
      $354 = ((($0)) + 72 | 0);
      $355 = (50331636 - ($336)) | 0;
      $356 = ((($0)) + 76 | 0);
      $357 = HEAP32[$14 >> 2] | 0;
      $358 = (($338) + ($357)) | 0;
      HEAP32[$337 >> 2] = $358;
      $359 = ((($14)) + 4 | 0);
      $360 = HEAP32[$359 >> 2] | 0;
      $361 = (($339) + ($360)) | 0;
      HEAP32[$340 >> 2] = $361;
      $362 = ((($14)) + 8 | 0);
      $363 = HEAP32[$362 >> 2] | 0;
      $364 = (($341) + ($363)) | 0;
      HEAP32[$342 >> 2] = $364;
      $365 = ((($14)) + 12 | 0);
      $366 = HEAP32[$365 >> 2] | 0;
      $367 = (($343) + ($366)) | 0;
      HEAP32[$344 >> 2] = $367;
      $368 = ((($14)) + 16 | 0);
      $369 = HEAP32[$368 >> 2] | 0;
      $370 = (($345) + ($369)) | 0;
      HEAP32[$346 >> 2] = $370;
      $371 = ((($14)) + 20 | 0);
      $372 = HEAP32[$371 >> 2] | 0;
      $373 = (($347) + ($372)) | 0;
      HEAP32[$348 >> 2] = $373;
      $374 = ((($14)) + 24 | 0);
      $375 = HEAP32[$374 >> 2] | 0;
      $376 = (($349) + ($375)) | 0;
      HEAP32[$350 >> 2] = $376;
      $377 = ((($14)) + 28 | 0);
      $378 = HEAP32[$377 >> 2] | 0;
      $379 = (($351) + ($378)) | 0;
      HEAP32[$352 >> 2] = $379;
      $380 = ((($14)) + 32 | 0);
      $381 = HEAP32[$380 >> 2] | 0;
      $382 = (($353) + ($381)) | 0;
      HEAP32[$354 >> 2] = $382;
      $383 = ((($14)) + 36 | 0);
      $384 = HEAP32[$383 >> 2] | 0;
      $385 = (($355) + ($384)) | 0;
      HEAP32[$356 >> 2] = $385;
      _secp256k1_fe_mul($337, $337, $10);
      _secp256k1_fe_mul($13, $13, $7);
      $386 = HEAP32[$13 >> 2] | 0;
      $387 = (268431548 - ($386)) | 0;
      HEAP32[$13 >> 2] = $387;
      $388 = HEAP32[$271 >> 2] | 0;
      $389 = (268435196 - ($388)) | 0;
      HEAP32[$271 >> 2] = $389;
      $390 = HEAP32[$274 >> 2] | 0;
      $391 = (268435452 - ($390)) | 0;
      HEAP32[$274 >> 2] = $391;
      $392 = HEAP32[$277 >> 2] | 0;
      $393 = (268435452 - ($392)) | 0;
      HEAP32[$277 >> 2] = $393;
      $394 = HEAP32[$280 >> 2] | 0;
      $395 = (268435452 - ($394)) | 0;
      HEAP32[$280 >> 2] = $395;
      $396 = HEAP32[$283 >> 2] | 0;
      $397 = (268435452 - ($396)) | 0;
      HEAP32[$283 >> 2] = $397;
      $398 = HEAP32[$286 >> 2] | 0;
      $399 = (268435452 - ($398)) | 0;
      HEAP32[$286 >> 2] = $399;
      $400 = HEAP32[$289 >> 2] | 0;
      $401 = (268435452 - ($400)) | 0;
      HEAP32[$289 >> 2] = $401;
      $402 = HEAP32[$292 >> 2] | 0;
      $403 = (268435452 - ($402)) | 0;
      HEAP32[$292 >> 2] = $403;
      $404 = HEAP32[$295 >> 2] | 0;
      $405 = (16777212 - ($404)) | 0;
      HEAP32[$295 >> 2] = $405;
      $406 = HEAP32[$337 >> 2] | 0;
      $407 = (($406) + ($387)) | 0;
      HEAP32[$337 >> 2] = $407;
      $408 = HEAP32[$340 >> 2] | 0;
      $409 = (($408) + ($389)) | 0;
      HEAP32[$340 >> 2] = $409;
      $410 = HEAP32[$342 >> 2] | 0;
      $411 = (($410) + ($391)) | 0;
      HEAP32[$342 >> 2] = $411;
      $412 = HEAP32[$344 >> 2] | 0;
      $413 = (($412) + ($393)) | 0;
      HEAP32[$344 >> 2] = $413;
      $414 = HEAP32[$346 >> 2] | 0;
      $415 = (($414) + ($395)) | 0;
      HEAP32[$346 >> 2] = $415;
      $416 = HEAP32[$348 >> 2] | 0;
      $417 = (($416) + ($397)) | 0;
      HEAP32[$348 >> 2] = $417;
      $418 = HEAP32[$350 >> 2] | 0;
      $419 = (($418) + ($399)) | 0;
      HEAP32[$350 >> 2] = $419;
      $420 = HEAP32[$352 >> 2] | 0;
      $421 = (($420) + ($401)) | 0;
      HEAP32[$352 >> 2] = $421;
      $422 = HEAP32[$354 >> 2] | 0;
      $423 = (($422) + ($403)) | 0;
      HEAP32[$354 >> 2] = $423;
      $424 = HEAP32[$356 >> 2] | 0;
      $425 = (($424) + ($405)) | 0;
      HEAP32[$356 >> 2] = $425;
      STACKTOP = sp;
      return;
    }
    $235 = (_secp256k1_fe_normalizes_to_zero_var($10) | 0);
    $236 = ($235 | 0) == (0);
    if (!($236)) {
      _secp256k1_gej_double_var($0, $1, $3);
      STACKTOP = sp;
      return;
    }
    $237 = ($3 | 0) == (0 | 0);
    if (!($237)) {
      dest = $3;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = 0 | 0;
        dest = dest + 4 | 0;
      } while ((dest | 0) < (stop | 0));
    }
    HEAP32[$28 >> 2] = 1;
    STACKTOP = sp;
    return;
  }

  function _secp256k1_rangeproof_info($0, $1, $2, $3, $4, $5, $6) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    $4 = $4 | 0;
    $5 = $5 | 0;
    $6 = $6 | 0;
    var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0,
      $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0,
      $vararg_ptr1 = 0;
    var $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0,
      $vararg_ptr7 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 80 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
    $vararg_buffer13 = sp + 56 | 0;
    $vararg_buffer8 = sp + 40 | 0;
    $vararg_buffer3 = sp + 24 | 0;
    $vararg_buffer = sp + 8 | 0;
    $7 = sp + 68 | 0;
    $8 = sp;
    $9 = ($1 | 0) == (0 | 0);
    if ($9) {
      $10 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer >> 2] = 713;
      $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
      HEAP32[$vararg_ptr1 >> 2] = 561;
      $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
      HEAP32[$vararg_ptr2 >> 2] = 1262;
      (_fprintf($10, 628, $vararg_buffer) | 0);
      _abort();
      // unreachable;
    }
    $11 = ($2 | 0) == (0 | 0);
    if ($11) {
      $12 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer3 >> 2] = 713;
      $vararg_ptr6 = ((($vararg_buffer3)) + 4 | 0);
      HEAP32[$vararg_ptr6 >> 2] = 562;
      $vararg_ptr7 = ((($vararg_buffer3)) + 8 | 0);
      HEAP32[$vararg_ptr7 >> 2] = 1297;
      (_fprintf($12, 628, $vararg_buffer3) | 0);
      _abort();
      // unreachable;
    }
    $13 = ($3 | 0) == (0 | 0);
    if ($13) {
      $14 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer8 >> 2] = 713;
      $vararg_ptr11 = ((($vararg_buffer8)) + 4 | 0);
      HEAP32[$vararg_ptr11 >> 2] = 563;
      $vararg_ptr12 = ((($vararg_buffer8)) + 8 | 0);
      HEAP32[$vararg_ptr12 >> 2] = 1337;
      (_fprintf($14, 628, $vararg_buffer8) | 0);
      _abort();
      // unreachable;
    }
    $15 = ($4 | 0) == (0 | 0);
    if ($15) {
      $16 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer13 >> 2] = 713;
      $vararg_ptr16 = ((($vararg_buffer13)) + 4 | 0);
      HEAP32[$vararg_ptr16 >> 2] = 564;
      $vararg_ptr17 = ((($vararg_buffer13)) + 8 | 0);
      HEAP32[$vararg_ptr17 >> 2] = 1378;
      (_fprintf($16, 628, $vararg_buffer13) | 0);
      _abort();
      // unreachable;
    } else {
      HEAP32[$7 >> 2] = 0;
      $17 = $8;
      $18 = $17;
      HEAP32[$18 >> 2] = 1;
      $19 = (($17) + 4) | 0;
      $20 = $19;
      HEAP32[$20 >> 2] = 0;
      $21 = (_secp256k1_rangeproof_getheader_impl($7, $1, $2, $8, $3, $4, $5, $6) | 0);
      STACKTOP = sp;
      return ($21 | 0);
    }
    return (0) | 0;
  }

  function _secp256k1_rangeproof_getheader_impl($0, $1, $2, $3, $4, $5, $6, $7) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    $4 = $4 | 0;
    $5 = $5 | 0;
    $6 = $6 | 0;
    $7 = $7 | 0;
    var $$0 = 0, $$05153 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0,
      $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
    var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0,
      $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
    var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0,
      $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
    var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0,
      $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
    var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0,
      $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
    var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0,
      $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
    var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0,
      $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
    var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0,
      $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
    var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0,
      $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
    var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $8 = ($7 | 0) < (65);
    if ($8) {
      $$0 = 0;
      return ($$0 | 0);
    }
    $9 = HEAP32[$0 >> 2] | 0;
    $10 = (($6) + ($9) | 0);
    $11 = HEAP8[$10 >> 0] | 0;
    $12 = $11 & 255;
    $13 = $12 & 128;
    $14 = ($13 | 0) == (0);
    if (!($14)) {
      $$0 = 0;
      return ($$0 | 0);
    }
    $15 = $12 & 64;
    $16 = $12 & 32;
    HEAP32[$1 >> 2] = -1;
    HEAP32[$2 >> 2] = 0;
    $17 = ($15 | 0) == (0);
    do {
      if ($17) {
        $37 = 0;
        $40 = 0;
      } else {
        $18 = HEAP32[$0 >> 2] | 0;
        $19 = (($6) + ($18) | 0);
        $20 = HEAP8[$19 >> 0] | 0;
        $21 = $20 & 31;
        $22 = $21 & 255;
        HEAP32[$1 >> 2] = $22;
        $23 = HEAP32[$0 >> 2] | 0;
        $24 = (($23) + 1) | 0;
        HEAP32[$0 >> 2] = $24;
        $25 = HEAP32[$1 >> 2] | 0;
        $26 = ($25 | 0) > (18);
        if ($26) {
          $$0 = 0;
          return ($$0 | 0);
        }
        $27 = (($6) + ($24) | 0);
        $28 = HEAP8[$27 >> 0] | 0;
        $29 = $28 & 255;
        $30 = (($29) + 1) | 0;
        HEAP32[$2 >> 2] = $30;
        $31 = ($30 >>> 0) > (64);
        if ($31) {
          $$0 = 0;
          return ($$0 | 0);
        } else {
          $32 = (63 - ($29)) | 0;
          $33 = (_bitshift64Lshr(-1, -1, ($32 | 0)) | 0);
          $34 = tempRet0;
          $37 = $33;
          $40 = $34;
          break;
        }
      }
    } while (0);
    $35 = $5;
    $36 = $35;
    HEAP32[$36 >> 2] = $37;
    $38 = (($35) + 4) | 0;
    $39 = $38;
    HEAP32[$39 >> 2] = $40;
    $41 = HEAP32[$0 >> 2] | 0;
    $42 = (($41) + 1) | 0;
    HEAP32[$0 >> 2] = $42;
    $43 = $3;
    $44 = $43;
    HEAP32[$44 >> 2] = 1;
    $45 = (($43) + 4) | 0;
    $46 = $45;
    HEAP32[$46 >> 2] = 0;
    $47 = HEAP32[$1 >> 2] | 0;
    $48 = ($47 | 0) > (0);
    L16: do {
      if ($48) {
        $$05153 = 0;
        while (1) {
          $49 = $5;
          $50 = $49;
          $51 = HEAP32[$50 >> 2] | 0;
          $52 = (($49) + 4) | 0;
          $53 = $52;
          $54 = HEAP32[$53 >> 2] | 0;
          $55 = ($54 >>> 0) > (429496729);
          $56 = ($51 >>> 0) > (2576980377);
          $57 = ($54 | 0) == (429496729);
          $58 = $57 & $56;
          $59 = $55 | $58;
          if ($59) {
            $$0 = 0;
            break;
          }
          $60 = (___muldi3(($51 | 0), ($54 | 0), 10, 0) | 0);
          $61 = tempRet0;
          $62 = $5;
          $63 = $62;
          HEAP32[$63 >> 2] = $60;
          $64 = (($62) + 4) | 0;
          $65 = $64;
          HEAP32[$65 >> 2] = $61;
          $66 = $3;
          $67 = $66;
          $68 = HEAP32[$67 >> 2] | 0;
          $69 = (($66) + 4) | 0;
          $70 = $69;
          $71 = HEAP32[$70 >> 2] | 0;
          $72 = (___muldi3(($68 | 0), ($71 | 0), 10, 0) | 0);
          $73 = tempRet0;
          $74 = $3;
          $75 = $74;
          HEAP32[$75 >> 2] = $72;
          $76 = (($74) + 4) | 0;
          $77 = $76;
          HEAP32[$77 >> 2] = $73;
          $78 = (($$05153) + 1) | 0;
          $79 = ($78 | 0) < ($47 | 0);
          if ($79) {
            $$05153 = $78;
          } else {
            break L16;
          }
        }
        return ($$0 | 0);
      }
    } while (0);
    $80 = $4;
    $81 = $80;
    HEAP32[$81 >> 2] = 0;
    $82 = (($80) + 4) | 0;
    $83 = $82;
    HEAP32[$83 >> 2] = 0;
    $84 = ($16 | 0) == (0);
    do {
      if ($84) {
        $179 = 0;
        $181 = 0;
      } else {
        $85 = (($7) - ($42)) | 0;
        $86 = ($85 | 0) < (8);
        if ($86) {
          $$0 = 0;
          return ($$0 | 0);
        } else {
          $87 = (($6) + ($42) | 0);
          $88 = HEAP8[$87 >> 0] | 0;
          $89 = $88 & 255;
          $90 = $4;
          $91 = $90;
          HEAP32[$91 >> 2] = $89;
          $92 = (($90) + 4) | 0;
          $93 = $92;
          HEAP32[$93 >> 2] = 0;
          $94 = (_bitshift64Shl(($89 | 0), 0, 8) | 0);
          $95 = tempRet0;
          $96 = (($41) + 2) | 0;
          $97 = (($6) + ($96) | 0);
          $98 = HEAP8[$97 >> 0] | 0;
          $99 = $98 & 255;
          $100 = $99 | $94;
          $101 = $4;
          $102 = $101;
          HEAP32[$102 >> 2] = $100;
          $103 = (($101) + 4) | 0;
          $104 = $103;
          HEAP32[$104 >> 2] = $95;
          $105 = (_bitshift64Shl(($100 | 0), ($95 | 0), 8) | 0);
          $106 = tempRet0;
          $107 = (($41) + 3) | 0;
          $108 = (($6) + ($107) | 0);
          $109 = HEAP8[$108 >> 0] | 0;
          $110 = $109 & 255;
          $111 = $110 | $105;
          $112 = $4;
          $113 = $112;
          HEAP32[$113 >> 2] = $111;
          $114 = (($112) + 4) | 0;
          $115 = $114;
          HEAP32[$115 >> 2] = $106;
          $116 = (_bitshift64Shl(($111 | 0), ($106 | 0), 8) | 0);
          $117 = tempRet0;
          $118 = (($41) + 4) | 0;
          $119 = (($6) + ($118) | 0);
          $120 = HEAP8[$119 >> 0] | 0;
          $121 = $120 & 255;
          $122 = $121 | $116;
          $123 = $4;
          $124 = $123;
          HEAP32[$124 >> 2] = $122;
          $125 = (($123) + 4) | 0;
          $126 = $125;
          HEAP32[$126 >> 2] = $117;
          $127 = (_bitshift64Shl(($122 | 0), ($117 | 0), 8) | 0);
          $128 = tempRet0;
          $129 = (($41) + 5) | 0;
          $130 = (($6) + ($129) | 0);
          $131 = HEAP8[$130 >> 0] | 0;
          $132 = $131 & 255;
          $133 = $132 | $127;
          $134 = $4;
          $135 = $134;
          HEAP32[$135 >> 2] = $133;
          $136 = (($134) + 4) | 0;
          $137 = $136;
          HEAP32[$137 >> 2] = $128;
          $138 = (_bitshift64Shl(($133 | 0), ($128 | 0), 8) | 0);
          $139 = tempRet0;
          $140 = (($41) + 6) | 0;
          $141 = (($6) + ($140) | 0);
          $142 = HEAP8[$141 >> 0] | 0;
          $143 = $142 & 255;
          $144 = $143 | $138;
          $145 = $4;
          $146 = $145;
          HEAP32[$146 >> 2] = $144;
          $147 = (($145) + 4) | 0;
          $148 = $147;
          HEAP32[$148 >> 2] = $139;
          $149 = (_bitshift64Shl(($144 | 0), ($139 | 0), 8) | 0);
          $150 = tempRet0;
          $151 = (($41) + 7) | 0;
          $152 = (($6) + ($151) | 0);
          $153 = HEAP8[$152 >> 0] | 0;
          $154 = $153 & 255;
          $155 = $154 | $149;
          $156 = $4;
          $157 = $156;
          HEAP32[$157 >> 2] = $155;
          $158 = (($156) + 4) | 0;
          $159 = $158;
          HEAP32[$159 >> 2] = $150;
          $160 = (_bitshift64Shl(($155 | 0), ($150 | 0), 8) | 0);
          $161 = tempRet0;
          $162 = (($41) + 8) | 0;
          $163 = (($6) + ($162) | 0);
          $164 = HEAP8[$163 >> 0] | 0;
          $165 = $164 & 255;
          $166 = $165 | $160;
          $167 = $4;
          $168 = $167;
          HEAP32[$168 >> 2] = $166;
          $169 = (($167) + 4) | 0;
          $170 = $169;
          HEAP32[$170 >> 2] = $161;
          $171 = (($41) + 9) | 0;
          HEAP32[$0 >> 2] = $171;
          $179 = $166;
          $181 = $161;
          break;
        }
      }
    } while (0);
    $172 = $5;
    $173 = $172;
    $174 = HEAP32[$173 >> 2] | 0;
    $175 = (($172) + 4) | 0;
    $176 = $175;
    $177 = HEAP32[$176 >> 2] | 0;
    $178 = $179 ^ -1;
    $180 = $181 ^ -1;
    $182 = ($177 >>> 0) > ($180 >>> 0);
    $183 = ($174 >>> 0) > ($178 >>> 0);
    $184 = ($177 | 0) == ($180 | 0);
    $185 = $184 & $183;
    $186 = $182 | $185;
    if ($186) {
      $$0 = 0;
      return ($$0 | 0);
    }
    $187 = (_i64Add(($179 | 0), ($181 | 0), ($174 | 0), ($177 | 0)) | 0);
    $188 = tempRet0;
    $189 = $5;
    $190 = $189;
    HEAP32[$190 >> 2] = $187;
    $191 = (($189) + 4) | 0;
    $192 = $191;
    HEAP32[$192 >> 2] = $188;
    $$0 = 1;
    return ($$0 | 0);
  }

  function _secp256k1_rangeproof_sign($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    $4 = $4 | 0;
    $5 = $5 | 0;
    $6 = $6 | 0;
    $7 = $7 | 0;
    $8 = $8 | 0;
    $9 = $9 | 0;
    $10 = $10 | 0;
    $11 = $11 | 0;
    var $$$i = 0, $$$i$i = 0, $$$i151$i = 0, $$0$lcssa$i121235$i = 0, $$0$lcssa$i130244$i = 0, $$0$lcssa$i139241$i = 0,
      $$0$lcssa$i148238$i = 0, $$0102$i = 0, $$020$lcssa$i120234$i = 0, $$020$lcssa$i129243$i = 0,
      $$020$lcssa$i138240$i = 0, $$020$lcssa$i147237$i = 0, $$02023$i117$i = 0, $$02023$i126$i = 0, $$02023$i135$i = 0,
      $$02023$i144$i = 0, $$021$lcssa$i119233$i = 0, $$021$lcssa$i128242$i = 0, $$021$lcssa$i137239$i = 0,
      $$021$lcssa$i146236$i = 0;
    var $$0212$i = 0, $$02122$i118$i = 0, $$02122$i127$i = 0, $$02122$i136$i = 0, $$02122$i145$i = 0, $$0215$ph$i = 0,
      $$0216$ph$i = 0, $$0222$i = 0, $$024$i116$i = 0, $$024$i125$i = 0, $$024$i134$i = 0, $$024$i143$i = 0,
      $$028$i$i = 0, $$0281$i$i = 0, $$0292$i$i = 0, $$03$i$i = 0, $$095105$i$i = 0, $$1103$i = 0, $$1213$ph$i = 0,
      $$1220$ph$off0$i = 0;
    var $$1220$ph$off16$i = 0, $$1220$ph$off24$i = 0, $$1220$ph$off32$i = 0, $$1220$ph$off40$i = 0,
      $$1220$ph$off48$i = 0, $$1220$ph$off56$i = 0, $$1220$ph$off8$i = 0, $$1223$ph$i = 0, $$196101$i$i = 0,
      $$2100$i$i = 0, $$2104$lcssa$i = 0, $$2214$lcssa$i = 0, $$2214269$i = 0, $$2281$i = 0, $$3105$lcssa$i = 0,
      $$3105270$i = 0, $$3111$i = 0, $$4271$i = 0, $$5107$i = 0, $$5267$i = 0;
    var $$6$i = 0, $$6$lcssa$i = 0, $$6266$i = 0, $$6268$i = 0, $$idx$i = 0, $$idx$val = 0, $$idx$val$i = 0,
      $$idx112$val$i = 0, $$idx12$val$i$i = 0, $$idx22$val = 0, $$idx23$val = 0, $$idx24 = 0, $$idx24$val = 0,
      $$neg$i = 0, $$off$i = 0, $$pre$i = 0, $$sroa$10$0$$sroa_idx$i = 0, $$sroa$4$0$$sroa_idx$i = 0,
      $$sroa$5$0$$sroa_idx$i = 0, $$sroa$6$0$$sroa_idx$i = 0;
    var $$sroa$7$0$$sroa_idx$i = 0, $$sroa$8$0$$sroa_idx$i = 0, $$sroa$9$0$$sroa_idx$i = 0, $100 = 0, $101 = 0,
      $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0,
      $113 = 0, $114 = 0, $115 = 0, $116 = 0;
    var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0,
      $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
    var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0,
      $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
    var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0,
      $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
    var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0,
      $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
    var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0,
      $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
    var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0,
      $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
    var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0,
      $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
    var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0,
      $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
    var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0,
      $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
    var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0,
      $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
    var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0,
      $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
    var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0,
      $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
    var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0,
      $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
    var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0,
      $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
    var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0,
      $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
    var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0,
      $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
    var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0,
      $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
    var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0,
      $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
    var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0,
      $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
    var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0,
      $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
    var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0,
      $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
    var $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0,
      $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
    var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0,
      $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
    var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $55 = 0, $56 = 0,
      $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
    var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0,
      $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
    var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0,
      $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond$i154$i = 0, $exitcond304$i = 0,
      $exitcond307$i = 0;
    var $exitcond308$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond3$i$i = 0, $or$cond97$i$i = 0, $vararg_buffer = 0,
      $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0,
      $vararg_buffer33 = 0, $vararg_buffer38 = 0, $vararg_buffer43 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0,
      $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0;
    var $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr31 = 0,
      $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr42 = 0, $vararg_ptr46 = 0,
      $vararg_ptr47 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 27184 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(27184 | 0);
    $vararg_buffer43 = sp + 144 | 0;
    $vararg_buffer38 = sp + 128 | 0;
    $vararg_buffer33 = sp + 112 | 0;
    $vararg_buffer28 = sp + 96 | 0;
    $vararg_buffer23 = sp + 80 | 0;
    $vararg_buffer18 = sp + 64 | 0;
    $vararg_buffer13 = sp + 48 | 0;
    $vararg_buffer8 = sp + 32 | 0;
    $vararg_buffer3 = sp + 16 | 0;
    $vararg_buffer = sp;
    $12 = sp + 23000 | 0;
    $13 = sp + 22960 | 0;
    $14 = sp + 22920 | 0;
    $15 = sp + 22792 | 0;
    $16 = sp + 22784 | 0;
    $17 = sp + 6912 | 0;
    $18 = sp + 2816 | 0;
    $19 = sp + 1792 | 0;
    $20 = sp + 768 | 0;
    $21 = sp + 736 | 0;
    $22 = sp + 540 | 0;
    $23 = sp + 23088 | 0;
    $24 = sp + 504 | 0;
    $25 = sp + 376 | 0;
    $26 = sp + 248 | 0;
    $27 = sp + 240 | 0;
    $28 = sp + 156 | 0;
    $29 = ($0 | 0) == (0 | 0);
    if ($29) {
      $30 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer >> 2] = 713;
      $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
      HEAP32[$vararg_ptr1 >> 2] = 604;
      $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
      HEAP32[$vararg_ptr2 >> 2] = 729;
      (_fprintf($30, 628, $vararg_buffer) | 0);
      _abort();
      // unreachable;
    }
    $31 = ($1 | 0) == (0 | 0);
    if ($31) {
      $32 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer3 >> 2] = 713;
      $vararg_ptr6 = ((($vararg_buffer3)) + 4 | 0);
      HEAP32[$vararg_ptr6 >> 2] = 605;
      $vararg_ptr7 = ((($vararg_buffer3)) + 8 | 0);
      HEAP32[$vararg_ptr7 >> 2] = 1419;
      (_fprintf($32, 628, $vararg_buffer3) | 0);
      _abort();
      // unreachable;
    }
    $33 = ($2 | 0) == (0 | 0);
    if ($33) {
      $34 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer8 >> 2] = 713;
      $vararg_ptr11 = ((($vararg_buffer8)) + 4 | 0);
      HEAP32[$vararg_ptr11 >> 2] = 606;
      $vararg_ptr12 = ((($vararg_buffer8)) + 8 | 0);
      HEAP32[$vararg_ptr12 >> 2] = 1539;
      (_fprintf($34, 628, $vararg_buffer8) | 0);
      _abort();
      // unreachable;
    }
    $35 = ($5 | 0) == (0 | 0);
    if ($35) {
      $36 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer13 >> 2] = 713;
      $vararg_ptr16 = ((($vararg_buffer13)) + 4 | 0);
      HEAP32[$vararg_ptr16 >> 2] = 607;
      $vararg_ptr17 = ((($vararg_buffer13)) + 8 | 0);
      HEAP32[$vararg_ptr17 >> 2] = 1007;
      (_fprintf($36, 628, $vararg_buffer13) | 0);
      _abort();
      // unreachable;
    }
    $37 = ($6 | 0) == (0 | 0);
    if ($37) {
      $38 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer18 >> 2] = 713;
      $vararg_ptr21 = ((($vararg_buffer18)) + 4 | 0);
      HEAP32[$vararg_ptr21 >> 2] = 608;
      $vararg_ptr22 = ((($vararg_buffer18)) + 8 | 0);
      HEAP32[$vararg_ptr22 >> 2] = 1045;
      (_fprintf($38, 628, $vararg_buffer18) | 0);
      _abort();
      // unreachable;
    }
    $39 = ($7 | 0) == (0 | 0);
    if ($39) {
      $40 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer23 >> 2] = 713;
      $vararg_ptr26 = ((($vararg_buffer23)) + 4 | 0);
      HEAP32[$vararg_ptr26 >> 2] = 609;
      $vararg_ptr27 = ((($vararg_buffer23)) + 8 | 0);
      HEAP32[$vararg_ptr27 >> 2] = 1575;
      (_fprintf($40, 628, $vararg_buffer23) | 0);
      _abort();
      // unreachable;
    }
    $$idx$val = HEAP32[$0 >> 2] | 0;
    $41 = ($$idx$val | 0) == (0 | 0);
    if ($41) {
      $42 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer28 >> 2] = 713;
      $vararg_ptr31 = ((($vararg_buffer28)) + 4 | 0);
      HEAP32[$vararg_ptr31 >> 2] = 610;
      $vararg_ptr32 = ((($vararg_buffer28)) + 8 | 0);
      HEAP32[$vararg_ptr32 >> 2] = 764;
      (_fprintf($42, 628, $vararg_buffer28) | 0);
      _abort();
      // unreachable;
    }
    $43 = ((($0)) + 4 | 0);
    $$idx22$val = HEAP32[$43 >> 2] | 0;
    $44 = ($$idx22$val | 0) == (0 | 0);
    if ($44) {
      $45 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer33 >> 2] = 713;
      $vararg_ptr36 = ((($vararg_buffer33)) + 4 | 0);
      HEAP32[$vararg_ptr36 >> 2] = 611;
      $vararg_ptr37 = ((($vararg_buffer33)) + 8 | 0);
      HEAP32[$vararg_ptr37 >> 2] = 839;
      (_fprintf($45, 628, $vararg_buffer33) | 0);
      _abort();
      // unreachable;
    }
    $46 = ((($0)) + 164 | 0);
    $$idx23$val = HEAP32[$46 >> 2] | 0;
    $47 = ($$idx23$val | 0) == (0 | 0);
    if ($47) {
      $48 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer38 >> 2] = 713;
      $vararg_ptr41 = ((($vararg_buffer38)) + 4 | 0);
      HEAP32[$vararg_ptr41 >> 2] = 612;
      $vararg_ptr42 = ((($vararg_buffer38)) + 8 | 0);
      HEAP32[$vararg_ptr42 >> 2] = 922;
      (_fprintf($48, 628, $vararg_buffer38) | 0);
      _abort();
      // unreachable;
    }
    $$idx24 = ((($0)) + 168 | 0);
    $$idx24$val = HEAP32[$$idx24 >> 2] | 0;
    $49 = ($$idx24$val | 0) == (0 | 0);
    if ($49) {
      $50 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer43 >> 2] = 713;
      $vararg_ptr46 = ((($vararg_buffer43)) + 4 | 0);
      HEAP32[$vararg_ptr46 >> 2] = 613;
      $vararg_ptr47 = ((($vararg_buffer43)) + 8 | 0);
      HEAP32[$vararg_ptr47 >> 2] = 1456;
      (_fprintf($50, 628, $vararg_buffer43) | 0);
      _abort();
      // unreachable;
    }
    $51 = HEAP32[$2 >> 2] | 0;
    $52 = ($51 | 0) < (65);
    if ($52) {
      $$3111$i = 0;
      STACKTOP = sp;
      return ($$3111$i | 0);
    }
    $53 = ($11 >>> 0) < ($4 >>> 0);
    $54 = ($10 >>> 0) < ($3 >>> 0);
    $55 = ($11 | 0) == ($4 | 0);
    $56 = $55 & $54;
    $57 = $53 | $56;
    $58 = ($9 >>> 0) > (64);
    $59 = $58 | $57;
    $$off$i = (($8) + 1) | 0;
    $60 = ($$off$i >>> 0) > (19);
    $61 = $60 | $59;
    if ($61) {
      $$3111$i = 0;
      STACKTOP = sp;
      return ($$3111$i | 0);
    }
    HEAP32[$25 >> 2] = 1;
    HEAP32[$26 >> 2] = 0;
    $62 = ($3 | 0) != (-1);
    $63 = ($4 | 0) != (-1);
    $64 = $62 | $63;
    $65 = ($8 | 0) > (-1);
    $or$cond$i = $64 & $65;
    if ($or$cond$i) {
      $66 = ($3 | 0) != (0);
      $67 = ($4 | 0) != (0);
      $68 = $66 | $67;
      $69 = ($11 | 0) < (0);
      $or$cond$i$i = $68 & $69;
      if ($or$cond$i$i) {
        $$3111$i = 0;
        STACKTOP = sp;
        return ($$3111$i | 0);
      }
      $70 = ($10 | 0) != (0);
      $71 = ($11 | 0) != (0);
      $72 = $70 | $71;
      $73 = ($4 >>> 0) > (2147483647);
      $74 = ($3 >>> 0) > (4294967294);
      $75 = ($4 | 0) == (2147483647);
      $76 = $75 & $74;
      $77 = $73 | $76;
      $or$cond97$i$i = $77 & $72;
      if ($or$cond97$i$i) {
        $$3111$i = 0;
        STACKTOP = sp;
        return ($$3111$i | 0);
      }
      $78 = (_llvm_ctlz_i64(($3 | 0), ($4 | 0), 0) | 0);
      $79 = tempRet0;
      $80 = ($78 | 0) < ($9 | 0);
      $$$i = $80 ? $78 : $9;
      $81 = ($$$i | 0) > (61);
      $or$cond3$i$i = $69 | $81;
      $82 = $or$cond3$i$i ? 0 : $8;
      $83 = (_i64Subtract(($10 | 0), ($11 | 0), ($3 | 0), ($4 | 0)) | 0);
      $84 = tempRet0;
      $85 = ($$$i | 0) == (0);
      $86 = (64 - ($$$i)) | 0;
      $87 = (_bitshift64Lshr(-1, -1, ($86 | 0)) | 0);
      $88 = tempRet0;
      $89 = $85 ? 0 : $87;
      $90 = $85 ? 0 : $88;
      $91 = ($82 | 0) > (0);
      $92 = ($90 >>> 0) < (429496729);
      $93 = ($89 >>> 0) < (2576980378);
      $94 = ($90 | 0) == (429496729);
      $95 = $94 & $93;
      $96 = $92 | $95;
      $97 = $91 & $96;
      if ($97) {
        $$095105$i$i = 0;
        $102 = $89;
        $103 = $90;
        $98 = $83;
        $99 = $84;
        while (1) {
          $100 = (___udivdi3(($98 | 0), ($99 | 0), 10, 0) | 0);
          $101 = tempRet0;
          $104 = (___muldi3(($102 | 0), ($103 | 0), 10, 0) | 0);
          $105 = tempRet0;
          $106 = (($$095105$i$i) + 1) | 0;
          $107 = ($106 | 0) < ($82 | 0);
          $108 = ($105 >>> 0) < (429496729);
          $109 = ($104 >>> 0) < (2576980378);
          $110 = ($105 | 0) == (429496729);
          $111 = $110 & $109;
          $112 = $108 | $111;
          $113 = $112 & $107;
          if ($113) {
            $$095105$i$i = $106;
            $102 = $104;
            $103 = $105;
            $98 = $100;
            $99 = $101;
          } else {
            break;
          }
        }
        $114 = ($$095105$i$i | 0) > (-1);
        if ($114) {
          $$196101$i$i = 0;
          $115 = $100;
          $116 = $101;
          $119 = 1;
          $120 = 0;
          while (1) {
            $117 = (___muldi3(($115 | 0), ($116 | 0), 10, 0) | 0);
            $118 = tempRet0;
            $121 = (___muldi3(($119 | 0), ($120 | 0), 10, 0) | 0);
            $122 = tempRet0;
            $123 = (($$196101$i$i) + 1) | 0;
            $exitcond308$i = ($123 | 0) == ($106 | 0);
            if ($exitcond308$i) {
              $$0222$i = $106;
              $124 = $117;
              $125 = $118;
              $128 = $100;
              $130 = $101;
              $541 = $121;
              $542 = $122;
              break;
            } else {
              $$196101$i$i = $123;
              $115 = $117;
              $116 = $118;
              $119 = $121;
              $120 = $122;
            }
          }
        } else {
          $$0222$i = $106;
          $124 = $100;
          $125 = $101;
          $128 = $100;
          $130 = $101;
          $541 = 1;
          $542 = 0;
        }
      } else {
        $$0222$i = 0;
        $124 = $83;
        $125 = $84;
        $128 = $83;
        $130 = $84;
        $541 = 1;
        $542 = 0;
      }
      $126 = (_i64Subtract(($10 | 0), ($11 | 0), ($124 | 0), ($125 | 0)) | 0);
      $127 = tempRet0;
      $129 = ($128 | 0) == (0);
      $131 = ($130 | 0) == (0);
      $132 = $129 & $131;
      $133 = (_llvm_ctlz_i64(($128 | 0), ($130 | 0), 0) | 0);
      $134 = tempRet0;
      $135 = (64 - ($133)) | 0;
      $136 = $132 ? 1 : $135;
      $137 = ($$$i | 0) > ($136 | 0);
      $$$i$i = $137 ? $$$i : $136;
      $138 = (($$$i$i) + 1) | 0;
      $139 = $138 >> 1;
      $140 = ($139 | 0) > (0);
      $141 = $128 & 255;
      $142 = (_bitshift64Lshr(($128 | 0), ($130 | 0), 8) | 0);
      $143 = tempRet0;
      $144 = $142 & 255;
      $145 = (_bitshift64Lshr(($128 | 0), ($130 | 0), 16) | 0);
      $146 = tempRet0;
      $147 = $145 & 255;
      $148 = (_bitshift64Lshr(($128 | 0), ($130 | 0), 24) | 0);
      $149 = tempRet0;
      $150 = $148 & 255;
      $151 = $130 & 255;
      $152 = (_bitshift64Lshr(($128 | 0), ($130 | 0), 40) | 0);
      $153 = tempRet0;
      $154 = $152 & 255;
      $155 = (_bitshift64Lshr(($128 | 0), ($130 | 0), 48) | 0);
      $156 = tempRet0;
      $157 = $155 & 255;
      $158 = (_bitshift64Lshr(($128 | 0), ($130 | 0), 56) | 0);
      $159 = tempRet0;
      $160 = $158 & 255;
      if ($140) {
        $161 = (($139) + -1) | 0;
        $162 = $$$i$i & 1;
        $163 = $162 ^ 1;
        $$0212$i = 0;
        $$2100$i$i = 0;
        while (1) {
          $164 = ($$2100$i$i | 0) < ($161 | 0);
          $165 = $164 & 1;
          $166 = $165 | $163;
          $167 = ($166 | 0) != (0);
          $168 = $167 ? 4 : 2;
          $169 = (($25) + ($$2100$i$i << 2) | 0);
          HEAP32[$169 >> 2] = $168;
          $170 = (($168) + ($$0212$i)) | 0;
          $171 = $$2100$i$i << 1;
          $172 = (_bitshift64Lshr(($128 | 0), ($130 | 0), ($171 | 0)) | 0);
          $173 = tempRet0;
          $174 = $172 & 3;
          $175 = (($26) + ($$2100$i$i << 2) | 0);
          HEAP32[$175 >> 2] = $174;
          $176 = (($$2100$i$i) + 1) | 0;
          $exitcond307$i = ($176 | 0) == ($139 | 0);
          if ($exitcond307$i) {
            break;
          } else {
            $$0212$i = $170;
            $$2100$i$i = $176;
          }
        }
        $$pre$i = HEAP32[$25 >> 2] | 0;
        $$0215$ph$i = $139;
        $$0216$ph$i = $$$i$i;
        $$1213$ph$i = $170;
        $$1220$ph$off0$i = $141;
        $$1220$ph$off16$i = $147;
        $$1220$ph$off24$i = $150;
        $$1220$ph$off32$i = $151;
        $$1220$ph$off40$i = $154;
        $$1220$ph$off48$i = $157;
        $$1220$ph$off56$i = $160;
        $$1220$ph$off8$i = $144;
        $$1223$ph$i = $$0222$i;
        $177 = $$pre$i;
        $181 = $126;
        $183 = $127;
        $377 = $541;
        $378 = $542;
      } else {
        $$0215$ph$i = $139;
        $$0216$ph$i = $$$i$i;
        $$1213$ph$i = 0;
        $$1220$ph$off0$i = $141;
        $$1220$ph$off16$i = $147;
        $$1220$ph$off24$i = $150;
        $$1220$ph$off32$i = $151;
        $$1220$ph$off40$i = $154;
        $$1220$ph$off48$i = $157;
        $$1220$ph$off56$i = $160;
        $$1220$ph$off8$i = $144;
        $$1223$ph$i = $$0222$i;
        $177 = 1;
        $181 = $126;
        $183 = $127;
        $377 = $541;
        $378 = $542;
      }
    } else {
      $$0215$ph$i = 1;
      $$0216$ph$i = 0;
      $$1213$ph$i = 2;
      $$1220$ph$off0$i = 0;
      $$1220$ph$off16$i = 0;
      $$1220$ph$off24$i = 0;
      $$1220$ph$off32$i = 0;
      $$1220$ph$off40$i = 0;
      $$1220$ph$off48$i = 0;
      $$1220$ph$off56$i = 0;
      $$1220$ph$off8$i = 0;
      $$1223$ph$i = 0;
      $177 = 1;
      $181 = $10;
      $183 = $11;
      $377 = 1;
      $378 = 0;
    }
    $178 = ($177 | 0) > (1);
    $179 = $$1223$ph$i | 64;
    $180 = $178 ? $179 : 0;
    $182 = ($181 | 0) != (0);
    $184 = ($183 | 0) != (0);
    $185 = $182 | $184;
    $186 = $185 ? 32 : 0;
    $187 = $180 | $186;
    $188 = $187 & 255;
    HEAP8[$1 >> 0] = $188;
    if ($178) {
      $189 = (($$0216$ph$i) + 255) | 0;
      $190 = ((($1)) + 1 | 0);
      $191 = $189 & 255;
      HEAP8[$190 >> 0] = $191;
      $$0102$i = 2;
    } else {
      $$0102$i = 1;
    }
    if ($185) {
      $192 = (_bitshift64Lshr(($181 | 0), ($183 | 0), 56) | 0);
      $193 = tempRet0;
      $194 = $192 & 255;
      $195 = (($1) + ($$0102$i) | 0);
      HEAP8[$195 >> 0] = $194;
      $196 = (_bitshift64Lshr(($181 | 0), ($183 | 0), 48) | 0);
      $197 = tempRet0;
      $198 = $196 & 255;
      $199 = (($$0102$i) + 1) | 0;
      $200 = (($1) + ($199) | 0);
      HEAP8[$200 >> 0] = $198;
      $201 = (_bitshift64Lshr(($181 | 0), ($183 | 0), 40) | 0);
      $202 = tempRet0;
      $203 = $201 & 255;
      $204 = (($$0102$i) + 2) | 0;
      $205 = (($1) + ($204) | 0);
      HEAP8[$205 >> 0] = $203;
      $206 = $183 & 255;
      $207 = (($$0102$i) + 3) | 0;
      $208 = (($1) + ($207) | 0);
      HEAP8[$208 >> 0] = $206;
      $209 = (_bitshift64Lshr(($181 | 0), ($183 | 0), 24) | 0);
      $210 = tempRet0;
      $211 = $209 & 255;
      $212 = $$0102$i | 4;
      $213 = (($1) + ($212) | 0);
      HEAP8[$213 >> 0] = $211;
      $214 = (_bitshift64Lshr(($181 | 0), ($183 | 0), 16) | 0);
      $215 = tempRet0;
      $216 = $214 & 255;
      $217 = (($$0102$i) + 5) | 0;
      $218 = (($1) + ($217) | 0);
      HEAP8[$218 >> 0] = $216;
      $219 = (_bitshift64Lshr(($181 | 0), ($183 | 0), 8) | 0);
      $220 = tempRet0;
      $221 = $219 & 255;
      $222 = (($$0102$i) + 6) | 0;
      $223 = (($1) + ($222) | 0);
      HEAP8[$223 >> 0] = $221;
      $224 = $181 & 255;
      $225 = (($$0102$i) + 7) | 0;
      $226 = (($1) + ($225) | 0);
      HEAP8[$226 >> 0] = $224;
      $227 = $$0102$i | 8;
      $$1103$i = $227;
    } else {
      $$1103$i = $$0102$i;
    }
    $228 = HEAP32[$2 >> 2] | 0;
    $229 = (($228) - ($$1103$i)) | 0;
    $230 = (($$1213$ph$i) + ($$0215$ph$i)) | 0;
    $231 = $230 << 5;
    $232 = (($$0215$ph$i) + 6) | 0;
    $233 = $232 >> 3;
    $234 = (($231) + ($233)) | 0;
    $235 = ($229 | 0) < ($234 | 0);
    if ($235) {
      $$3111$i = 0;
      STACKTOP = sp;
      return ($$3111$i | 0);
    }
    HEAP32[$22 >> 2] = 1779033703;
    $236 = ((($22)) + 4 | 0);
    HEAP32[$236 >> 2] = -1150833019;
    $237 = ((($22)) + 8 | 0);
    HEAP32[$237 >> 2] = 1013904242;
    $238 = ((($22)) + 12 | 0);
    HEAP32[$238 >> 2] = -1521486534;
    $239 = ((($22)) + 16 | 0);
    HEAP32[$239 >> 2] = 1359893119;
    $240 = ((($22)) + 20 | 0);
    HEAP32[$240 >> 2] = -1694144372;
    $241 = ((($22)) + 24 | 0);
    HEAP32[$241 >> 2] = 528734635;
    $242 = ((($22)) + 28 | 0);
    HEAP32[$242 >> 2] = 1541459225;
    $243 = ((($22)) + 192 | 0);
    $244 = ((($22)) + 128 | 0);
    dest = $244;
    src = $5;
    stop = dest + 33 | 0;
    do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    $245 = (($$1103$i) + 33) | 0;
    HEAP32[$243 >> 2] = $245;
    $246 = ($245 >>> 0) > (63);
    if ($246) {
      $$02023$i117$i = $$1103$i;
      $$02122$i118$i = $1;
      $$024$i116$i = 33;
      while (1) {
        $247 = (($244) + ($$024$i116$i) | 0);
        $248 = (64 - ($$024$i116$i)) | 0;
        _memcpy(($247 | 0), ($$02122$i118$i | 0), ($248 | 0)) | 0;
        $249 = (($$02122$i118$i) + ($248) | 0);
        $250 = (($$02023$i117$i) - ($248)) | 0;
        _secp256k1_sha256_transform($22, $244);
        $251 = ($250 >>> 0) > (63);
        if ($251) {
          $$02023$i117$i = $250;
          $$02122$i118$i = $249;
          $$024$i116$i = 0;
        } else {
          break;
        }
      }
      $252 = ($250 | 0) == (0);
      if (!($252)) {
        $$0$lcssa$i121235$i = 0;
        $$020$lcssa$i120234$i = $250;
        $$021$lcssa$i119233$i = $249;
        label = 42;
      }
    } else {
      $$0$lcssa$i121235$i = 33;
      $$020$lcssa$i120234$i = $$1103$i;
      $$021$lcssa$i119233$i = $1;
      label = 42;
    }
    if ((label | 0) == 42) {
      $253 = (($244) + ($$0$lcssa$i121235$i) | 0);
      _memcpy(($253 | 0), ($$021$lcssa$i119233$i | 0), ($$020$lcssa$i120234$i | 0)) | 0;
    }
    _memset(($23 | 0), 0, 4096) | 0;
    $254 = (($$0215$ph$i) + -1) | 0;
    $255 = (($25) + ($254 << 2) | 0);
    $256 = HEAP32[$255 >> 2] | 0;
    $257 = ($256 | 0) > (1);
    if ($257) {
      $258 = (($256) + -1) | 0;
      $259 = (($26) + ($254 << 2) | 0);
      $260 = HEAP32[$259 >> 2] | 0;
      $261 = ($260 | 0) == ($258 | 0);
      $$neg$i = $261 << 31 >> 31;
      $262 = $254 << 2;
      $263 = (($258) + ($262)) | 0;
      $264 = (($263) + ($$neg$i)) | 0;
      $265 = $264 << 5;
      $266 = $265 | 24;
      $267 = $265 | 16;
      $268 = $265 | 8;
      $269 = (($23) + ($266) | 0);
      HEAP8[$269 >> 0] = $$1220$ph$off56$i;
      $270 = (($23) + ($267) | 0);
      HEAP8[$270 >> 0] = $$1220$ph$off56$i;
      $271 = (($23) + ($268) | 0);
      HEAP8[$271 >> 0] = $$1220$ph$off56$i;
      $272 = (($23) + ($265) | 0);
      $273 = $265 | 25;
      $274 = (($23) + ($273) | 0);
      HEAP8[$274 >> 0] = $$1220$ph$off48$i;
      $275 = $265 | 17;
      $276 = (($23) + ($275) | 0);
      HEAP8[$276 >> 0] = $$1220$ph$off48$i;
      $277 = $265 | 9;
      $278 = (($23) + ($277) | 0);
      HEAP8[$278 >> 0] = $$1220$ph$off48$i;
      $279 = $265 | 1;
      $280 = (($23) + ($279) | 0);
      HEAP8[$280 >> 0] = 0;
      $281 = $265 | 26;
      $282 = (($23) + ($281) | 0);
      HEAP8[$282 >> 0] = $$1220$ph$off40$i;
      $283 = $265 | 18;
      $284 = (($23) + ($283) | 0);
      HEAP8[$284 >> 0] = $$1220$ph$off40$i;
      $285 = $265 | 10;
      $286 = (($23) + ($285) | 0);
      HEAP8[$286 >> 0] = $$1220$ph$off40$i;
      $287 = $265 | 2;
      $288 = (($23) + ($287) | 0);
      HEAP8[$288 >> 0] = 0;
      $289 = $265 | 27;
      $290 = (($23) + ($289) | 0);
      HEAP8[$290 >> 0] = $$1220$ph$off32$i;
      $291 = $265 | 19;
      $292 = (($23) + ($291) | 0);
      HEAP8[$292 >> 0] = $$1220$ph$off32$i;
      $293 = $265 | 11;
      $294 = (($23) + ($293) | 0);
      HEAP8[$294 >> 0] = $$1220$ph$off32$i;
      $295 = $265 | 3;
      $296 = (($23) + ($295) | 0);
      HEAP8[$296 >> 0] = 0;
      $297 = $265 | 28;
      $298 = (($23) + ($297) | 0);
      HEAP8[$298 >> 0] = $$1220$ph$off24$i;
      $299 = $265 | 20;
      $300 = (($23) + ($299) | 0);
      HEAP8[$300 >> 0] = $$1220$ph$off24$i;
      $301 = $265 | 12;
      $302 = (($23) + ($301) | 0);
      HEAP8[$302 >> 0] = $$1220$ph$off24$i;
      $303 = $265 | 4;
      $304 = (($23) + ($303) | 0);
      HEAP8[$304 >> 0] = 0;
      $305 = $265 | 29;
      $306 = (($23) + ($305) | 0);
      HEAP8[$306 >> 0] = $$1220$ph$off16$i;
      $307 = $265 | 21;
      $308 = (($23) + ($307) | 0);
      HEAP8[$308 >> 0] = $$1220$ph$off16$i;
      $309 = $265 | 13;
      $310 = (($23) + ($309) | 0);
      HEAP8[$310 >> 0] = $$1220$ph$off16$i;
      $311 = $265 | 5;
      $312 = (($23) + ($311) | 0);
      HEAP8[$312 >> 0] = 0;
      $313 = $265 | 30;
      $314 = (($23) + ($313) | 0);
      HEAP8[$314 >> 0] = $$1220$ph$off8$i;
      $315 = $265 | 22;
      $316 = (($23) + ($315) | 0);
      HEAP8[$316 >> 0] = $$1220$ph$off8$i;
      $317 = $265 | 14;
      $318 = (($23) + ($317) | 0);
      HEAP8[$318 >> 0] = $$1220$ph$off8$i;
      $319 = $265 | 6;
      $320 = (($23) + ($319) | 0);
      HEAP8[$320 >> 0] = 0;
      $321 = $265 | 31;
      $322 = (($23) + ($321) | 0);
      HEAP8[$322 >> 0] = $$1220$ph$off0$i;
      $323 = $265 | 23;
      $324 = (($23) + ($323) | 0);
      HEAP8[$324 >> 0] = $$1220$ph$off0$i;
      $325 = $265 | 15;
      $326 = (($23) + ($325) | 0);
      HEAP8[$326 >> 0] = $$1220$ph$off0$i;
      $327 = $265 | 7;
      $328 = (($23) + ($327) | 0);
      HEAP8[$328 >> 0] = 0;
      HEAP8[$272 >> 0] = -128;
    }
    $329 = (_secp256k1_rangeproof_genrand($19, $18, $23, $25, $$0215$ph$i, $7, $5, $1, $$1103$i) | 0);
    $330 = ($329 | 0) == (0);
    if ($330) {
      $$3111$i = 0;
      STACKTOP = sp;
      return ($$3111$i | 0);
    }
    _memset(($23 | 0), 0, 4096) | 0;
    $331 = ($$0215$ph$i | 0) > (0);
    if ($331) {
      $$2281$i = 0;
      while (1) {
        $332 = (($20) + ($$2281$i << 5) | 0);
        $333 = $$2281$i << 2;
        $334 = (($26) + ($$2281$i << 2) | 0);
        $335 = HEAP32[$334 >> 2] | 0;
        $336 = (($335) + ($333)) | 0;
        $337 = (($18) + ($336 << 5) | 0);
        ;HEAP32[$332 >> 2] = HEAP32[$337 >> 2] | 0;
        HEAP32[$332 + 4 >> 2] = HEAP32[$337 + 4 >> 2] | 0;
        HEAP32[$332 + 8 >> 2] = HEAP32[$337 + 8 >> 2] | 0;
        HEAP32[$332 + 12 >> 2] = HEAP32[$337 + 12 >> 2] | 0;
        HEAP32[$332 + 16 >> 2] = HEAP32[$337 + 16 >> 2] | 0;
        HEAP32[$332 + 20 >> 2] = HEAP32[$337 + 20 >> 2] | 0;
        HEAP32[$332 + 24 >> 2] = HEAP32[$337 + 24 >> 2] | 0;
        HEAP32[$332 + 28 >> 2] = HEAP32[$337 + 28 >> 2] | 0;
        ;HEAP32[$337 >> 2] = 0 | 0;
        HEAP32[$337 + 4 >> 2] = 0 | 0;
        HEAP32[$337 + 8 >> 2] = 0 | 0;
        HEAP32[$337 + 12 >> 2] = 0 | 0;
        HEAP32[$337 + 16 >> 2] = 0 | 0;
        HEAP32[$337 + 20 >> 2] = 0 | 0;
        HEAP32[$337 + 24 >> 2] = 0 | 0;
        HEAP32[$337 + 28 >> 2] = 0 | 0;
        $338 = (($$2281$i) + 1) | 0;
        $exitcond304$i = ($338 | 0) == ($$0215$ph$i | 0);
        if ($exitcond304$i) {
          break;
        } else {
          $$2281$i = $338;
        }
      }
    }
    _secp256k1_scalar_set_b32($21, $6, $27);
    $339 = (($19) + ($254 << 5) | 0);
    _secp256k1_scalar_add($339, $339, $21);
    $340 = HEAP32[$27 >> 2] | 0;
    $341 = ($340 | 0) == (0);
    if (!($341)) {
      $$3111$i = 0;
      STACKTOP = sp;
      return ($$3111$i | 0);
    }
    $342 = HEAP32[$339 >> 2] | 0;
    $343 = (((($19) + ($254 << 5) | 0)) + 4 | 0);
    $344 = HEAP32[$343 >> 2] | 0;
    $345 = $344 | $342;
    $346 = (((($19) + ($254 << 5) | 0)) + 8 | 0);
    $347 = HEAP32[$346 >> 2] | 0;
    $348 = $345 | $347;
    $349 = (((($19) + ($254 << 5) | 0)) + 12 | 0);
    $350 = HEAP32[$349 >> 2] | 0;
    $351 = $348 | $350;
    $352 = (((($19) + ($254 << 5) | 0)) + 16 | 0);
    $353 = HEAP32[$352 >> 2] | 0;
    $354 = $351 | $353;
    $355 = (((($19) + ($254 << 5) | 0)) + 20 | 0);
    $356 = HEAP32[$355 >> 2] | 0;
    $357 = $354 | $356;
    $358 = (((($19) + ($254 << 5) | 0)) + 24 | 0);
    $359 = HEAP32[$358 >> 2] | 0;
    $360 = $357 | $359;
    $361 = (((($19) + ($254 << 5) | 0)) + 28 | 0);
    $362 = HEAP32[$361 >> 2] | 0;
    $363 = $360 | $362;
    $364 = ($363 | 0) == (0);
    if ($364) {
      $$3111$i = 0;
      STACKTOP = sp;
      return ($$3111$i | 0);
    }
    $365 = (($1) + ($$1103$i) | 0);
    $366 = ($233 | 0) > (0);
    if ($366) {
      $367 = (($$1103$i) + ($233)) | 0;
      _memset(($365 | 0), 0, ($233 | 0)) | 0;
      $$2104$lcssa$i = $367;
    } else {
      $$2104$lcssa$i = $$1103$i;
    }
    L92: do {
      if ($331) {
        $368 = ((($28)) + 80 | 0);
        $369 = ((($28)) + 40 | 0);
        $370 = ((($24)) + 1 | 0);
        $$2214269$i = 0;
        $$3105270$i = $$2104$lcssa$i;
        $$4271$i = 0;
        while (1) {
          $371 = (($17) + (($$2214269$i * 124) | 0) | 0);
          $372 = (($19) + ($$4271$i << 5) | 0);
          $373 = (($26) + ($$4271$i << 2) | 0);
          $374 = HEAP32[$373 >> 2] | 0;
          $375 = ($374 | 0) < (0);
          $376 = $375 << 31 >> 31;
          $379 = (___muldi3(($374 | 0), ($376 | 0), ($377 | 0), ($378 | 0)) | 0);
          $380 = tempRet0;
          $381 = $$4271$i << 1;
          $382 = (_bitshift64Shl(($379 | 0), ($380 | 0), ($381 | 0)) | 0);
          $383 = tempRet0;
          _secp256k1_ecmult_gen($43, $371, $372);
          _secp256k1_ecmult_gen2_small($46, $15, $382, $383);
          _secp256k1_gej_add_var($371, $371, $15);
          $$idx$i = (((($17) + (($$2214269$i * 124) | 0) | 0)) + 120 | 0);
          $$idx$val$i = HEAP32[$$idx$i >> 2] | 0;
          $384 = ($$idx$val$i | 0) == (0);
          if (!($384)) {
            $$3111$i = 0;
            break;
          }
          $385 = ($$4271$i | 0) < ($254 | 0);
          if ($385) {
            HEAP32[$368 >> 2] = 0;
            $386 = (((($17) + (($$2214269$i * 124) | 0) | 0)) + 80 | 0);
            _secp256k1_fe_inv($386, $386);
            _secp256k1_fe_sqr($13, $386);
            _secp256k1_fe_mul($14, $386, $13);
            _secp256k1_fe_mul($371, $371, $13);
            $387 = (((($17) + (($$2214269$i * 124) | 0) | 0)) + 40 | 0);
            _secp256k1_fe_mul($387, $387, $14);
            HEAP32[$386 >> 2] = 1;
            $388 = (((($17) + (($$2214269$i * 124) | 0) | 0)) + 84 | 0);
            dest = $388;
            stop = dest + 36 | 0;
            do {
              HEAP32[dest >> 2] = 0 | 0;
              dest = dest + 4 | 0;
            } while ((dest | 0) < (stop | 0));
            dest = $28;
            src = $371;
            stop = dest + 40 | 0;
            do {
              HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
              dest = dest + 4 | 0;
              src = src + 4 | 0;
            } while ((dest | 0) < (stop | 0));
            dest = $369;
            src = $387;
            stop = dest + 40 | 0;
            do {
              HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
              dest = dest + 4 | 0;
              src = src + 4 | 0;
            } while ((dest | 0) < (stop | 0));
            _secp256k1_fe_normalize_var($28);
            _secp256k1_fe_normalize_var($369);
            $$028$i$i = 0;
            while (1) {
              $389 = $$028$i$i << 3;
              $390 = (($389 | 0) / 26) & -1;
              $391 = (($389 | 0) % 26) & -1;
              $392 = (($28) + ($390 << 2) | 0);
              $393 = HEAP32[$392 >> 2] | 0;
              $394 = $393 >>> $391;
              $395 = $394 & 3;
              $396 = $389 | 2;
              $397 = (($396 | 0) / 26) & -1;
              $398 = (($396 | 0) % 26) & -1;
              $399 = (($28) + ($397 << 2) | 0);
              $400 = HEAP32[$399 >> 2] | 0;
              $401 = $400 >>> $398;
              $402 = $401 << 2;
              $403 = $402 & 12;
              $404 = $403 | $395;
              $405 = $389 | 4;
              $406 = (($405 | 0) / 26) & -1;
              $407 = (($405 | 0) % 26) & -1;
              $408 = (($28) + ($406 << 2) | 0);
              $409 = HEAP32[$408 >> 2] | 0;
              $410 = $409 >>> $407;
              $411 = $410 << 4;
              $412 = $411 & 48;
              $413 = $404 | $412;
              $414 = $389 | 6;
              $415 = (($414 | 0) / 26) & -1;
              $416 = (($414 | 0) % 26) & -1;
              $417 = (($28) + ($415 << 2) | 0);
              $418 = HEAP32[$417 >> 2] | 0;
              $419 = $418 >>> $416;
              $420 = $419 << 6;
              $421 = $413 | $420;
              $422 = $421 & 255;
              $423 = (31 - ($$028$i$i)) | 0;
              $424 = (($370) + ($423) | 0);
              HEAP8[$424 >> 0] = $422;
              $425 = (($$028$i$i) + 1) | 0;
              $exitcond$i$i = ($425 | 0) == (32);
              if ($exitcond$i$i) {
                break;
              } else {
                $$028$i$i = $425;
              }
            }
            $$idx12$val$i$i = HEAP32[$369 >> 2] | 0;
            $426 = $$idx12$val$i$i & 1;
            $427 = $426 | 2;
            $428 = $427 & 255;
            HEAP8[$24 >> 0] = $428;
            $429 = HEAP32[$243 >> 2] | 0;
            $430 = $429 & 63;
            $431 = (($429) + 33) | 0;
            HEAP32[$243 >> 2] = $431;
            $432 = (($430) + 33) | 0;
            $433 = ($432 >>> 0) > (63);
            if ($433) {
              $$02023$i144$i = 33;
              $$02122$i145$i = $24;
              $$024$i143$i = $430;
              while (1) {
                $434 = (($244) + ($$024$i143$i) | 0);
                $435 = (64 - ($$024$i143$i)) | 0;
                _memcpy(($434 | 0), ($$02122$i145$i | 0), ($435 | 0)) | 0;
                $436 = (($$02122$i145$i) + ($435) | 0);
                $437 = (($$02023$i144$i) - ($435)) | 0;
                _secp256k1_sha256_transform($22, $244);
                $438 = ($437 >>> 0) > (63);
                if ($438) {
                  $$02023$i144$i = $437;
                  $$02122$i145$i = $436;
                  $$024$i143$i = 0;
                } else {
                  break;
                }
              }
              $439 = ($437 | 0) == (0);
              if (!($439)) {
                $$0$lcssa$i148238$i = 0;
                $$020$lcssa$i147237$i = $437;
                $$021$lcssa$i146236$i = $436;
                label = 61;
              }
            } else {
              $$0$lcssa$i148238$i = $430;
              $$020$lcssa$i147237$i = 33;
              $$021$lcssa$i146236$i = $24;
              label = 61;
            }
            if ((label | 0) == 61) {
              label = 0;
              $440 = (($244) + ($$0$lcssa$i148238$i) | 0);
              _memcpy(($440 | 0), ($$021$lcssa$i146236$i | 0), ($$020$lcssa$i147237$i | 0)) | 0;
            }
            $441 = ($428 << 24 >> 24) == (3);
            $442 = $441 & 1;
            $443 = $$4271$i & 7;
            $444 = $442 << $443;
            $445 = $$4271$i >> 3;
            $446 = (($365) + ($445) | 0);
            $447 = HEAP8[$446 >> 0] | 0;
            $448 = $447 & 255;
            $449 = $448 | $444;
            $450 = $449 & 255;
            HEAP8[$446 >> 0] = $450;
            $451 = (($1) + ($$3105270$i) | 0);
            dest = $451;
            src = $370;
            stop = dest + 32 | 0;
            do {
              HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
              dest = dest + 1 | 0;
              src = src + 1 | 0;
            } while ((dest | 0) < (stop | 0));
            $452 = (($$3105270$i) + 32) | 0;
            $$5107$i = $452;
          } else {
            $$5107$i = $$3105270$i;
          }
          $453 = (($25) + ($$4271$i << 2) | 0);
          $454 = HEAP32[$453 >> 2] | 0;
          $455 = (($454) + ($$2214269$i)) | 0;
          $456 = (($$4271$i) + 1) | 0;
          $457 = ($456 | 0) < ($$0215$ph$i | 0);
          if ($457) {
            $$2214269$i = $455;
            $$3105270$i = $$5107$i;
            $$4271$i = $456;
          } else {
            $$2214$lcssa$i = $455;
            $$3105$lcssa$i = $$5107$i;
            break L92;
          }
        }
        STACKTOP = sp;
        return ($$3111$i | 0);
      } else {
        $$2214$lcssa$i = 0;
        $$3105$lcssa$i = $$2104$lcssa$i;
      }
    } while (0);
    $$idx112$val$i = HEAP32[$$idx24 >> 2] | 0;
    $458 = ($$1223$ph$i | 0) > (0);
    $$$i151$i = $458 ? $$1223$ph$i : 0;
    $459 = (176 + ($$$i151$i << 2) | 0);
    $460 = HEAP32[$459 >> 2] | 0;
    $461 = (($$idx112$val$i) + ($460 << 6) | 0);
    if ($331) {
      $$0292$i$i = 0;
      $$03$i$i = 0;
      while (1) {
        $462 = (($25) + ($$0292$i$i << 2) | 0);
        $463 = HEAP32[$462 >> 2] | 0;
        $464 = ($463 | 0) > (1);
        if ($464) {
          $465 = ($$0292$i$i * 3) | 0;
          $466 = (($465) + -1) | 0;
          $467 = (($17) + (($$03$i$i * 124) | 0) | 0);
          $$0281$i$i = 1;
          while (1) {
            $468 = (($466) + ($$0281$i$i)) | 0;
            $469 = (($461) + ($468 << 6) | 0);
            _secp256k1_ge_from_storage($12, $469);
            $470 = (($$0281$i$i) + ($$03$i$i)) | 0;
            $471 = (($17) + (($470 * 124) | 0) | 0);
            _secp256k1_gej_add_ge_var($471, $467, $12, 0);
            $472 = (($$0281$i$i) + 1) | 0;
            $exitcond = ($472 | 0) == ($463 | 0);
            if ($exitcond) {
              break;
            } else {
              $$0281$i$i = $472;
            }
          }
        }
        $473 = (($463) + ($$03$i$i)) | 0;
        $474 = (($$0292$i$i) + 1) | 0;
        $exitcond$i154$i = ($474 | 0) == ($$0215$ph$i | 0);
        if ($exitcond$i154$i) {
          break;
        } else {
          $$0292$i$i = $474;
          $$03$i$i = $473;
        }
      }
    }
    $475 = HEAP32[$243 >> 2] | 0;
    $476 = $475 >>> 29;
    $477 = $476 << 24;
    HEAP32[$16 >> 2] = $477;
    $478 = $475 << 27;
    $479 = $475 << 11;
    $480 = $479 & 16711680;
    $481 = $480 | $478;
    $482 = $475 >>> 5;
    $483 = $482 & 65280;
    $484 = $481 | $483;
    $485 = $475 >>> 21;
    $486 = $485 & 255;
    $487 = $484 | $486;
    $488 = ((($16)) + 4 | 0);
    HEAP32[$488 >> 2] = $487;
    $489 = (119 - ($475)) | 0;
    $490 = $489 & 63;
    $491 = (($490) + 1) | 0;
    $492 = $475 & 63;
    $493 = (($491) + ($475)) | 0;
    HEAP32[$243 >> 2] = $493;
    $494 = (($491) + ($492)) | 0;
    $495 = ($494 >>> 0) > (63);
    if ($495) {
      $$02023$i135$i = $491;
      $$02122$i136$i = 1612;
      $$024$i134$i = $492;
      while (1) {
        $496 = (($244) + ($$024$i134$i) | 0);
        $497 = (64 - ($$024$i134$i)) | 0;
        _memcpy(($496 | 0), ($$02122$i136$i | 0), ($497 | 0)) | 0;
        $498 = (($$02122$i136$i) + ($497) | 0);
        $499 = (($$02023$i135$i) - ($497)) | 0;
        _secp256k1_sha256_transform($22, $244);
        $500 = ($499 >>> 0) > (63);
        if ($500) {
          $$02023$i135$i = $499;
          $$02122$i136$i = $498;
          $$024$i134$i = 0;
        } else {
          break;
        }
      }
      $501 = ($499 | 0) == (0);
      if (!($501)) {
        $$0$lcssa$i139241$i = 0;
        $$020$lcssa$i138240$i = $499;
        $$021$lcssa$i137239$i = $498;
        label = 72;
      }
    } else {
      $$0$lcssa$i139241$i = $492;
      $$020$lcssa$i138240$i = $491;
      $$021$lcssa$i137239$i = 1612;
      label = 72;
    }
    if ((label | 0) == 72) {
      $502 = (($244) + ($$0$lcssa$i139241$i) | 0);
      _memcpy(($502 | 0), ($$021$lcssa$i137239$i | 0), ($$020$lcssa$i138240$i | 0)) | 0;
    }
    $503 = HEAP32[$243 >> 2] | 0;
    $504 = $503 & 63;
    $505 = (($503) + 8) | 0;
    HEAP32[$243 >> 2] = $505;
    $506 = (($504) + 8) | 0;
    $507 = ($506 >>> 0) > (63);
    if ($507) {
      $$02023$i126$i = 8;
      $$02122$i127$i = $16;
      $$024$i125$i = $504;
      while (1) {
        $508 = (($244) + ($$024$i125$i) | 0);
        $509 = (64 - ($$024$i125$i)) | 0;
        _memcpy(($508 | 0), ($$02122$i127$i | 0), ($509 | 0)) | 0;
        $510 = (($$02122$i127$i) + ($509) | 0);
        $511 = (($$02023$i126$i) - ($509)) | 0;
        _secp256k1_sha256_transform($22, $244);
        $512 = ($511 >>> 0) > (63);
        if ($512) {
          $$02023$i126$i = $511;
          $$02122$i127$i = $510;
          $$024$i125$i = 0;
        } else {
          break;
        }
      }
      $513 = ($511 | 0) == (0);
      if (!($513)) {
        $$0$lcssa$i130244$i = 0;
        $$020$lcssa$i129243$i = $511;
        $$021$lcssa$i128242$i = $510;
        label = 76;
      }
    } else {
      $$0$lcssa$i130244$i = $504;
      $$020$lcssa$i129243$i = 8;
      $$021$lcssa$i128242$i = $16;
      label = 76;
    }
    if ((label | 0) == 76) {
      $514 = (($244) + ($$0$lcssa$i130244$i) | 0);
      _memcpy(($514 | 0), ($$021$lcssa$i128242$i | 0), ($$020$lcssa$i129243$i | 0)) | 0;
    }
    $515 = HEAP32[$22 >> 2] | 0;
    $516 = (_llvm_bswap_i32(($515 | 0)) | 0);
    HEAP32[$22 >> 2] = 0;
    $517 = HEAP32[$236 >> 2] | 0;
    $518 = (_llvm_bswap_i32(($517 | 0)) | 0);
    HEAP32[$236 >> 2] = 0;
    $519 = HEAP32[$237 >> 2] | 0;
    $520 = (_llvm_bswap_i32(($519 | 0)) | 0);
    HEAP32[$237 >> 2] = 0;
    $521 = HEAP32[$238 >> 2] | 0;
    $522 = (_llvm_bswap_i32(($521 | 0)) | 0);
    HEAP32[$238 >> 2] = 0;
    $523 = HEAP32[$239 >> 2] | 0;
    $524 = (_llvm_bswap_i32(($523 | 0)) | 0);
    HEAP32[$239 >> 2] = 0;
    $525 = HEAP32[$240 >> 2] | 0;
    $526 = (_llvm_bswap_i32(($525 | 0)) | 0);
    HEAP32[$240 >> 2] = 0;
    $527 = HEAP32[$241 >> 2] | 0;
    $528 = (_llvm_bswap_i32(($527 | 0)) | 0);
    HEAP32[$241 >> 2] = 0;
    $529 = HEAP32[$242 >> 2] | 0;
    $530 = (_llvm_bswap_i32(($529 | 0)) | 0);
    HEAP32[$242 >> 2] = 0;
    HEAP32[$24 >> 2] = $516;
    $$sroa$4$0$$sroa_idx$i = ((($24)) + 4 | 0);
    HEAP32[$$sroa$4$0$$sroa_idx$i >> 2] = $518;
    $$sroa$5$0$$sroa_idx$i = ((($24)) + 8 | 0);
    HEAP32[$$sroa$5$0$$sroa_idx$i >> 2] = $520;
    $$sroa$6$0$$sroa_idx$i = ((($24)) + 12 | 0);
    HEAP32[$$sroa$6$0$$sroa_idx$i >> 2] = $522;
    $$sroa$7$0$$sroa_idx$i = ((($24)) + 16 | 0);
    HEAP32[$$sroa$7$0$$sroa_idx$i >> 2] = $524;
    $$sroa$8$0$$sroa_idx$i = ((($24)) + 20 | 0);
    HEAP32[$$sroa$8$0$$sroa_idx$i >> 2] = $526;
    $$sroa$9$0$$sroa_idx$i = ((($24)) + 24 | 0);
    HEAP32[$$sroa$9$0$$sroa_idx$i >> 2] = $528;
    $$sroa$10$0$$sroa_idx$i = ((($24)) + 28 | 0);
    HEAP32[$$sroa$10$0$$sroa_idx$i >> 2] = $530;
    $531 = (($1) + ($$3105$lcssa$i) | 0);
    $532 = (_secp256k1_borromean_sign($0, $43, $531, $18, $17, $20, $19, $25, $26, $$0215$ph$i, $24, 32) | 0);
    $533 = ($532 | 0) == (0);
    if ($533) {
      $$3111$i = 0;
      STACKTOP = sp;
      return ($$3111$i | 0);
    }
    $$6266$i = (($$3105$lcssa$i) + 32) | 0;
    $534 = ($$2214$lcssa$i | 0) > (0);
    if ($534) {
      $$5267$i = 0;
      $$6268$i = $$6266$i;
      while (1) {
        $535 = (($1) + ($$6268$i) | 0);
        $536 = (($18) + ($$5267$i << 5) | 0);
        _secp256k1_scalar_get_b32($535, $536);
        $537 = (($$5267$i) + 1) | 0;
        $$6$i = (($$6268$i) + 32) | 0;
        $exitcond$i = ($537 | 0) == ($$2214$lcssa$i | 0);
        if ($exitcond$i) {
          break;
        } else {
          $$5267$i = $537;
          $$6268$i = $$6$i;
        }
      }
      $538 = $$2214$lcssa$i << 5;
      $539 = (($538) + 32) | 0;
      $540 = (($539) + ($$3105$lcssa$i)) | 0;
      $$6$lcssa$i = $540;
    } else {
      $$6$lcssa$i = $$6266$i;
    }
    HEAP32[$2 >> 2] = $$6$lcssa$i;
    _memset(($23 | 0), 0, 4096) | 0;
    $$3111$i = 1;
    STACKTOP = sp;
    return ($$3111$i | 0);
  }

  function _secp256k1_ecmult_wnaf($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$ = 0, $$039$sink = 0, $$040$ph = 0, $$04145 = 0, $$046 = 0, $$1$lcssa = 0, $$2 = 0, $$3 = 0, $$pn = 0,
      $$pre$phi49Z2D = 0, $$pre$phi51Z2D = 0, $$pre$phi53Z2D = 0, $$pre$phi55Z2D = 0, $$pre$phi57Z2D = 0,
      $$pre$phi59Z2D = 0, $$pre48 = 0, $$pre50 = 0, $$pre52 = 0, $$pre54 = 0, $$pre56 = 0;
    var $$pre58 = 0, $$sink = 0, $$sink$i = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0,
      $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
    var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0,
      $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
    var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0,
      $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
    var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0,
      $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
    var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0,
      $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
    var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0,
      $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
    var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0,
      $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
    var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0,
      $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
    var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0,
      $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep = 0, label = 0;
    var sp = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 32 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $3 = sp;
    ;HEAP32[$3 >> 2] = HEAP32[$1 >> 2] | 0;
    HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0;
    HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0;
    HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2] | 0;
    HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 16 >> 2] | 0;
    HEAP32[$3 + 20 >> 2] = HEAP32[$1 + 20 >> 2] | 0;
    HEAP32[$3 + 24 >> 2] = HEAP32[$1 + 24 >> 2] | 0;
    HEAP32[$3 + 28 >> 2] = HEAP32[$1 + 28 >> 2] | 0;
    $4 = ((($3)) + 28 | 0);
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) > (-1);
    if ($6) {
      $$pre48 = ((($3)) + 4 | 0);
      $$pre50 = ((($3)) + 8 | 0);
      $$pre52 = ((($3)) + 12 | 0);
      $$pre54 = ((($3)) + 16 | 0);
      $$pre56 = ((($3)) + 20 | 0);
      $$pre58 = ((($3)) + 24 | 0);
      $$040$ph = 1;
      $$pre$phi49Z2D = $$pre48;
      $$pre$phi51Z2D = $$pre50;
      $$pre$phi53Z2D = $$pre52;
      $$pre$phi55Z2D = $$pre54;
      $$pre$phi57Z2D = $$pre56;
      $$pre$phi59Z2D = $$pre58;
      $174 = $5;
    } else {
      $7 = HEAP32[$3 >> 2] | 0;
      $8 = ((($3)) + 4 | 0);
      $9 = HEAP32[$8 >> 2] | 0;
      $10 = ((($3)) + 8 | 0);
      $11 = HEAP32[$10 >> 2] | 0;
      $12 = ((($3)) + 12 | 0);
      $13 = HEAP32[$12 >> 2] | 0;
      $14 = ((($3)) + 16 | 0);
      $15 = HEAP32[$14 >> 2] | 0;
      $16 = ((($3)) + 20 | 0);
      $17 = HEAP32[$16 >> 2] | 0;
      $18 = ((($3)) + 24 | 0);
      $19 = HEAP32[$18 >> 2] | 0;
      $20 = $7 | $5;
      $21 = $20 | $9;
      $22 = $21 | $11;
      $23 = $22 | $13;
      $24 = $23 | $15;
      $25 = $24 | $17;
      $26 = $25 | $19;
      $27 = ($26 | 0) != (0);
      $28 = $27 << 31 >> 31;
      $29 = $7 ^ -1;
      $30 = (_i64Add(($29 | 0), 0, -801750718, 0) | 0);
      $31 = tempRet0;
      $32 = $28 & $30;
      HEAP32[$3 >> 2] = $32;
      $33 = $9 ^ -1;
      $34 = $31 | -1076732276;
      $35 = (_i64Add(($33 | 0), 0, ($34 | 0), 0) | 0);
      $36 = tempRet0;
      $37 = $28 & $35;
      HEAP32[$8 >> 2] = $37;
      $38 = $11 ^ -1;
      $39 = (_i64Add(($38 | 0), 0, -1354194885, 0) | 0);
      $40 = tempRet0;
      $41 = (_i64Add(($39 | 0), ($40 | 0), ($36 | 0), 0) | 0);
      $42 = tempRet0;
      $43 = $41 & $28;
      HEAP32[$10 >> 2] = $43;
      $44 = $13 ^ -1;
      $45 = (_i64Add(($44 | 0), 0, -1162945306, 0) | 0);
      $46 = tempRet0;
      $47 = (_i64Add(($45 | 0), ($46 | 0), ($42 | 0), 0) | 0);
      $48 = tempRet0;
      $49 = $47 & $28;
      HEAP32[$12 >> 2] = $49;
      $50 = $15 ^ -1;
      $51 = (_i64Add(($50 | 0), 0, -2, 0) | 0);
      $52 = tempRet0;
      $53 = (_i64Add(($51 | 0), ($52 | 0), ($48 | 0), 0) | 0);
      $54 = tempRet0;
      $55 = $53 & $28;
      HEAP32[$14 >> 2] = $55;
      $56 = $17 ^ -1;
      $57 = (_i64Add(($56 | 0), 0, -1, 0) | 0);
      $58 = tempRet0;
      $59 = (_i64Add(($57 | 0), ($58 | 0), ($54 | 0), 0) | 0);
      $60 = tempRet0;
      $61 = $59 & $28;
      HEAP32[$16 >> 2] = $61;
      $62 = $19 ^ -1;
      $63 = (_i64Add(($62 | 0), 0, -1, 0) | 0);
      $64 = tempRet0;
      $65 = (_i64Add(($63 | 0), ($64 | 0), ($60 | 0), 0) | 0);
      $66 = tempRet0;
      $67 = $65 & $28;
      HEAP32[$18 >> 2] = $67;
      $68 = $5 ^ -1;
      $69 = (_i64Add(($68 | 0), 0, -1, 0) | 0);
      $70 = tempRet0;
      $71 = (_i64Add(($69 | 0), ($70 | 0), ($66 | 0), 0) | 0);
      $72 = tempRet0;
      $73 = $71 & $28;
      HEAP32[$4 >> 2] = $73;
      $$040$ph = -1;
      $$pre$phi49Z2D = $8;
      $$pre$phi51Z2D = $10;
      $$pre$phi53Z2D = $12;
      $$pre$phi55Z2D = $14;
      $$pre$phi57Z2D = $16;
      $$pre$phi59Z2D = $18;
      $174 = $73;
    }
    $74 = (($2) + -1) | 0;
    $75 = 1 << $74;
    $76 = 1 << $2;
    $$04145 = 0;
    $$046 = 0;
    $166 = $174;
    while (1) {
      $77 = $$04145 >>> 5;
      $78 = (($3) + ($77 << 2) | 0);
      $79 = HEAP32[$78 >> 2] | 0;
      $80 = $$04145 & 31;
      $81 = 1 << $80;
      $82 = $79 & $81;
      $83 = ($82 | 0) == (0);
      if ($83) {
        $$039$sink = 1;
        $$3 = $$046;
        $175 = $166;
      } else {
        $84 = ($$04145 | 0) > ($$046 | 0);
        if ($84) {
          $scevgep = (($0) + ($$046 << 2) | 0);
          $85 = (($$04145) - ($$046)) | 0;
          $86 = $85 << 2;
          _memset(($scevgep | 0), 0, ($86 | 0)) | 0;
          $$1$lcssa = $$04145;
        } else {
          $$1$lcssa = $$046;
        }
        $87 = (($$04145) + ($2)) | 0;
        $88 = ($87 | 0) > (256);
        $89 = (256 - ($$04145)) | 0;
        $$ = $88 ? $89 : $2;
        $90 = (($$04145) + -1) | 0;
        $91 = (($90) + ($$)) | 0;
        $92 = $91 >>> 5;
        $93 = ($92 | 0) == ($77 | 0);
        if ($93) {
          $94 = $79 >>> $80;
          $$sink$i = $94;
        } else {
          $95 = (($77) + 1) | 0;
          $96 = $79 >>> $80;
          $97 = (($3) + ($95 << 2) | 0);
          $98 = HEAP32[$97 >> 2] | 0;
          $99 = (32 - ($80)) | 0;
          $100 = $98 << $99;
          $101 = $100 | $96;
          $$sink$i = $101;
        }
        $102 = 1 << $$;
        $103 = (($102) + -1) | 0;
        $104 = $$sink$i & $103;
        $105 = $104 & $75;
        $106 = ($105 | 0) == (0);
        if ($106) {
          $$pn = $104;
          $176 = $166;
        } else {
          $107 = HEAP32[$3 >> 2] | 0;
          $108 = $87 >>> 5;
          $109 = ($108 | 0) == (0);
          $110 = $109 & 1;
          $111 = $87 & 31;
          $112 = $110 << $111;
          $113 = (_i64Add(($107 | 0), 0, ($112 | 0), 0) | 0);
          $114 = tempRet0;
          HEAP32[$3 >> 2] = $113;
          $115 = HEAP32[$$pre$phi49Z2D >> 2] | 0;
          $116 = ($108 | 0) == (1);
          $117 = $116 & 1;
          $118 = $117 << $111;
          $119 = (_i64Add(($115 | 0), 0, ($118 | 0), 0) | 0);
          $120 = tempRet0;
          $121 = (_i64Add(($119 | 0), ($120 | 0), ($114 | 0), 0) | 0);
          $122 = tempRet0;
          HEAP32[$$pre$phi49Z2D >> 2] = $121;
          $123 = HEAP32[$$pre$phi51Z2D >> 2] | 0;
          $124 = ($108 | 0) == (2);
          $125 = $124 & 1;
          $126 = $125 << $111;
          $127 = (_i64Add(($123 | 0), 0, ($126 | 0), 0) | 0);
          $128 = tempRet0;
          $129 = (_i64Add(($127 | 0), ($128 | 0), ($122 | 0), 0) | 0);
          $130 = tempRet0;
          HEAP32[$$pre$phi51Z2D >> 2] = $129;
          $131 = HEAP32[$$pre$phi53Z2D >> 2] | 0;
          $132 = ($108 | 0) == (3);
          $133 = $132 & 1;
          $134 = $133 << $111;
          $135 = (_i64Add(($131 | 0), 0, ($134 | 0), 0) | 0);
          $136 = tempRet0;
          $137 = (_i64Add(($135 | 0), ($136 | 0), ($130 | 0), 0) | 0);
          $138 = tempRet0;
          HEAP32[$$pre$phi53Z2D >> 2] = $137;
          $139 = HEAP32[$$pre$phi55Z2D >> 2] | 0;
          $140 = ($108 | 0) == (4);
          $141 = $140 & 1;
          $142 = $141 << $111;
          $143 = (_i64Add(($139 | 0), 0, ($142 | 0), 0) | 0);
          $144 = tempRet0;
          $145 = (_i64Add(($143 | 0), ($144 | 0), ($138 | 0), 0) | 0);
          $146 = tempRet0;
          HEAP32[$$pre$phi55Z2D >> 2] = $145;
          $147 = HEAP32[$$pre$phi57Z2D >> 2] | 0;
          $148 = ($108 | 0) == (5);
          $149 = $148 & 1;
          $150 = $149 << $111;
          $151 = (_i64Add(($147 | 0), 0, ($150 | 0), 0) | 0);
          $152 = tempRet0;
          $153 = (_i64Add(($151 | 0), ($152 | 0), ($146 | 0), 0) | 0);
          $154 = tempRet0;
          HEAP32[$$pre$phi57Z2D >> 2] = $153;
          $155 = HEAP32[$$pre$phi59Z2D >> 2] | 0;
          $156 = ($108 | 0) == (6);
          $157 = $156 & 1;
          $158 = $157 << $111;
          $159 = (_i64Add(($155 | 0), 0, ($158 | 0), 0) | 0);
          $160 = tempRet0;
          $161 = (_i64Add(($159 | 0), ($160 | 0), ($154 | 0), 0) | 0);
          $162 = tempRet0;
          HEAP32[$$pre$phi59Z2D >> 2] = $161;
          $163 = ($108 | 0) == (7);
          $164 = $163 & 1;
          $165 = $164 << $111;
          $167 = (_i64Add(($166 | 0), 0, ($165 | 0), 0) | 0);
          $168 = tempRet0;
          $169 = (_i64Add(($167 | 0), ($168 | 0), ($162 | 0), 0) | 0);
          $170 = tempRet0;
          HEAP32[$4 >> 2] = $169;
          $171 = (($104) - ($76)) | 0;
          $$pn = $171;
          $176 = $169;
        }
        $$sink = Math_imul($$pn, $$040$ph) | 0;
        $$sink1 = (($0) + ($$1$lcssa << 2) | 0);
        $$2 = (($$1$lcssa) + 1) | 0;
        HEAP32[$$sink1 >> 2] = $$sink;
        $$039$sink = $$;
        $$3 = $$2;
        $175 = $176;
      }
      $172 = (($$039$sink) + ($$04145)) | 0;
      $173 = ($172 | 0) < (256);
      if ($173) {
        $$04145 = $172;
        $$046 = $$3;
        $166 = $175;
      } else {
        break;
      }
    }
    STACKTOP = sp;
    return ($$3 | 0);
  }

  function _secp256k1_ecmult_odd_multiples_table_globalz_windowa($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0,
      $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
    var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0,
      $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
    var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0,
      label = 0, sp = 0, src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 1808 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1808 | 0);
    $3 = sp + 1768 | 0;
    $4 = sp + 1728 | 0;
    $5 = sp + 1688 | 0;
    $6 = sp + 1648 | 0;
    $7 = sp + 1608 | 0;
    $8 = sp + 1480 | 0;
    $9 = sp + 1396 | 0;
    $10 = sp + 1312 | 0;
    $11 = sp + 320 | 0;
    $12 = sp;
    _secp256k1_gej_double_var($8, $2, 0);
    dest = $10;
    src = $8;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $13 = ((($10)) + 40 | 0);
    $14 = ((($8)) + 40 | 0);
    dest = $13;
    src = $14;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $15 = ((($10)) + 80 | 0);
    HEAP32[$15 >> 2] = 0;
    $16 = ((($8)) + 80 | 0);
    _secp256k1_fe_sqr($3, $16);
    _secp256k1_fe_mul($4, $3, $16);
    _secp256k1_fe_mul($9, $2, $3);
    $17 = ((($9)) + 40 | 0);
    $18 = ((($2)) + 40 | 0);
    _secp256k1_fe_mul($17, $18, $4);
    $19 = ((($2)) + 120 | 0);
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = ((($9)) + 80 | 0);
    HEAP32[$21 >> 2] = $20;
    dest = $11;
    src = $9;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $22 = ((($11)) + 40 | 0);
    dest = $22;
    src = $17;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $23 = ((($11)) + 80 | 0);
    $24 = ((($2)) + 80 | 0);
    dest = $23;
    src = $24;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $25 = ((($11)) + 120 | 0);
    HEAP32[$25 >> 2] = 0;
    dest = $12;
    src = $16;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $26 = ((($11)) + 124 | 0);
    $27 = ((($12)) + 40 | 0);
    _secp256k1_gej_add_ge_var($26, $11, $10, $27);
    $28 = ((($11)) + 248 | 0);
    $29 = ((($12)) + 80 | 0);
    _secp256k1_gej_add_ge_var($28, $26, $10, $29);
    $30 = ((($11)) + 372 | 0);
    $31 = ((($12)) + 120 | 0);
    _secp256k1_gej_add_ge_var($30, $28, $10, $31);
    $32 = ((($11)) + 496 | 0);
    $33 = ((($12)) + 160 | 0);
    _secp256k1_gej_add_ge_var($32, $30, $10, $33);
    $34 = ((($11)) + 620 | 0);
    $35 = ((($12)) + 200 | 0);
    _secp256k1_gej_add_ge_var($34, $32, $10, $35);
    $36 = ((($11)) + 744 | 0);
    $37 = ((($12)) + 240 | 0);
    _secp256k1_gej_add_ge_var($36, $34, $10, $37);
    $38 = ((($11)) + 868 | 0);
    $39 = ((($12)) + 280 | 0);
    _secp256k1_gej_add_ge_var($38, $36, $10, $39);
    $40 = ((($11)) + 948 | 0);
    _secp256k1_fe_mul($40, $40, $16);
    $41 = ((($0)) + 588 | 0);
    dest = $41;
    src = $38;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $42 = ((($0)) + 628 | 0);
    $43 = ((($11)) + 908 | 0);
    dest = $42;
    src = $43;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $1;
    src = $40;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $44 = ((($0)) + 668 | 0);
    HEAP32[$44 >> 2] = 0;
    dest = $7;
    src = $39;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $$0$i = 7;
    L1: while (1) {
      switch ($$0$i | 0) {
        case 0: {
          break L1;
          break;
        }
        case 7: {
          break;
        }
        default: {
          $45 = (($12) + (($$0$i * 40) | 0) | 0);
          _secp256k1_fe_mul($7, $7, $45);
        }
      }
      $46 = (($$0$i) + -1) | 0;
      _secp256k1_fe_sqr($5, $7);
      _secp256k1_fe_mul($6, $5, $7);
      $47 = (($0) + (($46 * 84) | 0) | 0);
      $48 = (($11) + (($46 * 124) | 0) | 0);
      _secp256k1_fe_mul($47, $48, $5);
      $49 = (((($0) + (($46 * 84) | 0) | 0)) + 40 | 0);
      $50 = (((($11) + (($46 * 124) | 0) | 0)) + 40 | 0);
      _secp256k1_fe_mul($49, $50, $6);
      $51 = (((($11) + (($46 * 124) | 0) | 0)) + 120 | 0);
      $52 = HEAP32[$51 >> 2] | 0;
      $53 = (((($0) + (($46 * 84) | 0) | 0)) + 80 | 0);
      HEAP32[$53 >> 2] = $52;
      $$0$i = $46;
    }
    STACKTOP = sp;
    return;
  }

  function _secp256k1_gej_double_var($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0,
      $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
    var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0,
      $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
    var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0,
      $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
    var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0,
      $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
    var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0,
      $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
    var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0,
      $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
    var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0,
      $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
    var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0,
      $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
    var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0,
      $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
    var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0,
      $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
    var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0,
      $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
    var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0,
      $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
    var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0,
      $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
    var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0,
      $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $36 = 0;
    var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0,
      $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
    var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0,
      $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
    var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0,
      $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
    var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0,
      src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 160 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160 | 0);
    $3 = sp + 120 | 0;
    $4 = sp + 80 | 0;
    $5 = sp + 40 | 0;
    $6 = sp;
    $7 = ((($1)) + 120 | 0);
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ((($0)) + 120 | 0);
    HEAP32[$9 >> 2] = $8;
    $10 = ($8 | 0) == (0);
    $11 = ($2 | 0) != (0 | 0);
    if ($10) {
      $13 = ((($1)) + 40 | 0);
      if ($11) {
        dest = $2;
        src = $13;
        stop = dest + 40 | 0;
        do {
          HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
          dest = dest + 4 | 0;
          src = src + 4 | 0;
        } while ((dest | 0) < (stop | 0));
        $14 = HEAP32[$2 >> 2] | 0;
        $15 = ((($2)) + 4 | 0);
        $16 = HEAP32[$15 >> 2] | 0;
        $17 = ((($2)) + 8 | 0);
        $18 = HEAP32[$17 >> 2] | 0;
        $19 = ((($2)) + 12 | 0);
        $20 = HEAP32[$19 >> 2] | 0;
        $21 = ((($2)) + 16 | 0);
        $22 = HEAP32[$21 >> 2] | 0;
        $23 = ((($2)) + 20 | 0);
        $24 = HEAP32[$23 >> 2] | 0;
        $25 = ((($2)) + 24 | 0);
        $26 = HEAP32[$25 >> 2] | 0;
        $27 = ((($2)) + 28 | 0);
        $28 = HEAP32[$27 >> 2] | 0;
        $29 = ((($2)) + 32 | 0);
        $30 = HEAP32[$29 >> 2] | 0;
        $31 = ((($2)) + 36 | 0);
        $32 = HEAP32[$31 >> 2] | 0;
        $33 = $32 >>> 22;
        $34 = $32 & 4194303;
        $35 = ($33 * 977) | 0;
        $36 = (($35) + ($14)) | 0;
        $37 = $33 << 6;
        $38 = (($37) + ($16)) | 0;
        $39 = $36 >>> 26;
        $40 = (($38) + ($39)) | 0;
        $41 = $40 >>> 26;
        $42 = (($41) + ($18)) | 0;
        $43 = $42 >>> 26;
        $44 = (($43) + ($20)) | 0;
        $45 = $44 >>> 26;
        $46 = (($45) + ($22)) | 0;
        $47 = $46 >>> 26;
        $48 = (($47) + ($24)) | 0;
        $49 = $48 >>> 26;
        $50 = (($49) + ($26)) | 0;
        $51 = $50 >>> 26;
        $52 = (($51) + ($28)) | 0;
        $53 = $52 >>> 26;
        $54 = (($53) + ($30)) | 0;
        $55 = $54 >>> 26;
        $56 = (($55) + ($34)) | 0;
        $57 = $36 << 1;
        $58 = $57 & 134217726;
        HEAP32[$2 >> 2] = $58;
        $59 = $40 << 1;
        $60 = $59 & 134217726;
        HEAP32[$15 >> 2] = $60;
        $61 = $42 << 1;
        $62 = $61 & 134217726;
        HEAP32[$17 >> 2] = $62;
        $63 = $44 << 1;
        $64 = $63 & 134217726;
        HEAP32[$19 >> 2] = $64;
        $65 = $46 << 1;
        $66 = $65 & 134217726;
        HEAP32[$21 >> 2] = $66;
        $67 = $48 << 1;
        $68 = $67 & 134217726;
        HEAP32[$23 >> 2] = $68;
        $69 = $50 << 1;
        $70 = $69 & 134217726;
        HEAP32[$25 >> 2] = $70;
        $71 = $52 << 1;
        $72 = $71 & 134217726;
        HEAP32[$27 >> 2] = $72;
        $73 = $54 << 1;
        $74 = $73 & 134217726;
        HEAP32[$29 >> 2] = $74;
        $75 = $56 << 1;
        HEAP32[$31 >> 2] = $75;
      }
      $76 = ((($0)) + 80 | 0);
      $77 = ((($1)) + 80 | 0);
      _secp256k1_fe_mul($76, $77, $13);
      $78 = HEAP32[$76 >> 2] | 0;
      $79 = $78 << 1;
      HEAP32[$76 >> 2] = $79;
      $80 = ((($0)) + 84 | 0);
      $81 = HEAP32[$80 >> 2] | 0;
      $82 = $81 << 1;
      HEAP32[$80 >> 2] = $82;
      $83 = ((($0)) + 88 | 0);
      $84 = HEAP32[$83 >> 2] | 0;
      $85 = $84 << 1;
      HEAP32[$83 >> 2] = $85;
      $86 = ((($0)) + 92 | 0);
      $87 = HEAP32[$86 >> 2] | 0;
      $88 = $87 << 1;
      HEAP32[$86 >> 2] = $88;
      $89 = ((($0)) + 96 | 0);
      $90 = HEAP32[$89 >> 2] | 0;
      $91 = $90 << 1;
      HEAP32[$89 >> 2] = $91;
      $92 = ((($0)) + 100 | 0);
      $93 = HEAP32[$92 >> 2] | 0;
      $94 = $93 << 1;
      HEAP32[$92 >> 2] = $94;
      $95 = ((($0)) + 104 | 0);
      $96 = HEAP32[$95 >> 2] | 0;
      $97 = $96 << 1;
      HEAP32[$95 >> 2] = $97;
      $98 = ((($0)) + 108 | 0);
      $99 = HEAP32[$98 >> 2] | 0;
      $100 = $99 << 1;
      HEAP32[$98 >> 2] = $100;
      $101 = ((($0)) + 112 | 0);
      $102 = HEAP32[$101 >> 2] | 0;
      $103 = $102 << 1;
      HEAP32[$101 >> 2] = $103;
      $104 = ((($0)) + 116 | 0);
      $105 = HEAP32[$104 >> 2] | 0;
      $106 = $105 << 1;
      HEAP32[$104 >> 2] = $106;
      _secp256k1_fe_sqr($3, $1);
      $107 = HEAP32[$3 >> 2] | 0;
      $108 = ($107 * 3) | 0;
      HEAP32[$3 >> 2] = $108;
      $109 = ((($3)) + 4 | 0);
      $110 = HEAP32[$109 >> 2] | 0;
      $111 = ($110 * 3) | 0;
      HEAP32[$109 >> 2] = $111;
      $112 = ((($3)) + 8 | 0);
      $113 = HEAP32[$112 >> 2] | 0;
      $114 = ($113 * 3) | 0;
      HEAP32[$112 >> 2] = $114;
      $115 = ((($3)) + 12 | 0);
      $116 = HEAP32[$115 >> 2] | 0;
      $117 = ($116 * 3) | 0;
      HEAP32[$115 >> 2] = $117;
      $118 = ((($3)) + 16 | 0);
      $119 = HEAP32[$118 >> 2] | 0;
      $120 = ($119 * 3) | 0;
      HEAP32[$118 >> 2] = $120;
      $121 = ((($3)) + 20 | 0);
      $122 = HEAP32[$121 >> 2] | 0;
      $123 = ($122 * 3) | 0;
      HEAP32[$121 >> 2] = $123;
      $124 = ((($3)) + 24 | 0);
      $125 = HEAP32[$124 >> 2] | 0;
      $126 = ($125 * 3) | 0;
      HEAP32[$124 >> 2] = $126;
      $127 = ((($3)) + 28 | 0);
      $128 = HEAP32[$127 >> 2] | 0;
      $129 = ($128 * 3) | 0;
      HEAP32[$127 >> 2] = $129;
      $130 = ((($3)) + 32 | 0);
      $131 = HEAP32[$130 >> 2] | 0;
      $132 = ($131 * 3) | 0;
      HEAP32[$130 >> 2] = $132;
      $133 = ((($3)) + 36 | 0);
      $134 = HEAP32[$133 >> 2] | 0;
      $135 = ($134 * 3) | 0;
      HEAP32[$133 >> 2] = $135;
      _secp256k1_fe_sqr($4, $3);
      _secp256k1_fe_sqr($5, $13);
      $136 = HEAP32[$5 >> 2] | 0;
      $137 = $136 << 1;
      HEAP32[$5 >> 2] = $137;
      $138 = ((($5)) + 4 | 0);
      $139 = HEAP32[$138 >> 2] | 0;
      $140 = $139 << 1;
      HEAP32[$138 >> 2] = $140;
      $141 = ((($5)) + 8 | 0);
      $142 = HEAP32[$141 >> 2] | 0;
      $143 = $142 << 1;
      HEAP32[$141 >> 2] = $143;
      $144 = ((($5)) + 12 | 0);
      $145 = HEAP32[$144 >> 2] | 0;
      $146 = $145 << 1;
      HEAP32[$144 >> 2] = $146;
      $147 = ((($5)) + 16 | 0);
      $148 = HEAP32[$147 >> 2] | 0;
      $149 = $148 << 1;
      HEAP32[$147 >> 2] = $149;
      $150 = ((($5)) + 20 | 0);
      $151 = HEAP32[$150 >> 2] | 0;
      $152 = $151 << 1;
      HEAP32[$150 >> 2] = $152;
      $153 = ((($5)) + 24 | 0);
      $154 = HEAP32[$153 >> 2] | 0;
      $155 = $154 << 1;
      HEAP32[$153 >> 2] = $155;
      $156 = ((($5)) + 28 | 0);
      $157 = HEAP32[$156 >> 2] | 0;
      $158 = $157 << 1;
      HEAP32[$156 >> 2] = $158;
      $159 = ((($5)) + 32 | 0);
      $160 = HEAP32[$159 >> 2] | 0;
      $161 = $160 << 1;
      HEAP32[$159 >> 2] = $161;
      $162 = ((($5)) + 36 | 0);
      $163 = HEAP32[$162 >> 2] | 0;
      $164 = $163 << 1;
      HEAP32[$162 >> 2] = $164;
      _secp256k1_fe_sqr($6, $5);
      $165 = HEAP32[$6 >> 2] | 0;
      $166 = $165 << 1;
      HEAP32[$6 >> 2] = $166;
      $167 = ((($6)) + 4 | 0);
      $168 = HEAP32[$167 >> 2] | 0;
      $169 = $168 << 1;
      HEAP32[$167 >> 2] = $169;
      $170 = ((($6)) + 8 | 0);
      $171 = HEAP32[$170 >> 2] | 0;
      $172 = $171 << 1;
      HEAP32[$170 >> 2] = $172;
      $173 = ((($6)) + 12 | 0);
      $174 = HEAP32[$173 >> 2] | 0;
      $175 = $174 << 1;
      HEAP32[$173 >> 2] = $175;
      $176 = ((($6)) + 16 | 0);
      $177 = HEAP32[$176 >> 2] | 0;
      $178 = $177 << 1;
      HEAP32[$176 >> 2] = $178;
      $179 = ((($6)) + 20 | 0);
      $180 = HEAP32[$179 >> 2] | 0;
      $181 = $180 << 1;
      HEAP32[$179 >> 2] = $181;
      $182 = ((($6)) + 24 | 0);
      $183 = HEAP32[$182 >> 2] | 0;
      $184 = $183 << 1;
      HEAP32[$182 >> 2] = $184;
      $185 = ((($6)) + 28 | 0);
      $186 = HEAP32[$185 >> 2] | 0;
      $187 = $186 << 1;
      HEAP32[$185 >> 2] = $187;
      $188 = ((($6)) + 32 | 0);
      $189 = HEAP32[$188 >> 2] | 0;
      $190 = $189 << 1;
      HEAP32[$188 >> 2] = $190;
      $191 = ((($6)) + 36 | 0);
      $192 = HEAP32[$191 >> 2] | 0;
      $193 = $192 << 1;
      HEAP32[$191 >> 2] = $193;
      _secp256k1_fe_mul($5, $5, $1);
      dest = $0;
      src = $5;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $194 = HEAP32[$0 >> 2] | 0;
      $195 = $194 << 2;
      $196 = ((($0)) + 4 | 0);
      $197 = HEAP32[$196 >> 2] | 0;
      $198 = $197 << 2;
      $199 = ((($0)) + 8 | 0);
      $200 = HEAP32[$199 >> 2] | 0;
      $201 = $200 << 2;
      $202 = ((($0)) + 12 | 0);
      $203 = HEAP32[$202 >> 2] | 0;
      $204 = $203 << 2;
      $205 = ((($0)) + 16 | 0);
      $206 = HEAP32[$205 >> 2] | 0;
      $207 = $206 << 2;
      $208 = ((($0)) + 20 | 0);
      $209 = HEAP32[$208 >> 2] | 0;
      $210 = $209 << 2;
      $211 = ((($0)) + 24 | 0);
      $212 = HEAP32[$211 >> 2] | 0;
      $213 = $212 << 2;
      $214 = ((($0)) + 28 | 0);
      $215 = HEAP32[$214 >> 2] | 0;
      $216 = $215 << 2;
      $217 = ((($0)) + 32 | 0);
      $218 = HEAP32[$217 >> 2] | 0;
      $219 = $218 << 2;
      $220 = ((($0)) + 36 | 0);
      $221 = HEAP32[$220 >> 2] | 0;
      $222 = $221 << 2;
      $223 = (671078870 - ($195)) | 0;
      $224 = (671087990 - ($198)) | 0;
      $225 = (671088630 - ($201)) | 0;
      $226 = (671088630 - ($204)) | 0;
      $227 = (671088630 - ($207)) | 0;
      $228 = (671088630 - ($210)) | 0;
      $229 = (671088630 - ($213)) | 0;
      $230 = (671088630 - ($216)) | 0;
      $231 = (671088630 - ($219)) | 0;
      $232 = (41943030 - ($222)) | 0;
      $233 = HEAP32[$4 >> 2] | 0;
      $234 = (($223) + ($233)) | 0;
      HEAP32[$0 >> 2] = $234;
      $235 = ((($4)) + 4 | 0);
      $236 = HEAP32[$235 >> 2] | 0;
      $237 = (($224) + ($236)) | 0;
      HEAP32[$196 >> 2] = $237;
      $238 = ((($4)) + 8 | 0);
      $239 = HEAP32[$238 >> 2] | 0;
      $240 = (($225) + ($239)) | 0;
      HEAP32[$199 >> 2] = $240;
      $241 = ((($4)) + 12 | 0);
      $242 = HEAP32[$241 >> 2] | 0;
      $243 = (($226) + ($242)) | 0;
      HEAP32[$202 >> 2] = $243;
      $244 = ((($4)) + 16 | 0);
      $245 = HEAP32[$244 >> 2] | 0;
      $246 = (($227) + ($245)) | 0;
      HEAP32[$205 >> 2] = $246;
      $247 = ((($4)) + 20 | 0);
      $248 = HEAP32[$247 >> 2] | 0;
      $249 = (($228) + ($248)) | 0;
      HEAP32[$208 >> 2] = $249;
      $250 = ((($4)) + 24 | 0);
      $251 = HEAP32[$250 >> 2] | 0;
      $252 = (($229) + ($251)) | 0;
      HEAP32[$211 >> 2] = $252;
      $253 = ((($4)) + 28 | 0);
      $254 = HEAP32[$253 >> 2] | 0;
      $255 = (($230) + ($254)) | 0;
      HEAP32[$214 >> 2] = $255;
      $256 = ((($4)) + 32 | 0);
      $257 = HEAP32[$256 >> 2] | 0;
      $258 = (($231) + ($257)) | 0;
      HEAP32[$217 >> 2] = $258;
      $259 = ((($4)) + 36 | 0);
      $260 = HEAP32[$259 >> 2] | 0;
      $261 = (($232) + ($260)) | 0;
      HEAP32[$220 >> 2] = $261;
      $262 = (268431548 - ($233)) | 0;
      $263 = (268435196 - ($236)) | 0;
      $264 = (268435452 - ($239)) | 0;
      $265 = (268435452 - ($242)) | 0;
      $266 = (268435452 - ($245)) | 0;
      $267 = (268435452 - ($248)) | 0;
      $268 = (268435452 - ($251)) | 0;
      $269 = (268435452 - ($254)) | 0;
      $270 = (268435452 - ($257)) | 0;
      $271 = (16777212 - ($260)) | 0;
      $272 = HEAP32[$5 >> 2] | 0;
      $273 = ($272 * 6) | 0;
      $274 = HEAP32[$138 >> 2] | 0;
      $275 = ($274 * 6) | 0;
      $276 = HEAP32[$141 >> 2] | 0;
      $277 = ($276 * 6) | 0;
      $278 = HEAP32[$144 >> 2] | 0;
      $279 = ($278 * 6) | 0;
      $280 = HEAP32[$147 >> 2] | 0;
      $281 = ($280 * 6) | 0;
      $282 = HEAP32[$150 >> 2] | 0;
      $283 = ($282 * 6) | 0;
      $284 = HEAP32[$153 >> 2] | 0;
      $285 = ($284 * 6) | 0;
      $286 = HEAP32[$156 >> 2] | 0;
      $287 = ($286 * 6) | 0;
      $288 = HEAP32[$159 >> 2] | 0;
      $289 = ($288 * 6) | 0;
      $290 = HEAP32[$162 >> 2] | 0;
      $291 = ($290 * 6) | 0;
      $292 = (($273) + ($262)) | 0;
      HEAP32[$5 >> 2] = $292;
      $293 = (($275) + ($263)) | 0;
      HEAP32[$138 >> 2] = $293;
      $294 = (($277) + ($264)) | 0;
      HEAP32[$141 >> 2] = $294;
      $295 = (($279) + ($265)) | 0;
      HEAP32[$144 >> 2] = $295;
      $296 = (($281) + ($266)) | 0;
      HEAP32[$147 >> 2] = $296;
      $297 = (($283) + ($267)) | 0;
      HEAP32[$150 >> 2] = $297;
      $298 = (($285) + ($268)) | 0;
      HEAP32[$153 >> 2] = $298;
      $299 = (($287) + ($269)) | 0;
      HEAP32[$156 >> 2] = $299;
      $300 = (($289) + ($270)) | 0;
      HEAP32[$159 >> 2] = $300;
      $301 = (($291) + ($271)) | 0;
      HEAP32[$162 >> 2] = $301;
      $302 = ((($0)) + 40 | 0);
      _secp256k1_fe_mul($302, $3, $5);
      $303 = HEAP32[$6 >> 2] | 0;
      $304 = (402647322 - ($303)) | 0;
      HEAP32[$4 >> 2] = $304;
      $305 = HEAP32[$167 >> 2] | 0;
      $306 = (402652794 - ($305)) | 0;
      HEAP32[$235 >> 2] = $306;
      $307 = HEAP32[$170 >> 2] | 0;
      $308 = (402653178 - ($307)) | 0;
      HEAP32[$238 >> 2] = $308;
      $309 = HEAP32[$173 >> 2] | 0;
      $310 = (402653178 - ($309)) | 0;
      HEAP32[$241 >> 2] = $310;
      $311 = HEAP32[$176 >> 2] | 0;
      $312 = (402653178 - ($311)) | 0;
      HEAP32[$244 >> 2] = $312;
      $313 = HEAP32[$179 >> 2] | 0;
      $314 = (402653178 - ($313)) | 0;
      HEAP32[$247 >> 2] = $314;
      $315 = HEAP32[$182 >> 2] | 0;
      $316 = (402653178 - ($315)) | 0;
      HEAP32[$250 >> 2] = $316;
      $317 = HEAP32[$185 >> 2] | 0;
      $318 = (402653178 - ($317)) | 0;
      HEAP32[$253 >> 2] = $318;
      $319 = HEAP32[$188 >> 2] | 0;
      $320 = (402653178 - ($319)) | 0;
      HEAP32[$256 >> 2] = $320;
      $321 = HEAP32[$191 >> 2] | 0;
      $322 = (25165818 - ($321)) | 0;
      HEAP32[$259 >> 2] = $322;
      $323 = HEAP32[$302 >> 2] | 0;
      $324 = (($323) + ($304)) | 0;
      HEAP32[$302 >> 2] = $324;
      $325 = ((($0)) + 44 | 0);
      $326 = HEAP32[$325 >> 2] | 0;
      $327 = (($326) + ($306)) | 0;
      HEAP32[$325 >> 2] = $327;
      $328 = ((($0)) + 48 | 0);
      $329 = HEAP32[$328 >> 2] | 0;
      $330 = (($329) + ($308)) | 0;
      HEAP32[$328 >> 2] = $330;
      $331 = ((($0)) + 52 | 0);
      $332 = HEAP32[$331 >> 2] | 0;
      $333 = (($332) + ($310)) | 0;
      HEAP32[$331 >> 2] = $333;
      $334 = ((($0)) + 56 | 0);
      $335 = HEAP32[$334 >> 2] | 0;
      $336 = (($335) + ($312)) | 0;
      HEAP32[$334 >> 2] = $336;
      $337 = ((($0)) + 60 | 0);
      $338 = HEAP32[$337 >> 2] | 0;
      $339 = (($338) + ($314)) | 0;
      HEAP32[$337 >> 2] = $339;
      $340 = ((($0)) + 64 | 0);
      $341 = HEAP32[$340 >> 2] | 0;
      $342 = (($341) + ($316)) | 0;
      HEAP32[$340 >> 2] = $342;
      $343 = ((($0)) + 68 | 0);
      $344 = HEAP32[$343 >> 2] | 0;
      $345 = (($344) + ($318)) | 0;
      HEAP32[$343 >> 2] = $345;
      $346 = ((($0)) + 72 | 0);
      $347 = HEAP32[$346 >> 2] | 0;
      $348 = (($347) + ($320)) | 0;
      HEAP32[$346 >> 2] = $348;
      $349 = ((($0)) + 76 | 0);
      $350 = HEAP32[$349 >> 2] | 0;
      $351 = (($350) + ($322)) | 0;
      HEAP32[$349 >> 2] = $351;
      STACKTOP = sp;
      return;
    } else {
      if (!($11)) {
        STACKTOP = sp;
        return;
      }
      HEAP32[$2 >> 2] = 1;
      $12 = ((($2)) + 4 | 0);
      dest = $12;
      stop = dest + 36 | 0;
      do {
        HEAP32[dest >> 2] = 0 | 0;
        dest = dest + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      STACKTOP = sp;
      return;
    }
  }

  function _secp256k1_ge_from_storage($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0,
      $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
    var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0,
      $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
    var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0,
      $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
    var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0,
      $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
    var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0,
      $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
    var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0,
      $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
    var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0,
      $99 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 & 67108863;
    HEAP32[$0 >> 2] = $3;
    $4 = HEAP32[$1 >> 2] | 0;
    $5 = $4 >>> 26;
    $6 = ((($1)) + 4 | 0);
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7 << 6;
    $9 = $8 & 67108800;
    $10 = $9 | $5;
    $11 = ((($0)) + 4 | 0);
    HEAP32[$11 >> 2] = $10;
    $12 = HEAP32[$6 >> 2] | 0;
    $13 = $12 >>> 20;
    $14 = ((($1)) + 8 | 0);
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $15 << 12;
    $17 = $16 & 67104768;
    $18 = $17 | $13;
    $19 = ((($0)) + 8 | 0);
    HEAP32[$19 >> 2] = $18;
    $20 = HEAP32[$14 >> 2] | 0;
    $21 = $20 >>> 14;
    $22 = ((($1)) + 12 | 0);
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $23 << 18;
    $25 = $24 & 66846720;
    $26 = $25 | $21;
    $27 = ((($0)) + 12 | 0);
    HEAP32[$27 >> 2] = $26;
    $28 = HEAP32[$22 >> 2] | 0;
    $29 = $28 >>> 8;
    $30 = ((($1)) + 16 | 0);
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = $31 << 24;
    $33 = $32 & 50331648;
    $34 = $33 | $29;
    $35 = ((($0)) + 16 | 0);
    HEAP32[$35 >> 2] = $34;
    $36 = HEAP32[$30 >> 2] | 0;
    $37 = $36 >>> 2;
    $38 = $37 & 67108863;
    $39 = ((($0)) + 20 | 0);
    HEAP32[$39 >> 2] = $38;
    $40 = HEAP32[$30 >> 2] | 0;
    $41 = $40 >>> 28;
    $42 = ((($1)) + 20 | 0);
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = $43 << 4;
    $45 = $44 & 67108848;
    $46 = $45 | $41;
    $47 = ((($0)) + 24 | 0);
    HEAP32[$47 >> 2] = $46;
    $48 = HEAP32[$42 >> 2] | 0;
    $49 = $48 >>> 22;
    $50 = ((($1)) + 24 | 0);
    $51 = HEAP32[$50 >> 2] | 0;
    $52 = $51 << 10;
    $53 = $52 & 67107840;
    $54 = $53 | $49;
    $55 = ((($0)) + 28 | 0);
    HEAP32[$55 >> 2] = $54;
    $56 = HEAP32[$50 >> 2] | 0;
    $57 = $56 >>> 16;
    $58 = ((($1)) + 28 | 0);
    $59 = HEAP32[$58 >> 2] | 0;
    $60 = $59 << 16;
    $61 = $60 & 67043328;
    $62 = $61 | $57;
    $63 = ((($0)) + 32 | 0);
    HEAP32[$63 >> 2] = $62;
    $64 = HEAP32[$58 >> 2] | 0;
    $65 = $64 >>> 10;
    $66 = ((($0)) + 36 | 0);
    HEAP32[$66 >> 2] = $65;
    $67 = ((($1)) + 32 | 0);
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = $68 & 67108863;
    $70 = ((($0)) + 40 | 0);
    HEAP32[$70 >> 2] = $69;
    $71 = HEAP32[$67 >> 2] | 0;
    $72 = $71 >>> 26;
    $73 = ((($1)) + 36 | 0);
    $74 = HEAP32[$73 >> 2] | 0;
    $75 = $74 << 6;
    $76 = $75 & 67108800;
    $77 = $76 | $72;
    $78 = ((($0)) + 44 | 0);
    HEAP32[$78 >> 2] = $77;
    $79 = HEAP32[$73 >> 2] | 0;
    $80 = $79 >>> 20;
    $81 = ((($1)) + 40 | 0);
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = $82 << 12;
    $84 = $83 & 67104768;
    $85 = $84 | $80;
    $86 = ((($0)) + 48 | 0);
    HEAP32[$86 >> 2] = $85;
    $87 = HEAP32[$81 >> 2] | 0;
    $88 = $87 >>> 14;
    $89 = ((($1)) + 44 | 0);
    $90 = HEAP32[$89 >> 2] | 0;
    $91 = $90 << 18;
    $92 = $91 & 66846720;
    $93 = $92 | $88;
    $94 = ((($0)) + 52 | 0);
    HEAP32[$94 >> 2] = $93;
    $95 = HEAP32[$89 >> 2] | 0;
    $96 = $95 >>> 8;
    $97 = ((($1)) + 48 | 0);
    $98 = HEAP32[$97 >> 2] | 0;
    $99 = $98 << 24;
    $100 = $99 & 50331648;
    $101 = $100 | $96;
    $102 = ((($0)) + 56 | 0);
    HEAP32[$102 >> 2] = $101;
    $103 = HEAP32[$97 >> 2] | 0;
    $104 = $103 >>> 2;
    $105 = $104 & 67108863;
    $106 = ((($0)) + 60 | 0);
    HEAP32[$106 >> 2] = $105;
    $107 = HEAP32[$97 >> 2] | 0;
    $108 = $107 >>> 28;
    $109 = ((($1)) + 52 | 0);
    $110 = HEAP32[$109 >> 2] | 0;
    $111 = $110 << 4;
    $112 = $111 & 67108848;
    $113 = $112 | $108;
    $114 = ((($0)) + 64 | 0);
    HEAP32[$114 >> 2] = $113;
    $115 = HEAP32[$109 >> 2] | 0;
    $116 = $115 >>> 22;
    $117 = ((($1)) + 56 | 0);
    $118 = HEAP32[$117 >> 2] | 0;
    $119 = $118 << 10;
    $120 = $119 & 67107840;
    $121 = $120 | $116;
    $122 = ((($0)) + 68 | 0);
    HEAP32[$122 >> 2] = $121;
    $123 = HEAP32[$117 >> 2] | 0;
    $124 = $123 >>> 16;
    $125 = ((($1)) + 60 | 0);
    $126 = HEAP32[$125 >> 2] | 0;
    $127 = $126 << 16;
    $128 = $127 & 67043328;
    $129 = $128 | $124;
    $130 = ((($0)) + 72 | 0);
    HEAP32[$130 >> 2] = $129;
    $131 = HEAP32[$125 >> 2] | 0;
    $132 = $131 >>> 10;
    $133 = ((($0)) + 76 | 0);
    HEAP32[$133 >> 2] = $132;
    $134 = ((($0)) + 80 | 0);
    HEAP32[$134 >> 2] = 0;
    return;
  }

  function _secp256k1_fe_mul($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0,
      $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
    var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0,
      $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
    var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0,
      $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
    var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0,
      $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
    var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0,
      $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
    var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0,
      $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
    var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0,
      $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
    var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0,
      $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
    var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0,
      $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
    var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0,
      $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
    var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0,
      $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
    var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0,
      $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
    var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0,
      $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
    var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0,
      $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
    var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0,
      $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
    var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0,
      $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
    var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0,
      $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
    var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0,
      $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
    var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0,
      $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
    var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0,
      $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
    var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0,
      $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
    var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0,
      $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
    var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0,
      $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
    var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0,
      $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
    var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0,
      $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
    var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0,
      $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
    var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0,
      $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
    var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0,
      $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
    var $605 = 0, $606 = 0, $607 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0,
      $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
    var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0,
      $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
    var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $3 = HEAP32[$1 >> 2] | 0;
    $4 = ((($2)) + 36 | 0);
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = (___muldi3(($5 | 0), 0, ($3 | 0), 0) | 0);
    $7 = tempRet0;
    $8 = ((($1)) + 4 | 0);
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ((($2)) + 32 | 0);
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = (___muldi3(($11 | 0), 0, ($9 | 0), 0) | 0);
    $13 = tempRet0;
    $14 = (_i64Add(($12 | 0), ($13 | 0), ($6 | 0), ($7 | 0)) | 0);
    $15 = tempRet0;
    $16 = ((($1)) + 8 | 0);
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = ((($2)) + 28 | 0);
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = (___muldi3(($19 | 0), 0, ($17 | 0), 0) | 0);
    $21 = tempRet0;
    $22 = (_i64Add(($14 | 0), ($15 | 0), ($20 | 0), ($21 | 0)) | 0);
    $23 = tempRet0;
    $24 = ((($1)) + 12 | 0);
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = ((($2)) + 24 | 0);
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = (___muldi3(($27 | 0), 0, ($25 | 0), 0) | 0);
    $29 = tempRet0;
    $30 = (_i64Add(($22 | 0), ($23 | 0), ($28 | 0), ($29 | 0)) | 0);
    $31 = tempRet0;
    $32 = ((($1)) + 16 | 0);
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = ((($2)) + 20 | 0);
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = (___muldi3(($35 | 0), 0, ($33 | 0), 0) | 0);
    $37 = tempRet0;
    $38 = (_i64Add(($30 | 0), ($31 | 0), ($36 | 0), ($37 | 0)) | 0);
    $39 = tempRet0;
    $40 = ((($1)) + 20 | 0);
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = ((($2)) + 16 | 0);
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = (___muldi3(($43 | 0), 0, ($41 | 0), 0) | 0);
    $45 = tempRet0;
    $46 = (_i64Add(($38 | 0), ($39 | 0), ($44 | 0), ($45 | 0)) | 0);
    $47 = tempRet0;
    $48 = ((($1)) + 24 | 0);
    $49 = HEAP32[$48 >> 2] | 0;
    $50 = ((($2)) + 12 | 0);
    $51 = HEAP32[$50 >> 2] | 0;
    $52 = (___muldi3(($51 | 0), 0, ($49 | 0), 0) | 0);
    $53 = tempRet0;
    $54 = (_i64Add(($46 | 0), ($47 | 0), ($52 | 0), ($53 | 0)) | 0);
    $55 = tempRet0;
    $56 = ((($1)) + 28 | 0);
    $57 = HEAP32[$56 >> 2] | 0;
    $58 = ((($2)) + 8 | 0);
    $59 = HEAP32[$58 >> 2] | 0;
    $60 = (___muldi3(($59 | 0), 0, ($57 | 0), 0) | 0);
    $61 = tempRet0;
    $62 = (_i64Add(($54 | 0), ($55 | 0), ($60 | 0), ($61 | 0)) | 0);
    $63 = tempRet0;
    $64 = ((($1)) + 32 | 0);
    $65 = HEAP32[$64 >> 2] | 0;
    $66 = ((($2)) + 4 | 0);
    $67 = HEAP32[$66 >> 2] | 0;
    $68 = (___muldi3(($67 | 0), 0, ($65 | 0), 0) | 0);
    $69 = tempRet0;
    $70 = (_i64Add(($62 | 0), ($63 | 0), ($68 | 0), ($69 | 0)) | 0);
    $71 = tempRet0;
    $72 = ((($1)) + 36 | 0);
    $73 = HEAP32[$72 >> 2] | 0;
    $74 = HEAP32[$2 >> 2] | 0;
    $75 = (___muldi3(($74 | 0), 0, ($73 | 0), 0) | 0);
    $76 = tempRet0;
    $77 = (_i64Add(($70 | 0), ($71 | 0), ($75 | 0), ($76 | 0)) | 0);
    $78 = tempRet0;
    $79 = (_bitshift64Lshr(($77 | 0), ($78 | 0), 26) | 0);
    $80 = tempRet0;
    $81 = (___muldi3(($74 | 0), 0, ($3 | 0), 0) | 0);
    $82 = tempRet0;
    $83 = (___muldi3(($9 | 0), 0, ($5 | 0), 0) | 0);
    $84 = tempRet0;
    $85 = (___muldi3(($17 | 0), 0, ($11 | 0), 0) | 0);
    $86 = tempRet0;
    $87 = (_i64Add(($85 | 0), ($86 | 0), ($83 | 0), ($84 | 0)) | 0);
    $88 = tempRet0;
    $89 = (___muldi3(($25 | 0), 0, ($19 | 0), 0) | 0);
    $90 = tempRet0;
    $91 = (_i64Add(($87 | 0), ($88 | 0), ($89 | 0), ($90 | 0)) | 0);
    $92 = tempRet0;
    $93 = (___muldi3(($33 | 0), 0, ($27 | 0), 0) | 0);
    $94 = tempRet0;
    $95 = (_i64Add(($91 | 0), ($92 | 0), ($93 | 0), ($94 | 0)) | 0);
    $96 = tempRet0;
    $97 = (___muldi3(($41 | 0), 0, ($35 | 0), 0) | 0);
    $98 = tempRet0;
    $99 = (_i64Add(($95 | 0), ($96 | 0), ($97 | 0), ($98 | 0)) | 0);
    $100 = tempRet0;
    $101 = (___muldi3(($49 | 0), 0, ($43 | 0), 0) | 0);
    $102 = tempRet0;
    $103 = (_i64Add(($99 | 0), ($100 | 0), ($101 | 0), ($102 | 0)) | 0);
    $104 = tempRet0;
    $105 = (___muldi3(($57 | 0), 0, ($51 | 0), 0) | 0);
    $106 = tempRet0;
    $107 = (_i64Add(($103 | 0), ($104 | 0), ($105 | 0), ($106 | 0)) | 0);
    $108 = tempRet0;
    $109 = (___muldi3(($65 | 0), 0, ($59 | 0), 0) | 0);
    $110 = tempRet0;
    $111 = (_i64Add(($107 | 0), ($108 | 0), ($109 | 0), ($110 | 0)) | 0);
    $112 = tempRet0;
    $113 = (___muldi3(($73 | 0), 0, ($67 | 0), 0) | 0);
    $114 = tempRet0;
    $115 = (_i64Add(($111 | 0), ($112 | 0), ($113 | 0), ($114 | 0)) | 0);
    $116 = tempRet0;
    $117 = (_i64Add(($115 | 0), ($116 | 0), ($79 | 0), ($80 | 0)) | 0);
    $118 = tempRet0;
    $119 = $117 & 67108863;
    $120 = (_bitshift64Lshr(($117 | 0), ($118 | 0), 26) | 0);
    $121 = tempRet0;
    $122 = (___muldi3(($119 | 0), 0, 15632, 0) | 0);
    $123 = tempRet0;
    $124 = (_i64Add(($122 | 0), ($123 | 0), ($81 | 0), ($82 | 0)) | 0);
    $125 = tempRet0;
    $126 = (_bitshift64Lshr(($124 | 0), ($125 | 0), 26) | 0);
    $127 = tempRet0;
    $128 = (_bitshift64Shl(($119 | 0), 0, 10) | 0);
    $129 = tempRet0;
    $130 = (___muldi3(($67 | 0), 0, ($3 | 0), 0) | 0);
    $131 = tempRet0;
    $132 = (___muldi3(($74 | 0), 0, ($9 | 0), 0) | 0);
    $133 = tempRet0;
    $134 = (___muldi3(($17 | 0), 0, ($5 | 0), 0) | 0);
    $135 = tempRet0;
    $136 = (___muldi3(($25 | 0), 0, ($11 | 0), 0) | 0);
    $137 = tempRet0;
    $138 = (_i64Add(($136 | 0), ($137 | 0), ($134 | 0), ($135 | 0)) | 0);
    $139 = tempRet0;
    $140 = (___muldi3(($33 | 0), 0, ($19 | 0), 0) | 0);
    $141 = tempRet0;
    $142 = (_i64Add(($138 | 0), ($139 | 0), ($140 | 0), ($141 | 0)) | 0);
    $143 = tempRet0;
    $144 = (___muldi3(($41 | 0), 0, ($27 | 0), 0) | 0);
    $145 = tempRet0;
    $146 = (_i64Add(($142 | 0), ($143 | 0), ($144 | 0), ($145 | 0)) | 0);
    $147 = tempRet0;
    $148 = (___muldi3(($49 | 0), 0, ($35 | 0), 0) | 0);
    $149 = tempRet0;
    $150 = (_i64Add(($146 | 0), ($147 | 0), ($148 | 0), ($149 | 0)) | 0);
    $151 = tempRet0;
    $152 = (___muldi3(($57 | 0), 0, ($43 | 0), 0) | 0);
    $153 = tempRet0;
    $154 = (_i64Add(($150 | 0), ($151 | 0), ($152 | 0), ($153 | 0)) | 0);
    $155 = tempRet0;
    $156 = (___muldi3(($65 | 0), 0, ($51 | 0), 0) | 0);
    $157 = tempRet0;
    $158 = (_i64Add(($154 | 0), ($155 | 0), ($156 | 0), ($157 | 0)) | 0);
    $159 = tempRet0;
    $160 = (___muldi3(($73 | 0), 0, ($59 | 0), 0) | 0);
    $161 = tempRet0;
    $162 = (_i64Add(($158 | 0), ($159 | 0), ($160 | 0), ($161 | 0)) | 0);
    $163 = tempRet0;
    $164 = (_i64Add(($162 | 0), ($163 | 0), ($120 | 0), ($121 | 0)) | 0);
    $165 = tempRet0;
    $166 = $164 & 67108863;
    $167 = (_bitshift64Lshr(($164 | 0), ($165 | 0), 26) | 0);
    $168 = tempRet0;
    $169 = (___muldi3(($166 | 0), 0, 15632, 0) | 0);
    $170 = tempRet0;
    $171 = (_i64Add(($132 | 0), ($133 | 0), ($130 | 0), ($131 | 0)) | 0);
    $172 = tempRet0;
    $173 = (_i64Add(($171 | 0), ($172 | 0), ($128 | 0), ($129 | 0)) | 0);
    $174 = tempRet0;
    $175 = (_i64Add(($173 | 0), ($174 | 0), ($126 | 0), ($127 | 0)) | 0);
    $176 = tempRet0;
    $177 = (_i64Add(($175 | 0), ($176 | 0), ($169 | 0), ($170 | 0)) | 0);
    $178 = tempRet0;
    $179 = (_bitshift64Lshr(($177 | 0), ($178 | 0), 26) | 0);
    $180 = tempRet0;
    $181 = (_bitshift64Shl(($166 | 0), 0, 10) | 0);
    $182 = tempRet0;
    $183 = (___muldi3(($59 | 0), 0, ($3 | 0), 0) | 0);
    $184 = tempRet0;
    $185 = (___muldi3(($67 | 0), 0, ($9 | 0), 0) | 0);
    $186 = tempRet0;
    $187 = (___muldi3(($74 | 0), 0, ($17 | 0), 0) | 0);
    $188 = tempRet0;
    $189 = (___muldi3(($25 | 0), 0, ($5 | 0), 0) | 0);
    $190 = tempRet0;
    $191 = (___muldi3(($33 | 0), 0, ($11 | 0), 0) | 0);
    $192 = tempRet0;
    $193 = (_i64Add(($191 | 0), ($192 | 0), ($189 | 0), ($190 | 0)) | 0);
    $194 = tempRet0;
    $195 = (___muldi3(($41 | 0), 0, ($19 | 0), 0) | 0);
    $196 = tempRet0;
    $197 = (_i64Add(($193 | 0), ($194 | 0), ($195 | 0), ($196 | 0)) | 0);
    $198 = tempRet0;
    $199 = (___muldi3(($49 | 0), 0, ($27 | 0), 0) | 0);
    $200 = tempRet0;
    $201 = (_i64Add(($197 | 0), ($198 | 0), ($199 | 0), ($200 | 0)) | 0);
    $202 = tempRet0;
    $203 = (___muldi3(($57 | 0), 0, ($35 | 0), 0) | 0);
    $204 = tempRet0;
    $205 = (_i64Add(($201 | 0), ($202 | 0), ($203 | 0), ($204 | 0)) | 0);
    $206 = tempRet0;
    $207 = (___muldi3(($65 | 0), 0, ($43 | 0), 0) | 0);
    $208 = tempRet0;
    $209 = (_i64Add(($205 | 0), ($206 | 0), ($207 | 0), ($208 | 0)) | 0);
    $210 = tempRet0;
    $211 = (___muldi3(($73 | 0), 0, ($51 | 0), 0) | 0);
    $212 = tempRet0;
    $213 = (_i64Add(($209 | 0), ($210 | 0), ($211 | 0), ($212 | 0)) | 0);
    $214 = tempRet0;
    $215 = (_i64Add(($213 | 0), ($214 | 0), ($167 | 0), ($168 | 0)) | 0);
    $216 = tempRet0;
    $217 = $215 & 67108863;
    $218 = (_bitshift64Lshr(($215 | 0), ($216 | 0), 26) | 0);
    $219 = tempRet0;
    $220 = (___muldi3(($217 | 0), 0, 15632, 0) | 0);
    $221 = tempRet0;
    $222 = (_i64Add(($185 | 0), ($186 | 0), ($183 | 0), ($184 | 0)) | 0);
    $223 = tempRet0;
    $224 = (_i64Add(($222 | 0), ($223 | 0), ($187 | 0), ($188 | 0)) | 0);
    $225 = tempRet0;
    $226 = (_i64Add(($224 | 0), ($225 | 0), ($181 | 0), ($182 | 0)) | 0);
    $227 = tempRet0;
    $228 = (_i64Add(($226 | 0), ($227 | 0), ($220 | 0), ($221 | 0)) | 0);
    $229 = tempRet0;
    $230 = (_i64Add(($228 | 0), ($229 | 0), ($179 | 0), ($180 | 0)) | 0);
    $231 = tempRet0;
    $232 = (_bitshift64Lshr(($230 | 0), ($231 | 0), 26) | 0);
    $233 = tempRet0;
    $234 = (_bitshift64Shl(($217 | 0), 0, 10) | 0);
    $235 = tempRet0;
    $236 = (___muldi3(($51 | 0), 0, ($3 | 0), 0) | 0);
    $237 = tempRet0;
    $238 = (___muldi3(($59 | 0), 0, ($9 | 0), 0) | 0);
    $239 = tempRet0;
    $240 = (___muldi3(($67 | 0), 0, ($17 | 0), 0) | 0);
    $241 = tempRet0;
    $242 = (___muldi3(($74 | 0), 0, ($25 | 0), 0) | 0);
    $243 = tempRet0;
    $244 = (___muldi3(($33 | 0), 0, ($5 | 0), 0) | 0);
    $245 = tempRet0;
    $246 = (___muldi3(($41 | 0), 0, ($11 | 0), 0) | 0);
    $247 = tempRet0;
    $248 = (_i64Add(($246 | 0), ($247 | 0), ($244 | 0), ($245 | 0)) | 0);
    $249 = tempRet0;
    $250 = (___muldi3(($49 | 0), 0, ($19 | 0), 0) | 0);
    $251 = tempRet0;
    $252 = (_i64Add(($248 | 0), ($249 | 0), ($250 | 0), ($251 | 0)) | 0);
    $253 = tempRet0;
    $254 = (___muldi3(($57 | 0), 0, ($27 | 0), 0) | 0);
    $255 = tempRet0;
    $256 = (_i64Add(($252 | 0), ($253 | 0), ($254 | 0), ($255 | 0)) | 0);
    $257 = tempRet0;
    $258 = (___muldi3(($65 | 0), 0, ($35 | 0), 0) | 0);
    $259 = tempRet0;
    $260 = (_i64Add(($256 | 0), ($257 | 0), ($258 | 0), ($259 | 0)) | 0);
    $261 = tempRet0;
    $262 = (___muldi3(($73 | 0), 0, ($43 | 0), 0) | 0);
    $263 = tempRet0;
    $264 = (_i64Add(($260 | 0), ($261 | 0), ($262 | 0), ($263 | 0)) | 0);
    $265 = tempRet0;
    $266 = (_i64Add(($264 | 0), ($265 | 0), ($218 | 0), ($219 | 0)) | 0);
    $267 = tempRet0;
    $268 = $266 & 67108863;
    $269 = (_bitshift64Lshr(($266 | 0), ($267 | 0), 26) | 0);
    $270 = tempRet0;
    $271 = (___muldi3(($268 | 0), 0, 15632, 0) | 0);
    $272 = tempRet0;
    $273 = (_i64Add(($238 | 0), ($239 | 0), ($236 | 0), ($237 | 0)) | 0);
    $274 = tempRet0;
    $275 = (_i64Add(($273 | 0), ($274 | 0), ($240 | 0), ($241 | 0)) | 0);
    $276 = tempRet0;
    $277 = (_i64Add(($275 | 0), ($276 | 0), ($242 | 0), ($243 | 0)) | 0);
    $278 = tempRet0;
    $279 = (_i64Add(($277 | 0), ($278 | 0), ($234 | 0), ($235 | 0)) | 0);
    $280 = tempRet0;
    $281 = (_i64Add(($279 | 0), ($280 | 0), ($271 | 0), ($272 | 0)) | 0);
    $282 = tempRet0;
    $283 = (_i64Add(($281 | 0), ($282 | 0), ($232 | 0), ($233 | 0)) | 0);
    $284 = tempRet0;
    $285 = $283 & 67108863;
    $286 = (_bitshift64Lshr(($283 | 0), ($284 | 0), 26) | 0);
    $287 = tempRet0;
    $288 = (_bitshift64Shl(($268 | 0), 0, 10) | 0);
    $289 = tempRet0;
    $290 = (___muldi3(($43 | 0), 0, ($3 | 0), 0) | 0);
    $291 = tempRet0;
    $292 = (___muldi3(($51 | 0), 0, ($9 | 0), 0) | 0);
    $293 = tempRet0;
    $294 = (___muldi3(($59 | 0), 0, ($17 | 0), 0) | 0);
    $295 = tempRet0;
    $296 = (___muldi3(($67 | 0), 0, ($25 | 0), 0) | 0);
    $297 = tempRet0;
    $298 = (___muldi3(($74 | 0), 0, ($33 | 0), 0) | 0);
    $299 = tempRet0;
    $300 = (___muldi3(($41 | 0), 0, ($5 | 0), 0) | 0);
    $301 = tempRet0;
    $302 = (___muldi3(($49 | 0), 0, ($11 | 0), 0) | 0);
    $303 = tempRet0;
    $304 = (_i64Add(($302 | 0), ($303 | 0), ($300 | 0), ($301 | 0)) | 0);
    $305 = tempRet0;
    $306 = (___muldi3(($57 | 0), 0, ($19 | 0), 0) | 0);
    $307 = tempRet0;
    $308 = (_i64Add(($304 | 0), ($305 | 0), ($306 | 0), ($307 | 0)) | 0);
    $309 = tempRet0;
    $310 = (___muldi3(($65 | 0), 0, ($27 | 0), 0) | 0);
    $311 = tempRet0;
    $312 = (_i64Add(($308 | 0), ($309 | 0), ($310 | 0), ($311 | 0)) | 0);
    $313 = tempRet0;
    $314 = (___muldi3(($73 | 0), 0, ($35 | 0), 0) | 0);
    $315 = tempRet0;
    $316 = (_i64Add(($312 | 0), ($313 | 0), ($314 | 0), ($315 | 0)) | 0);
    $317 = tempRet0;
    $318 = (_i64Add(($316 | 0), ($317 | 0), ($269 | 0), ($270 | 0)) | 0);
    $319 = tempRet0;
    $320 = $318 & 67108863;
    $321 = (_bitshift64Lshr(($318 | 0), ($319 | 0), 26) | 0);
    $322 = tempRet0;
    $323 = (___muldi3(($320 | 0), 0, 15632, 0) | 0);
    $324 = tempRet0;
    $325 = (_i64Add(($292 | 0), ($293 | 0), ($290 | 0), ($291 | 0)) | 0);
    $326 = tempRet0;
    $327 = (_i64Add(($325 | 0), ($326 | 0), ($294 | 0), ($295 | 0)) | 0);
    $328 = tempRet0;
    $329 = (_i64Add(($327 | 0), ($328 | 0), ($296 | 0), ($297 | 0)) | 0);
    $330 = tempRet0;
    $331 = (_i64Add(($329 | 0), ($330 | 0), ($298 | 0), ($299 | 0)) | 0);
    $332 = tempRet0;
    $333 = (_i64Add(($331 | 0), ($332 | 0), ($288 | 0), ($289 | 0)) | 0);
    $334 = tempRet0;
    $335 = (_i64Add(($333 | 0), ($334 | 0), ($323 | 0), ($324 | 0)) | 0);
    $336 = tempRet0;
    $337 = (_i64Add(($335 | 0), ($336 | 0), ($286 | 0), ($287 | 0)) | 0);
    $338 = tempRet0;
    $339 = $337 & 67108863;
    $340 = (_bitshift64Lshr(($337 | 0), ($338 | 0), 26) | 0);
    $341 = tempRet0;
    $342 = (_bitshift64Shl(($320 | 0), 0, 10) | 0);
    $343 = tempRet0;
    $344 = (___muldi3(($35 | 0), 0, ($3 | 0), 0) | 0);
    $345 = tempRet0;
    $346 = (___muldi3(($43 | 0), 0, ($9 | 0), 0) | 0);
    $347 = tempRet0;
    $348 = (___muldi3(($51 | 0), 0, ($17 | 0), 0) | 0);
    $349 = tempRet0;
    $350 = (___muldi3(($59 | 0), 0, ($25 | 0), 0) | 0);
    $351 = tempRet0;
    $352 = (___muldi3(($67 | 0), 0, ($33 | 0), 0) | 0);
    $353 = tempRet0;
    $354 = (___muldi3(($74 | 0), 0, ($41 | 0), 0) | 0);
    $355 = tempRet0;
    $356 = (___muldi3(($49 | 0), 0, ($5 | 0), 0) | 0);
    $357 = tempRet0;
    $358 = (___muldi3(($57 | 0), 0, ($11 | 0), 0) | 0);
    $359 = tempRet0;
    $360 = (_i64Add(($358 | 0), ($359 | 0), ($356 | 0), ($357 | 0)) | 0);
    $361 = tempRet0;
    $362 = (___muldi3(($65 | 0), 0, ($19 | 0), 0) | 0);
    $363 = tempRet0;
    $364 = (_i64Add(($360 | 0), ($361 | 0), ($362 | 0), ($363 | 0)) | 0);
    $365 = tempRet0;
    $366 = (___muldi3(($73 | 0), 0, ($27 | 0), 0) | 0);
    $367 = tempRet0;
    $368 = (_i64Add(($364 | 0), ($365 | 0), ($366 | 0), ($367 | 0)) | 0);
    $369 = tempRet0;
    $370 = (_i64Add(($368 | 0), ($369 | 0), ($321 | 0), ($322 | 0)) | 0);
    $371 = tempRet0;
    $372 = $370 & 67108863;
    $373 = (_bitshift64Lshr(($370 | 0), ($371 | 0), 26) | 0);
    $374 = tempRet0;
    $375 = (___muldi3(($372 | 0), 0, 15632, 0) | 0);
    $376 = tempRet0;
    $377 = (_i64Add(($346 | 0), ($347 | 0), ($344 | 0), ($345 | 0)) | 0);
    $378 = tempRet0;
    $379 = (_i64Add(($377 | 0), ($378 | 0), ($348 | 0), ($349 | 0)) | 0);
    $380 = tempRet0;
    $381 = (_i64Add(($379 | 0), ($380 | 0), ($350 | 0), ($351 | 0)) | 0);
    $382 = tempRet0;
    $383 = (_i64Add(($381 | 0), ($382 | 0), ($352 | 0), ($353 | 0)) | 0);
    $384 = tempRet0;
    $385 = (_i64Add(($383 | 0), ($384 | 0), ($354 | 0), ($355 | 0)) | 0);
    $386 = tempRet0;
    $387 = (_i64Add(($385 | 0), ($386 | 0), ($342 | 0), ($343 | 0)) | 0);
    $388 = tempRet0;
    $389 = (_i64Add(($387 | 0), ($388 | 0), ($375 | 0), ($376 | 0)) | 0);
    $390 = tempRet0;
    $391 = (_i64Add(($389 | 0), ($390 | 0), ($340 | 0), ($341 | 0)) | 0);
    $392 = tempRet0;
    $393 = $391 & 67108863;
    $394 = (_bitshift64Lshr(($391 | 0), ($392 | 0), 26) | 0);
    $395 = tempRet0;
    $396 = (_bitshift64Shl(($372 | 0), 0, 10) | 0);
    $397 = tempRet0;
    $398 = (___muldi3(($27 | 0), 0, ($3 | 0), 0) | 0);
    $399 = tempRet0;
    $400 = (___muldi3(($35 | 0), 0, ($9 | 0), 0) | 0);
    $401 = tempRet0;
    $402 = (___muldi3(($43 | 0), 0, ($17 | 0), 0) | 0);
    $403 = tempRet0;
    $404 = (___muldi3(($51 | 0), 0, ($25 | 0), 0) | 0);
    $405 = tempRet0;
    $406 = (___muldi3(($59 | 0), 0, ($33 | 0), 0) | 0);
    $407 = tempRet0;
    $408 = (___muldi3(($67 | 0), 0, ($41 | 0), 0) | 0);
    $409 = tempRet0;
    $410 = (___muldi3(($74 | 0), 0, ($49 | 0), 0) | 0);
    $411 = tempRet0;
    $412 = (___muldi3(($57 | 0), 0, ($5 | 0), 0) | 0);
    $413 = tempRet0;
    $414 = (___muldi3(($65 | 0), 0, ($11 | 0), 0) | 0);
    $415 = tempRet0;
    $416 = (_i64Add(($414 | 0), ($415 | 0), ($412 | 0), ($413 | 0)) | 0);
    $417 = tempRet0;
    $418 = (___muldi3(($73 | 0), 0, ($19 | 0), 0) | 0);
    $419 = tempRet0;
    $420 = (_i64Add(($416 | 0), ($417 | 0), ($418 | 0), ($419 | 0)) | 0);
    $421 = tempRet0;
    $422 = (_i64Add(($420 | 0), ($421 | 0), ($373 | 0), ($374 | 0)) | 0);
    $423 = tempRet0;
    $424 = $422 & 67108863;
    $425 = (_bitshift64Lshr(($422 | 0), ($423 | 0), 26) | 0);
    $426 = tempRet0;
    $427 = (___muldi3(($424 | 0), 0, 15632, 0) | 0);
    $428 = tempRet0;
    $429 = (_i64Add(($400 | 0), ($401 | 0), ($398 | 0), ($399 | 0)) | 0);
    $430 = tempRet0;
    $431 = (_i64Add(($429 | 0), ($430 | 0), ($402 | 0), ($403 | 0)) | 0);
    $432 = tempRet0;
    $433 = (_i64Add(($431 | 0), ($432 | 0), ($404 | 0), ($405 | 0)) | 0);
    $434 = tempRet0;
    $435 = (_i64Add(($433 | 0), ($434 | 0), ($406 | 0), ($407 | 0)) | 0);
    $436 = tempRet0;
    $437 = (_i64Add(($435 | 0), ($436 | 0), ($408 | 0), ($409 | 0)) | 0);
    $438 = tempRet0;
    $439 = (_i64Add(($437 | 0), ($438 | 0), ($410 | 0), ($411 | 0)) | 0);
    $440 = tempRet0;
    $441 = (_i64Add(($439 | 0), ($440 | 0), ($396 | 0), ($397 | 0)) | 0);
    $442 = tempRet0;
    $443 = (_i64Add(($441 | 0), ($442 | 0), ($427 | 0), ($428 | 0)) | 0);
    $444 = tempRet0;
    $445 = (_i64Add(($443 | 0), ($444 | 0), ($394 | 0), ($395 | 0)) | 0);
    $446 = tempRet0;
    $447 = $445 & 67108863;
    $448 = (_bitshift64Lshr(($445 | 0), ($446 | 0), 26) | 0);
    $449 = tempRet0;
    $450 = (_bitshift64Shl(($424 | 0), 0, 10) | 0);
    $451 = tempRet0;
    $452 = (___muldi3(($19 | 0), 0, ($3 | 0), 0) | 0);
    $453 = tempRet0;
    $454 = (___muldi3(($27 | 0), 0, ($9 | 0), 0) | 0);
    $455 = tempRet0;
    $456 = (___muldi3(($35 | 0), 0, ($17 | 0), 0) | 0);
    $457 = tempRet0;
    $458 = (___muldi3(($43 | 0), 0, ($25 | 0), 0) | 0);
    $459 = tempRet0;
    $460 = (___muldi3(($51 | 0), 0, ($33 | 0), 0) | 0);
    $461 = tempRet0;
    $462 = (___muldi3(($59 | 0), 0, ($41 | 0), 0) | 0);
    $463 = tempRet0;
    $464 = (___muldi3(($67 | 0), 0, ($49 | 0), 0) | 0);
    $465 = tempRet0;
    $466 = (___muldi3(($74 | 0), 0, ($57 | 0), 0) | 0);
    $467 = tempRet0;
    $468 = (___muldi3(($65 | 0), 0, ($5 | 0), 0) | 0);
    $469 = tempRet0;
    $470 = (___muldi3(($73 | 0), 0, ($11 | 0), 0) | 0);
    $471 = tempRet0;
    $472 = (_i64Add(($470 | 0), ($471 | 0), ($468 | 0), ($469 | 0)) | 0);
    $473 = tempRet0;
    $474 = (_i64Add(($472 | 0), ($473 | 0), ($425 | 0), ($426 | 0)) | 0);
    $475 = tempRet0;
    $476 = $474 & 67108863;
    $477 = (_bitshift64Lshr(($474 | 0), ($475 | 0), 26) | 0);
    $478 = tempRet0;
    $479 = (___muldi3(($476 | 0), 0, 15632, 0) | 0);
    $480 = tempRet0;
    $481 = (_i64Add(($454 | 0), ($455 | 0), ($452 | 0), ($453 | 0)) | 0);
    $482 = tempRet0;
    $483 = (_i64Add(($481 | 0), ($482 | 0), ($456 | 0), ($457 | 0)) | 0);
    $484 = tempRet0;
    $485 = (_i64Add(($483 | 0), ($484 | 0), ($458 | 0), ($459 | 0)) | 0);
    $486 = tempRet0;
    $487 = (_i64Add(($485 | 0), ($486 | 0), ($460 | 0), ($461 | 0)) | 0);
    $488 = tempRet0;
    $489 = (_i64Add(($487 | 0), ($488 | 0), ($462 | 0), ($463 | 0)) | 0);
    $490 = tempRet0;
    $491 = (_i64Add(($489 | 0), ($490 | 0), ($464 | 0), ($465 | 0)) | 0);
    $492 = tempRet0;
    $493 = (_i64Add(($491 | 0), ($492 | 0), ($466 | 0), ($467 | 0)) | 0);
    $494 = tempRet0;
    $495 = (_i64Add(($493 | 0), ($494 | 0), ($450 | 0), ($451 | 0)) | 0);
    $496 = tempRet0;
    $497 = (_i64Add(($495 | 0), ($496 | 0), ($479 | 0), ($480 | 0)) | 0);
    $498 = tempRet0;
    $499 = (_i64Add(($497 | 0), ($498 | 0), ($448 | 0), ($449 | 0)) | 0);
    $500 = tempRet0;
    $501 = $499 & 67108863;
    $502 = (_bitshift64Lshr(($499 | 0), ($500 | 0), 26) | 0);
    $503 = tempRet0;
    $504 = (_bitshift64Shl(($476 | 0), 0, 10) | 0);
    $505 = tempRet0;
    $506 = (___muldi3(($11 | 0), 0, ($3 | 0), 0) | 0);
    $507 = tempRet0;
    $508 = (___muldi3(($19 | 0), 0, ($9 | 0), 0) | 0);
    $509 = tempRet0;
    $510 = (___muldi3(($27 | 0), 0, ($17 | 0), 0) | 0);
    $511 = tempRet0;
    $512 = (___muldi3(($35 | 0), 0, ($25 | 0), 0) | 0);
    $513 = tempRet0;
    $514 = (___muldi3(($43 | 0), 0, ($33 | 0), 0) | 0);
    $515 = tempRet0;
    $516 = (___muldi3(($51 | 0), 0, ($41 | 0), 0) | 0);
    $517 = tempRet0;
    $518 = (___muldi3(($59 | 0), 0, ($49 | 0), 0) | 0);
    $519 = tempRet0;
    $520 = (___muldi3(($67 | 0), 0, ($57 | 0), 0) | 0);
    $521 = tempRet0;
    $522 = (___muldi3(($74 | 0), 0, ($65 | 0), 0) | 0);
    $523 = tempRet0;
    $524 = (___muldi3(($73 | 0), 0, ($5 | 0), 0) | 0);
    $525 = tempRet0;
    $526 = (_i64Add(($477 | 0), ($478 | 0), ($524 | 0), ($525 | 0)) | 0);
    $527 = tempRet0;
    $528 = $526 & 67108863;
    $529 = (_bitshift64Lshr(($526 | 0), ($527 | 0), 26) | 0);
    $530 = tempRet0;
    $531 = (___muldi3(($528 | 0), 0, 15632, 0) | 0);
    $532 = tempRet0;
    $533 = (_i64Add(($508 | 0), ($509 | 0), ($506 | 0), ($507 | 0)) | 0);
    $534 = tempRet0;
    $535 = (_i64Add(($533 | 0), ($534 | 0), ($510 | 0), ($511 | 0)) | 0);
    $536 = tempRet0;
    $537 = (_i64Add(($535 | 0), ($536 | 0), ($512 | 0), ($513 | 0)) | 0);
    $538 = tempRet0;
    $539 = (_i64Add(($537 | 0), ($538 | 0), ($514 | 0), ($515 | 0)) | 0);
    $540 = tempRet0;
    $541 = (_i64Add(($539 | 0), ($540 | 0), ($516 | 0), ($517 | 0)) | 0);
    $542 = tempRet0;
    $543 = (_i64Add(($541 | 0), ($542 | 0), ($518 | 0), ($519 | 0)) | 0);
    $544 = tempRet0;
    $545 = (_i64Add(($543 | 0), ($544 | 0), ($520 | 0), ($521 | 0)) | 0);
    $546 = tempRet0;
    $547 = (_i64Add(($545 | 0), ($546 | 0), ($522 | 0), ($523 | 0)) | 0);
    $548 = tempRet0;
    $549 = (_i64Add(($547 | 0), ($548 | 0), ($504 | 0), ($505 | 0)) | 0);
    $550 = tempRet0;
    $551 = (_i64Add(($549 | 0), ($550 | 0), ($531 | 0), ($532 | 0)) | 0);
    $552 = tempRet0;
    $553 = (_i64Add(($551 | 0), ($552 | 0), ($502 | 0), ($503 | 0)) | 0);
    $554 = tempRet0;
    $555 = ((($0)) + 12 | 0);
    HEAP32[$555 >> 2] = $285;
    $556 = ((($0)) + 16 | 0);
    HEAP32[$556 >> 2] = $339;
    $557 = ((($0)) + 20 | 0);
    HEAP32[$557 >> 2] = $393;
    $558 = ((($0)) + 24 | 0);
    HEAP32[$558 >> 2] = $447;
    $559 = ((($0)) + 28 | 0);
    HEAP32[$559 >> 2] = $501;
    $560 = $553 & 67108863;
    $561 = ((($0)) + 32 | 0);
    HEAP32[$561 >> 2] = $560;
    $562 = (_bitshift64Lshr(($553 | 0), ($554 | 0), 26) | 0);
    $563 = tempRet0;
    $564 = (_bitshift64Shl(($528 | 0), 0, 10) | 0);
    $565 = tempRet0;
    $566 = (___muldi3(($529 | 0), ($530 | 0), 15632, 0) | 0);
    $567 = tempRet0;
    $568 = $77 & 67108863;
    $569 = (_i64Add(($566 | 0), ($567 | 0), ($568 | 0), 0) | 0);
    $570 = tempRet0;
    $571 = (_i64Add(($569 | 0), ($570 | 0), ($564 | 0), ($565 | 0)) | 0);
    $572 = tempRet0;
    $573 = (_i64Add(($571 | 0), ($572 | 0), ($562 | 0), ($563 | 0)) | 0);
    $574 = tempRet0;
    $575 = $573 & 4194303;
    $576 = ((($0)) + 36 | 0);
    HEAP32[$576 >> 2] = $575;
    $577 = (_bitshift64Lshr(($573 | 0), ($574 | 0), 22) | 0);
    $578 = tempRet0;
    $579 = (_bitshift64Shl(($529 | 0), ($530 | 0), 14) | 0);
    $580 = tempRet0;
    $581 = (_i64Add(($577 | 0), ($578 | 0), ($579 | 0), ($580 | 0)) | 0);
    $582 = tempRet0;
    $583 = (___muldi3(($581 | 0), ($582 | 0), 977, 0) | 0);
    $584 = tempRet0;
    $585 = $124 & 67108863;
    $586 = (_i64Add(($583 | 0), ($584 | 0), ($585 | 0), 0) | 0);
    $587 = tempRet0;
    $588 = (_i64Add(($583 | 0), ($584 | 0), ($124 | 0), ($125 | 0)) | 0);
    $589 = tempRet0;
    $590 = $588 & 67108863;
    HEAP32[$0 >> 2] = $590;
    $591 = (_bitshift64Lshr(($586 | 0), ($587 | 0), 26) | 0);
    $592 = tempRet0;
    $593 = (_bitshift64Shl(($581 | 0), ($582 | 0), 6) | 0);
    $594 = tempRet0;
    $595 = $177 & 67108863;
    $596 = (_i64Add(($593 | 0), ($594 | 0), ($595 | 0), 0) | 0);
    $597 = tempRet0;
    $598 = (_i64Add(($596 | 0), ($597 | 0), ($591 | 0), ($592 | 0)) | 0);
    $599 = tempRet0;
    $600 = $598 & 67108863;
    $601 = ((($0)) + 4 | 0);
    HEAP32[$601 >> 2] = $600;
    $602 = (_bitshift64Lshr(($598 | 0), ($599 | 0), 26) | 0);
    $603 = tempRet0;
    $604 = $230 & 67108863;
    $605 = (_i64Add(($602 | 0), ($603 | 0), ($604 | 0), 0) | 0);
    $606 = tempRet0;
    $607 = ((($0)) + 8 | 0);
    HEAP32[$607 >> 2] = $605;
    return;
  }

  function _secp256k1_fe_sqr($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0,
      $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
    var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0,
      $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
    var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0,
      $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
    var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0,
      $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
    var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0,
      $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
    var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0,
      $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
    var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0,
      $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
    var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0,
      $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
    var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0,
      $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
    var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0,
      $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
    var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0,
      $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
    var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0,
      $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
    var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0,
      $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
    var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0,
      $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
    var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0,
      $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
    var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0,
      $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
    var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0,
      $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
    var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0,
      $416 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
    var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0,
      $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
    var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0,
      $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
    var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0,
      $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 << 1;
    $4 = ((($1)) + 36 | 0);
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = (___muldi3(($3 | 0), 0, ($5 | 0), 0) | 0);
    $7 = tempRet0;
    $8 = ((($1)) + 4 | 0);
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9 << 1;
    $11 = ((($1)) + 32 | 0);
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = (___muldi3(($10 | 0), 0, ($12 | 0), 0) | 0);
    $14 = tempRet0;
    $15 = (_i64Add(($13 | 0), ($14 | 0), ($6 | 0), ($7 | 0)) | 0);
    $16 = tempRet0;
    $17 = ((($1)) + 8 | 0);
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18 << 1;
    $20 = ((($1)) + 28 | 0);
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = (___muldi3(($19 | 0), 0, ($21 | 0), 0) | 0);
    $23 = tempRet0;
    $24 = (_i64Add(($15 | 0), ($16 | 0), ($22 | 0), ($23 | 0)) | 0);
    $25 = tempRet0;
    $26 = ((($1)) + 12 | 0);
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = $27 << 1;
    $29 = ((($1)) + 24 | 0);
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = (___muldi3(($28 | 0), 0, ($30 | 0), 0) | 0);
    $32 = tempRet0;
    $33 = (_i64Add(($24 | 0), ($25 | 0), ($31 | 0), ($32 | 0)) | 0);
    $34 = tempRet0;
    $35 = ((($1)) + 16 | 0);
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = $36 << 1;
    $38 = ((($1)) + 20 | 0);
    $39 = HEAP32[$38 >> 2] | 0;
    $40 = (___muldi3(($37 | 0), 0, ($39 | 0), 0) | 0);
    $41 = tempRet0;
    $42 = (_i64Add(($33 | 0), ($34 | 0), ($40 | 0), ($41 | 0)) | 0);
    $43 = tempRet0;
    $44 = (_bitshift64Lshr(($42 | 0), ($43 | 0), 26) | 0);
    $45 = tempRet0;
    $46 = (___muldi3(($2 | 0), 0, ($2 | 0), 0) | 0);
    $47 = tempRet0;
    $48 = (___muldi3(($10 | 0), 0, ($5 | 0), 0) | 0);
    $49 = tempRet0;
    $50 = (___muldi3(($19 | 0), 0, ($12 | 0), 0) | 0);
    $51 = tempRet0;
    $52 = (_i64Add(($50 | 0), ($51 | 0), ($48 | 0), ($49 | 0)) | 0);
    $53 = tempRet0;
    $54 = (___muldi3(($28 | 0), 0, ($21 | 0), 0) | 0);
    $55 = tempRet0;
    $56 = (_i64Add(($52 | 0), ($53 | 0), ($54 | 0), ($55 | 0)) | 0);
    $57 = tempRet0;
    $58 = (___muldi3(($37 | 0), 0, ($30 | 0), 0) | 0);
    $59 = tempRet0;
    $60 = (_i64Add(($56 | 0), ($57 | 0), ($58 | 0), ($59 | 0)) | 0);
    $61 = tempRet0;
    $62 = (___muldi3(($39 | 0), 0, ($39 | 0), 0) | 0);
    $63 = tempRet0;
    $64 = (_i64Add(($60 | 0), ($61 | 0), ($62 | 0), ($63 | 0)) | 0);
    $65 = tempRet0;
    $66 = (_i64Add(($64 | 0), ($65 | 0), ($44 | 0), ($45 | 0)) | 0);
    $67 = tempRet0;
    $68 = $66 & 67108863;
    $69 = (_bitshift64Lshr(($66 | 0), ($67 | 0), 26) | 0);
    $70 = tempRet0;
    $71 = (___muldi3(($68 | 0), 0, 15632, 0) | 0);
    $72 = tempRet0;
    $73 = (_i64Add(($71 | 0), ($72 | 0), ($46 | 0), ($47 | 0)) | 0);
    $74 = tempRet0;
    $75 = (_bitshift64Lshr(($73 | 0), ($74 | 0), 26) | 0);
    $76 = tempRet0;
    $77 = (_bitshift64Shl(($68 | 0), 0, 10) | 0);
    $78 = tempRet0;
    $79 = (___muldi3(($9 | 0), 0, ($3 | 0), 0) | 0);
    $80 = tempRet0;
    $81 = (___muldi3(($19 | 0), 0, ($5 | 0), 0) | 0);
    $82 = tempRet0;
    $83 = (___muldi3(($28 | 0), 0, ($12 | 0), 0) | 0);
    $84 = tempRet0;
    $85 = (_i64Add(($83 | 0), ($84 | 0), ($81 | 0), ($82 | 0)) | 0);
    $86 = tempRet0;
    $87 = (___muldi3(($37 | 0), 0, ($21 | 0), 0) | 0);
    $88 = tempRet0;
    $89 = (_i64Add(($85 | 0), ($86 | 0), ($87 | 0), ($88 | 0)) | 0);
    $90 = tempRet0;
    $91 = $39 << 1;
    $92 = (___muldi3(($91 | 0), 0, ($30 | 0), 0) | 0);
    $93 = tempRet0;
    $94 = (_i64Add(($89 | 0), ($90 | 0), ($92 | 0), ($93 | 0)) | 0);
    $95 = tempRet0;
    $96 = (_i64Add(($94 | 0), ($95 | 0), ($69 | 0), ($70 | 0)) | 0);
    $97 = tempRet0;
    $98 = $96 & 67108863;
    $99 = (_bitshift64Lshr(($96 | 0), ($97 | 0), 26) | 0);
    $100 = tempRet0;
    $101 = (___muldi3(($98 | 0), 0, 15632, 0) | 0);
    $102 = tempRet0;
    $103 = (_i64Add(($77 | 0), ($78 | 0), ($79 | 0), ($80 | 0)) | 0);
    $104 = tempRet0;
    $105 = (_i64Add(($103 | 0), ($104 | 0), ($75 | 0), ($76 | 0)) | 0);
    $106 = tempRet0;
    $107 = (_i64Add(($105 | 0), ($106 | 0), ($101 | 0), ($102 | 0)) | 0);
    $108 = tempRet0;
    $109 = (_bitshift64Lshr(($107 | 0), ($108 | 0), 26) | 0);
    $110 = tempRet0;
    $111 = (_bitshift64Shl(($98 | 0), 0, 10) | 0);
    $112 = tempRet0;
    $113 = (___muldi3(($18 | 0), 0, ($3 | 0), 0) | 0);
    $114 = tempRet0;
    $115 = (___muldi3(($9 | 0), 0, ($9 | 0), 0) | 0);
    $116 = tempRet0;
    $117 = (___muldi3(($28 | 0), 0, ($5 | 0), 0) | 0);
    $118 = tempRet0;
    $119 = (___muldi3(($37 | 0), 0, ($12 | 0), 0) | 0);
    $120 = tempRet0;
    $121 = (___muldi3(($91 | 0), 0, ($21 | 0), 0) | 0);
    $122 = tempRet0;
    $123 = (___muldi3(($30 | 0), 0, ($30 | 0), 0) | 0);
    $124 = tempRet0;
    $125 = (_i64Add(($123 | 0), ($124 | 0), ($117 | 0), ($118 | 0)) | 0);
    $126 = tempRet0;
    $127 = (_i64Add(($125 | 0), ($126 | 0), ($119 | 0), ($120 | 0)) | 0);
    $128 = tempRet0;
    $129 = (_i64Add(($127 | 0), ($128 | 0), ($121 | 0), ($122 | 0)) | 0);
    $130 = tempRet0;
    $131 = (_i64Add(($129 | 0), ($130 | 0), ($99 | 0), ($100 | 0)) | 0);
    $132 = tempRet0;
    $133 = $131 & 67108863;
    $134 = (_bitshift64Lshr(($131 | 0), ($132 | 0), 26) | 0);
    $135 = tempRet0;
    $136 = (___muldi3(($133 | 0), 0, 15632, 0) | 0);
    $137 = tempRet0;
    $138 = (_i64Add(($113 | 0), ($114 | 0), ($115 | 0), ($116 | 0)) | 0);
    $139 = tempRet0;
    $140 = (_i64Add(($138 | 0), ($139 | 0), ($111 | 0), ($112 | 0)) | 0);
    $141 = tempRet0;
    $142 = (_i64Add(($140 | 0), ($141 | 0), ($136 | 0), ($137 | 0)) | 0);
    $143 = tempRet0;
    $144 = (_i64Add(($142 | 0), ($143 | 0), ($109 | 0), ($110 | 0)) | 0);
    $145 = tempRet0;
    $146 = (_bitshift64Lshr(($144 | 0), ($145 | 0), 26) | 0);
    $147 = tempRet0;
    $148 = (_bitshift64Shl(($133 | 0), 0, 10) | 0);
    $149 = tempRet0;
    $150 = (___muldi3(($27 | 0), 0, ($3 | 0), 0) | 0);
    $151 = tempRet0;
    $152 = (___muldi3(($18 | 0), 0, ($10 | 0), 0) | 0);
    $153 = tempRet0;
    $154 = (___muldi3(($37 | 0), 0, ($5 | 0), 0) | 0);
    $155 = tempRet0;
    $156 = (___muldi3(($91 | 0), 0, ($12 | 0), 0) | 0);
    $157 = tempRet0;
    $158 = $30 << 1;
    $159 = (___muldi3(($158 | 0), 0, ($21 | 0), 0) | 0);
    $160 = tempRet0;
    $161 = (_i64Add(($154 | 0), ($155 | 0), ($159 | 0), ($160 | 0)) | 0);
    $162 = tempRet0;
    $163 = (_i64Add(($161 | 0), ($162 | 0), ($156 | 0), ($157 | 0)) | 0);
    $164 = tempRet0;
    $165 = (_i64Add(($163 | 0), ($164 | 0), ($134 | 0), ($135 | 0)) | 0);
    $166 = tempRet0;
    $167 = $165 & 67108863;
    $168 = (_bitshift64Lshr(($165 | 0), ($166 | 0), 26) | 0);
    $169 = tempRet0;
    $170 = (___muldi3(($167 | 0), 0, 15632, 0) | 0);
    $171 = tempRet0;
    $172 = (_i64Add(($150 | 0), ($151 | 0), ($152 | 0), ($153 | 0)) | 0);
    $173 = tempRet0;
    $174 = (_i64Add(($172 | 0), ($173 | 0), ($148 | 0), ($149 | 0)) | 0);
    $175 = tempRet0;
    $176 = (_i64Add(($174 | 0), ($175 | 0), ($170 | 0), ($171 | 0)) | 0);
    $177 = tempRet0;
    $178 = (_i64Add(($176 | 0), ($177 | 0), ($146 | 0), ($147 | 0)) | 0);
    $179 = tempRet0;
    $180 = $178 & 67108863;
    $181 = (_bitshift64Lshr(($178 | 0), ($179 | 0), 26) | 0);
    $182 = tempRet0;
    $183 = (_bitshift64Shl(($167 | 0), 0, 10) | 0);
    $184 = tempRet0;
    $185 = (___muldi3(($36 | 0), 0, ($3 | 0), 0) | 0);
    $186 = tempRet0;
    $187 = (___muldi3(($27 | 0), 0, ($10 | 0), 0) | 0);
    $188 = tempRet0;
    $189 = (___muldi3(($18 | 0), 0, ($18 | 0), 0) | 0);
    $190 = tempRet0;
    $191 = (___muldi3(($91 | 0), 0, ($5 | 0), 0) | 0);
    $192 = tempRet0;
    $193 = (___muldi3(($158 | 0), 0, ($12 | 0), 0) | 0);
    $194 = tempRet0;
    $195 = (___muldi3(($21 | 0), 0, ($21 | 0), 0) | 0);
    $196 = tempRet0;
    $197 = (_i64Add(($193 | 0), ($194 | 0), ($195 | 0), ($196 | 0)) | 0);
    $198 = tempRet0;
    $199 = (_i64Add(($197 | 0), ($198 | 0), ($191 | 0), ($192 | 0)) | 0);
    $200 = tempRet0;
    $201 = (_i64Add(($199 | 0), ($200 | 0), ($168 | 0), ($169 | 0)) | 0);
    $202 = tempRet0;
    $203 = $201 & 67108863;
    $204 = (_bitshift64Lshr(($201 | 0), ($202 | 0), 26) | 0);
    $205 = tempRet0;
    $206 = (___muldi3(($203 | 0), 0, 15632, 0) | 0);
    $207 = tempRet0;
    $208 = (_i64Add(($187 | 0), ($188 | 0), ($189 | 0), ($190 | 0)) | 0);
    $209 = tempRet0;
    $210 = (_i64Add(($208 | 0), ($209 | 0), ($185 | 0), ($186 | 0)) | 0);
    $211 = tempRet0;
    $212 = (_i64Add(($210 | 0), ($211 | 0), ($183 | 0), ($184 | 0)) | 0);
    $213 = tempRet0;
    $214 = (_i64Add(($212 | 0), ($213 | 0), ($206 | 0), ($207 | 0)) | 0);
    $215 = tempRet0;
    $216 = (_i64Add(($214 | 0), ($215 | 0), ($181 | 0), ($182 | 0)) | 0);
    $217 = tempRet0;
    $218 = $216 & 67108863;
    $219 = (_bitshift64Lshr(($216 | 0), ($217 | 0), 26) | 0);
    $220 = tempRet0;
    $221 = (_bitshift64Shl(($203 | 0), 0, 10) | 0);
    $222 = tempRet0;
    $223 = (___muldi3(($39 | 0), 0, ($3 | 0), 0) | 0);
    $224 = tempRet0;
    $225 = (___muldi3(($36 | 0), 0, ($10 | 0), 0) | 0);
    $226 = tempRet0;
    $227 = (___muldi3(($27 | 0), 0, ($19 | 0), 0) | 0);
    $228 = tempRet0;
    $229 = (___muldi3(($158 | 0), 0, ($5 | 0), 0) | 0);
    $230 = tempRet0;
    $231 = $21 << 1;
    $232 = (___muldi3(($231 | 0), 0, ($12 | 0), 0) | 0);
    $233 = tempRet0;
    $234 = (_i64Add(($229 | 0), ($230 | 0), ($232 | 0), ($233 | 0)) | 0);
    $235 = tempRet0;
    $236 = (_i64Add(($234 | 0), ($235 | 0), ($204 | 0), ($205 | 0)) | 0);
    $237 = tempRet0;
    $238 = $236 & 67108863;
    $239 = (_bitshift64Lshr(($236 | 0), ($237 | 0), 26) | 0);
    $240 = tempRet0;
    $241 = (___muldi3(($238 | 0), 0, 15632, 0) | 0);
    $242 = tempRet0;
    $243 = (_i64Add(($225 | 0), ($226 | 0), ($227 | 0), ($228 | 0)) | 0);
    $244 = tempRet0;
    $245 = (_i64Add(($243 | 0), ($244 | 0), ($223 | 0), ($224 | 0)) | 0);
    $246 = tempRet0;
    $247 = (_i64Add(($245 | 0), ($246 | 0), ($221 | 0), ($222 | 0)) | 0);
    $248 = tempRet0;
    $249 = (_i64Add(($247 | 0), ($248 | 0), ($241 | 0), ($242 | 0)) | 0);
    $250 = tempRet0;
    $251 = (_i64Add(($249 | 0), ($250 | 0), ($219 | 0), ($220 | 0)) | 0);
    $252 = tempRet0;
    $253 = $251 & 67108863;
    $254 = (_bitshift64Lshr(($251 | 0), ($252 | 0), 26) | 0);
    $255 = tempRet0;
    $256 = (_bitshift64Shl(($238 | 0), 0, 10) | 0);
    $257 = tempRet0;
    $258 = (___muldi3(($30 | 0), 0, ($3 | 0), 0) | 0);
    $259 = tempRet0;
    $260 = (___muldi3(($39 | 0), 0, ($10 | 0), 0) | 0);
    $261 = tempRet0;
    $262 = (___muldi3(($36 | 0), 0, ($19 | 0), 0) | 0);
    $263 = tempRet0;
    $264 = (___muldi3(($27 | 0), 0, ($27 | 0), 0) | 0);
    $265 = tempRet0;
    $266 = (___muldi3(($231 | 0), 0, ($5 | 0), 0) | 0);
    $267 = tempRet0;
    $268 = (___muldi3(($12 | 0), 0, ($12 | 0), 0) | 0);
    $269 = tempRet0;
    $270 = (_i64Add(($266 | 0), ($267 | 0), ($268 | 0), ($269 | 0)) | 0);
    $271 = tempRet0;
    $272 = (_i64Add(($270 | 0), ($271 | 0), ($239 | 0), ($240 | 0)) | 0);
    $273 = tempRet0;
    $274 = $272 & 67108863;
    $275 = (_bitshift64Lshr(($272 | 0), ($273 | 0), 26) | 0);
    $276 = tempRet0;
    $277 = (___muldi3(($274 | 0), 0, 15632, 0) | 0);
    $278 = tempRet0;
    $279 = (_i64Add(($258 | 0), ($259 | 0), ($264 | 0), ($265 | 0)) | 0);
    $280 = tempRet0;
    $281 = (_i64Add(($279 | 0), ($280 | 0), ($262 | 0), ($263 | 0)) | 0);
    $282 = tempRet0;
    $283 = (_i64Add(($281 | 0), ($282 | 0), ($260 | 0), ($261 | 0)) | 0);
    $284 = tempRet0;
    $285 = (_i64Add(($283 | 0), ($284 | 0), ($256 | 0), ($257 | 0)) | 0);
    $286 = tempRet0;
    $287 = (_i64Add(($285 | 0), ($286 | 0), ($277 | 0), ($278 | 0)) | 0);
    $288 = tempRet0;
    $289 = (_i64Add(($287 | 0), ($288 | 0), ($254 | 0), ($255 | 0)) | 0);
    $290 = tempRet0;
    $291 = $289 & 67108863;
    $292 = (_bitshift64Lshr(($289 | 0), ($290 | 0), 26) | 0);
    $293 = tempRet0;
    $294 = (_bitshift64Shl(($274 | 0), 0, 10) | 0);
    $295 = tempRet0;
    $296 = (___muldi3(($21 | 0), 0, ($3 | 0), 0) | 0);
    $297 = tempRet0;
    $298 = (___muldi3(($30 | 0), 0, ($10 | 0), 0) | 0);
    $299 = tempRet0;
    $300 = (___muldi3(($39 | 0), 0, ($19 | 0), 0) | 0);
    $301 = tempRet0;
    $302 = (___muldi3(($36 | 0), 0, ($28 | 0), 0) | 0);
    $303 = tempRet0;
    $304 = $12 << 1;
    $305 = (___muldi3(($304 | 0), 0, ($5 | 0), 0) | 0);
    $306 = tempRet0;
    $307 = (_i64Add(($275 | 0), ($276 | 0), ($305 | 0), ($306 | 0)) | 0);
    $308 = tempRet0;
    $309 = $307 & 67108863;
    $310 = (_bitshift64Lshr(($307 | 0), ($308 | 0), 26) | 0);
    $311 = tempRet0;
    $312 = (___muldi3(($309 | 0), 0, 15632, 0) | 0);
    $313 = tempRet0;
    $314 = (_i64Add(($298 | 0), ($299 | 0), ($296 | 0), ($297 | 0)) | 0);
    $315 = tempRet0;
    $316 = (_i64Add(($314 | 0), ($315 | 0), ($302 | 0), ($303 | 0)) | 0);
    $317 = tempRet0;
    $318 = (_i64Add(($316 | 0), ($317 | 0), ($300 | 0), ($301 | 0)) | 0);
    $319 = tempRet0;
    $320 = (_i64Add(($318 | 0), ($319 | 0), ($294 | 0), ($295 | 0)) | 0);
    $321 = tempRet0;
    $322 = (_i64Add(($320 | 0), ($321 | 0), ($312 | 0), ($313 | 0)) | 0);
    $323 = tempRet0;
    $324 = (_i64Add(($322 | 0), ($323 | 0), ($292 | 0), ($293 | 0)) | 0);
    $325 = tempRet0;
    $326 = $324 & 67108863;
    $327 = (_bitshift64Lshr(($324 | 0), ($325 | 0), 26) | 0);
    $328 = tempRet0;
    $329 = (_bitshift64Shl(($309 | 0), 0, 10) | 0);
    $330 = tempRet0;
    $331 = (___muldi3(($12 | 0), 0, ($3 | 0), 0) | 0);
    $332 = tempRet0;
    $333 = (___muldi3(($21 | 0), 0, ($10 | 0), 0) | 0);
    $334 = tempRet0;
    $335 = (___muldi3(($30 | 0), 0, ($19 | 0), 0) | 0);
    $336 = tempRet0;
    $337 = (___muldi3(($39 | 0), 0, ($28 | 0), 0) | 0);
    $338 = tempRet0;
    $339 = (___muldi3(($36 | 0), 0, ($36 | 0), 0) | 0);
    $340 = tempRet0;
    $341 = (___muldi3(($5 | 0), 0, ($5 | 0), 0) | 0);
    $342 = tempRet0;
    $343 = (_i64Add(($310 | 0), ($311 | 0), ($341 | 0), ($342 | 0)) | 0);
    $344 = tempRet0;
    $345 = $343 & 67108863;
    $346 = (_bitshift64Lshr(($343 | 0), ($344 | 0), 26) | 0);
    $347 = tempRet0;
    $348 = (___muldi3(($345 | 0), 0, 15632, 0) | 0);
    $349 = tempRet0;
    $350 = (_i64Add(($333 | 0), ($334 | 0), ($331 | 0), ($332 | 0)) | 0);
    $351 = tempRet0;
    $352 = (_i64Add(($350 | 0), ($351 | 0), ($335 | 0), ($336 | 0)) | 0);
    $353 = tempRet0;
    $354 = (_i64Add(($352 | 0), ($353 | 0), ($339 | 0), ($340 | 0)) | 0);
    $355 = tempRet0;
    $356 = (_i64Add(($354 | 0), ($355 | 0), ($337 | 0), ($338 | 0)) | 0);
    $357 = tempRet0;
    $358 = (_i64Add(($356 | 0), ($357 | 0), ($329 | 0), ($330 | 0)) | 0);
    $359 = tempRet0;
    $360 = (_i64Add(($358 | 0), ($359 | 0), ($348 | 0), ($349 | 0)) | 0);
    $361 = tempRet0;
    $362 = (_i64Add(($360 | 0), ($361 | 0), ($327 | 0), ($328 | 0)) | 0);
    $363 = tempRet0;
    $364 = ((($0)) + 12 | 0);
    HEAP32[$364 >> 2] = $180;
    $365 = ((($0)) + 16 | 0);
    HEAP32[$365 >> 2] = $218;
    $366 = ((($0)) + 20 | 0);
    HEAP32[$366 >> 2] = $253;
    $367 = ((($0)) + 24 | 0);
    HEAP32[$367 >> 2] = $291;
    $368 = ((($0)) + 28 | 0);
    HEAP32[$368 >> 2] = $326;
    $369 = $362 & 67108863;
    $370 = ((($0)) + 32 | 0);
    HEAP32[$370 >> 2] = $369;
    $371 = (_bitshift64Lshr(($362 | 0), ($363 | 0), 26) | 0);
    $372 = tempRet0;
    $373 = (_bitshift64Shl(($345 | 0), 0, 10) | 0);
    $374 = tempRet0;
    $375 = (___muldi3(($346 | 0), ($347 | 0), 15632, 0) | 0);
    $376 = tempRet0;
    $377 = $42 & 67108863;
    $378 = (_i64Add(($375 | 0), ($376 | 0), ($377 | 0), 0) | 0);
    $379 = tempRet0;
    $380 = (_i64Add(($378 | 0), ($379 | 0), ($373 | 0), ($374 | 0)) | 0);
    $381 = tempRet0;
    $382 = (_i64Add(($380 | 0), ($381 | 0), ($371 | 0), ($372 | 0)) | 0);
    $383 = tempRet0;
    $384 = $382 & 4194303;
    $385 = ((($0)) + 36 | 0);
    HEAP32[$385 >> 2] = $384;
    $386 = (_bitshift64Lshr(($382 | 0), ($383 | 0), 22) | 0);
    $387 = tempRet0;
    $388 = (_bitshift64Shl(($346 | 0), ($347 | 0), 14) | 0);
    $389 = tempRet0;
    $390 = (_i64Add(($386 | 0), ($387 | 0), ($388 | 0), ($389 | 0)) | 0);
    $391 = tempRet0;
    $392 = (___muldi3(($390 | 0), ($391 | 0), 977, 0) | 0);
    $393 = tempRet0;
    $394 = $73 & 67108863;
    $395 = (_i64Add(($392 | 0), ($393 | 0), ($394 | 0), 0) | 0);
    $396 = tempRet0;
    $397 = (_i64Add(($392 | 0), ($393 | 0), ($73 | 0), ($74 | 0)) | 0);
    $398 = tempRet0;
    $399 = $397 & 67108863;
    HEAP32[$0 >> 2] = $399;
    $400 = (_bitshift64Lshr(($395 | 0), ($396 | 0), 26) | 0);
    $401 = tempRet0;
    $402 = (_bitshift64Shl(($390 | 0), ($391 | 0), 6) | 0);
    $403 = tempRet0;
    $404 = $107 & 67108863;
    $405 = (_i64Add(($402 | 0), ($403 | 0), ($404 | 0), 0) | 0);
    $406 = tempRet0;
    $407 = (_i64Add(($405 | 0), ($406 | 0), ($400 | 0), ($401 | 0)) | 0);
    $408 = tempRet0;
    $409 = $407 & 67108863;
    $410 = ((($0)) + 4 | 0);
    HEAP32[$410 >> 2] = $409;
    $411 = (_bitshift64Lshr(($407 | 0), ($408 | 0), 26) | 0);
    $412 = tempRet0;
    $413 = $144 & 67108863;
    $414 = (_i64Add(($411 | 0), ($412 | 0), ($413 | 0), 0) | 0);
    $415 = tempRet0;
    $416 = ((($0)) + 8 | 0);
    HEAP32[$416 >> 2] = $414;
    return;
  }

  function _secp256k1_fe_normalizes_to_zero_var($0) {
    $0 = $0 | 0;
    var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0,
      $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
    var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0,
      $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
    var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0,
      $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
    var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0,
      $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
    var $9 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = ((($0)) + 36 | 0);
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 >>> 22;
    $5 = ($4 * 977) | 0;
    $6 = (($5) + ($1)) | 0;
    $7 = $6 & 67108863;
    $8 = $7 ^ 976;
    $9 = ($7 | 0) != (0);
    $10 = ($8 | 0) != (67108863);
    $11 = $9 & $10;
    if ($11) {
      $$0 = 0;
      return ($$0 | 0);
    }
    $12 = ((($0)) + 4 | 0);
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ((($0)) + 8 | 0);
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = ((($0)) + 12 | 0);
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = ((($0)) + 16 | 0);
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = ((($0)) + 20 | 0);
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = ((($0)) + 24 | 0);
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = ((($0)) + 28 | 0);
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = ((($0)) + 32 | 0);
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = $3 & 4194303;
    $29 = $4 << 6;
    $30 = $6 >>> 26;
    $31 = $30 | $29;
    $32 = (($31) + ($13)) | 0;
    $33 = $32 >>> 26;
    $34 = (($33) + ($15)) | 0;
    $35 = $32 & 67108863;
    $36 = $35 | $7;
    $37 = $32 ^ 64;
    $38 = $37 & $8;
    $39 = $34 >>> 26;
    $40 = (($39) + ($17)) | 0;
    $41 = $34 & 67108863;
    $42 = $36 | $41;
    $43 = $38 & $34;
    $44 = $40 >>> 26;
    $45 = (($44) + ($19)) | 0;
    $46 = $40 & 67108863;
    $47 = $42 | $46;
    $48 = $43 & $40;
    $49 = $45 >>> 26;
    $50 = (($49) + ($21)) | 0;
    $51 = $45 & 67108863;
    $52 = $47 | $51;
    $53 = $48 & $45;
    $54 = $50 >>> 26;
    $55 = (($54) + ($23)) | 0;
    $56 = $50 & 67108863;
    $57 = $52 | $56;
    $58 = $53 & $50;
    $59 = $55 >>> 26;
    $60 = (($59) + ($25)) | 0;
    $61 = $55 & 67108863;
    $62 = $57 | $61;
    $63 = $58 & $55;
    $64 = $60 >>> 26;
    $65 = (($64) + ($27)) | 0;
    $66 = $60 & 67108863;
    $67 = $62 | $66;
    $68 = $63 & $60;
    $69 = $65 >>> 26;
    $70 = (($69) + ($28)) | 0;
    $71 = $65 & 67108863;
    $72 = $67 | $71;
    $73 = $68 & $65;
    $74 = $72 | $70;
    $75 = $70 ^ 62914560;
    $76 = $73 & $75;
    $77 = ($74 | 0) == (0);
    $78 = ($76 | 0) == (67108863);
    $79 = $77 | $78;
    $80 = $79 & 1;
    $$0 = $80;
    return ($$0 | 0);
  }

  function _secp256k1_fe_inv($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $$539 = 0, $$638 = 0, $$737 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0,
      $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond45 = 0;
    var $exitcond46 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 480 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480 | 0);
    $2 = sp + 440 | 0;
    $3 = sp + 400 | 0;
    $4 = sp + 360 | 0;
    $5 = sp + 320 | 0;
    $6 = sp + 280 | 0;
    $7 = sp + 240 | 0;
    $8 = sp + 200 | 0;
    $9 = sp + 160 | 0;
    $10 = sp + 120 | 0;
    $11 = sp + 80 | 0;
    $12 = sp + 40 | 0;
    $13 = sp;
    _secp256k1_fe_sqr($2, $1);
    _secp256k1_fe_mul($2, $2, $1);
    _secp256k1_fe_sqr($3, $2);
    _secp256k1_fe_mul($3, $3, $1);
    dest = $4;
    src = $3;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($4, $4);
    _secp256k1_fe_sqr($4, $4);
    _secp256k1_fe_sqr($4, $4);
    _secp256k1_fe_mul($4, $4, $3);
    dest = $5;
    src = $4;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($5, $5);
    _secp256k1_fe_sqr($5, $5);
    _secp256k1_fe_sqr($5, $5);
    _secp256k1_fe_mul($5, $5, $3);
    dest = $6;
    src = $5;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($6, $6);
    _secp256k1_fe_sqr($6, $6);
    _secp256k1_fe_mul($6, $6, $2);
    dest = $7;
    src = $6;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_mul($7, $7, $6);
    dest = $8;
    src = $7;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_mul($8, $8, $7);
    dest = $9;
    src = $8;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $$539 = 0;
    while (1) {
      _secp256k1_fe_sqr($9, $9);
      $14 = (($$539) + 1) | 0;
      $exitcond46 = ($14 | 0) == (44);
      if ($exitcond46) {
        break;
      } else {
        $$539 = $14;
      }
    }
    _secp256k1_fe_mul($9, $9, $8);
    dest = $10;
    src = $9;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $$638 = 0;
    while (1) {
      _secp256k1_fe_sqr($10, $10);
      $15 = (($$638) + 1) | 0;
      $exitcond45 = ($15 | 0) == (88);
      if ($exitcond45) {
        break;
      } else {
        $$638 = $15;
      }
    }
    _secp256k1_fe_mul($10, $10, $9);
    dest = $11;
    src = $10;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $$737 = 0;
    while (1) {
      _secp256k1_fe_sqr($11, $11);
      $16 = (($$737) + 1) | 0;
      $exitcond = ($16 | 0) == (44);
      if ($exitcond) {
        break;
      } else {
        $$737 = $16;
      }
    }
    _secp256k1_fe_mul($11, $11, $8);
    dest = $12;
    src = $11;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($12, $12);
    _secp256k1_fe_sqr($12, $12);
    _secp256k1_fe_sqr($12, $12);
    _secp256k1_fe_mul($12, $12, $3);
    dest = $13;
    src = $12;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_mul($13, $13, $7);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_mul($13, $13, $1);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_mul($13, $13, $2);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_sqr($13, $13);
    _secp256k1_fe_mul($0, $1, $13);
    STACKTOP = sp;
    return;
  }

  function _secp256k1_fe_normalize_var($0) {
    $0 = $0 | 0;
    var $$0 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $$0141 = 0, $$0142 = 0, $$0143 = 0, $$0144 = 0, $$0145 = 0,
      $$0146 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
    var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0,
      $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
    var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0,
      $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
    var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0,
      $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
    var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0,
      $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
    var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fold = 0,
      $fold147 = 0, $fold148 = 0, $fold149 = 0, $fold150 = 0, $fold151 = 0, $fold152 = 0, $fold153 = 0, label = 0,
      sp = 0;
    sp = STACKTOP;
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = ((($0)) + 4 | 0);
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ((($0)) + 8 | 0);
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ((($0)) + 12 | 0);
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ((($0)) + 16 | 0);
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ((($0)) + 20 | 0);
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = ((($0)) + 24 | 0);
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ((($0)) + 28 | 0);
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = ((($0)) + 32 | 0);
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = ((($0)) + 36 | 0);
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $19 >>> 22;
    $21 = $19 & 4194303;
    $22 = ($20 * 977) | 0;
    $23 = (($22) + ($1)) | 0;
    $24 = $20 << 6;
    $25 = (($24) + ($3)) | 0;
    $26 = $23 >>> 26;
    $27 = (($25) + ($26)) | 0;
    $28 = $23 & 67108863;
    $29 = $27 >>> 26;
    $30 = (($29) + ($5)) | 0;
    $31 = $27 & 67108863;
    $32 = $30 >>> 26;
    $33 = (($32) + ($7)) | 0;
    $34 = $30 & 67108863;
    $35 = $33 >>> 26;
    $36 = (($35) + ($9)) | 0;
    $37 = $33 & 67108863;
    $38 = $33 & $30;
    $39 = $36 >>> 26;
    $40 = (($39) + ($11)) | 0;
    $41 = $36 & 67108863;
    $42 = $38 & $36;
    $43 = $40 >>> 26;
    $44 = (($43) + ($13)) | 0;
    $45 = $40 & 67108863;
    $46 = $42 & $40;
    $47 = $44 >>> 26;
    $48 = (($47) + ($15)) | 0;
    $49 = $44 & 67108863;
    $50 = $46 & $49;
    $51 = $48 >>> 26;
    $52 = (($51) + ($17)) | 0;
    $53 = $48 & 67108863;
    $54 = $50 & $48;
    $55 = $52 >>> 26;
    $56 = (($55) + ($21)) | 0;
    $57 = $52 & 67108863;
    $58 = $54 & $52;
    $59 = $56 >>> 22;
    $60 = ($56 | 0) == (4194303);
    $61 = ($58 | 0) == (67108863);
    $62 = $61 & $60;
    $63 = (($31) + 64) | 0;
    $64 = (($28) + 977) | 0;
    $65 = $64 >>> 26;
    $66 = (($63) + ($65)) | 0;
    $67 = ($66 >>> 0) > (67108863);
    $68 = $67 & $62;
    $69 = $68 & 1;
    $70 = $69 | $59;
    $71 = ($70 | 0) == (0);
    if ($71) {
      $$0 = $28;
      $$0138 = $56;
      $$0139 = $57;
      $$0140 = $53;
      $$0141 = $49;
      $$0142 = $45;
      $$0143 = $41;
      $$0144 = $37;
      $$0145 = $34;
      $$0146 = $31;
      HEAP32[$0 >> 2] = $$0;
      HEAP32[$2 >> 2] = $$0146;
      HEAP32[$4 >> 2] = $$0145;
      HEAP32[$6 >> 2] = $$0144;
      HEAP32[$8 >> 2] = $$0143;
      HEAP32[$10 >> 2] = $$0142;
      HEAP32[$12 >> 2] = $$0141;
      HEAP32[$14 >> 2] = $$0140;
      HEAP32[$16 >> 2] = $$0139;
      HEAP32[$18 >> 2] = $$0138;
      return;
    }
    $72 = $70 << 6;
    $73 = (($65) + ($31)) | 0;
    $74 = (($73) + ($72)) | 0;
    $fold = (($23) + 977) | 0;
    $75 = $fold & 67108863;
    $76 = $74 >>> 26;
    $77 = (($76) + ($34)) | 0;
    $78 = $74 & 67108863;
    $79 = $77 >>> 26;
    $80 = (($79) + ($37)) | 0;
    $fold147 = (($76) + ($30)) | 0;
    $81 = $fold147 & 67108863;
    $82 = $80 >>> 26;
    $83 = (($82) + ($41)) | 0;
    $fold148 = (($79) + ($33)) | 0;
    $84 = $fold148 & 67108863;
    $85 = $83 >>> 26;
    $86 = (($85) + ($45)) | 0;
    $fold149 = (($82) + ($36)) | 0;
    $87 = $fold149 & 67108863;
    $88 = $86 >>> 26;
    $89 = (($88) + ($49)) | 0;
    $fold150 = (($85) + ($40)) | 0;
    $90 = $fold150 & 67108863;
    $91 = $89 >>> 26;
    $92 = (($91) + ($53)) | 0;
    $fold151 = (($88) + ($44)) | 0;
    $93 = $fold151 & 67108863;
    $94 = $92 >>> 26;
    $95 = (($94) + ($57)) | 0;
    $fold152 = (($91) + ($48)) | 0;
    $96 = $fold152 & 67108863;
    $97 = $95 >>> 26;
    $98 = (($97) + ($56)) | 0;
    $fold153 = (($94) + ($52)) | 0;
    $99 = $fold153 & 67108863;
    $100 = $98 & 4194303;
    $$0 = $75;
    $$0138 = $100;
    $$0139 = $99;
    $$0140 = $96;
    $$0141 = $93;
    $$0142 = $90;
    $$0143 = $87;
    $$0144 = $84;
    $$0145 = $81;
    $$0146 = $78;
    HEAP32[$0 >> 2] = $$0;
    HEAP32[$2 >> 2] = $$0146;
    HEAP32[$4 >> 2] = $$0145;
    HEAP32[$6 >> 2] = $$0144;
    HEAP32[$8 >> 2] = $$0143;
    HEAP32[$10 >> 2] = $$0142;
    HEAP32[$12 >> 2] = $$0141;
    HEAP32[$14 >> 2] = $$0140;
    HEAP32[$16 >> 2] = $$0139;
    HEAP32[$18 >> 2] = $$0138;
    return;
  }

  function _secp256k1_sha256_transform($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0,
      $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
    var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0,
      $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
    var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0,
      $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
    var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0,
      $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
    var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0,
      $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
    var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0,
      $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
    var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0,
      $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
    var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0,
      $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
    var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0,
      $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
    var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0,
      $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
    var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0,
      $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
    var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0,
      $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
    var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0,
      $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
    var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0,
      $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
    var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0,
      $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
    var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0,
      $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
    var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0,
      $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
    var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0,
      $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
    var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0,
      $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
    var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0,
      $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
    var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0,
      $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
    var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0,
      $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
    var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0,
      $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
    var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0,
      $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
    var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0,
      $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
    var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0,
      $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
    var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0,
      $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
    var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0,
      $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
    var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0,
      $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
    var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0,
      $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
    var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0,
      $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
    var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0,
      $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
    var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0,
      $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
    var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0,
      $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
    var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0,
      $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
    var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0,
      $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
    var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0,
      $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
    var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0,
      $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
    var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0,
      $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
    var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0,
      $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
    var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0,
      $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
    var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0,
      $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
    var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0,
      $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
    var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0,
      $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
    var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0,
      $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
    var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0,
      $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
    var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0,
      $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
    var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0,
      $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
    var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0,
      $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
    var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0,
      $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
    var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0,
      $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
    var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0,
      $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
    var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0,
      $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
    var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0,
      $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
    var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0,
      $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
    var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0,
      $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0;
    var $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0,
      $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0;
    var $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0,
      $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0;
    var $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0,
      $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0;
    var $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0,
      $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0;
    var $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0,
      $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0;
    var $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0,
      $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0;
    var $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0,
      $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0;
    var $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0,
      $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0;
    var $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0,
      $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0;
    var $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0,
      $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0;
    var $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0,
      $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0;
    var $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0,
      $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0;
    var $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0,
      $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0;
    var $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0,
      $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0;
    var $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0,
      $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0;
    var $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0,
      $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0;
    var $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0,
      $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0;
    var $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0,
      $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0;
    var $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0,
      $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0;
    var $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0,
      $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0;
    var $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0,
      $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0;
    var $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0,
      $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0;
    var $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0,
      $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0;
    var $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0,
      $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0;
    var $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0,
      $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0;
    var $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0,
      $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0;
    var $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0,
      $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0;
    var $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0,
      $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0;
    var $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0,
      $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0;
    var $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0,
      $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0;
    var $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0,
      $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0;
    var $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0,
      $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0;
    var $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0,
      $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0;
    var $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0,
      $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0;
    var $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0,
      $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0;
    var $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0,
      $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0;
    var $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0,
      $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0;
    var $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0,
      $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0;
    var $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0,
      $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0;
    var $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0,
      $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0;
    var $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0,
      $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0;
    var $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0,
      $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0;
    var $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0,
      $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0;
    var $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0,
      $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0;
    var $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0,
      $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0;
    var $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0,
      $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0;
    var $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0,
      $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0;
    var $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0,
      $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0;
    var $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0,
      $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0;
    var $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0,
      $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0;
    var $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0,
      $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0;
    var $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0,
      $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0;
    var $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0,
      $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0;
    var $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0,
      $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0;
    var $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0,
      $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0;
    var $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0,
      $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0;
    var $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0,
      $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0;
    var $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0,
      $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0;
    var $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0,
      $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0;
    var $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0,
      $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0;
    var $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0,
      $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0;
    var $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0,
      $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0;
    var $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0,
      $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0;
    var $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0,
      $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0;
    var $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0,
      $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0;
    var $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0,
      $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0;
    var $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0,
      $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0;
    var $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0,
      $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0;
    var $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0,
      $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0;
    var $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0,
      $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0;
    var $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0,
      $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0;
    var $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0,
      $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0;
    var $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0,
      $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0;
    var $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0,
      $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0;
    var $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0,
      $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0;
    var $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0,
      $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0;
    var $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0,
      $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $34 = 0, $340 = 0, $341 = 0;
    var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0,
      $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
    var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0,
      $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
    var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0,
      $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
    var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0,
      $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
    var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0,
      $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
    var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0,
      $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
    var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0,
      $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
    var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0,
      $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
    var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0,
      $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
    var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0,
      $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
    var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0,
      $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
    var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0,
      $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
    var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0,
      $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
    var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0,
      $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
    var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0,
      $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
    var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0,
      $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
    var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0,
      $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
    var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0,
      $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
    var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0,
      $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
    var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0,
      $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
    var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0,
      $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
    var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0,
      $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
    var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0,
      $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
    var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0,
      $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
    var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0,
      $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
    var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0,
      $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
    var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0,
      $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
    var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0,
      $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
    var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0,
      $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
    var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0,
      $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0;
    var $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0,
      $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0;
    var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0,
      $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
    var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0,
      $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
    var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0,
      $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0;
    var $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0,
      $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0;
    var $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0,
      $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0;
    var $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $2 = HEAP32[$0 >> 2] | 0;
    $3 = ((($0)) + 4 | 0);
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ((($0)) + 8 | 0);
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ((($0)) + 12 | 0);
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ((($0)) + 16 | 0);
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = ((($0)) + 20 | 0);
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ((($0)) + 24 | 0);
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = ((($0)) + 28 | 0);
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $10 >>> 6;
    $18 = $10 << 26;
    $19 = $17 | $18;
    $20 = $10 >>> 11;
    $21 = $10 << 21;
    $22 = $20 | $21;
    $23 = $19 ^ $22;
    $24 = $10 >>> 25;
    $25 = $10 << 7;
    $26 = $24 | $25;
    $27 = $23 ^ $26;
    $28 = $14 ^ $12;
    $29 = $28 & $10;
    $30 = $29 ^ $14;
    $31 = HEAP32[$1 >> 2] | 0;
    $32 = (_llvm_bswap_i32(($31 | 0)) | 0);
    $33 = (($16) + 1116352408) | 0;
    $34 = (($33) + ($27)) | 0;
    $35 = (($34) + ($30)) | 0;
    $36 = (($35) + ($32)) | 0;
    $37 = $2 >>> 2;
    $38 = $2 << 30;
    $39 = $37 | $38;
    $40 = $2 >>> 13;
    $41 = $2 << 19;
    $42 = $40 | $41;
    $43 = $39 ^ $42;
    $44 = $2 >>> 22;
    $45 = $2 << 10;
    $46 = $44 | $45;
    $47 = $43 ^ $46;
    $48 = $4 & $2;
    $49 = $4 | $2;
    $50 = $6 & $49;
    $51 = $50 | $48;
    $52 = (($47) + ($51)) | 0;
    $53 = (($36) + ($8)) | 0;
    $54 = (($52) + ($36)) | 0;
    $55 = $53 >>> 6;
    $56 = $53 << 26;
    $57 = $55 | $56;
    $58 = $53 >>> 11;
    $59 = $53 << 21;
    $60 = $58 | $59;
    $61 = $57 ^ $60;
    $62 = $53 >>> 25;
    $63 = $53 << 7;
    $64 = $62 | $63;
    $65 = $61 ^ $64;
    $66 = $12 ^ $10;
    $67 = $53 & $66;
    $68 = $67 ^ $12;
    $69 = ((($1)) + 4 | 0);
    $70 = HEAP32[$69 >> 2] | 0;
    $71 = (_llvm_bswap_i32(($70 | 0)) | 0);
    $72 = (($14) + 1899447441) | 0;
    $73 = (($72) + ($71)) | 0;
    $74 = (($73) + ($68)) | 0;
    $75 = (($74) + ($65)) | 0;
    $76 = $54 >>> 2;
    $77 = $54 << 30;
    $78 = $76 | $77;
    $79 = $54 >>> 13;
    $80 = $54 << 19;
    $81 = $79 | $80;
    $82 = $78 ^ $81;
    $83 = $54 >>> 22;
    $84 = $54 << 10;
    $85 = $83 | $84;
    $86 = $82 ^ $85;
    $87 = $54 & $2;
    $88 = $54 | $2;
    $89 = $88 & $4;
    $90 = $89 | $87;
    $91 = (($86) + ($90)) | 0;
    $92 = (($75) + ($6)) | 0;
    $93 = (($91) + ($75)) | 0;
    $94 = $92 >>> 6;
    $95 = $92 << 26;
    $96 = $94 | $95;
    $97 = $92 >>> 11;
    $98 = $92 << 21;
    $99 = $97 | $98;
    $100 = $96 ^ $99;
    $101 = $92 >>> 25;
    $102 = $92 << 7;
    $103 = $101 | $102;
    $104 = $100 ^ $103;
    $105 = $53 ^ $10;
    $106 = $92 & $105;
    $107 = $106 ^ $10;
    $108 = ((($1)) + 8 | 0);
    $109 = HEAP32[$108 >> 2] | 0;
    $110 = (_llvm_bswap_i32(($109 | 0)) | 0);
    $111 = (($12) + -1245643825) | 0;
    $112 = (($111) + ($110)) | 0;
    $113 = (($112) + ($107)) | 0;
    $114 = (($113) + ($104)) | 0;
    $115 = $93 >>> 2;
    $116 = $93 << 30;
    $117 = $115 | $116;
    $118 = $93 >>> 13;
    $119 = $93 << 19;
    $120 = $118 | $119;
    $121 = $117 ^ $120;
    $122 = $93 >>> 22;
    $123 = $93 << 10;
    $124 = $122 | $123;
    $125 = $121 ^ $124;
    $126 = $93 & $54;
    $127 = $93 | $54;
    $128 = $127 & $2;
    $129 = $128 | $126;
    $130 = (($125) + ($129)) | 0;
    $131 = (($114) + ($4)) | 0;
    $132 = (($130) + ($114)) | 0;
    $133 = $131 >>> 6;
    $134 = $131 << 26;
    $135 = $133 | $134;
    $136 = $131 >>> 11;
    $137 = $131 << 21;
    $138 = $136 | $137;
    $139 = $135 ^ $138;
    $140 = $131 >>> 25;
    $141 = $131 << 7;
    $142 = $140 | $141;
    $143 = $139 ^ $142;
    $144 = $92 ^ $53;
    $145 = $131 & $144;
    $146 = $145 ^ $53;
    $147 = ((($1)) + 12 | 0);
    $148 = HEAP32[$147 >> 2] | 0;
    $149 = (_llvm_bswap_i32(($148 | 0)) | 0);
    $150 = (($10) + -373957723) | 0;
    $151 = (($150) + ($149)) | 0;
    $152 = (($151) + ($146)) | 0;
    $153 = (($152) + ($143)) | 0;
    $154 = $132 >>> 2;
    $155 = $132 << 30;
    $156 = $154 | $155;
    $157 = $132 >>> 13;
    $158 = $132 << 19;
    $159 = $157 | $158;
    $160 = $156 ^ $159;
    $161 = $132 >>> 22;
    $162 = $132 << 10;
    $163 = $161 | $162;
    $164 = $160 ^ $163;
    $165 = $132 & $93;
    $166 = $132 | $93;
    $167 = $166 & $54;
    $168 = $167 | $165;
    $169 = (($164) + ($168)) | 0;
    $170 = (($153) + ($2)) | 0;
    $171 = (($169) + ($153)) | 0;
    $172 = $170 >>> 6;
    $173 = $170 << 26;
    $174 = $172 | $173;
    $175 = $170 >>> 11;
    $176 = $170 << 21;
    $177 = $175 | $176;
    $178 = $174 ^ $177;
    $179 = $170 >>> 25;
    $180 = $170 << 7;
    $181 = $179 | $180;
    $182 = $178 ^ $181;
    $183 = $131 ^ $92;
    $184 = $170 & $183;
    $185 = $184 ^ $92;
    $186 = ((($1)) + 16 | 0);
    $187 = HEAP32[$186 >> 2] | 0;
    $188 = (_llvm_bswap_i32(($187 | 0)) | 0);
    $189 = (($53) + 961987163) | 0;
    $190 = (($189) + ($188)) | 0;
    $191 = (($190) + ($185)) | 0;
    $192 = (($191) + ($182)) | 0;
    $193 = $171 >>> 2;
    $194 = $171 << 30;
    $195 = $193 | $194;
    $196 = $171 >>> 13;
    $197 = $171 << 19;
    $198 = $196 | $197;
    $199 = $195 ^ $198;
    $200 = $171 >>> 22;
    $201 = $171 << 10;
    $202 = $200 | $201;
    $203 = $199 ^ $202;
    $204 = $171 & $132;
    $205 = $171 | $132;
    $206 = $205 & $93;
    $207 = $206 | $204;
    $208 = (($203) + ($207)) | 0;
    $209 = (($192) + ($54)) | 0;
    $210 = (($208) + ($192)) | 0;
    $211 = $209 >>> 6;
    $212 = $209 << 26;
    $213 = $211 | $212;
    $214 = $209 >>> 11;
    $215 = $209 << 21;
    $216 = $214 | $215;
    $217 = $213 ^ $216;
    $218 = $209 >>> 25;
    $219 = $209 << 7;
    $220 = $218 | $219;
    $221 = $217 ^ $220;
    $222 = $170 ^ $131;
    $223 = $209 & $222;
    $224 = $223 ^ $131;
    $225 = ((($1)) + 20 | 0);
    $226 = HEAP32[$225 >> 2] | 0;
    $227 = (_llvm_bswap_i32(($226 | 0)) | 0);
    $228 = (($227) + 1508970993) | 0;
    $229 = (($228) + ($92)) | 0;
    $230 = (($229) + ($224)) | 0;
    $231 = (($230) + ($221)) | 0;
    $232 = $210 >>> 2;
    $233 = $210 << 30;
    $234 = $232 | $233;
    $235 = $210 >>> 13;
    $236 = $210 << 19;
    $237 = $235 | $236;
    $238 = $234 ^ $237;
    $239 = $210 >>> 22;
    $240 = $210 << 10;
    $241 = $239 | $240;
    $242 = $238 ^ $241;
    $243 = $210 & $171;
    $244 = $210 | $171;
    $245 = $244 & $132;
    $246 = $245 | $243;
    $247 = (($242) + ($246)) | 0;
    $248 = (($231) + ($93)) | 0;
    $249 = (($247) + ($231)) | 0;
    $250 = $248 >>> 6;
    $251 = $248 << 26;
    $252 = $250 | $251;
    $253 = $248 >>> 11;
    $254 = $248 << 21;
    $255 = $253 | $254;
    $256 = $252 ^ $255;
    $257 = $248 >>> 25;
    $258 = $248 << 7;
    $259 = $257 | $258;
    $260 = $256 ^ $259;
    $261 = $209 ^ $170;
    $262 = $248 & $261;
    $263 = $262 ^ $170;
    $264 = ((($1)) + 24 | 0);
    $265 = HEAP32[$264 >> 2] | 0;
    $266 = (_llvm_bswap_i32(($265 | 0)) | 0);
    $267 = (($266) + -1841331548) | 0;
    $268 = (($267) + ($131)) | 0;
    $269 = (($268) + ($263)) | 0;
    $270 = (($269) + ($260)) | 0;
    $271 = $249 >>> 2;
    $272 = $249 << 30;
    $273 = $271 | $272;
    $274 = $249 >>> 13;
    $275 = $249 << 19;
    $276 = $274 | $275;
    $277 = $273 ^ $276;
    $278 = $249 >>> 22;
    $279 = $249 << 10;
    $280 = $278 | $279;
    $281 = $277 ^ $280;
    $282 = $249 & $210;
    $283 = $249 | $210;
    $284 = $283 & $171;
    $285 = $284 | $282;
    $286 = (($281) + ($285)) | 0;
    $287 = (($270) + ($132)) | 0;
    $288 = (($286) + ($270)) | 0;
    $289 = $287 >>> 6;
    $290 = $287 << 26;
    $291 = $289 | $290;
    $292 = $287 >>> 11;
    $293 = $287 << 21;
    $294 = $292 | $293;
    $295 = $291 ^ $294;
    $296 = $287 >>> 25;
    $297 = $287 << 7;
    $298 = $296 | $297;
    $299 = $295 ^ $298;
    $300 = $248 ^ $209;
    $301 = $287 & $300;
    $302 = $301 ^ $209;
    $303 = ((($1)) + 28 | 0);
    $304 = HEAP32[$303 >> 2] | 0;
    $305 = (_llvm_bswap_i32(($304 | 0)) | 0);
    $306 = (($305) + -1424204075) | 0;
    $307 = (($306) + ($170)) | 0;
    $308 = (($307) + ($302)) | 0;
    $309 = (($308) + ($299)) | 0;
    $310 = $288 >>> 2;
    $311 = $288 << 30;
    $312 = $310 | $311;
    $313 = $288 >>> 13;
    $314 = $288 << 19;
    $315 = $313 | $314;
    $316 = $312 ^ $315;
    $317 = $288 >>> 22;
    $318 = $288 << 10;
    $319 = $317 | $318;
    $320 = $316 ^ $319;
    $321 = $288 & $249;
    $322 = $288 | $249;
    $323 = $322 & $210;
    $324 = $323 | $321;
    $325 = (($320) + ($324)) | 0;
    $326 = (($309) + ($171)) | 0;
    $327 = (($325) + ($309)) | 0;
    $328 = $326 >>> 6;
    $329 = $326 << 26;
    $330 = $328 | $329;
    $331 = $326 >>> 11;
    $332 = $326 << 21;
    $333 = $331 | $332;
    $334 = $330 ^ $333;
    $335 = $326 >>> 25;
    $336 = $326 << 7;
    $337 = $335 | $336;
    $338 = $334 ^ $337;
    $339 = $287 ^ $248;
    $340 = $326 & $339;
    $341 = $340 ^ $248;
    $342 = ((($1)) + 32 | 0);
    $343 = HEAP32[$342 >> 2] | 0;
    $344 = (_llvm_bswap_i32(($343 | 0)) | 0);
    $345 = (($344) + -670586216) | 0;
    $346 = (($345) + ($209)) | 0;
    $347 = (($346) + ($341)) | 0;
    $348 = (($347) + ($338)) | 0;
    $349 = $327 >>> 2;
    $350 = $327 << 30;
    $351 = $349 | $350;
    $352 = $327 >>> 13;
    $353 = $327 << 19;
    $354 = $352 | $353;
    $355 = $351 ^ $354;
    $356 = $327 >>> 22;
    $357 = $327 << 10;
    $358 = $356 | $357;
    $359 = $355 ^ $358;
    $360 = $327 & $288;
    $361 = $327 | $288;
    $362 = $361 & $249;
    $363 = $362 | $360;
    $364 = (($359) + ($363)) | 0;
    $365 = (($348) + ($210)) | 0;
    $366 = (($364) + ($348)) | 0;
    $367 = $365 >>> 6;
    $368 = $365 << 26;
    $369 = $367 | $368;
    $370 = $365 >>> 11;
    $371 = $365 << 21;
    $372 = $370 | $371;
    $373 = $369 ^ $372;
    $374 = $365 >>> 25;
    $375 = $365 << 7;
    $376 = $374 | $375;
    $377 = $373 ^ $376;
    $378 = $326 ^ $287;
    $379 = $365 & $378;
    $380 = $379 ^ $287;
    $381 = ((($1)) + 36 | 0);
    $382 = HEAP32[$381 >> 2] | 0;
    $383 = (_llvm_bswap_i32(($382 | 0)) | 0);
    $384 = (($383) + 310598401) | 0;
    $385 = (($384) + ($248)) | 0;
    $386 = (($385) + ($380)) | 0;
    $387 = (($386) + ($377)) | 0;
    $388 = $366 >>> 2;
    $389 = $366 << 30;
    $390 = $388 | $389;
    $391 = $366 >>> 13;
    $392 = $366 << 19;
    $393 = $391 | $392;
    $394 = $390 ^ $393;
    $395 = $366 >>> 22;
    $396 = $366 << 10;
    $397 = $395 | $396;
    $398 = $394 ^ $397;
    $399 = $366 & $327;
    $400 = $366 | $327;
    $401 = $400 & $288;
    $402 = $401 | $399;
    $403 = (($398) + ($402)) | 0;
    $404 = (($387) + ($249)) | 0;
    $405 = (($403) + ($387)) | 0;
    $406 = $404 >>> 6;
    $407 = $404 << 26;
    $408 = $406 | $407;
    $409 = $404 >>> 11;
    $410 = $404 << 21;
    $411 = $409 | $410;
    $412 = $408 ^ $411;
    $413 = $404 >>> 25;
    $414 = $404 << 7;
    $415 = $413 | $414;
    $416 = $412 ^ $415;
    $417 = $365 ^ $326;
    $418 = $404 & $417;
    $419 = $418 ^ $326;
    $420 = ((($1)) + 40 | 0);
    $421 = HEAP32[$420 >> 2] | 0;
    $422 = (_llvm_bswap_i32(($421 | 0)) | 0);
    $423 = (($422) + 607225278) | 0;
    $424 = (($423) + ($287)) | 0;
    $425 = (($424) + ($419)) | 0;
    $426 = (($425) + ($416)) | 0;
    $427 = $405 >>> 2;
    $428 = $405 << 30;
    $429 = $427 | $428;
    $430 = $405 >>> 13;
    $431 = $405 << 19;
    $432 = $430 | $431;
    $433 = $429 ^ $432;
    $434 = $405 >>> 22;
    $435 = $405 << 10;
    $436 = $434 | $435;
    $437 = $433 ^ $436;
    $438 = $405 & $366;
    $439 = $405 | $366;
    $440 = $439 & $327;
    $441 = $440 | $438;
    $442 = (($437) + ($441)) | 0;
    $443 = (($426) + ($288)) | 0;
    $444 = (($442) + ($426)) | 0;
    $445 = $443 >>> 6;
    $446 = $443 << 26;
    $447 = $445 | $446;
    $448 = $443 >>> 11;
    $449 = $443 << 21;
    $450 = $448 | $449;
    $451 = $447 ^ $450;
    $452 = $443 >>> 25;
    $453 = $443 << 7;
    $454 = $452 | $453;
    $455 = $451 ^ $454;
    $456 = $404 ^ $365;
    $457 = $443 & $456;
    $458 = $457 ^ $365;
    $459 = ((($1)) + 44 | 0);
    $460 = HEAP32[$459 >> 2] | 0;
    $461 = (_llvm_bswap_i32(($460 | 0)) | 0);
    $462 = (($461) + 1426881987) | 0;
    $463 = (($462) + ($326)) | 0;
    $464 = (($463) + ($458)) | 0;
    $465 = (($464) + ($455)) | 0;
    $466 = $444 >>> 2;
    $467 = $444 << 30;
    $468 = $466 | $467;
    $469 = $444 >>> 13;
    $470 = $444 << 19;
    $471 = $469 | $470;
    $472 = $468 ^ $471;
    $473 = $444 >>> 22;
    $474 = $444 << 10;
    $475 = $473 | $474;
    $476 = $472 ^ $475;
    $477 = $444 & $405;
    $478 = $444 | $405;
    $479 = $478 & $366;
    $480 = $479 | $477;
    $481 = (($476) + ($480)) | 0;
    $482 = (($465) + ($327)) | 0;
    $483 = (($481) + ($465)) | 0;
    $484 = $482 >>> 6;
    $485 = $482 << 26;
    $486 = $484 | $485;
    $487 = $482 >>> 11;
    $488 = $482 << 21;
    $489 = $487 | $488;
    $490 = $486 ^ $489;
    $491 = $482 >>> 25;
    $492 = $482 << 7;
    $493 = $491 | $492;
    $494 = $490 ^ $493;
    $495 = $443 ^ $404;
    $496 = $482 & $495;
    $497 = $496 ^ $404;
    $498 = ((($1)) + 48 | 0);
    $499 = HEAP32[$498 >> 2] | 0;
    $500 = (_llvm_bswap_i32(($499 | 0)) | 0);
    $501 = (($500) + 1925078388) | 0;
    $502 = (($501) + ($365)) | 0;
    $503 = (($502) + ($497)) | 0;
    $504 = (($503) + ($494)) | 0;
    $505 = $483 >>> 2;
    $506 = $483 << 30;
    $507 = $505 | $506;
    $508 = $483 >>> 13;
    $509 = $483 << 19;
    $510 = $508 | $509;
    $511 = $507 ^ $510;
    $512 = $483 >>> 22;
    $513 = $483 << 10;
    $514 = $512 | $513;
    $515 = $511 ^ $514;
    $516 = $483 & $444;
    $517 = $483 | $444;
    $518 = $517 & $405;
    $519 = $518 | $516;
    $520 = (($515) + ($519)) | 0;
    $521 = (($504) + ($366)) | 0;
    $522 = (($520) + ($504)) | 0;
    $523 = $521 >>> 6;
    $524 = $521 << 26;
    $525 = $523 | $524;
    $526 = $521 >>> 11;
    $527 = $521 << 21;
    $528 = $526 | $527;
    $529 = $525 ^ $528;
    $530 = $521 >>> 25;
    $531 = $521 << 7;
    $532 = $530 | $531;
    $533 = $529 ^ $532;
    $534 = $482 ^ $443;
    $535 = $521 & $534;
    $536 = $535 ^ $443;
    $537 = ((($1)) + 52 | 0);
    $538 = HEAP32[$537 >> 2] | 0;
    $539 = (_llvm_bswap_i32(($538 | 0)) | 0);
    $540 = (($539) + -2132889090) | 0;
    $541 = (($540) + ($404)) | 0;
    $542 = (($541) + ($536)) | 0;
    $543 = (($542) + ($533)) | 0;
    $544 = $522 >>> 2;
    $545 = $522 << 30;
    $546 = $544 | $545;
    $547 = $522 >>> 13;
    $548 = $522 << 19;
    $549 = $547 | $548;
    $550 = $546 ^ $549;
    $551 = $522 >>> 22;
    $552 = $522 << 10;
    $553 = $551 | $552;
    $554 = $550 ^ $553;
    $555 = $522 & $483;
    $556 = $522 | $483;
    $557 = $556 & $444;
    $558 = $557 | $555;
    $559 = (($554) + ($558)) | 0;
    $560 = (($543) + ($405)) | 0;
    $561 = (($559) + ($543)) | 0;
    $562 = $560 >>> 6;
    $563 = $560 << 26;
    $564 = $562 | $563;
    $565 = $560 >>> 11;
    $566 = $560 << 21;
    $567 = $565 | $566;
    $568 = $564 ^ $567;
    $569 = $560 >>> 25;
    $570 = $560 << 7;
    $571 = $569 | $570;
    $572 = $568 ^ $571;
    $573 = $521 ^ $482;
    $574 = $560 & $573;
    $575 = $574 ^ $482;
    $576 = ((($1)) + 56 | 0);
    $577 = HEAP32[$576 >> 2] | 0;
    $578 = (_llvm_bswap_i32(($577 | 0)) | 0);
    $579 = (($578) + -1680079193) | 0;
    $580 = (($579) + ($443)) | 0;
    $581 = (($580) + ($575)) | 0;
    $582 = (($581) + ($572)) | 0;
    $583 = $561 >>> 2;
    $584 = $561 << 30;
    $585 = $583 | $584;
    $586 = $561 >>> 13;
    $587 = $561 << 19;
    $588 = $586 | $587;
    $589 = $585 ^ $588;
    $590 = $561 >>> 22;
    $591 = $561 << 10;
    $592 = $590 | $591;
    $593 = $589 ^ $592;
    $594 = $561 & $522;
    $595 = $561 | $522;
    $596 = $595 & $483;
    $597 = $596 | $594;
    $598 = (($593) + ($597)) | 0;
    $599 = (($582) + ($444)) | 0;
    $600 = (($598) + ($582)) | 0;
    $601 = $599 >>> 6;
    $602 = $599 << 26;
    $603 = $601 | $602;
    $604 = $599 >>> 11;
    $605 = $599 << 21;
    $606 = $604 | $605;
    $607 = $603 ^ $606;
    $608 = $599 >>> 25;
    $609 = $599 << 7;
    $610 = $608 | $609;
    $611 = $607 ^ $610;
    $612 = $560 ^ $521;
    $613 = $599 & $612;
    $614 = $613 ^ $521;
    $615 = ((($1)) + 60 | 0);
    $616 = HEAP32[$615 >> 2] | 0;
    $617 = (_llvm_bswap_i32(($616 | 0)) | 0);
    $618 = (($617) + -1046744716) | 0;
    $619 = (($618) + ($482)) | 0;
    $620 = (($619) + ($614)) | 0;
    $621 = (($620) + ($611)) | 0;
    $622 = $600 >>> 2;
    $623 = $600 << 30;
    $624 = $622 | $623;
    $625 = $600 >>> 13;
    $626 = $600 << 19;
    $627 = $625 | $626;
    $628 = $624 ^ $627;
    $629 = $600 >>> 22;
    $630 = $600 << 10;
    $631 = $629 | $630;
    $632 = $628 ^ $631;
    $633 = $600 & $561;
    $634 = $600 | $561;
    $635 = $634 & $522;
    $636 = $635 | $633;
    $637 = (($632) + ($636)) | 0;
    $638 = (($621) + ($483)) | 0;
    $639 = (($637) + ($621)) | 0;
    $640 = $638 >>> 6;
    $641 = $638 << 26;
    $642 = $640 | $641;
    $643 = $638 >>> 11;
    $644 = $638 << 21;
    $645 = $643 | $644;
    $646 = $642 ^ $645;
    $647 = $638 >>> 25;
    $648 = $638 << 7;
    $649 = $647 | $648;
    $650 = $646 ^ $649;
    $651 = $599 ^ $560;
    $652 = $638 & $651;
    $653 = $652 ^ $560;
    $654 = $578 >>> 17;
    $655 = $578 << 15;
    $656 = $654 | $655;
    $657 = $578 >>> 19;
    $658 = $578 << 13;
    $659 = $657 | $658;
    $660 = $578 >>> 10;
    $661 = $659 ^ $660;
    $662 = $661 ^ $656;
    $663 = $71 >>> 7;
    $664 = $71 << 25;
    $665 = $663 | $664;
    $666 = $71 >>> 18;
    $667 = $71 << 14;
    $668 = $666 | $667;
    $669 = $71 >>> 3;
    $670 = $668 ^ $669;
    $671 = $670 ^ $665;
    $672 = (($671) + ($32)) | 0;
    $673 = (($672) + ($383)) | 0;
    $674 = (($673) + ($662)) | 0;
    $675 = (($674) + -459576895) | 0;
    $676 = (($675) + ($521)) | 0;
    $677 = (($676) + ($653)) | 0;
    $678 = (($677) + ($650)) | 0;
    $679 = $639 >>> 2;
    $680 = $639 << 30;
    $681 = $679 | $680;
    $682 = $639 >>> 13;
    $683 = $639 << 19;
    $684 = $682 | $683;
    $685 = $681 ^ $684;
    $686 = $639 >>> 22;
    $687 = $639 << 10;
    $688 = $686 | $687;
    $689 = $685 ^ $688;
    $690 = $639 & $600;
    $691 = $639 | $600;
    $692 = $691 & $561;
    $693 = $692 | $690;
    $694 = (($689) + ($693)) | 0;
    $695 = (($678) + ($522)) | 0;
    $696 = (($694) + ($678)) | 0;
    $697 = $695 >>> 6;
    $698 = $695 << 26;
    $699 = $697 | $698;
    $700 = $695 >>> 11;
    $701 = $695 << 21;
    $702 = $700 | $701;
    $703 = $699 ^ $702;
    $704 = $695 >>> 25;
    $705 = $695 << 7;
    $706 = $704 | $705;
    $707 = $703 ^ $706;
    $708 = $638 ^ $599;
    $709 = $695 & $708;
    $710 = $709 ^ $599;
    $711 = $617 >>> 17;
    $712 = $617 << 15;
    $713 = $711 | $712;
    $714 = $617 >>> 19;
    $715 = $617 << 13;
    $716 = $714 | $715;
    $717 = $617 >>> 10;
    $718 = $716 ^ $717;
    $719 = $718 ^ $713;
    $720 = $110 >>> 7;
    $721 = $110 << 25;
    $722 = $720 | $721;
    $723 = $110 >>> 18;
    $724 = $110 << 14;
    $725 = $723 | $724;
    $726 = $110 >>> 3;
    $727 = $725 ^ $726;
    $728 = $727 ^ $722;
    $729 = (($728) + ($71)) | 0;
    $730 = (($729) + ($422)) | 0;
    $731 = (($730) + ($719)) | 0;
    $732 = (($731) + -272742522) | 0;
    $733 = (($732) + ($560)) | 0;
    $734 = (($733) + ($710)) | 0;
    $735 = (($734) + ($707)) | 0;
    $736 = $696 >>> 2;
    $737 = $696 << 30;
    $738 = $736 | $737;
    $739 = $696 >>> 13;
    $740 = $696 << 19;
    $741 = $739 | $740;
    $742 = $738 ^ $741;
    $743 = $696 >>> 22;
    $744 = $696 << 10;
    $745 = $743 | $744;
    $746 = $742 ^ $745;
    $747 = $696 & $639;
    $748 = $696 | $639;
    $749 = $748 & $600;
    $750 = $749 | $747;
    $751 = (($746) + ($750)) | 0;
    $752 = (($735) + ($561)) | 0;
    $753 = (($751) + ($735)) | 0;
    $754 = $752 >>> 6;
    $755 = $752 << 26;
    $756 = $754 | $755;
    $757 = $752 >>> 11;
    $758 = $752 << 21;
    $759 = $757 | $758;
    $760 = $756 ^ $759;
    $761 = $752 >>> 25;
    $762 = $752 << 7;
    $763 = $761 | $762;
    $764 = $760 ^ $763;
    $765 = $695 ^ $638;
    $766 = $752 & $765;
    $767 = $766 ^ $638;
    $768 = $674 >>> 17;
    $769 = $674 << 15;
    $770 = $768 | $769;
    $771 = $674 >>> 19;
    $772 = $674 << 13;
    $773 = $771 | $772;
    $774 = $674 >>> 10;
    $775 = $773 ^ $774;
    $776 = $775 ^ $770;
    $777 = $149 >>> 7;
    $778 = $149 << 25;
    $779 = $777 | $778;
    $780 = $149 >>> 18;
    $781 = $149 << 14;
    $782 = $780 | $781;
    $783 = $149 >>> 3;
    $784 = $782 ^ $783;
    $785 = $784 ^ $779;
    $786 = (($785) + ($110)) | 0;
    $787 = (($786) + ($461)) | 0;
    $788 = (($787) + ($776)) | 0;
    $789 = (($788) + 264347078) | 0;
    $790 = (($789) + ($599)) | 0;
    $791 = (($790) + ($767)) | 0;
    $792 = (($791) + ($764)) | 0;
    $793 = $753 >>> 2;
    $794 = $753 << 30;
    $795 = $793 | $794;
    $796 = $753 >>> 13;
    $797 = $753 << 19;
    $798 = $796 | $797;
    $799 = $795 ^ $798;
    $800 = $753 >>> 22;
    $801 = $753 << 10;
    $802 = $800 | $801;
    $803 = $799 ^ $802;
    $804 = $753 & $696;
    $805 = $753 | $696;
    $806 = $805 & $639;
    $807 = $806 | $804;
    $808 = (($803) + ($807)) | 0;
    $809 = (($792) + ($600)) | 0;
    $810 = (($808) + ($792)) | 0;
    $811 = $809 >>> 6;
    $812 = $809 << 26;
    $813 = $811 | $812;
    $814 = $809 >>> 11;
    $815 = $809 << 21;
    $816 = $814 | $815;
    $817 = $813 ^ $816;
    $818 = $809 >>> 25;
    $819 = $809 << 7;
    $820 = $818 | $819;
    $821 = $817 ^ $820;
    $822 = $752 ^ $695;
    $823 = $809 & $822;
    $824 = $823 ^ $695;
    $825 = $731 >>> 17;
    $826 = $731 << 15;
    $827 = $825 | $826;
    $828 = $731 >>> 19;
    $829 = $731 << 13;
    $830 = $828 | $829;
    $831 = $731 >>> 10;
    $832 = $830 ^ $831;
    $833 = $832 ^ $827;
    $834 = $188 >>> 7;
    $835 = $188 << 25;
    $836 = $834 | $835;
    $837 = $188 >>> 18;
    $838 = $188 << 14;
    $839 = $837 | $838;
    $840 = $188 >>> 3;
    $841 = $839 ^ $840;
    $842 = $841 ^ $836;
    $843 = (($842) + ($149)) | 0;
    $844 = (($843) + ($500)) | 0;
    $845 = (($844) + ($833)) | 0;
    $846 = (($845) + 604807628) | 0;
    $847 = (($846) + ($638)) | 0;
    $848 = (($847) + ($824)) | 0;
    $849 = (($848) + ($821)) | 0;
    $850 = $810 >>> 2;
    $851 = $810 << 30;
    $852 = $850 | $851;
    $853 = $810 >>> 13;
    $854 = $810 << 19;
    $855 = $853 | $854;
    $856 = $852 ^ $855;
    $857 = $810 >>> 22;
    $858 = $810 << 10;
    $859 = $857 | $858;
    $860 = $856 ^ $859;
    $861 = $810 & $753;
    $862 = $810 | $753;
    $863 = $862 & $696;
    $864 = $863 | $861;
    $865 = (($860) + ($864)) | 0;
    $866 = (($849) + ($639)) | 0;
    $867 = (($865) + ($849)) | 0;
    $868 = $866 >>> 6;
    $869 = $866 << 26;
    $870 = $868 | $869;
    $871 = $866 >>> 11;
    $872 = $866 << 21;
    $873 = $871 | $872;
    $874 = $870 ^ $873;
    $875 = $866 >>> 25;
    $876 = $866 << 7;
    $877 = $875 | $876;
    $878 = $874 ^ $877;
    $879 = $809 ^ $752;
    $880 = $866 & $879;
    $881 = $880 ^ $752;
    $882 = $788 >>> 17;
    $883 = $788 << 15;
    $884 = $882 | $883;
    $885 = $788 >>> 19;
    $886 = $788 << 13;
    $887 = $885 | $886;
    $888 = $788 >>> 10;
    $889 = $887 ^ $888;
    $890 = $889 ^ $884;
    $891 = $227 >>> 7;
    $892 = $227 << 25;
    $893 = $891 | $892;
    $894 = $227 >>> 18;
    $895 = $227 << 14;
    $896 = $894 | $895;
    $897 = $227 >>> 3;
    $898 = $896 ^ $897;
    $899 = $898 ^ $893;
    $900 = (($899) + ($188)) | 0;
    $901 = (($900) + ($539)) | 0;
    $902 = (($901) + ($890)) | 0;
    $903 = (($902) + 770255983) | 0;
    $904 = (($903) + ($695)) | 0;
    $905 = (($904) + ($881)) | 0;
    $906 = (($905) + ($878)) | 0;
    $907 = $867 >>> 2;
    $908 = $867 << 30;
    $909 = $907 | $908;
    $910 = $867 >>> 13;
    $911 = $867 << 19;
    $912 = $910 | $911;
    $913 = $909 ^ $912;
    $914 = $867 >>> 22;
    $915 = $867 << 10;
    $916 = $914 | $915;
    $917 = $913 ^ $916;
    $918 = $867 & $810;
    $919 = $867 | $810;
    $920 = $919 & $753;
    $921 = $920 | $918;
    $922 = (($917) + ($921)) | 0;
    $923 = (($906) + ($696)) | 0;
    $924 = (($922) + ($906)) | 0;
    $925 = $923 >>> 6;
    $926 = $923 << 26;
    $927 = $925 | $926;
    $928 = $923 >>> 11;
    $929 = $923 << 21;
    $930 = $928 | $929;
    $931 = $927 ^ $930;
    $932 = $923 >>> 25;
    $933 = $923 << 7;
    $934 = $932 | $933;
    $935 = $931 ^ $934;
    $936 = $866 ^ $809;
    $937 = $923 & $936;
    $938 = $937 ^ $809;
    $939 = $845 >>> 17;
    $940 = $845 << 15;
    $941 = $939 | $940;
    $942 = $845 >>> 19;
    $943 = $845 << 13;
    $944 = $942 | $943;
    $945 = $845 >>> 10;
    $946 = $944 ^ $945;
    $947 = $946 ^ $941;
    $948 = $266 >>> 7;
    $949 = $266 << 25;
    $950 = $948 | $949;
    $951 = $266 >>> 18;
    $952 = $266 << 14;
    $953 = $951 | $952;
    $954 = $266 >>> 3;
    $955 = $953 ^ $954;
    $956 = $955 ^ $950;
    $957 = (($956) + ($227)) | 0;
    $958 = (($957) + ($578)) | 0;
    $959 = (($958) + ($947)) | 0;
    $960 = (($959) + 1249150122) | 0;
    $961 = (($960) + ($752)) | 0;
    $962 = (($961) + ($938)) | 0;
    $963 = (($962) + ($935)) | 0;
    $964 = $924 >>> 2;
    $965 = $924 << 30;
    $966 = $964 | $965;
    $967 = $924 >>> 13;
    $968 = $924 << 19;
    $969 = $967 | $968;
    $970 = $966 ^ $969;
    $971 = $924 >>> 22;
    $972 = $924 << 10;
    $973 = $971 | $972;
    $974 = $970 ^ $973;
    $975 = $924 & $867;
    $976 = $924 | $867;
    $977 = $976 & $810;
    $978 = $977 | $975;
    $979 = (($974) + ($978)) | 0;
    $980 = (($963) + ($753)) | 0;
    $981 = (($979) + ($963)) | 0;
    $982 = $980 >>> 6;
    $983 = $980 << 26;
    $984 = $982 | $983;
    $985 = $980 >>> 11;
    $986 = $980 << 21;
    $987 = $985 | $986;
    $988 = $984 ^ $987;
    $989 = $980 >>> 25;
    $990 = $980 << 7;
    $991 = $989 | $990;
    $992 = $988 ^ $991;
    $993 = $923 ^ $866;
    $994 = $980 & $993;
    $995 = $994 ^ $866;
    $996 = $902 >>> 17;
    $997 = $902 << 15;
    $998 = $996 | $997;
    $999 = $902 >>> 19;
    $1000 = $902 << 13;
    $1001 = $999 | $1000;
    $1002 = $902 >>> 10;
    $1003 = $1001 ^ $1002;
    $1004 = $1003 ^ $998;
    $1005 = $305 >>> 7;
    $1006 = $305 << 25;
    $1007 = $1005 | $1006;
    $1008 = $305 >>> 18;
    $1009 = $305 << 14;
    $1010 = $1008 | $1009;
    $1011 = $305 >>> 3;
    $1012 = $1010 ^ $1011;
    $1013 = $1012 ^ $1007;
    $1014 = (($1013) + ($266)) | 0;
    $1015 = (($1014) + ($617)) | 0;
    $1016 = (($1015) + ($1004)) | 0;
    $1017 = (($1016) + 1555081692) | 0;
    $1018 = (($1017) + ($809)) | 0;
    $1019 = (($1018) + ($995)) | 0;
    $1020 = (($1019) + ($992)) | 0;
    $1021 = $981 >>> 2;
    $1022 = $981 << 30;
    $1023 = $1021 | $1022;
    $1024 = $981 >>> 13;
    $1025 = $981 << 19;
    $1026 = $1024 | $1025;
    $1027 = $1023 ^ $1026;
    $1028 = $981 >>> 22;
    $1029 = $981 << 10;
    $1030 = $1028 | $1029;
    $1031 = $1027 ^ $1030;
    $1032 = $981 & $924;
    $1033 = $981 | $924;
    $1034 = $1033 & $867;
    $1035 = $1034 | $1032;
    $1036 = (($1031) + ($1035)) | 0;
    $1037 = (($1020) + ($810)) | 0;
    $1038 = (($1036) + ($1020)) | 0;
    $1039 = $1037 >>> 6;
    $1040 = $1037 << 26;
    $1041 = $1039 | $1040;
    $1042 = $1037 >>> 11;
    $1043 = $1037 << 21;
    $1044 = $1042 | $1043;
    $1045 = $1041 ^ $1044;
    $1046 = $1037 >>> 25;
    $1047 = $1037 << 7;
    $1048 = $1046 | $1047;
    $1049 = $1045 ^ $1048;
    $1050 = $980 ^ $923;
    $1051 = $1037 & $1050;
    $1052 = $1051 ^ $923;
    $1053 = $959 >>> 17;
    $1054 = $959 << 15;
    $1055 = $1053 | $1054;
    $1056 = $959 >>> 19;
    $1057 = $959 << 13;
    $1058 = $1056 | $1057;
    $1059 = $959 >>> 10;
    $1060 = $1058 ^ $1059;
    $1061 = $1060 ^ $1055;
    $1062 = $344 >>> 7;
    $1063 = $344 << 25;
    $1064 = $1062 | $1063;
    $1065 = $344 >>> 18;
    $1066 = $344 << 14;
    $1067 = $1065 | $1066;
    $1068 = $344 >>> 3;
    $1069 = $1067 ^ $1068;
    $1070 = $1069 ^ $1064;
    $1071 = (($1070) + ($305)) | 0;
    $1072 = (($1071) + ($674)) | 0;
    $1073 = (($1072) + ($1061)) | 0;
    $1074 = (($1073) + 1996064986) | 0;
    $1075 = (($1074) + ($866)) | 0;
    $1076 = (($1075) + ($1052)) | 0;
    $1077 = (($1076) + ($1049)) | 0;
    $1078 = $1038 >>> 2;
    $1079 = $1038 << 30;
    $1080 = $1078 | $1079;
    $1081 = $1038 >>> 13;
    $1082 = $1038 << 19;
    $1083 = $1081 | $1082;
    $1084 = $1080 ^ $1083;
    $1085 = $1038 >>> 22;
    $1086 = $1038 << 10;
    $1087 = $1085 | $1086;
    $1088 = $1084 ^ $1087;
    $1089 = $1038 & $981;
    $1090 = $1038 | $981;
    $1091 = $1090 & $924;
    $1092 = $1091 | $1089;
    $1093 = (($1088) + ($1092)) | 0;
    $1094 = (($1077) + ($867)) | 0;
    $1095 = (($1093) + ($1077)) | 0;
    $1096 = $1094 >>> 6;
    $1097 = $1094 << 26;
    $1098 = $1096 | $1097;
    $1099 = $1094 >>> 11;
    $1100 = $1094 << 21;
    $1101 = $1099 | $1100;
    $1102 = $1098 ^ $1101;
    $1103 = $1094 >>> 25;
    $1104 = $1094 << 7;
    $1105 = $1103 | $1104;
    $1106 = $1102 ^ $1105;
    $1107 = $1037 ^ $980;
    $1108 = $1094 & $1107;
    $1109 = $1108 ^ $980;
    $1110 = $1016 >>> 17;
    $1111 = $1016 << 15;
    $1112 = $1110 | $1111;
    $1113 = $1016 >>> 19;
    $1114 = $1016 << 13;
    $1115 = $1113 | $1114;
    $1116 = $1016 >>> 10;
    $1117 = $1115 ^ $1116;
    $1118 = $1117 ^ $1112;
    $1119 = $383 >>> 7;
    $1120 = $383 << 25;
    $1121 = $1119 | $1120;
    $1122 = $383 >>> 18;
    $1123 = $383 << 14;
    $1124 = $1122 | $1123;
    $1125 = $383 >>> 3;
    $1126 = $1124 ^ $1125;
    $1127 = $1126 ^ $1121;
    $1128 = (($1127) + ($344)) | 0;
    $1129 = (($1128) + ($731)) | 0;
    $1130 = (($1129) + ($1118)) | 0;
    $1131 = (($1130) + -1740746414) | 0;
    $1132 = (($1131) + ($923)) | 0;
    $1133 = (($1132) + ($1109)) | 0;
    $1134 = (($1133) + ($1106)) | 0;
    $1135 = $1095 >>> 2;
    $1136 = $1095 << 30;
    $1137 = $1135 | $1136;
    $1138 = $1095 >>> 13;
    $1139 = $1095 << 19;
    $1140 = $1138 | $1139;
    $1141 = $1137 ^ $1140;
    $1142 = $1095 >>> 22;
    $1143 = $1095 << 10;
    $1144 = $1142 | $1143;
    $1145 = $1141 ^ $1144;
    $1146 = $1095 & $1038;
    $1147 = $1095 | $1038;
    $1148 = $1147 & $981;
    $1149 = $1148 | $1146;
    $1150 = (($1145) + ($1149)) | 0;
    $1151 = (($1134) + ($924)) | 0;
    $1152 = (($1150) + ($1134)) | 0;
    $1153 = $1151 >>> 6;
    $1154 = $1151 << 26;
    $1155 = $1153 | $1154;
    $1156 = $1151 >>> 11;
    $1157 = $1151 << 21;
    $1158 = $1156 | $1157;
    $1159 = $1155 ^ $1158;
    $1160 = $1151 >>> 25;
    $1161 = $1151 << 7;
    $1162 = $1160 | $1161;
    $1163 = $1159 ^ $1162;
    $1164 = $1094 ^ $1037;
    $1165 = $1151 & $1164;
    $1166 = $1165 ^ $1037;
    $1167 = $1073 >>> 17;
    $1168 = $1073 << 15;
    $1169 = $1167 | $1168;
    $1170 = $1073 >>> 19;
    $1171 = $1073 << 13;
    $1172 = $1170 | $1171;
    $1173 = $1073 >>> 10;
    $1174 = $1172 ^ $1173;
    $1175 = $1174 ^ $1169;
    $1176 = $422 >>> 7;
    $1177 = $422 << 25;
    $1178 = $1176 | $1177;
    $1179 = $422 >>> 18;
    $1180 = $422 << 14;
    $1181 = $1179 | $1180;
    $1182 = $422 >>> 3;
    $1183 = $1181 ^ $1182;
    $1184 = $1183 ^ $1178;
    $1185 = (($1184) + ($383)) | 0;
    $1186 = (($1185) + ($788)) | 0;
    $1187 = (($1186) + ($1175)) | 0;
    $1188 = (($1187) + -1473132947) | 0;
    $1189 = (($1188) + ($980)) | 0;
    $1190 = (($1189) + ($1166)) | 0;
    $1191 = (($1190) + ($1163)) | 0;
    $1192 = $1152 >>> 2;
    $1193 = $1152 << 30;
    $1194 = $1192 | $1193;
    $1195 = $1152 >>> 13;
    $1196 = $1152 << 19;
    $1197 = $1195 | $1196;
    $1198 = $1194 ^ $1197;
    $1199 = $1152 >>> 22;
    $1200 = $1152 << 10;
    $1201 = $1199 | $1200;
    $1202 = $1198 ^ $1201;
    $1203 = $1152 & $1095;
    $1204 = $1152 | $1095;
    $1205 = $1204 & $1038;
    $1206 = $1205 | $1203;
    $1207 = (($1202) + ($1206)) | 0;
    $1208 = (($1191) + ($981)) | 0;
    $1209 = (($1207) + ($1191)) | 0;
    $1210 = $1208 >>> 6;
    $1211 = $1208 << 26;
    $1212 = $1210 | $1211;
    $1213 = $1208 >>> 11;
    $1214 = $1208 << 21;
    $1215 = $1213 | $1214;
    $1216 = $1212 ^ $1215;
    $1217 = $1208 >>> 25;
    $1218 = $1208 << 7;
    $1219 = $1217 | $1218;
    $1220 = $1216 ^ $1219;
    $1221 = $1151 ^ $1094;
    $1222 = $1208 & $1221;
    $1223 = $1222 ^ $1094;
    $1224 = $1130 >>> 17;
    $1225 = $1130 << 15;
    $1226 = $1224 | $1225;
    $1227 = $1130 >>> 19;
    $1228 = $1130 << 13;
    $1229 = $1227 | $1228;
    $1230 = $1130 >>> 10;
    $1231 = $1229 ^ $1230;
    $1232 = $1231 ^ $1226;
    $1233 = $461 >>> 7;
    $1234 = $461 << 25;
    $1235 = $1233 | $1234;
    $1236 = $461 >>> 18;
    $1237 = $461 << 14;
    $1238 = $1236 | $1237;
    $1239 = $461 >>> 3;
    $1240 = $1238 ^ $1239;
    $1241 = $1240 ^ $1235;
    $1242 = (($1241) + ($422)) | 0;
    $1243 = (($1242) + ($845)) | 0;
    $1244 = (($1243) + ($1232)) | 0;
    $1245 = (($1244) + -1341970488) | 0;
    $1246 = (($1245) + ($1037)) | 0;
    $1247 = (($1246) + ($1223)) | 0;
    $1248 = (($1247) + ($1220)) | 0;
    $1249 = $1209 >>> 2;
    $1250 = $1209 << 30;
    $1251 = $1249 | $1250;
    $1252 = $1209 >>> 13;
    $1253 = $1209 << 19;
    $1254 = $1252 | $1253;
    $1255 = $1251 ^ $1254;
    $1256 = $1209 >>> 22;
    $1257 = $1209 << 10;
    $1258 = $1256 | $1257;
    $1259 = $1255 ^ $1258;
    $1260 = $1209 & $1152;
    $1261 = $1209 | $1152;
    $1262 = $1261 & $1095;
    $1263 = $1262 | $1260;
    $1264 = (($1259) + ($1263)) | 0;
    $1265 = (($1248) + ($1038)) | 0;
    $1266 = (($1264) + ($1248)) | 0;
    $1267 = $1265 >>> 6;
    $1268 = $1265 << 26;
    $1269 = $1267 | $1268;
    $1270 = $1265 >>> 11;
    $1271 = $1265 << 21;
    $1272 = $1270 | $1271;
    $1273 = $1269 ^ $1272;
    $1274 = $1265 >>> 25;
    $1275 = $1265 << 7;
    $1276 = $1274 | $1275;
    $1277 = $1273 ^ $1276;
    $1278 = $1208 ^ $1151;
    $1279 = $1265 & $1278;
    $1280 = $1279 ^ $1151;
    $1281 = $1187 >>> 17;
    $1282 = $1187 << 15;
    $1283 = $1281 | $1282;
    $1284 = $1187 >>> 19;
    $1285 = $1187 << 13;
    $1286 = $1284 | $1285;
    $1287 = $1187 >>> 10;
    $1288 = $1286 ^ $1287;
    $1289 = $1288 ^ $1283;
    $1290 = $500 >>> 7;
    $1291 = $500 << 25;
    $1292 = $1290 | $1291;
    $1293 = $500 >>> 18;
    $1294 = $500 << 14;
    $1295 = $1293 | $1294;
    $1296 = $500 >>> 3;
    $1297 = $1295 ^ $1296;
    $1298 = $1297 ^ $1292;
    $1299 = (($1298) + ($461)) | 0;
    $1300 = (($1299) + ($902)) | 0;
    $1301 = (($1300) + ($1289)) | 0;
    $1302 = (($1301) + -1084653625) | 0;
    $1303 = (($1302) + ($1094)) | 0;
    $1304 = (($1303) + ($1280)) | 0;
    $1305 = (($1304) + ($1277)) | 0;
    $1306 = $1266 >>> 2;
    $1307 = $1266 << 30;
    $1308 = $1306 | $1307;
    $1309 = $1266 >>> 13;
    $1310 = $1266 << 19;
    $1311 = $1309 | $1310;
    $1312 = $1308 ^ $1311;
    $1313 = $1266 >>> 22;
    $1314 = $1266 << 10;
    $1315 = $1313 | $1314;
    $1316 = $1312 ^ $1315;
    $1317 = $1266 & $1209;
    $1318 = $1266 | $1209;
    $1319 = $1318 & $1152;
    $1320 = $1319 | $1317;
    $1321 = (($1316) + ($1320)) | 0;
    $1322 = (($1305) + ($1095)) | 0;
    $1323 = (($1321) + ($1305)) | 0;
    $1324 = $1322 >>> 6;
    $1325 = $1322 << 26;
    $1326 = $1324 | $1325;
    $1327 = $1322 >>> 11;
    $1328 = $1322 << 21;
    $1329 = $1327 | $1328;
    $1330 = $1326 ^ $1329;
    $1331 = $1322 >>> 25;
    $1332 = $1322 << 7;
    $1333 = $1331 | $1332;
    $1334 = $1330 ^ $1333;
    $1335 = $1265 ^ $1208;
    $1336 = $1322 & $1335;
    $1337 = $1336 ^ $1208;
    $1338 = $1244 >>> 17;
    $1339 = $1244 << 15;
    $1340 = $1338 | $1339;
    $1341 = $1244 >>> 19;
    $1342 = $1244 << 13;
    $1343 = $1341 | $1342;
    $1344 = $1244 >>> 10;
    $1345 = $1343 ^ $1344;
    $1346 = $1345 ^ $1340;
    $1347 = $539 >>> 7;
    $1348 = $539 << 25;
    $1349 = $1347 | $1348;
    $1350 = $539 >>> 18;
    $1351 = $539 << 14;
    $1352 = $1350 | $1351;
    $1353 = $539 >>> 3;
    $1354 = $1352 ^ $1353;
    $1355 = $1354 ^ $1349;
    $1356 = (($1355) + ($500)) | 0;
    $1357 = (($1356) + ($959)) | 0;
    $1358 = (($1357) + ($1346)) | 0;
    $1359 = (($1358) + -958395405) | 0;
    $1360 = (($1359) + ($1151)) | 0;
    $1361 = (($1360) + ($1337)) | 0;
    $1362 = (($1361) + ($1334)) | 0;
    $1363 = $1323 >>> 2;
    $1364 = $1323 << 30;
    $1365 = $1363 | $1364;
    $1366 = $1323 >>> 13;
    $1367 = $1323 << 19;
    $1368 = $1366 | $1367;
    $1369 = $1365 ^ $1368;
    $1370 = $1323 >>> 22;
    $1371 = $1323 << 10;
    $1372 = $1370 | $1371;
    $1373 = $1369 ^ $1372;
    $1374 = $1323 & $1266;
    $1375 = $1323 | $1266;
    $1376 = $1375 & $1209;
    $1377 = $1376 | $1374;
    $1378 = (($1373) + ($1377)) | 0;
    $1379 = (($1362) + ($1152)) | 0;
    $1380 = (($1378) + ($1362)) | 0;
    $1381 = $1379 >>> 6;
    $1382 = $1379 << 26;
    $1383 = $1381 | $1382;
    $1384 = $1379 >>> 11;
    $1385 = $1379 << 21;
    $1386 = $1384 | $1385;
    $1387 = $1383 ^ $1386;
    $1388 = $1379 >>> 25;
    $1389 = $1379 << 7;
    $1390 = $1388 | $1389;
    $1391 = $1387 ^ $1390;
    $1392 = $1322 ^ $1265;
    $1393 = $1379 & $1392;
    $1394 = $1393 ^ $1265;
    $1395 = $1301 >>> 17;
    $1396 = $1301 << 15;
    $1397 = $1395 | $1396;
    $1398 = $1301 >>> 19;
    $1399 = $1301 << 13;
    $1400 = $1398 | $1399;
    $1401 = $1301 >>> 10;
    $1402 = $1400 ^ $1401;
    $1403 = $1402 ^ $1397;
    $1404 = $578 >>> 7;
    $1405 = $578 << 25;
    $1406 = $1404 | $1405;
    $1407 = $578 >>> 18;
    $1408 = $578 << 14;
    $1409 = $1407 | $1408;
    $1410 = $578 >>> 3;
    $1411 = $1409 ^ $1410;
    $1412 = $1411 ^ $1406;
    $1413 = (($1412) + ($539)) | 0;
    $1414 = (($1413) + ($1016)) | 0;
    $1415 = (($1414) + ($1403)) | 0;
    $1416 = (($1415) + -710438585) | 0;
    $1417 = (($1416) + ($1208)) | 0;
    $1418 = (($1417) + ($1394)) | 0;
    $1419 = (($1418) + ($1391)) | 0;
    $1420 = $1380 >>> 2;
    $1421 = $1380 << 30;
    $1422 = $1420 | $1421;
    $1423 = $1380 >>> 13;
    $1424 = $1380 << 19;
    $1425 = $1423 | $1424;
    $1426 = $1422 ^ $1425;
    $1427 = $1380 >>> 22;
    $1428 = $1380 << 10;
    $1429 = $1427 | $1428;
    $1430 = $1426 ^ $1429;
    $1431 = $1380 & $1323;
    $1432 = $1380 | $1323;
    $1433 = $1432 & $1266;
    $1434 = $1433 | $1431;
    $1435 = (($1430) + ($1434)) | 0;
    $1436 = (($1419) + ($1209)) | 0;
    $1437 = (($1435) + ($1419)) | 0;
    $1438 = $1436 >>> 6;
    $1439 = $1436 << 26;
    $1440 = $1438 | $1439;
    $1441 = $1436 >>> 11;
    $1442 = $1436 << 21;
    $1443 = $1441 | $1442;
    $1444 = $1440 ^ $1443;
    $1445 = $1436 >>> 25;
    $1446 = $1436 << 7;
    $1447 = $1445 | $1446;
    $1448 = $1444 ^ $1447;
    $1449 = $1379 ^ $1322;
    $1450 = $1436 & $1449;
    $1451 = $1450 ^ $1322;
    $1452 = $1358 >>> 17;
    $1453 = $1358 << 15;
    $1454 = $1452 | $1453;
    $1455 = $1358 >>> 19;
    $1456 = $1358 << 13;
    $1457 = $1455 | $1456;
    $1458 = $1358 >>> 10;
    $1459 = $1457 ^ $1458;
    $1460 = $1459 ^ $1454;
    $1461 = $617 >>> 7;
    $1462 = $617 << 25;
    $1463 = $1461 | $1462;
    $1464 = $617 >>> 18;
    $1465 = $617 << 14;
    $1466 = $1464 | $1465;
    $1467 = $617 >>> 3;
    $1468 = $1466 ^ $1467;
    $1469 = $1468 ^ $1463;
    $1470 = (($1469) + ($578)) | 0;
    $1471 = (($1470) + ($1073)) | 0;
    $1472 = (($1471) + ($1460)) | 0;
    $1473 = (($1472) + 113926993) | 0;
    $1474 = (($1473) + ($1265)) | 0;
    $1475 = (($1474) + ($1451)) | 0;
    $1476 = (($1475) + ($1448)) | 0;
    $1477 = $1437 >>> 2;
    $1478 = $1437 << 30;
    $1479 = $1477 | $1478;
    $1480 = $1437 >>> 13;
    $1481 = $1437 << 19;
    $1482 = $1480 | $1481;
    $1483 = $1479 ^ $1482;
    $1484 = $1437 >>> 22;
    $1485 = $1437 << 10;
    $1486 = $1484 | $1485;
    $1487 = $1483 ^ $1486;
    $1488 = $1437 & $1380;
    $1489 = $1437 | $1380;
    $1490 = $1489 & $1323;
    $1491 = $1490 | $1488;
    $1492 = (($1487) + ($1491)) | 0;
    $1493 = (($1476) + ($1266)) | 0;
    $1494 = (($1492) + ($1476)) | 0;
    $1495 = $1493 >>> 6;
    $1496 = $1493 << 26;
    $1497 = $1495 | $1496;
    $1498 = $1493 >>> 11;
    $1499 = $1493 << 21;
    $1500 = $1498 | $1499;
    $1501 = $1497 ^ $1500;
    $1502 = $1493 >>> 25;
    $1503 = $1493 << 7;
    $1504 = $1502 | $1503;
    $1505 = $1501 ^ $1504;
    $1506 = $1436 ^ $1379;
    $1507 = $1493 & $1506;
    $1508 = $1507 ^ $1379;
    $1509 = $1415 >>> 17;
    $1510 = $1415 << 15;
    $1511 = $1509 | $1510;
    $1512 = $1415 >>> 19;
    $1513 = $1415 << 13;
    $1514 = $1512 | $1513;
    $1515 = $1415 >>> 10;
    $1516 = $1514 ^ $1515;
    $1517 = $1516 ^ $1511;
    $1518 = $674 >>> 7;
    $1519 = $674 << 25;
    $1520 = $1518 | $1519;
    $1521 = $674 >>> 18;
    $1522 = $674 << 14;
    $1523 = $1521 | $1522;
    $1524 = $674 >>> 3;
    $1525 = $1523 ^ $1524;
    $1526 = $1525 ^ $1520;
    $1527 = (($1526) + ($617)) | 0;
    $1528 = (($1527) + ($1130)) | 0;
    $1529 = (($1528) + ($1517)) | 0;
    $1530 = (($1529) + 338241895) | 0;
    $1531 = (($1530) + ($1322)) | 0;
    $1532 = (($1531) + ($1508)) | 0;
    $1533 = (($1532) + ($1505)) | 0;
    $1534 = $1494 >>> 2;
    $1535 = $1494 << 30;
    $1536 = $1534 | $1535;
    $1537 = $1494 >>> 13;
    $1538 = $1494 << 19;
    $1539 = $1537 | $1538;
    $1540 = $1536 ^ $1539;
    $1541 = $1494 >>> 22;
    $1542 = $1494 << 10;
    $1543 = $1541 | $1542;
    $1544 = $1540 ^ $1543;
    $1545 = $1494 & $1437;
    $1546 = $1494 | $1437;
    $1547 = $1546 & $1380;
    $1548 = $1547 | $1545;
    $1549 = (($1544) + ($1548)) | 0;
    $1550 = (($1533) + ($1323)) | 0;
    $1551 = (($1549) + ($1533)) | 0;
    $1552 = $1550 >>> 6;
    $1553 = $1550 << 26;
    $1554 = $1552 | $1553;
    $1555 = $1550 >>> 11;
    $1556 = $1550 << 21;
    $1557 = $1555 | $1556;
    $1558 = $1554 ^ $1557;
    $1559 = $1550 >>> 25;
    $1560 = $1550 << 7;
    $1561 = $1559 | $1560;
    $1562 = $1558 ^ $1561;
    $1563 = $1493 ^ $1436;
    $1564 = $1550 & $1563;
    $1565 = $1564 ^ $1436;
    $1566 = $1472 >>> 17;
    $1567 = $1472 << 15;
    $1568 = $1566 | $1567;
    $1569 = $1472 >>> 19;
    $1570 = $1472 << 13;
    $1571 = $1569 | $1570;
    $1572 = $1472 >>> 10;
    $1573 = $1571 ^ $1572;
    $1574 = $1573 ^ $1568;
    $1575 = $731 >>> 7;
    $1576 = $731 << 25;
    $1577 = $1575 | $1576;
    $1578 = $731 >>> 18;
    $1579 = $731 << 14;
    $1580 = $1578 | $1579;
    $1581 = $731 >>> 3;
    $1582 = $1580 ^ $1581;
    $1583 = $1582 ^ $1577;
    $1584 = (($1583) + ($674)) | 0;
    $1585 = (($1584) + ($1187)) | 0;
    $1586 = (($1585) + ($1574)) | 0;
    $1587 = (($1586) + 666307205) | 0;
    $1588 = (($1587) + ($1379)) | 0;
    $1589 = (($1588) + ($1565)) | 0;
    $1590 = (($1589) + ($1562)) | 0;
    $1591 = $1551 >>> 2;
    $1592 = $1551 << 30;
    $1593 = $1591 | $1592;
    $1594 = $1551 >>> 13;
    $1595 = $1551 << 19;
    $1596 = $1594 | $1595;
    $1597 = $1593 ^ $1596;
    $1598 = $1551 >>> 22;
    $1599 = $1551 << 10;
    $1600 = $1598 | $1599;
    $1601 = $1597 ^ $1600;
    $1602 = $1551 & $1494;
    $1603 = $1551 | $1494;
    $1604 = $1603 & $1437;
    $1605 = $1604 | $1602;
    $1606 = (($1601) + ($1605)) | 0;
    $1607 = (($1590) + ($1380)) | 0;
    $1608 = (($1606) + ($1590)) | 0;
    $1609 = $1607 >>> 6;
    $1610 = $1607 << 26;
    $1611 = $1609 | $1610;
    $1612 = $1607 >>> 11;
    $1613 = $1607 << 21;
    $1614 = $1612 | $1613;
    $1615 = $1611 ^ $1614;
    $1616 = $1607 >>> 25;
    $1617 = $1607 << 7;
    $1618 = $1616 | $1617;
    $1619 = $1615 ^ $1618;
    $1620 = $1550 ^ $1493;
    $1621 = $1607 & $1620;
    $1622 = $1621 ^ $1493;
    $1623 = $1529 >>> 17;
    $1624 = $1529 << 15;
    $1625 = $1623 | $1624;
    $1626 = $1529 >>> 19;
    $1627 = $1529 << 13;
    $1628 = $1626 | $1627;
    $1629 = $1529 >>> 10;
    $1630 = $1628 ^ $1629;
    $1631 = $1630 ^ $1625;
    $1632 = $788 >>> 7;
    $1633 = $788 << 25;
    $1634 = $1632 | $1633;
    $1635 = $788 >>> 18;
    $1636 = $788 << 14;
    $1637 = $1635 | $1636;
    $1638 = $788 >>> 3;
    $1639 = $1637 ^ $1638;
    $1640 = $1639 ^ $1634;
    $1641 = (($1640) + ($731)) | 0;
    $1642 = (($1641) + ($1244)) | 0;
    $1643 = (($1642) + ($1631)) | 0;
    $1644 = (($1643) + 773529912) | 0;
    $1645 = (($1644) + ($1436)) | 0;
    $1646 = (($1645) + ($1622)) | 0;
    $1647 = (($1646) + ($1619)) | 0;
    $1648 = $1608 >>> 2;
    $1649 = $1608 << 30;
    $1650 = $1648 | $1649;
    $1651 = $1608 >>> 13;
    $1652 = $1608 << 19;
    $1653 = $1651 | $1652;
    $1654 = $1650 ^ $1653;
    $1655 = $1608 >>> 22;
    $1656 = $1608 << 10;
    $1657 = $1655 | $1656;
    $1658 = $1654 ^ $1657;
    $1659 = $1608 & $1551;
    $1660 = $1608 | $1551;
    $1661 = $1660 & $1494;
    $1662 = $1661 | $1659;
    $1663 = (($1658) + ($1662)) | 0;
    $1664 = (($1647) + ($1437)) | 0;
    $1665 = (($1663) + ($1647)) | 0;
    $1666 = $1664 >>> 6;
    $1667 = $1664 << 26;
    $1668 = $1666 | $1667;
    $1669 = $1664 >>> 11;
    $1670 = $1664 << 21;
    $1671 = $1669 | $1670;
    $1672 = $1668 ^ $1671;
    $1673 = $1664 >>> 25;
    $1674 = $1664 << 7;
    $1675 = $1673 | $1674;
    $1676 = $1672 ^ $1675;
    $1677 = $1607 ^ $1550;
    $1678 = $1664 & $1677;
    $1679 = $1678 ^ $1550;
    $1680 = $1586 >>> 17;
    $1681 = $1586 << 15;
    $1682 = $1680 | $1681;
    $1683 = $1586 >>> 19;
    $1684 = $1586 << 13;
    $1685 = $1683 | $1684;
    $1686 = $1586 >>> 10;
    $1687 = $1685 ^ $1686;
    $1688 = $1687 ^ $1682;
    $1689 = $845 >>> 7;
    $1690 = $845 << 25;
    $1691 = $1689 | $1690;
    $1692 = $845 >>> 18;
    $1693 = $845 << 14;
    $1694 = $1692 | $1693;
    $1695 = $845 >>> 3;
    $1696 = $1694 ^ $1695;
    $1697 = $1696 ^ $1691;
    $1698 = (($1697) + ($788)) | 0;
    $1699 = (($1698) + ($1301)) | 0;
    $1700 = (($1699) + ($1688)) | 0;
    $1701 = (($1700) + 1294757372) | 0;
    $1702 = (($1701) + ($1493)) | 0;
    $1703 = (($1702) + ($1679)) | 0;
    $1704 = (($1703) + ($1676)) | 0;
    $1705 = $1665 >>> 2;
    $1706 = $1665 << 30;
    $1707 = $1705 | $1706;
    $1708 = $1665 >>> 13;
    $1709 = $1665 << 19;
    $1710 = $1708 | $1709;
    $1711 = $1707 ^ $1710;
    $1712 = $1665 >>> 22;
    $1713 = $1665 << 10;
    $1714 = $1712 | $1713;
    $1715 = $1711 ^ $1714;
    $1716 = $1665 & $1608;
    $1717 = $1665 | $1608;
    $1718 = $1717 & $1551;
    $1719 = $1718 | $1716;
    $1720 = (($1715) + ($1719)) | 0;
    $1721 = (($1704) + ($1494)) | 0;
    $1722 = (($1720) + ($1704)) | 0;
    $1723 = $1721 >>> 6;
    $1724 = $1721 << 26;
    $1725 = $1723 | $1724;
    $1726 = $1721 >>> 11;
    $1727 = $1721 << 21;
    $1728 = $1726 | $1727;
    $1729 = $1725 ^ $1728;
    $1730 = $1721 >>> 25;
    $1731 = $1721 << 7;
    $1732 = $1730 | $1731;
    $1733 = $1729 ^ $1732;
    $1734 = $1664 ^ $1607;
    $1735 = $1721 & $1734;
    $1736 = $1735 ^ $1607;
    $1737 = $1643 >>> 17;
    $1738 = $1643 << 15;
    $1739 = $1737 | $1738;
    $1740 = $1643 >>> 19;
    $1741 = $1643 << 13;
    $1742 = $1740 | $1741;
    $1743 = $1643 >>> 10;
    $1744 = $1742 ^ $1743;
    $1745 = $1744 ^ $1739;
    $1746 = $902 >>> 7;
    $1747 = $902 << 25;
    $1748 = $1746 | $1747;
    $1749 = $902 >>> 18;
    $1750 = $902 << 14;
    $1751 = $1749 | $1750;
    $1752 = $902 >>> 3;
    $1753 = $1751 ^ $1752;
    $1754 = $1753 ^ $1748;
    $1755 = (($1754) + ($845)) | 0;
    $1756 = (($1755) + ($1358)) | 0;
    $1757 = (($1756) + ($1745)) | 0;
    $1758 = (($1757) + 1396182291) | 0;
    $1759 = (($1758) + ($1550)) | 0;
    $1760 = (($1759) + ($1736)) | 0;
    $1761 = (($1760) + ($1733)) | 0;
    $1762 = $1722 >>> 2;
    $1763 = $1722 << 30;
    $1764 = $1762 | $1763;
    $1765 = $1722 >>> 13;
    $1766 = $1722 << 19;
    $1767 = $1765 | $1766;
    $1768 = $1764 ^ $1767;
    $1769 = $1722 >>> 22;
    $1770 = $1722 << 10;
    $1771 = $1769 | $1770;
    $1772 = $1768 ^ $1771;
    $1773 = $1722 & $1665;
    $1774 = $1722 | $1665;
    $1775 = $1774 & $1608;
    $1776 = $1775 | $1773;
    $1777 = (($1772) + ($1776)) | 0;
    $1778 = (($1761) + ($1551)) | 0;
    $1779 = (($1777) + ($1761)) | 0;
    $1780 = $1778 >>> 6;
    $1781 = $1778 << 26;
    $1782 = $1780 | $1781;
    $1783 = $1778 >>> 11;
    $1784 = $1778 << 21;
    $1785 = $1783 | $1784;
    $1786 = $1782 ^ $1785;
    $1787 = $1778 >>> 25;
    $1788 = $1778 << 7;
    $1789 = $1787 | $1788;
    $1790 = $1786 ^ $1789;
    $1791 = $1721 ^ $1664;
    $1792 = $1778 & $1791;
    $1793 = $1792 ^ $1664;
    $1794 = $1700 >>> 17;
    $1795 = $1700 << 15;
    $1796 = $1794 | $1795;
    $1797 = $1700 >>> 19;
    $1798 = $1700 << 13;
    $1799 = $1797 | $1798;
    $1800 = $1700 >>> 10;
    $1801 = $1799 ^ $1800;
    $1802 = $1801 ^ $1796;
    $1803 = $959 >>> 7;
    $1804 = $959 << 25;
    $1805 = $1803 | $1804;
    $1806 = $959 >>> 18;
    $1807 = $959 << 14;
    $1808 = $1806 | $1807;
    $1809 = $959 >>> 3;
    $1810 = $1808 ^ $1809;
    $1811 = $1810 ^ $1805;
    $1812 = (($1811) + ($902)) | 0;
    $1813 = (($1812) + ($1415)) | 0;
    $1814 = (($1813) + ($1802)) | 0;
    $1815 = (($1814) + 1695183700) | 0;
    $1816 = (($1815) + ($1607)) | 0;
    $1817 = (($1816) + ($1793)) | 0;
    $1818 = (($1817) + ($1790)) | 0;
    $1819 = $1779 >>> 2;
    $1820 = $1779 << 30;
    $1821 = $1819 | $1820;
    $1822 = $1779 >>> 13;
    $1823 = $1779 << 19;
    $1824 = $1822 | $1823;
    $1825 = $1821 ^ $1824;
    $1826 = $1779 >>> 22;
    $1827 = $1779 << 10;
    $1828 = $1826 | $1827;
    $1829 = $1825 ^ $1828;
    $1830 = $1779 & $1722;
    $1831 = $1779 | $1722;
    $1832 = $1831 & $1665;
    $1833 = $1832 | $1830;
    $1834 = (($1829) + ($1833)) | 0;
    $1835 = (($1818) + ($1608)) | 0;
    $1836 = (($1834) + ($1818)) | 0;
    $1837 = $1835 >>> 6;
    $1838 = $1835 << 26;
    $1839 = $1837 | $1838;
    $1840 = $1835 >>> 11;
    $1841 = $1835 << 21;
    $1842 = $1840 | $1841;
    $1843 = $1839 ^ $1842;
    $1844 = $1835 >>> 25;
    $1845 = $1835 << 7;
    $1846 = $1844 | $1845;
    $1847 = $1843 ^ $1846;
    $1848 = $1778 ^ $1721;
    $1849 = $1835 & $1848;
    $1850 = $1849 ^ $1721;
    $1851 = $1757 >>> 17;
    $1852 = $1757 << 15;
    $1853 = $1851 | $1852;
    $1854 = $1757 >>> 19;
    $1855 = $1757 << 13;
    $1856 = $1854 | $1855;
    $1857 = $1757 >>> 10;
    $1858 = $1856 ^ $1857;
    $1859 = $1858 ^ $1853;
    $1860 = $1016 >>> 7;
    $1861 = $1016 << 25;
    $1862 = $1860 | $1861;
    $1863 = $1016 >>> 18;
    $1864 = $1016 << 14;
    $1865 = $1863 | $1864;
    $1866 = $1016 >>> 3;
    $1867 = $1865 ^ $1866;
    $1868 = $1867 ^ $1862;
    $1869 = (($1868) + ($959)) | 0;
    $1870 = (($1869) + ($1472)) | 0;
    $1871 = (($1870) + ($1859)) | 0;
    $1872 = (($1871) + 1986661051) | 0;
    $1873 = (($1872) + ($1664)) | 0;
    $1874 = (($1873) + ($1850)) | 0;
    $1875 = (($1874) + ($1847)) | 0;
    $1876 = $1836 >>> 2;
    $1877 = $1836 << 30;
    $1878 = $1876 | $1877;
    $1879 = $1836 >>> 13;
    $1880 = $1836 << 19;
    $1881 = $1879 | $1880;
    $1882 = $1878 ^ $1881;
    $1883 = $1836 >>> 22;
    $1884 = $1836 << 10;
    $1885 = $1883 | $1884;
    $1886 = $1882 ^ $1885;
    $1887 = $1836 & $1779;
    $1888 = $1836 | $1779;
    $1889 = $1888 & $1722;
    $1890 = $1889 | $1887;
    $1891 = (($1886) + ($1890)) | 0;
    $1892 = (($1875) + ($1665)) | 0;
    $1893 = (($1891) + ($1875)) | 0;
    $1894 = $1892 >>> 6;
    $1895 = $1892 << 26;
    $1896 = $1894 | $1895;
    $1897 = $1892 >>> 11;
    $1898 = $1892 << 21;
    $1899 = $1897 | $1898;
    $1900 = $1896 ^ $1899;
    $1901 = $1892 >>> 25;
    $1902 = $1892 << 7;
    $1903 = $1901 | $1902;
    $1904 = $1900 ^ $1903;
    $1905 = $1835 ^ $1778;
    $1906 = $1892 & $1905;
    $1907 = $1906 ^ $1778;
    $1908 = $1814 >>> 17;
    $1909 = $1814 << 15;
    $1910 = $1908 | $1909;
    $1911 = $1814 >>> 19;
    $1912 = $1814 << 13;
    $1913 = $1911 | $1912;
    $1914 = $1814 >>> 10;
    $1915 = $1913 ^ $1914;
    $1916 = $1915 ^ $1910;
    $1917 = $1073 >>> 7;
    $1918 = $1073 << 25;
    $1919 = $1917 | $1918;
    $1920 = $1073 >>> 18;
    $1921 = $1073 << 14;
    $1922 = $1920 | $1921;
    $1923 = $1073 >>> 3;
    $1924 = $1922 ^ $1923;
    $1925 = $1924 ^ $1919;
    $1926 = (($1925) + ($1016)) | 0;
    $1927 = (($1926) + ($1529)) | 0;
    $1928 = (($1927) + ($1916)) | 0;
    $1929 = (($1928) + -2117940946) | 0;
    $1930 = (($1929) + ($1721)) | 0;
    $1931 = (($1930) + ($1907)) | 0;
    $1932 = (($1931) + ($1904)) | 0;
    $1933 = $1893 >>> 2;
    $1934 = $1893 << 30;
    $1935 = $1933 | $1934;
    $1936 = $1893 >>> 13;
    $1937 = $1893 << 19;
    $1938 = $1936 | $1937;
    $1939 = $1935 ^ $1938;
    $1940 = $1893 >>> 22;
    $1941 = $1893 << 10;
    $1942 = $1940 | $1941;
    $1943 = $1939 ^ $1942;
    $1944 = $1893 & $1836;
    $1945 = $1893 | $1836;
    $1946 = $1945 & $1779;
    $1947 = $1946 | $1944;
    $1948 = (($1943) + ($1947)) | 0;
    $1949 = (($1932) + ($1722)) | 0;
    $1950 = (($1948) + ($1932)) | 0;
    $1951 = $1949 >>> 6;
    $1952 = $1949 << 26;
    $1953 = $1951 | $1952;
    $1954 = $1949 >>> 11;
    $1955 = $1949 << 21;
    $1956 = $1954 | $1955;
    $1957 = $1953 ^ $1956;
    $1958 = $1949 >>> 25;
    $1959 = $1949 << 7;
    $1960 = $1958 | $1959;
    $1961 = $1957 ^ $1960;
    $1962 = $1892 ^ $1835;
    $1963 = $1949 & $1962;
    $1964 = $1963 ^ $1835;
    $1965 = $1871 >>> 17;
    $1966 = $1871 << 15;
    $1967 = $1965 | $1966;
    $1968 = $1871 >>> 19;
    $1969 = $1871 << 13;
    $1970 = $1968 | $1969;
    $1971 = $1871 >>> 10;
    $1972 = $1970 ^ $1971;
    $1973 = $1972 ^ $1967;
    $1974 = $1130 >>> 7;
    $1975 = $1130 << 25;
    $1976 = $1974 | $1975;
    $1977 = $1130 >>> 18;
    $1978 = $1130 << 14;
    $1979 = $1977 | $1978;
    $1980 = $1130 >>> 3;
    $1981 = $1979 ^ $1980;
    $1982 = $1981 ^ $1976;
    $1983 = (($1982) + ($1073)) | 0;
    $1984 = (($1983) + ($1586)) | 0;
    $1985 = (($1984) + ($1973)) | 0;
    $1986 = (($1985) + -1838011259) | 0;
    $1987 = (($1986) + ($1778)) | 0;
    $1988 = (($1987) + ($1964)) | 0;
    $1989 = (($1988) + ($1961)) | 0;
    $1990 = $1950 >>> 2;
    $1991 = $1950 << 30;
    $1992 = $1990 | $1991;
    $1993 = $1950 >>> 13;
    $1994 = $1950 << 19;
    $1995 = $1993 | $1994;
    $1996 = $1992 ^ $1995;
    $1997 = $1950 >>> 22;
    $1998 = $1950 << 10;
    $1999 = $1997 | $1998;
    $2000 = $1996 ^ $1999;
    $2001 = $1950 & $1893;
    $2002 = $1950 | $1893;
    $2003 = $2002 & $1836;
    $2004 = $2003 | $2001;
    $2005 = (($2000) + ($2004)) | 0;
    $2006 = (($1989) + ($1779)) | 0;
    $2007 = (($2005) + ($1989)) | 0;
    $2008 = $2006 >>> 6;
    $2009 = $2006 << 26;
    $2010 = $2008 | $2009;
    $2011 = $2006 >>> 11;
    $2012 = $2006 << 21;
    $2013 = $2011 | $2012;
    $2014 = $2010 ^ $2013;
    $2015 = $2006 >>> 25;
    $2016 = $2006 << 7;
    $2017 = $2015 | $2016;
    $2018 = $2014 ^ $2017;
    $2019 = $1949 ^ $1892;
    $2020 = $2006 & $2019;
    $2021 = $2020 ^ $1892;
    $2022 = $1928 >>> 17;
    $2023 = $1928 << 15;
    $2024 = $2022 | $2023;
    $2025 = $1928 >>> 19;
    $2026 = $1928 << 13;
    $2027 = $2025 | $2026;
    $2028 = $1928 >>> 10;
    $2029 = $2027 ^ $2028;
    $2030 = $2029 ^ $2024;
    $2031 = $1187 >>> 7;
    $2032 = $1187 << 25;
    $2033 = $2031 | $2032;
    $2034 = $1187 >>> 18;
    $2035 = $1187 << 14;
    $2036 = $2034 | $2035;
    $2037 = $1187 >>> 3;
    $2038 = $2036 ^ $2037;
    $2039 = $2038 ^ $2033;
    $2040 = (($2039) + ($1130)) | 0;
    $2041 = (($2040) + ($1643)) | 0;
    $2042 = (($2041) + ($2030)) | 0;
    $2043 = (($2042) + -1564481375) | 0;
    $2044 = (($2043) + ($1835)) | 0;
    $2045 = (($2044) + ($2021)) | 0;
    $2046 = (($2045) + ($2018)) | 0;
    $2047 = $2007 >>> 2;
    $2048 = $2007 << 30;
    $2049 = $2047 | $2048;
    $2050 = $2007 >>> 13;
    $2051 = $2007 << 19;
    $2052 = $2050 | $2051;
    $2053 = $2049 ^ $2052;
    $2054 = $2007 >>> 22;
    $2055 = $2007 << 10;
    $2056 = $2054 | $2055;
    $2057 = $2053 ^ $2056;
    $2058 = $2007 & $1950;
    $2059 = $2007 | $1950;
    $2060 = $2059 & $1893;
    $2061 = $2060 | $2058;
    $2062 = (($2057) + ($2061)) | 0;
    $2063 = (($2046) + ($1836)) | 0;
    $2064 = (($2062) + ($2046)) | 0;
    $2065 = $2063 >>> 6;
    $2066 = $2063 << 26;
    $2067 = $2065 | $2066;
    $2068 = $2063 >>> 11;
    $2069 = $2063 << 21;
    $2070 = $2068 | $2069;
    $2071 = $2067 ^ $2070;
    $2072 = $2063 >>> 25;
    $2073 = $2063 << 7;
    $2074 = $2072 | $2073;
    $2075 = $2071 ^ $2074;
    $2076 = $2006 ^ $1949;
    $2077 = $2063 & $2076;
    $2078 = $2077 ^ $1949;
    $2079 = $1985 >>> 17;
    $2080 = $1985 << 15;
    $2081 = $2079 | $2080;
    $2082 = $1985 >>> 19;
    $2083 = $1985 << 13;
    $2084 = $2082 | $2083;
    $2085 = $1985 >>> 10;
    $2086 = $2084 ^ $2085;
    $2087 = $2086 ^ $2081;
    $2088 = $1244 >>> 7;
    $2089 = $1244 << 25;
    $2090 = $2088 | $2089;
    $2091 = $1244 >>> 18;
    $2092 = $1244 << 14;
    $2093 = $2091 | $2092;
    $2094 = $1244 >>> 3;
    $2095 = $2093 ^ $2094;
    $2096 = $2095 ^ $2090;
    $2097 = (($2096) + ($1187)) | 0;
    $2098 = (($2097) + ($1700)) | 0;
    $2099 = (($2098) + ($2087)) | 0;
    $2100 = (($2099) + -1474664885) | 0;
    $2101 = (($2100) + ($1892)) | 0;
    $2102 = (($2101) + ($2078)) | 0;
    $2103 = (($2102) + ($2075)) | 0;
    $2104 = $2064 >>> 2;
    $2105 = $2064 << 30;
    $2106 = $2104 | $2105;
    $2107 = $2064 >>> 13;
    $2108 = $2064 << 19;
    $2109 = $2107 | $2108;
    $2110 = $2106 ^ $2109;
    $2111 = $2064 >>> 22;
    $2112 = $2064 << 10;
    $2113 = $2111 | $2112;
    $2114 = $2110 ^ $2113;
    $2115 = $2064 & $2007;
    $2116 = $2064 | $2007;
    $2117 = $2116 & $1950;
    $2118 = $2117 | $2115;
    $2119 = (($2114) + ($2118)) | 0;
    $2120 = (($2103) + ($1893)) | 0;
    $2121 = (($2119) + ($2103)) | 0;
    $2122 = $2120 >>> 6;
    $2123 = $2120 << 26;
    $2124 = $2122 | $2123;
    $2125 = $2120 >>> 11;
    $2126 = $2120 << 21;
    $2127 = $2125 | $2126;
    $2128 = $2124 ^ $2127;
    $2129 = $2120 >>> 25;
    $2130 = $2120 << 7;
    $2131 = $2129 | $2130;
    $2132 = $2128 ^ $2131;
    $2133 = $2063 ^ $2006;
    $2134 = $2120 & $2133;
    $2135 = $2134 ^ $2006;
    $2136 = $2042 >>> 17;
    $2137 = $2042 << 15;
    $2138 = $2136 | $2137;
    $2139 = $2042 >>> 19;
    $2140 = $2042 << 13;
    $2141 = $2139 | $2140;
    $2142 = $2042 >>> 10;
    $2143 = $2141 ^ $2142;
    $2144 = $2143 ^ $2138;
    $2145 = $1301 >>> 7;
    $2146 = $1301 << 25;
    $2147 = $2145 | $2146;
    $2148 = $1301 >>> 18;
    $2149 = $1301 << 14;
    $2150 = $2148 | $2149;
    $2151 = $1301 >>> 3;
    $2152 = $2150 ^ $2151;
    $2153 = $2152 ^ $2147;
    $2154 = (($2153) + ($1244)) | 0;
    $2155 = (($2154) + ($1757)) | 0;
    $2156 = (($2155) + ($2144)) | 0;
    $2157 = (($2156) + -1035236496) | 0;
    $2158 = (($2157) + ($1949)) | 0;
    $2159 = (($2158) + ($2135)) | 0;
    $2160 = (($2159) + ($2132)) | 0;
    $2161 = $2121 >>> 2;
    $2162 = $2121 << 30;
    $2163 = $2161 | $2162;
    $2164 = $2121 >>> 13;
    $2165 = $2121 << 19;
    $2166 = $2164 | $2165;
    $2167 = $2163 ^ $2166;
    $2168 = $2121 >>> 22;
    $2169 = $2121 << 10;
    $2170 = $2168 | $2169;
    $2171 = $2167 ^ $2170;
    $2172 = $2121 & $2064;
    $2173 = $2121 | $2064;
    $2174 = $2173 & $2007;
    $2175 = $2174 | $2172;
    $2176 = (($2171) + ($2175)) | 0;
    $2177 = (($2160) + ($1950)) | 0;
    $2178 = (($2176) + ($2160)) | 0;
    $2179 = $2177 >>> 6;
    $2180 = $2177 << 26;
    $2181 = $2179 | $2180;
    $2182 = $2177 >>> 11;
    $2183 = $2177 << 21;
    $2184 = $2182 | $2183;
    $2185 = $2181 ^ $2184;
    $2186 = $2177 >>> 25;
    $2187 = $2177 << 7;
    $2188 = $2186 | $2187;
    $2189 = $2185 ^ $2188;
    $2190 = $2120 ^ $2063;
    $2191 = $2177 & $2190;
    $2192 = $2191 ^ $2063;
    $2193 = $2099 >>> 17;
    $2194 = $2099 << 15;
    $2195 = $2193 | $2194;
    $2196 = $2099 >>> 19;
    $2197 = $2099 << 13;
    $2198 = $2196 | $2197;
    $2199 = $2099 >>> 10;
    $2200 = $2198 ^ $2199;
    $2201 = $2200 ^ $2195;
    $2202 = $1358 >>> 7;
    $2203 = $1358 << 25;
    $2204 = $2202 | $2203;
    $2205 = $1358 >>> 18;
    $2206 = $1358 << 14;
    $2207 = $2205 | $2206;
    $2208 = $1358 >>> 3;
    $2209 = $2207 ^ $2208;
    $2210 = $2209 ^ $2204;
    $2211 = (($2210) + ($1301)) | 0;
    $2212 = (($2211) + ($1814)) | 0;
    $2213 = (($2212) + ($2201)) | 0;
    $2214 = (($2213) + -949202525) | 0;
    $2215 = (($2214) + ($2006)) | 0;
    $2216 = (($2215) + ($2192)) | 0;
    $2217 = (($2216) + ($2189)) | 0;
    $2218 = $2178 >>> 2;
    $2219 = $2178 << 30;
    $2220 = $2218 | $2219;
    $2221 = $2178 >>> 13;
    $2222 = $2178 << 19;
    $2223 = $2221 | $2222;
    $2224 = $2220 ^ $2223;
    $2225 = $2178 >>> 22;
    $2226 = $2178 << 10;
    $2227 = $2225 | $2226;
    $2228 = $2224 ^ $2227;
    $2229 = $2178 & $2121;
    $2230 = $2178 | $2121;
    $2231 = $2230 & $2064;
    $2232 = $2231 | $2229;
    $2233 = (($2228) + ($2232)) | 0;
    $2234 = (($2217) + ($2007)) | 0;
    $2235 = (($2233) + ($2217)) | 0;
    $2236 = $2234 >>> 6;
    $2237 = $2234 << 26;
    $2238 = $2236 | $2237;
    $2239 = $2234 >>> 11;
    $2240 = $2234 << 21;
    $2241 = $2239 | $2240;
    $2242 = $2238 ^ $2241;
    $2243 = $2234 >>> 25;
    $2244 = $2234 << 7;
    $2245 = $2243 | $2244;
    $2246 = $2242 ^ $2245;
    $2247 = $2177 ^ $2120;
    $2248 = $2234 & $2247;
    $2249 = $2248 ^ $2120;
    $2250 = $2156 >>> 17;
    $2251 = $2156 << 15;
    $2252 = $2250 | $2251;
    $2253 = $2156 >>> 19;
    $2254 = $2156 << 13;
    $2255 = $2253 | $2254;
    $2256 = $2156 >>> 10;
    $2257 = $2255 ^ $2256;
    $2258 = $2257 ^ $2252;
    $2259 = $1415 >>> 7;
    $2260 = $1415 << 25;
    $2261 = $2259 | $2260;
    $2262 = $1415 >>> 18;
    $2263 = $1415 << 14;
    $2264 = $2262 | $2263;
    $2265 = $1415 >>> 3;
    $2266 = $2264 ^ $2265;
    $2267 = $2266 ^ $2261;
    $2268 = (($2267) + ($1358)) | 0;
    $2269 = (($2268) + ($1871)) | 0;
    $2270 = (($2269) + ($2258)) | 0;
    $2271 = (($2270) + -778901479) | 0;
    $2272 = (($2271) + ($2063)) | 0;
    $2273 = (($2272) + ($2249)) | 0;
    $2274 = (($2273) + ($2246)) | 0;
    $2275 = $2235 >>> 2;
    $2276 = $2235 << 30;
    $2277 = $2275 | $2276;
    $2278 = $2235 >>> 13;
    $2279 = $2235 << 19;
    $2280 = $2278 | $2279;
    $2281 = $2277 ^ $2280;
    $2282 = $2235 >>> 22;
    $2283 = $2235 << 10;
    $2284 = $2282 | $2283;
    $2285 = $2281 ^ $2284;
    $2286 = $2235 & $2178;
    $2287 = $2235 | $2178;
    $2288 = $2287 & $2121;
    $2289 = $2288 | $2286;
    $2290 = (($2285) + ($2289)) | 0;
    $2291 = (($2274) + ($2064)) | 0;
    $2292 = (($2290) + ($2274)) | 0;
    $2293 = $2291 >>> 6;
    $2294 = $2291 << 26;
    $2295 = $2293 | $2294;
    $2296 = $2291 >>> 11;
    $2297 = $2291 << 21;
    $2298 = $2296 | $2297;
    $2299 = $2295 ^ $2298;
    $2300 = $2291 >>> 25;
    $2301 = $2291 << 7;
    $2302 = $2300 | $2301;
    $2303 = $2299 ^ $2302;
    $2304 = $2234 ^ $2177;
    $2305 = $2291 & $2304;
    $2306 = $2305 ^ $2177;
    $2307 = $2213 >>> 17;
    $2308 = $2213 << 15;
    $2309 = $2307 | $2308;
    $2310 = $2213 >>> 19;
    $2311 = $2213 << 13;
    $2312 = $2310 | $2311;
    $2313 = $2213 >>> 10;
    $2314 = $2312 ^ $2313;
    $2315 = $2314 ^ $2309;
    $2316 = $1472 >>> 7;
    $2317 = $1472 << 25;
    $2318 = $2316 | $2317;
    $2319 = $1472 >>> 18;
    $2320 = $1472 << 14;
    $2321 = $2319 | $2320;
    $2322 = $1472 >>> 3;
    $2323 = $2321 ^ $2322;
    $2324 = $2323 ^ $2318;
    $2325 = (($2324) + ($1415)) | 0;
    $2326 = (($2325) + ($1928)) | 0;
    $2327 = (($2326) + ($2315)) | 0;
    $2328 = (($2327) + -694614492) | 0;
    $2329 = (($2328) + ($2120)) | 0;
    $2330 = (($2329) + ($2306)) | 0;
    $2331 = (($2330) + ($2303)) | 0;
    $2332 = $2292 >>> 2;
    $2333 = $2292 << 30;
    $2334 = $2332 | $2333;
    $2335 = $2292 >>> 13;
    $2336 = $2292 << 19;
    $2337 = $2335 | $2336;
    $2338 = $2334 ^ $2337;
    $2339 = $2292 >>> 22;
    $2340 = $2292 << 10;
    $2341 = $2339 | $2340;
    $2342 = $2338 ^ $2341;
    $2343 = $2292 & $2235;
    $2344 = $2292 | $2235;
    $2345 = $2344 & $2178;
    $2346 = $2345 | $2343;
    $2347 = (($2342) + ($2346)) | 0;
    $2348 = (($2331) + ($2121)) | 0;
    $2349 = (($2347) + ($2331)) | 0;
    $2350 = $2348 >>> 6;
    $2351 = $2348 << 26;
    $2352 = $2350 | $2351;
    $2353 = $2348 >>> 11;
    $2354 = $2348 << 21;
    $2355 = $2353 | $2354;
    $2356 = $2352 ^ $2355;
    $2357 = $2348 >>> 25;
    $2358 = $2348 << 7;
    $2359 = $2357 | $2358;
    $2360 = $2356 ^ $2359;
    $2361 = $2291 ^ $2234;
    $2362 = $2348 & $2361;
    $2363 = $2362 ^ $2234;
    $2364 = $2270 >>> 17;
    $2365 = $2270 << 15;
    $2366 = $2364 | $2365;
    $2367 = $2270 >>> 19;
    $2368 = $2270 << 13;
    $2369 = $2367 | $2368;
    $2370 = $2270 >>> 10;
    $2371 = $2369 ^ $2370;
    $2372 = $2371 ^ $2366;
    $2373 = $1529 >>> 7;
    $2374 = $1529 << 25;
    $2375 = $2373 | $2374;
    $2376 = $1529 >>> 18;
    $2377 = $1529 << 14;
    $2378 = $2376 | $2377;
    $2379 = $1529 >>> 3;
    $2380 = $2378 ^ $2379;
    $2381 = $2380 ^ $2375;
    $2382 = (($2381) + ($1472)) | 0;
    $2383 = (($2382) + ($1985)) | 0;
    $2384 = (($2383) + ($2372)) | 0;
    $2385 = (($2384) + -200395387) | 0;
    $2386 = (($2385) + ($2177)) | 0;
    $2387 = (($2386) + ($2363)) | 0;
    $2388 = (($2387) + ($2360)) | 0;
    $2389 = $2349 >>> 2;
    $2390 = $2349 << 30;
    $2391 = $2389 | $2390;
    $2392 = $2349 >>> 13;
    $2393 = $2349 << 19;
    $2394 = $2392 | $2393;
    $2395 = $2391 ^ $2394;
    $2396 = $2349 >>> 22;
    $2397 = $2349 << 10;
    $2398 = $2396 | $2397;
    $2399 = $2395 ^ $2398;
    $2400 = $2349 & $2292;
    $2401 = $2349 | $2292;
    $2402 = $2401 & $2235;
    $2403 = $2402 | $2400;
    $2404 = (($2399) + ($2403)) | 0;
    $2405 = (($2388) + ($2178)) | 0;
    $2406 = (($2404) + ($2388)) | 0;
    $2407 = $2405 >>> 6;
    $2408 = $2405 << 26;
    $2409 = $2407 | $2408;
    $2410 = $2405 >>> 11;
    $2411 = $2405 << 21;
    $2412 = $2410 | $2411;
    $2413 = $2409 ^ $2412;
    $2414 = $2405 >>> 25;
    $2415 = $2405 << 7;
    $2416 = $2414 | $2415;
    $2417 = $2413 ^ $2416;
    $2418 = $2348 ^ $2291;
    $2419 = $2405 & $2418;
    $2420 = $2419 ^ $2291;
    $2421 = $2327 >>> 17;
    $2422 = $2327 << 15;
    $2423 = $2421 | $2422;
    $2424 = $2327 >>> 19;
    $2425 = $2327 << 13;
    $2426 = $2424 | $2425;
    $2427 = $2327 >>> 10;
    $2428 = $2426 ^ $2427;
    $2429 = $2428 ^ $2423;
    $2430 = $1586 >>> 7;
    $2431 = $1586 << 25;
    $2432 = $2430 | $2431;
    $2433 = $1586 >>> 18;
    $2434 = $1586 << 14;
    $2435 = $2433 | $2434;
    $2436 = $1586 >>> 3;
    $2437 = $2435 ^ $2436;
    $2438 = $2437 ^ $2432;
    $2439 = (($2438) + ($1529)) | 0;
    $2440 = (($2439) + ($2042)) | 0;
    $2441 = (($2440) + ($2429)) | 0;
    $2442 = (($2441) + 275423344) | 0;
    $2443 = (($2442) + ($2234)) | 0;
    $2444 = (($2443) + ($2420)) | 0;
    $2445 = (($2444) + ($2417)) | 0;
    $2446 = $2406 >>> 2;
    $2447 = $2406 << 30;
    $2448 = $2446 | $2447;
    $2449 = $2406 >>> 13;
    $2450 = $2406 << 19;
    $2451 = $2449 | $2450;
    $2452 = $2448 ^ $2451;
    $2453 = $2406 >>> 22;
    $2454 = $2406 << 10;
    $2455 = $2453 | $2454;
    $2456 = $2452 ^ $2455;
    $2457 = $2406 & $2349;
    $2458 = $2406 | $2349;
    $2459 = $2458 & $2292;
    $2460 = $2459 | $2457;
    $2461 = (($2456) + ($2460)) | 0;
    $2462 = (($2445) + ($2235)) | 0;
    $2463 = (($2461) + ($2445)) | 0;
    $2464 = $2462 >>> 6;
    $2465 = $2462 << 26;
    $2466 = $2464 | $2465;
    $2467 = $2462 >>> 11;
    $2468 = $2462 << 21;
    $2469 = $2467 | $2468;
    $2470 = $2466 ^ $2469;
    $2471 = $2462 >>> 25;
    $2472 = $2462 << 7;
    $2473 = $2471 | $2472;
    $2474 = $2470 ^ $2473;
    $2475 = $2405 ^ $2348;
    $2476 = $2462 & $2475;
    $2477 = $2476 ^ $2348;
    $2478 = $2384 >>> 17;
    $2479 = $2384 << 15;
    $2480 = $2478 | $2479;
    $2481 = $2384 >>> 19;
    $2482 = $2384 << 13;
    $2483 = $2481 | $2482;
    $2484 = $2384 >>> 10;
    $2485 = $2483 ^ $2484;
    $2486 = $2485 ^ $2480;
    $2487 = $1643 >>> 7;
    $2488 = $1643 << 25;
    $2489 = $2487 | $2488;
    $2490 = $1643 >>> 18;
    $2491 = $1643 << 14;
    $2492 = $2490 | $2491;
    $2493 = $1643 >>> 3;
    $2494 = $2492 ^ $2493;
    $2495 = $2494 ^ $2489;
    $2496 = (($2495) + ($1586)) | 0;
    $2497 = (($2496) + ($2099)) | 0;
    $2498 = (($2497) + ($2486)) | 0;
    $2499 = (($2498) + 430227734) | 0;
    $2500 = (($2499) + ($2291)) | 0;
    $2501 = (($2500) + ($2477)) | 0;
    $2502 = (($2501) + ($2474)) | 0;
    $2503 = $2463 >>> 2;
    $2504 = $2463 << 30;
    $2505 = $2503 | $2504;
    $2506 = $2463 >>> 13;
    $2507 = $2463 << 19;
    $2508 = $2506 | $2507;
    $2509 = $2505 ^ $2508;
    $2510 = $2463 >>> 22;
    $2511 = $2463 << 10;
    $2512 = $2510 | $2511;
    $2513 = $2509 ^ $2512;
    $2514 = $2463 & $2406;
    $2515 = $2463 | $2406;
    $2516 = $2515 & $2349;
    $2517 = $2516 | $2514;
    $2518 = (($2513) + ($2517)) | 0;
    $2519 = (($2502) + ($2292)) | 0;
    $2520 = (($2518) + ($2502)) | 0;
    $2521 = $2519 >>> 6;
    $2522 = $2519 << 26;
    $2523 = $2521 | $2522;
    $2524 = $2519 >>> 11;
    $2525 = $2519 << 21;
    $2526 = $2524 | $2525;
    $2527 = $2523 ^ $2526;
    $2528 = $2519 >>> 25;
    $2529 = $2519 << 7;
    $2530 = $2528 | $2529;
    $2531 = $2527 ^ $2530;
    $2532 = $2462 ^ $2405;
    $2533 = $2519 & $2532;
    $2534 = $2533 ^ $2405;
    $2535 = $2441 >>> 17;
    $2536 = $2441 << 15;
    $2537 = $2535 | $2536;
    $2538 = $2441 >>> 19;
    $2539 = $2441 << 13;
    $2540 = $2538 | $2539;
    $2541 = $2441 >>> 10;
    $2542 = $2540 ^ $2541;
    $2543 = $2542 ^ $2537;
    $2544 = $1700 >>> 7;
    $2545 = $1700 << 25;
    $2546 = $2544 | $2545;
    $2547 = $1700 >>> 18;
    $2548 = $1700 << 14;
    $2549 = $2547 | $2548;
    $2550 = $1700 >>> 3;
    $2551 = $2549 ^ $2550;
    $2552 = $2551 ^ $2546;
    $2553 = (($2552) + ($1643)) | 0;
    $2554 = (($2553) + ($2156)) | 0;
    $2555 = (($2554) + ($2543)) | 0;
    $2556 = (($2555) + 506948616) | 0;
    $2557 = (($2556) + ($2348)) | 0;
    $2558 = (($2557) + ($2534)) | 0;
    $2559 = (($2558) + ($2531)) | 0;
    $2560 = $2520 >>> 2;
    $2561 = $2520 << 30;
    $2562 = $2560 | $2561;
    $2563 = $2520 >>> 13;
    $2564 = $2520 << 19;
    $2565 = $2563 | $2564;
    $2566 = $2562 ^ $2565;
    $2567 = $2520 >>> 22;
    $2568 = $2520 << 10;
    $2569 = $2567 | $2568;
    $2570 = $2566 ^ $2569;
    $2571 = $2520 & $2463;
    $2572 = $2520 | $2463;
    $2573 = $2572 & $2406;
    $2574 = $2573 | $2571;
    $2575 = (($2570) + ($2574)) | 0;
    $2576 = (($2559) + ($2349)) | 0;
    $2577 = (($2575) + ($2559)) | 0;
    $2578 = $2576 >>> 6;
    $2579 = $2576 << 26;
    $2580 = $2578 | $2579;
    $2581 = $2576 >>> 11;
    $2582 = $2576 << 21;
    $2583 = $2581 | $2582;
    $2584 = $2580 ^ $2583;
    $2585 = $2576 >>> 25;
    $2586 = $2576 << 7;
    $2587 = $2585 | $2586;
    $2588 = $2584 ^ $2587;
    $2589 = $2519 ^ $2462;
    $2590 = $2576 & $2589;
    $2591 = $2590 ^ $2462;
    $2592 = $2498 >>> 17;
    $2593 = $2498 << 15;
    $2594 = $2592 | $2593;
    $2595 = $2498 >>> 19;
    $2596 = $2498 << 13;
    $2597 = $2595 | $2596;
    $2598 = $2498 >>> 10;
    $2599 = $2597 ^ $2598;
    $2600 = $2599 ^ $2594;
    $2601 = $1757 >>> 7;
    $2602 = $1757 << 25;
    $2603 = $2601 | $2602;
    $2604 = $1757 >>> 18;
    $2605 = $1757 << 14;
    $2606 = $2604 | $2605;
    $2607 = $1757 >>> 3;
    $2608 = $2606 ^ $2607;
    $2609 = $2608 ^ $2603;
    $2610 = (($2609) + ($1700)) | 0;
    $2611 = (($2610) + ($2213)) | 0;
    $2612 = (($2611) + ($2600)) | 0;
    $2613 = (($2612) + 659060556) | 0;
    $2614 = (($2613) + ($2405)) | 0;
    $2615 = (($2614) + ($2591)) | 0;
    $2616 = (($2615) + ($2588)) | 0;
    $2617 = $2577 >>> 2;
    $2618 = $2577 << 30;
    $2619 = $2617 | $2618;
    $2620 = $2577 >>> 13;
    $2621 = $2577 << 19;
    $2622 = $2620 | $2621;
    $2623 = $2619 ^ $2622;
    $2624 = $2577 >>> 22;
    $2625 = $2577 << 10;
    $2626 = $2624 | $2625;
    $2627 = $2623 ^ $2626;
    $2628 = $2577 & $2520;
    $2629 = $2577 | $2520;
    $2630 = $2629 & $2463;
    $2631 = $2630 | $2628;
    $2632 = (($2627) + ($2631)) | 0;
    $2633 = (($2616) + ($2406)) | 0;
    $2634 = (($2632) + ($2616)) | 0;
    $2635 = $2633 >>> 6;
    $2636 = $2633 << 26;
    $2637 = $2635 | $2636;
    $2638 = $2633 >>> 11;
    $2639 = $2633 << 21;
    $2640 = $2638 | $2639;
    $2641 = $2637 ^ $2640;
    $2642 = $2633 >>> 25;
    $2643 = $2633 << 7;
    $2644 = $2642 | $2643;
    $2645 = $2641 ^ $2644;
    $2646 = $2576 ^ $2519;
    $2647 = $2633 & $2646;
    $2648 = $2647 ^ $2519;
    $2649 = $2555 >>> 17;
    $2650 = $2555 << 15;
    $2651 = $2649 | $2650;
    $2652 = $2555 >>> 19;
    $2653 = $2555 << 13;
    $2654 = $2652 | $2653;
    $2655 = $2555 >>> 10;
    $2656 = $2654 ^ $2655;
    $2657 = $2656 ^ $2651;
    $2658 = $1814 >>> 7;
    $2659 = $1814 << 25;
    $2660 = $2658 | $2659;
    $2661 = $1814 >>> 18;
    $2662 = $1814 << 14;
    $2663 = $2661 | $2662;
    $2664 = $1814 >>> 3;
    $2665 = $2663 ^ $2664;
    $2666 = $2665 ^ $2660;
    $2667 = (($2666) + ($1757)) | 0;
    $2668 = (($2667) + ($2270)) | 0;
    $2669 = (($2668) + ($2657)) | 0;
    $2670 = (($2669) + 883997877) | 0;
    $2671 = (($2670) + ($2462)) | 0;
    $2672 = (($2671) + ($2648)) | 0;
    $2673 = (($2672) + ($2645)) | 0;
    $2674 = $2634 >>> 2;
    $2675 = $2634 << 30;
    $2676 = $2674 | $2675;
    $2677 = $2634 >>> 13;
    $2678 = $2634 << 19;
    $2679 = $2677 | $2678;
    $2680 = $2676 ^ $2679;
    $2681 = $2634 >>> 22;
    $2682 = $2634 << 10;
    $2683 = $2681 | $2682;
    $2684 = $2680 ^ $2683;
    $2685 = $2634 & $2577;
    $2686 = $2634 | $2577;
    $2687 = $2686 & $2520;
    $2688 = $2687 | $2685;
    $2689 = (($2684) + ($2688)) | 0;
    $2690 = (($2673) + ($2463)) | 0;
    $2691 = (($2689) + ($2673)) | 0;
    $2692 = $2690 >>> 6;
    $2693 = $2690 << 26;
    $2694 = $2692 | $2693;
    $2695 = $2690 >>> 11;
    $2696 = $2690 << 21;
    $2697 = $2695 | $2696;
    $2698 = $2694 ^ $2697;
    $2699 = $2690 >>> 25;
    $2700 = $2690 << 7;
    $2701 = $2699 | $2700;
    $2702 = $2698 ^ $2701;
    $2703 = $2633 ^ $2576;
    $2704 = $2690 & $2703;
    $2705 = $2704 ^ $2576;
    $2706 = $2612 >>> 17;
    $2707 = $2612 << 15;
    $2708 = $2706 | $2707;
    $2709 = $2612 >>> 19;
    $2710 = $2612 << 13;
    $2711 = $2709 | $2710;
    $2712 = $2612 >>> 10;
    $2713 = $2711 ^ $2712;
    $2714 = $2713 ^ $2708;
    $2715 = $1871 >>> 7;
    $2716 = $1871 << 25;
    $2717 = $2715 | $2716;
    $2718 = $1871 >>> 18;
    $2719 = $1871 << 14;
    $2720 = $2718 | $2719;
    $2721 = $1871 >>> 3;
    $2722 = $2720 ^ $2721;
    $2723 = $2722 ^ $2717;
    $2724 = (($2723) + ($1814)) | 0;
    $2725 = (($2724) + ($2327)) | 0;
    $2726 = (($2725) + ($2714)) | 0;
    $2727 = (($2726) + 958139571) | 0;
    $2728 = (($2727) + ($2519)) | 0;
    $2729 = (($2728) + ($2705)) | 0;
    $2730 = (($2729) + ($2702)) | 0;
    $2731 = $2691 >>> 2;
    $2732 = $2691 << 30;
    $2733 = $2731 | $2732;
    $2734 = $2691 >>> 13;
    $2735 = $2691 << 19;
    $2736 = $2734 | $2735;
    $2737 = $2733 ^ $2736;
    $2738 = $2691 >>> 22;
    $2739 = $2691 << 10;
    $2740 = $2738 | $2739;
    $2741 = $2737 ^ $2740;
    $2742 = $2691 & $2634;
    $2743 = $2691 | $2634;
    $2744 = $2743 & $2577;
    $2745 = $2744 | $2742;
    $2746 = (($2741) + ($2745)) | 0;
    $2747 = (($2730) + ($2520)) | 0;
    $2748 = (($2746) + ($2730)) | 0;
    $2749 = $2747 >>> 6;
    $2750 = $2747 << 26;
    $2751 = $2749 | $2750;
    $2752 = $2747 >>> 11;
    $2753 = $2747 << 21;
    $2754 = $2752 | $2753;
    $2755 = $2751 ^ $2754;
    $2756 = $2747 >>> 25;
    $2757 = $2747 << 7;
    $2758 = $2756 | $2757;
    $2759 = $2755 ^ $2758;
    $2760 = $2690 ^ $2633;
    $2761 = $2747 & $2760;
    $2762 = $2761 ^ $2633;
    $2763 = $2669 >>> 17;
    $2764 = $2669 << 15;
    $2765 = $2763 | $2764;
    $2766 = $2669 >>> 19;
    $2767 = $2669 << 13;
    $2768 = $2766 | $2767;
    $2769 = $2669 >>> 10;
    $2770 = $2768 ^ $2769;
    $2771 = $2770 ^ $2765;
    $2772 = $1928 >>> 7;
    $2773 = $1928 << 25;
    $2774 = $2772 | $2773;
    $2775 = $1928 >>> 18;
    $2776 = $1928 << 14;
    $2777 = $2775 | $2776;
    $2778 = $1928 >>> 3;
    $2779 = $2777 ^ $2778;
    $2780 = $2779 ^ $2774;
    $2781 = (($2780) + ($1871)) | 0;
    $2782 = (($2781) + ($2384)) | 0;
    $2783 = (($2782) + ($2771)) | 0;
    $2784 = (($2783) + 1322822218) | 0;
    $2785 = (($2784) + ($2576)) | 0;
    $2786 = (($2785) + ($2762)) | 0;
    $2787 = (($2786) + ($2759)) | 0;
    $2788 = $2748 >>> 2;
    $2789 = $2748 << 30;
    $2790 = $2788 | $2789;
    $2791 = $2748 >>> 13;
    $2792 = $2748 << 19;
    $2793 = $2791 | $2792;
    $2794 = $2790 ^ $2793;
    $2795 = $2748 >>> 22;
    $2796 = $2748 << 10;
    $2797 = $2795 | $2796;
    $2798 = $2794 ^ $2797;
    $2799 = $2748 & $2691;
    $2800 = $2748 | $2691;
    $2801 = $2800 & $2634;
    $2802 = $2801 | $2799;
    $2803 = (($2798) + ($2802)) | 0;
    $2804 = (($2787) + ($2577)) | 0;
    $2805 = (($2803) + ($2787)) | 0;
    $2806 = $2804 >>> 6;
    $2807 = $2804 << 26;
    $2808 = $2806 | $2807;
    $2809 = $2804 >>> 11;
    $2810 = $2804 << 21;
    $2811 = $2809 | $2810;
    $2812 = $2808 ^ $2811;
    $2813 = $2804 >>> 25;
    $2814 = $2804 << 7;
    $2815 = $2813 | $2814;
    $2816 = $2812 ^ $2815;
    $2817 = $2747 ^ $2690;
    $2818 = $2804 & $2817;
    $2819 = $2818 ^ $2690;
    $2820 = $2726 >>> 17;
    $2821 = $2726 << 15;
    $2822 = $2820 | $2821;
    $2823 = $2726 >>> 19;
    $2824 = $2726 << 13;
    $2825 = $2823 | $2824;
    $2826 = $2726 >>> 10;
    $2827 = $2825 ^ $2826;
    $2828 = $2827 ^ $2822;
    $2829 = $1985 >>> 7;
    $2830 = $1985 << 25;
    $2831 = $2829 | $2830;
    $2832 = $1985 >>> 18;
    $2833 = $1985 << 14;
    $2834 = $2832 | $2833;
    $2835 = $1985 >>> 3;
    $2836 = $2834 ^ $2835;
    $2837 = $2836 ^ $2831;
    $2838 = (($2837) + ($1928)) | 0;
    $2839 = (($2838) + ($2441)) | 0;
    $2840 = (($2839) + ($2828)) | 0;
    $2841 = (($2840) + 1537002063) | 0;
    $2842 = (($2841) + ($2633)) | 0;
    $2843 = (($2842) + ($2819)) | 0;
    $2844 = (($2843) + ($2816)) | 0;
    $2845 = $2805 >>> 2;
    $2846 = $2805 << 30;
    $2847 = $2845 | $2846;
    $2848 = $2805 >>> 13;
    $2849 = $2805 << 19;
    $2850 = $2848 | $2849;
    $2851 = $2847 ^ $2850;
    $2852 = $2805 >>> 22;
    $2853 = $2805 << 10;
    $2854 = $2852 | $2853;
    $2855 = $2851 ^ $2854;
    $2856 = $2805 & $2748;
    $2857 = $2805 | $2748;
    $2858 = $2857 & $2691;
    $2859 = $2858 | $2856;
    $2860 = (($2855) + ($2859)) | 0;
    $2861 = (($2844) + ($2634)) | 0;
    $2862 = (($2860) + ($2844)) | 0;
    $2863 = $2861 >>> 6;
    $2864 = $2861 << 26;
    $2865 = $2863 | $2864;
    $2866 = $2861 >>> 11;
    $2867 = $2861 << 21;
    $2868 = $2866 | $2867;
    $2869 = $2865 ^ $2868;
    $2870 = $2861 >>> 25;
    $2871 = $2861 << 7;
    $2872 = $2870 | $2871;
    $2873 = $2869 ^ $2872;
    $2874 = $2804 ^ $2747;
    $2875 = $2861 & $2874;
    $2876 = $2875 ^ $2747;
    $2877 = $2783 >>> 17;
    $2878 = $2783 << 15;
    $2879 = $2877 | $2878;
    $2880 = $2783 >>> 19;
    $2881 = $2783 << 13;
    $2882 = $2880 | $2881;
    $2883 = $2783 >>> 10;
    $2884 = $2882 ^ $2883;
    $2885 = $2884 ^ $2879;
    $2886 = $2042 >>> 7;
    $2887 = $2042 << 25;
    $2888 = $2886 | $2887;
    $2889 = $2042 >>> 18;
    $2890 = $2042 << 14;
    $2891 = $2889 | $2890;
    $2892 = $2042 >>> 3;
    $2893 = $2891 ^ $2892;
    $2894 = $2893 ^ $2888;
    $2895 = (($2894) + ($1985)) | 0;
    $2896 = (($2895) + ($2498)) | 0;
    $2897 = (($2896) + ($2885)) | 0;
    $2898 = (($2897) + 1747873779) | 0;
    $2899 = (($2898) + ($2690)) | 0;
    $2900 = (($2899) + ($2876)) | 0;
    $2901 = (($2900) + ($2873)) | 0;
    $2902 = $2862 >>> 2;
    $2903 = $2862 << 30;
    $2904 = $2902 | $2903;
    $2905 = $2862 >>> 13;
    $2906 = $2862 << 19;
    $2907 = $2905 | $2906;
    $2908 = $2904 ^ $2907;
    $2909 = $2862 >>> 22;
    $2910 = $2862 << 10;
    $2911 = $2909 | $2910;
    $2912 = $2908 ^ $2911;
    $2913 = $2862 & $2805;
    $2914 = $2862 | $2805;
    $2915 = $2914 & $2748;
    $2916 = $2915 | $2913;
    $2917 = (($2912) + ($2916)) | 0;
    $2918 = (($2901) + ($2691)) | 0;
    $2919 = (($2917) + ($2901)) | 0;
    $2920 = $2918 >>> 6;
    $2921 = $2918 << 26;
    $2922 = $2920 | $2921;
    $2923 = $2918 >>> 11;
    $2924 = $2918 << 21;
    $2925 = $2923 | $2924;
    $2926 = $2922 ^ $2925;
    $2927 = $2918 >>> 25;
    $2928 = $2918 << 7;
    $2929 = $2927 | $2928;
    $2930 = $2926 ^ $2929;
    $2931 = $2861 ^ $2804;
    $2932 = $2918 & $2931;
    $2933 = $2932 ^ $2804;
    $2934 = $2840 >>> 17;
    $2935 = $2840 << 15;
    $2936 = $2934 | $2935;
    $2937 = $2840 >>> 19;
    $2938 = $2840 << 13;
    $2939 = $2937 | $2938;
    $2940 = $2840 >>> 10;
    $2941 = $2939 ^ $2940;
    $2942 = $2941 ^ $2936;
    $2943 = $2099 >>> 7;
    $2944 = $2099 << 25;
    $2945 = $2943 | $2944;
    $2946 = $2099 >>> 18;
    $2947 = $2099 << 14;
    $2948 = $2946 | $2947;
    $2949 = $2099 >>> 3;
    $2950 = $2948 ^ $2949;
    $2951 = $2950 ^ $2945;
    $2952 = (($2951) + ($2042)) | 0;
    $2953 = (($2952) + ($2555)) | 0;
    $2954 = (($2953) + ($2942)) | 0;
    $2955 = (($2954) + 1955562222) | 0;
    $2956 = (($2955) + ($2747)) | 0;
    $2957 = (($2956) + ($2933)) | 0;
    $2958 = (($2957) + ($2930)) | 0;
    $2959 = $2919 >>> 2;
    $2960 = $2919 << 30;
    $2961 = $2959 | $2960;
    $2962 = $2919 >>> 13;
    $2963 = $2919 << 19;
    $2964 = $2962 | $2963;
    $2965 = $2961 ^ $2964;
    $2966 = $2919 >>> 22;
    $2967 = $2919 << 10;
    $2968 = $2966 | $2967;
    $2969 = $2965 ^ $2968;
    $2970 = $2919 & $2862;
    $2971 = $2919 | $2862;
    $2972 = $2971 & $2805;
    $2973 = $2972 | $2970;
    $2974 = (($2969) + ($2973)) | 0;
    $2975 = (($2958) + ($2748)) | 0;
    $2976 = (($2974) + ($2958)) | 0;
    $2977 = $2975 >>> 6;
    $2978 = $2975 << 26;
    $2979 = $2977 | $2978;
    $2980 = $2975 >>> 11;
    $2981 = $2975 << 21;
    $2982 = $2980 | $2981;
    $2983 = $2979 ^ $2982;
    $2984 = $2975 >>> 25;
    $2985 = $2975 << 7;
    $2986 = $2984 | $2985;
    $2987 = $2983 ^ $2986;
    $2988 = $2918 ^ $2861;
    $2989 = $2975 & $2988;
    $2990 = $2989 ^ $2861;
    $2991 = $2897 >>> 17;
    $2992 = $2897 << 15;
    $2993 = $2991 | $2992;
    $2994 = $2897 >>> 19;
    $2995 = $2897 << 13;
    $2996 = $2994 | $2995;
    $2997 = $2897 >>> 10;
    $2998 = $2996 ^ $2997;
    $2999 = $2998 ^ $2993;
    $3000 = $2156 >>> 7;
    $3001 = $2156 << 25;
    $3002 = $3000 | $3001;
    $3003 = $2156 >>> 18;
    $3004 = $2156 << 14;
    $3005 = $3003 | $3004;
    $3006 = $2156 >>> 3;
    $3007 = $3005 ^ $3006;
    $3008 = $3007 ^ $3002;
    $3009 = (($3008) + ($2099)) | 0;
    $3010 = (($3009) + ($2612)) | 0;
    $3011 = (($3010) + ($2999)) | 0;
    $3012 = (($3011) + 2024104815) | 0;
    $3013 = (($3012) + ($2804)) | 0;
    $3014 = (($3013) + ($2990)) | 0;
    $3015 = (($3014) + ($2987)) | 0;
    $3016 = $2976 >>> 2;
    $3017 = $2976 << 30;
    $3018 = $3016 | $3017;
    $3019 = $2976 >>> 13;
    $3020 = $2976 << 19;
    $3021 = $3019 | $3020;
    $3022 = $3018 ^ $3021;
    $3023 = $2976 >>> 22;
    $3024 = $2976 << 10;
    $3025 = $3023 | $3024;
    $3026 = $3022 ^ $3025;
    $3027 = $2976 & $2919;
    $3028 = $2976 | $2919;
    $3029 = $3028 & $2862;
    $3030 = $3029 | $3027;
    $3031 = (($3026) + ($3030)) | 0;
    $3032 = (($3015) + ($2805)) | 0;
    $3033 = (($3031) + ($3015)) | 0;
    $3034 = $3032 >>> 6;
    $3035 = $3032 << 26;
    $3036 = $3034 | $3035;
    $3037 = $3032 >>> 11;
    $3038 = $3032 << 21;
    $3039 = $3037 | $3038;
    $3040 = $3036 ^ $3039;
    $3041 = $3032 >>> 25;
    $3042 = $3032 << 7;
    $3043 = $3041 | $3042;
    $3044 = $3040 ^ $3043;
    $3045 = $2975 ^ $2918;
    $3046 = $3032 & $3045;
    $3047 = $3046 ^ $2918;
    $3048 = $2954 >>> 17;
    $3049 = $2954 << 15;
    $3050 = $3048 | $3049;
    $3051 = $2954 >>> 19;
    $3052 = $2954 << 13;
    $3053 = $3051 | $3052;
    $3054 = $2954 >>> 10;
    $3055 = $3053 ^ $3054;
    $3056 = $3055 ^ $3050;
    $3057 = $2213 >>> 7;
    $3058 = $2213 << 25;
    $3059 = $3057 | $3058;
    $3060 = $2213 >>> 18;
    $3061 = $2213 << 14;
    $3062 = $3060 | $3061;
    $3063 = $2213 >>> 3;
    $3064 = $3062 ^ $3063;
    $3065 = $3064 ^ $3059;
    $3066 = (($3065) + ($2156)) | 0;
    $3067 = (($3066) + ($2669)) | 0;
    $3068 = (($3067) + ($3056)) | 0;
    $3069 = (($3068) + -2067236844) | 0;
    $3070 = (($3069) + ($2861)) | 0;
    $3071 = (($3070) + ($3047)) | 0;
    $3072 = (($3071) + ($3044)) | 0;
    $3073 = $3033 >>> 2;
    $3074 = $3033 << 30;
    $3075 = $3073 | $3074;
    $3076 = $3033 >>> 13;
    $3077 = $3033 << 19;
    $3078 = $3076 | $3077;
    $3079 = $3075 ^ $3078;
    $3080 = $3033 >>> 22;
    $3081 = $3033 << 10;
    $3082 = $3080 | $3081;
    $3083 = $3079 ^ $3082;
    $3084 = $3033 & $2976;
    $3085 = $3033 | $2976;
    $3086 = $3085 & $2919;
    $3087 = $3086 | $3084;
    $3088 = (($3083) + ($3087)) | 0;
    $3089 = (($3072) + ($2862)) | 0;
    $3090 = (($3088) + ($3072)) | 0;
    $3091 = $3089 >>> 6;
    $3092 = $3089 << 26;
    $3093 = $3091 | $3092;
    $3094 = $3089 >>> 11;
    $3095 = $3089 << 21;
    $3096 = $3094 | $3095;
    $3097 = $3093 ^ $3096;
    $3098 = $3089 >>> 25;
    $3099 = $3089 << 7;
    $3100 = $3098 | $3099;
    $3101 = $3097 ^ $3100;
    $3102 = $3032 ^ $2975;
    $3103 = $3089 & $3102;
    $3104 = $3103 ^ $2975;
    $3105 = $3011 >>> 17;
    $3106 = $3011 << 15;
    $3107 = $3105 | $3106;
    $3108 = $3011 >>> 19;
    $3109 = $3011 << 13;
    $3110 = $3108 | $3109;
    $3111 = $3011 >>> 10;
    $3112 = $3110 ^ $3111;
    $3113 = $3112 ^ $3107;
    $3114 = $2270 >>> 7;
    $3115 = $2270 << 25;
    $3116 = $3114 | $3115;
    $3117 = $2270 >>> 18;
    $3118 = $2270 << 14;
    $3119 = $3117 | $3118;
    $3120 = $2270 >>> 3;
    $3121 = $3119 ^ $3120;
    $3122 = $3121 ^ $3116;
    $3123 = (($3122) + ($2213)) | 0;
    $3124 = (($3123) + ($2726)) | 0;
    $3125 = (($3124) + ($3113)) | 0;
    $3126 = (($3125) + -1933114872) | 0;
    $3127 = (($3126) + ($2918)) | 0;
    $3128 = (($3127) + ($3104)) | 0;
    $3129 = (($3128) + ($3101)) | 0;
    $3130 = $3090 >>> 2;
    $3131 = $3090 << 30;
    $3132 = $3130 | $3131;
    $3133 = $3090 >>> 13;
    $3134 = $3090 << 19;
    $3135 = $3133 | $3134;
    $3136 = $3132 ^ $3135;
    $3137 = $3090 >>> 22;
    $3138 = $3090 << 10;
    $3139 = $3137 | $3138;
    $3140 = $3136 ^ $3139;
    $3141 = $3090 & $3033;
    $3142 = $3090 | $3033;
    $3143 = $3142 & $2976;
    $3144 = $3143 | $3141;
    $3145 = (($3140) + ($3144)) | 0;
    $3146 = (($3129) + ($2919)) | 0;
    $3147 = (($3145) + ($3129)) | 0;
    $3148 = $3146 >>> 6;
    $3149 = $3146 << 26;
    $3150 = $3148 | $3149;
    $3151 = $3146 >>> 11;
    $3152 = $3146 << 21;
    $3153 = $3151 | $3152;
    $3154 = $3150 ^ $3153;
    $3155 = $3146 >>> 25;
    $3156 = $3146 << 7;
    $3157 = $3155 | $3156;
    $3158 = $3154 ^ $3157;
    $3159 = $3089 ^ $3032;
    $3160 = $3146 & $3159;
    $3161 = $3160 ^ $3032;
    $3162 = $3068 >>> 17;
    $3163 = $3068 << 15;
    $3164 = $3162 | $3163;
    $3165 = $3068 >>> 19;
    $3166 = $3068 << 13;
    $3167 = $3165 | $3166;
    $3168 = $3068 >>> 10;
    $3169 = $3167 ^ $3168;
    $3170 = $3169 ^ $3164;
    $3171 = $2327 >>> 7;
    $3172 = $2327 << 25;
    $3173 = $3171 | $3172;
    $3174 = $2327 >>> 18;
    $3175 = $2327 << 14;
    $3176 = $3174 | $3175;
    $3177 = $2327 >>> 3;
    $3178 = $3176 ^ $3177;
    $3179 = $3178 ^ $3173;
    $3180 = (($3179) + ($2270)) | 0;
    $3181 = (($3180) + ($2783)) | 0;
    $3182 = (($3181) + ($3170)) | 0;
    $3183 = (($3182) + -1866530822) | 0;
    $3184 = (($3183) + ($2975)) | 0;
    $3185 = (($3184) + ($3161)) | 0;
    $3186 = (($3185) + ($3158)) | 0;
    $3187 = $3147 >>> 2;
    $3188 = $3147 << 30;
    $3189 = $3187 | $3188;
    $3190 = $3147 >>> 13;
    $3191 = $3147 << 19;
    $3192 = $3190 | $3191;
    $3193 = $3189 ^ $3192;
    $3194 = $3147 >>> 22;
    $3195 = $3147 << 10;
    $3196 = $3194 | $3195;
    $3197 = $3193 ^ $3196;
    $3198 = $3147 & $3090;
    $3199 = $3147 | $3090;
    $3200 = $3199 & $3033;
    $3201 = $3200 | $3198;
    $3202 = (($3197) + ($3201)) | 0;
    $3203 = (($3186) + ($2976)) | 0;
    $3204 = (($3202) + ($3186)) | 0;
    $3205 = $3203 >>> 6;
    $3206 = $3203 << 26;
    $3207 = $3205 | $3206;
    $3208 = $3203 >>> 11;
    $3209 = $3203 << 21;
    $3210 = $3208 | $3209;
    $3211 = $3207 ^ $3210;
    $3212 = $3203 >>> 25;
    $3213 = $3203 << 7;
    $3214 = $3212 | $3213;
    $3215 = $3211 ^ $3214;
    $3216 = $3146 ^ $3089;
    $3217 = $3203 & $3216;
    $3218 = $3217 ^ $3089;
    $3219 = $3125 >>> 17;
    $3220 = $3125 << 15;
    $3221 = $3219 | $3220;
    $3222 = $3125 >>> 19;
    $3223 = $3125 << 13;
    $3224 = $3222 | $3223;
    $3225 = $3125 >>> 10;
    $3226 = $3224 ^ $3225;
    $3227 = $3226 ^ $3221;
    $3228 = $2384 >>> 7;
    $3229 = $2384 << 25;
    $3230 = $3228 | $3229;
    $3231 = $2384 >>> 18;
    $3232 = $2384 << 14;
    $3233 = $3231 | $3232;
    $3234 = $2384 >>> 3;
    $3235 = $3233 ^ $3234;
    $3236 = $3235 ^ $3230;
    $3237 = (($3236) + ($2327)) | 0;
    $3238 = (($3237) + ($2840)) | 0;
    $3239 = (($3238) + ($3227)) | 0;
    $3240 = (($3239) + -1538233109) | 0;
    $3241 = (($3240) + ($3032)) | 0;
    $3242 = (($3241) + ($3218)) | 0;
    $3243 = (($3242) + ($3215)) | 0;
    $3244 = $3204 >>> 2;
    $3245 = $3204 << 30;
    $3246 = $3244 | $3245;
    $3247 = $3204 >>> 13;
    $3248 = $3204 << 19;
    $3249 = $3247 | $3248;
    $3250 = $3246 ^ $3249;
    $3251 = $3204 >>> 22;
    $3252 = $3204 << 10;
    $3253 = $3251 | $3252;
    $3254 = $3250 ^ $3253;
    $3255 = $3204 & $3147;
    $3256 = $3204 | $3147;
    $3257 = $3256 & $3090;
    $3258 = $3257 | $3255;
    $3259 = (($3254) + ($3258)) | 0;
    $3260 = (($3243) + ($3033)) | 0;
    $3261 = (($3259) + ($3243)) | 0;
    $3262 = $3260 >>> 6;
    $3263 = $3260 << 26;
    $3264 = $3262 | $3263;
    $3265 = $3260 >>> 11;
    $3266 = $3260 << 21;
    $3267 = $3265 | $3266;
    $3268 = $3264 ^ $3267;
    $3269 = $3260 >>> 25;
    $3270 = $3260 << 7;
    $3271 = $3269 | $3270;
    $3272 = $3268 ^ $3271;
    $3273 = $3203 ^ $3146;
    $3274 = $3260 & $3273;
    $3275 = $3274 ^ $3146;
    $3276 = $3182 >>> 17;
    $3277 = $3182 << 15;
    $3278 = $3276 | $3277;
    $3279 = $3182 >>> 19;
    $3280 = $3182 << 13;
    $3281 = $3279 | $3280;
    $3282 = $3182 >>> 10;
    $3283 = $3281 ^ $3282;
    $3284 = $3283 ^ $3278;
    $3285 = $2441 >>> 7;
    $3286 = $2441 << 25;
    $3287 = $3285 | $3286;
    $3288 = $2441 >>> 18;
    $3289 = $2441 << 14;
    $3290 = $3288 | $3289;
    $3291 = $2441 >>> 3;
    $3292 = $3290 ^ $3291;
    $3293 = $3292 ^ $3287;
    $3294 = (($2384) + -1090935817) | 0;
    $3295 = (($3294) + ($3293)) | 0;
    $3296 = (($3295) + ($2897)) | 0;
    $3297 = (($3296) + ($3284)) | 0;
    $3298 = (($3297) + ($3089)) | 0;
    $3299 = (($3298) + ($3275)) | 0;
    $3300 = (($3299) + ($3272)) | 0;
    $3301 = $3261 >>> 2;
    $3302 = $3261 << 30;
    $3303 = $3301 | $3302;
    $3304 = $3261 >>> 13;
    $3305 = $3261 << 19;
    $3306 = $3304 | $3305;
    $3307 = $3303 ^ $3306;
    $3308 = $3261 >>> 22;
    $3309 = $3261 << 10;
    $3310 = $3308 | $3309;
    $3311 = $3307 ^ $3310;
    $3312 = $3261 & $3204;
    $3313 = $3261 | $3204;
    $3314 = $3313 & $3147;
    $3315 = $3314 | $3312;
    $3316 = (($3311) + ($3315)) | 0;
    $3317 = (($3300) + ($3090)) | 0;
    $3318 = (($3316) + ($3300)) | 0;
    $3319 = $3317 >>> 6;
    $3320 = $3317 << 26;
    $3321 = $3319 | $3320;
    $3322 = $3317 >>> 11;
    $3323 = $3317 << 21;
    $3324 = $3322 | $3323;
    $3325 = $3321 ^ $3324;
    $3326 = $3317 >>> 25;
    $3327 = $3317 << 7;
    $3328 = $3326 | $3327;
    $3329 = $3325 ^ $3328;
    $3330 = $3260 ^ $3203;
    $3331 = $3317 & $3330;
    $3332 = $3331 ^ $3203;
    $3333 = $3239 >>> 17;
    $3334 = $3239 << 15;
    $3335 = $3333 | $3334;
    $3336 = $3239 >>> 19;
    $3337 = $3239 << 13;
    $3338 = $3336 | $3337;
    $3339 = $3239 >>> 10;
    $3340 = $3338 ^ $3339;
    $3341 = $3340 ^ $3335;
    $3342 = $2498 >>> 7;
    $3343 = $2498 << 25;
    $3344 = $3342 | $3343;
    $3345 = $2498 >>> 18;
    $3346 = $2498 << 14;
    $3347 = $3345 | $3346;
    $3348 = $2498 >>> 3;
    $3349 = $3347 ^ $3348;
    $3350 = $3349 ^ $3344;
    $3351 = (($2441) + -965641998) | 0;
    $3352 = (($3351) + ($3350)) | 0;
    $3353 = (($3352) + ($2954)) | 0;
    $3354 = (($3353) + ($3341)) | 0;
    $3355 = (($3354) + ($3146)) | 0;
    $3356 = (($3355) + ($3332)) | 0;
    $3357 = (($3356) + ($3329)) | 0;
    $3358 = $3318 >>> 2;
    $3359 = $3318 << 30;
    $3360 = $3358 | $3359;
    $3361 = $3318 >>> 13;
    $3362 = $3318 << 19;
    $3363 = $3361 | $3362;
    $3364 = $3360 ^ $3363;
    $3365 = $3318 >>> 22;
    $3366 = $3318 << 10;
    $3367 = $3365 | $3366;
    $3368 = $3364 ^ $3367;
    $3369 = $3318 & $3261;
    $3370 = $3318 | $3261;
    $3371 = $3370 & $3204;
    $3372 = $3371 | $3369;
    $3373 = (($3372) + ($2)) | 0;
    $3374 = (($3373) + ($3368)) | 0;
    $3375 = (($3374) + ($3357)) | 0;
    HEAP32[$0 >> 2] = $3375;
    $3376 = HEAP32[$3 >> 2] | 0;
    $3377 = (($3318) + ($3376)) | 0;
    HEAP32[$3 >> 2] = $3377;
    $3378 = HEAP32[$5 >> 2] | 0;
    $3379 = (($3261) + ($3378)) | 0;
    HEAP32[$5 >> 2] = $3379;
    $3380 = HEAP32[$7 >> 2] | 0;
    $3381 = (($3204) + ($3380)) | 0;
    HEAP32[$7 >> 2] = $3381;
    $3382 = HEAP32[$9 >> 2] | 0;
    $3383 = (($3147) + ($3382)) | 0;
    $3384 = (($3383) + ($3357)) | 0;
    HEAP32[$9 >> 2] = $3384;
    $3385 = HEAP32[$11 >> 2] | 0;
    $3386 = (($3317) + ($3385)) | 0;
    HEAP32[$11 >> 2] = $3386;
    $3387 = HEAP32[$13 >> 2] | 0;
    $3388 = (($3260) + ($3387)) | 0;
    HEAP32[$13 >> 2] = $3388;
    $3389 = HEAP32[$15 >> 2] | 0;
    $3390 = (($3203) + ($3389)) | 0;
    HEAP32[$15 >> 2] = $3390;
    return;
  }

  function _secp256k1_gej_add_ge($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$sroa$0$0$$sroa_idx35 = 0, $$sroa$0$0$copyload36 = 0, $$sroa$10$0$$sroa_idx45 = 0, $$sroa$10$0$$sroa_idx47 = 0,
      $$sroa$10$0$copyload48 = 0, $$sroa$12$0$$sroa_idx49 = 0, $$sroa$12$0$$sroa_idx51 = 0, $$sroa$12$0$copyload52 = 0,
      $$sroa$14$0$$sroa_idx53 = 0, $$sroa$14$0$$sroa_idx55 = 0, $$sroa$14$0$copyload56 = 0, $$sroa$16$0$$sroa_idx57 = 0,
      $$sroa$16$0$$sroa_idx59 = 0, $$sroa$16$0$copyload60 = 0, $$sroa$18$0$$sroa_idx61 = 0, $$sroa$18$0$$sroa_idx63 = 0,
      $$sroa$18$0$copyload64 = 0, $$sroa$20$0$$sroa_idx65 = 0, $$sroa$20$0$$sroa_idx67 = 0, $$sroa$20$0$copyload68 = 0;
    var $$sroa$22$0$$sroa_idx69 = 0, $$sroa$22$0$$sroa_idx71 = 0, $$sroa$22$0$copyload72 = 0,
      $$sroa$6$0$$sroa_idx37 = 0, $$sroa$6$0$$sroa_idx39 = 0, $$sroa$6$0$copyload40 = 0, $$sroa$8$0$$sroa_idx41 = 0,
      $$sroa$8$0$$sroa_idx43 = 0, $$sroa$8$0$copyload44 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0,
      $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
    var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0,
      $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
    var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0,
      $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
    var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0,
      $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
    var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0,
      $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
    var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0,
      $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0;
    var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0,
      $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
    var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0,
      $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
    var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0,
      $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
    var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0,
      $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
    var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0,
      $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
    var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0,
      $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
    var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0,
      $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
    var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0,
      $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
    var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0,
      $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
    var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0,
      $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
    var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0,
      $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
    var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0,
      $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
    var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0,
      $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
    var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0,
      $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
    var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0,
      $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
    var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0,
      $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
    var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0,
      $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
    var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0,
      $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
    var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0,
      $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
    var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0,
      $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
    var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0,
      $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
    var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0,
      $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
    var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0,
      $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
    var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0,
      $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
    var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0,
      $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
    var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0,
      $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
    var $67 = 0, $670 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0,
      $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
    var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0,
      $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0;
    var src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 400 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(400 | 0);
    $3 = sp + 360 | 0;
    $4 = sp + 320 | 0;
    $5 = sp + 280 | 0;
    $6 = sp + 240 | 0;
    $7 = sp + 200 | 0;
    $8 = sp + 160 | 0;
    $9 = sp + 120 | 0;
    $10 = sp + 80 | 0;
    $11 = sp + 40 | 0;
    $12 = sp;
    $13 = ((($1)) + 120 | 0);
    $14 = ((($1)) + 80 | 0);
    _secp256k1_fe_sqr($3, $14);
    dest = $4;
    src = $1;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $15 = HEAP32[$4 >> 2] | 0;
    $16 = ((($4)) + 4 | 0);
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = ((($4)) + 8 | 0);
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = ((($4)) + 12 | 0);
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = ((($4)) + 16 | 0);
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = ((($4)) + 20 | 0);
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = ((($4)) + 24 | 0);
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = ((($4)) + 28 | 0);
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = ((($4)) + 32 | 0);
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = ((($4)) + 36 | 0);
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = $33 >>> 22;
    $35 = $33 & 4194303;
    $36 = ($34 * 977) | 0;
    $37 = (($36) + ($15)) | 0;
    $38 = $34 << 6;
    $39 = (($38) + ($17)) | 0;
    $40 = $37 >>> 26;
    $41 = (($39) + ($40)) | 0;
    $42 = $37 & 67108863;
    $43 = $41 >>> 26;
    $44 = (($43) + ($19)) | 0;
    $45 = $41 & 67108863;
    $46 = $44 >>> 26;
    $47 = (($46) + ($21)) | 0;
    $48 = $44 & 67108863;
    $49 = $47 >>> 26;
    $50 = (($49) + ($23)) | 0;
    $51 = $47 & 67108863;
    $52 = $50 >>> 26;
    $53 = (($52) + ($25)) | 0;
    $54 = $50 & 67108863;
    $55 = $53 >>> 26;
    $56 = (($55) + ($27)) | 0;
    $57 = $53 & 67108863;
    $58 = $56 >>> 26;
    $59 = (($58) + ($29)) | 0;
    $60 = $56 & 67108863;
    $61 = $59 >>> 26;
    $62 = (($61) + ($31)) | 0;
    $63 = $59 & 67108863;
    $64 = $62 >>> 26;
    $65 = (($64) + ($35)) | 0;
    $66 = $62 & 67108863;
    HEAP32[$4 >> 2] = $42;
    HEAP32[$16 >> 2] = $45;
    HEAP32[$18 >> 2] = $48;
    HEAP32[$20 >> 2] = $51;
    HEAP32[$22 >> 2] = $54;
    HEAP32[$24 >> 2] = $57;
    HEAP32[$26 >> 2] = $60;
    HEAP32[$28 >> 2] = $63;
    HEAP32[$30 >> 2] = $66;
    HEAP32[$32 >> 2] = $65;
    _secp256k1_fe_mul($5, $2, $3);
    $$sroa$0$0$$sroa_idx35 = ((($1)) + 40 | 0);
    $$sroa$0$0$copyload36 = HEAP32[$$sroa$0$0$$sroa_idx35 >> 2] | 0;
    $$sroa$6$0$$sroa_idx39 = ((($1)) + 44 | 0);
    $$sroa$6$0$copyload40 = HEAP32[$$sroa$6$0$$sroa_idx39 >> 2] | 0;
    $$sroa$8$0$$sroa_idx43 = ((($1)) + 48 | 0);
    $$sroa$8$0$copyload44 = HEAP32[$$sroa$8$0$$sroa_idx43 >> 2] | 0;
    $$sroa$10$0$$sroa_idx47 = ((($1)) + 52 | 0);
    $$sroa$10$0$copyload48 = HEAP32[$$sroa$10$0$$sroa_idx47 >> 2] | 0;
    $$sroa$12$0$$sroa_idx51 = ((($1)) + 56 | 0);
    $$sroa$12$0$copyload52 = HEAP32[$$sroa$12$0$$sroa_idx51 >> 2] | 0;
    $$sroa$14$0$$sroa_idx55 = ((($1)) + 60 | 0);
    $$sroa$14$0$copyload56 = HEAP32[$$sroa$14$0$$sroa_idx55 >> 2] | 0;
    $$sroa$16$0$$sroa_idx59 = ((($1)) + 64 | 0);
    $$sroa$16$0$copyload60 = HEAP32[$$sroa$16$0$$sroa_idx59 >> 2] | 0;
    $$sroa$18$0$$sroa_idx63 = ((($1)) + 68 | 0);
    $$sroa$18$0$copyload64 = HEAP32[$$sroa$18$0$$sroa_idx63 >> 2] | 0;
    $$sroa$20$0$$sroa_idx67 = ((($1)) + 72 | 0);
    $$sroa$20$0$copyload68 = HEAP32[$$sroa$20$0$$sroa_idx67 >> 2] | 0;
    $$sroa$22$0$$sroa_idx71 = ((($1)) + 76 | 0);
    $$sroa$22$0$copyload72 = HEAP32[$$sroa$22$0$$sroa_idx71 >> 2] | 0;
    $67 = $$sroa$22$0$copyload72 >>> 22;
    $68 = $$sroa$22$0$copyload72 & 4194303;
    $69 = ($67 * 977) | 0;
    $70 = (($69) + ($$sroa$0$0$copyload36)) | 0;
    $71 = $67 << 6;
    $72 = (($71) + ($$sroa$6$0$copyload40)) | 0;
    $73 = $70 >>> 26;
    $74 = (($72) + ($73)) | 0;
    $75 = $70 & 67108863;
    $76 = $74 >>> 26;
    $77 = (($76) + ($$sroa$8$0$copyload44)) | 0;
    $78 = $74 & 67108863;
    $79 = $77 >>> 26;
    $80 = (($79) + ($$sroa$10$0$copyload48)) | 0;
    $81 = $77 & 67108863;
    $82 = $80 >>> 26;
    $83 = (($82) + ($$sroa$12$0$copyload52)) | 0;
    $84 = $80 & 67108863;
    $85 = $83 >>> 26;
    $86 = (($85) + ($$sroa$14$0$copyload56)) | 0;
    $87 = $83 & 67108863;
    $88 = $86 >>> 26;
    $89 = (($88) + ($$sroa$16$0$copyload60)) | 0;
    $90 = $86 & 67108863;
    $91 = $89 >>> 26;
    $92 = (($91) + ($$sroa$18$0$copyload64)) | 0;
    $93 = $89 & 67108863;
    $94 = $92 >>> 26;
    $95 = (($94) + ($$sroa$20$0$copyload68)) | 0;
    $96 = $92 & 67108863;
    $97 = $95 >>> 26;
    $98 = (($97) + ($68)) | 0;
    $99 = $95 & 67108863;
    $100 = ((($2)) + 40 | 0);
    _secp256k1_fe_mul($6, $100, $3);
    _secp256k1_fe_mul($6, $6, $14);
    dest = $7;
    src = $14;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $8;
    src = $4;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $101 = HEAP32[$5 >> 2] | 0;
    $102 = HEAP32[$8 >> 2] | 0;
    $103 = (($102) + ($101)) | 0;
    HEAP32[$8 >> 2] = $103;
    $104 = ((($5)) + 4 | 0);
    $105 = HEAP32[$104 >> 2] | 0;
    $106 = ((($8)) + 4 | 0);
    $107 = HEAP32[$106 >> 2] | 0;
    $108 = (($107) + ($105)) | 0;
    HEAP32[$106 >> 2] = $108;
    $109 = ((($5)) + 8 | 0);
    $110 = HEAP32[$109 >> 2] | 0;
    $111 = ((($8)) + 8 | 0);
    $112 = HEAP32[$111 >> 2] | 0;
    $113 = (($112) + ($110)) | 0;
    HEAP32[$111 >> 2] = $113;
    $114 = ((($5)) + 12 | 0);
    $115 = HEAP32[$114 >> 2] | 0;
    $116 = ((($8)) + 12 | 0);
    $117 = HEAP32[$116 >> 2] | 0;
    $118 = (($117) + ($115)) | 0;
    HEAP32[$116 >> 2] = $118;
    $119 = ((($5)) + 16 | 0);
    $120 = HEAP32[$119 >> 2] | 0;
    $121 = ((($8)) + 16 | 0);
    $122 = HEAP32[$121 >> 2] | 0;
    $123 = (($122) + ($120)) | 0;
    HEAP32[$121 >> 2] = $123;
    $124 = ((($5)) + 20 | 0);
    $125 = HEAP32[$124 >> 2] | 0;
    $126 = ((($8)) + 20 | 0);
    $127 = HEAP32[$126 >> 2] | 0;
    $128 = (($127) + ($125)) | 0;
    HEAP32[$126 >> 2] = $128;
    $129 = ((($5)) + 24 | 0);
    $130 = HEAP32[$129 >> 2] | 0;
    $131 = ((($8)) + 24 | 0);
    $132 = HEAP32[$131 >> 2] | 0;
    $133 = (($132) + ($130)) | 0;
    HEAP32[$131 >> 2] = $133;
    $134 = ((($5)) + 28 | 0);
    $135 = HEAP32[$134 >> 2] | 0;
    $136 = ((($8)) + 28 | 0);
    $137 = HEAP32[$136 >> 2] | 0;
    $138 = (($137) + ($135)) | 0;
    HEAP32[$136 >> 2] = $138;
    $139 = ((($5)) + 32 | 0);
    $140 = HEAP32[$139 >> 2] | 0;
    $141 = ((($8)) + 32 | 0);
    $142 = HEAP32[$141 >> 2] | 0;
    $143 = (($142) + ($140)) | 0;
    HEAP32[$141 >> 2] = $143;
    $144 = ((($5)) + 36 | 0);
    $145 = HEAP32[$144 >> 2] | 0;
    $146 = ((($8)) + 36 | 0);
    $147 = HEAP32[$146 >> 2] | 0;
    $148 = (($147) + ($145)) | 0;
    HEAP32[$146 >> 2] = $148;
    $$sroa$6$0$$sroa_idx37 = ((($9)) + 4 | 0);
    $$sroa$8$0$$sroa_idx41 = ((($9)) + 8 | 0);
    $$sroa$10$0$$sroa_idx45 = ((($9)) + 12 | 0);
    $$sroa$12$0$$sroa_idx49 = ((($9)) + 16 | 0);
    $$sroa$14$0$$sroa_idx53 = ((($9)) + 20 | 0);
    $$sroa$16$0$$sroa_idx57 = ((($9)) + 24 | 0);
    $$sroa$18$0$$sroa_idx61 = ((($9)) + 28 | 0);
    $$sroa$20$0$$sroa_idx65 = ((($9)) + 32 | 0);
    $$sroa$22$0$$sroa_idx69 = ((($9)) + 36 | 0);
    $149 = HEAP32[$6 >> 2] | 0;
    $150 = (($75) + ($149)) | 0;
    HEAP32[$9 >> 2] = $150;
    $151 = ((($6)) + 4 | 0);
    $152 = HEAP32[$151 >> 2] | 0;
    $153 = (($78) + ($152)) | 0;
    HEAP32[$$sroa$6$0$$sroa_idx37 >> 2] = $153;
    $154 = ((($6)) + 8 | 0);
    $155 = HEAP32[$154 >> 2] | 0;
    $156 = (($81) + ($155)) | 0;
    HEAP32[$$sroa$8$0$$sroa_idx41 >> 2] = $156;
    $157 = ((($6)) + 12 | 0);
    $158 = HEAP32[$157 >> 2] | 0;
    $159 = (($84) + ($158)) | 0;
    HEAP32[$$sroa$10$0$$sroa_idx45 >> 2] = $159;
    $160 = ((($6)) + 16 | 0);
    $161 = HEAP32[$160 >> 2] | 0;
    $162 = (($87) + ($161)) | 0;
    HEAP32[$$sroa$12$0$$sroa_idx49 >> 2] = $162;
    $163 = ((($6)) + 20 | 0);
    $164 = HEAP32[$163 >> 2] | 0;
    $165 = (($90) + ($164)) | 0;
    HEAP32[$$sroa$14$0$$sroa_idx53 >> 2] = $165;
    $166 = ((($6)) + 24 | 0);
    $167 = HEAP32[$166 >> 2] | 0;
    $168 = (($93) + ($167)) | 0;
    HEAP32[$$sroa$16$0$$sroa_idx57 >> 2] = $168;
    $169 = ((($6)) + 28 | 0);
    $170 = HEAP32[$169 >> 2] | 0;
    $171 = (($96) + ($170)) | 0;
    HEAP32[$$sroa$18$0$$sroa_idx61 >> 2] = $171;
    $172 = ((($6)) + 32 | 0);
    $173 = HEAP32[$172 >> 2] | 0;
    $174 = (($99) + ($173)) | 0;
    HEAP32[$$sroa$20$0$$sroa_idx65 >> 2] = $174;
    $175 = ((($6)) + 36 | 0);
    $176 = HEAP32[$175 >> 2] | 0;
    $177 = (($98) + ($176)) | 0;
    HEAP32[$$sroa$22$0$$sroa_idx69 >> 2] = $177;
    _secp256k1_fe_sqr($10, $9);
    _secp256k1_fe_mul($11, $10, $8);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($12, $8);
    _secp256k1_fe_mul($8, $4, $5);
    $178 = HEAP32[$8 >> 2] | 0;
    $179 = (268431548 - ($178)) | 0;
    HEAP32[$8 >> 2] = $179;
    $180 = HEAP32[$106 >> 2] | 0;
    $181 = (268435196 - ($180)) | 0;
    HEAP32[$106 >> 2] = $181;
    $182 = HEAP32[$111 >> 2] | 0;
    $183 = (268435452 - ($182)) | 0;
    HEAP32[$111 >> 2] = $183;
    $184 = HEAP32[$116 >> 2] | 0;
    $185 = (268435452 - ($184)) | 0;
    HEAP32[$116 >> 2] = $185;
    $186 = HEAP32[$121 >> 2] | 0;
    $187 = (268435452 - ($186)) | 0;
    HEAP32[$121 >> 2] = $187;
    $188 = HEAP32[$126 >> 2] | 0;
    $189 = (268435452 - ($188)) | 0;
    HEAP32[$126 >> 2] = $189;
    $190 = HEAP32[$131 >> 2] | 0;
    $191 = (268435452 - ($190)) | 0;
    HEAP32[$131 >> 2] = $191;
    $192 = HEAP32[$136 >> 2] | 0;
    $193 = (268435452 - ($192)) | 0;
    HEAP32[$136 >> 2] = $193;
    $194 = HEAP32[$141 >> 2] | 0;
    $195 = (268435452 - ($194)) | 0;
    HEAP32[$141 >> 2] = $195;
    $196 = HEAP32[$146 >> 2] | 0;
    $197 = (16777212 - ($196)) | 0;
    HEAP32[$146 >> 2] = $197;
    $198 = HEAP32[$12 >> 2] | 0;
    $199 = (($198) + ($179)) | 0;
    HEAP32[$12 >> 2] = $199;
    $200 = ((($12)) + 4 | 0);
    $201 = HEAP32[$200 >> 2] | 0;
    $202 = (($201) + ($181)) | 0;
    HEAP32[$200 >> 2] = $202;
    $203 = ((($12)) + 8 | 0);
    $204 = HEAP32[$203 >> 2] | 0;
    $205 = (($204) + ($183)) | 0;
    HEAP32[$203 >> 2] = $205;
    $206 = ((($12)) + 12 | 0);
    $207 = HEAP32[$206 >> 2] | 0;
    $208 = (($207) + ($185)) | 0;
    HEAP32[$206 >> 2] = $208;
    $209 = ((($12)) + 16 | 0);
    $210 = HEAP32[$209 >> 2] | 0;
    $211 = (($210) + ($187)) | 0;
    HEAP32[$209 >> 2] = $211;
    $212 = ((($12)) + 20 | 0);
    $213 = HEAP32[$212 >> 2] | 0;
    $214 = (($213) + ($189)) | 0;
    HEAP32[$212 >> 2] = $214;
    $215 = ((($12)) + 24 | 0);
    $216 = HEAP32[$215 >> 2] | 0;
    $217 = (($216) + ($191)) | 0;
    HEAP32[$215 >> 2] = $217;
    $218 = ((($12)) + 28 | 0);
    $219 = HEAP32[$218 >> 2] | 0;
    $220 = (($219) + ($193)) | 0;
    HEAP32[$218 >> 2] = $220;
    $221 = ((($12)) + 32 | 0);
    $222 = HEAP32[$221 >> 2] | 0;
    $223 = (($222) + ($195)) | 0;
    HEAP32[$221 >> 2] = $223;
    $224 = ((($12)) + 36 | 0);
    $225 = HEAP32[$224 >> 2] | 0;
    $226 = (($225) + ($197)) | 0;
    HEAP32[$224 >> 2] = $226;
    _secp256k1_fe_sqr($8, $12);
    $227 = ((($0)) + 80 | 0);
    _secp256k1_fe_mul($227, $9, $7);
    $228 = HEAP32[$227 >> 2] | 0;
    $229 = ((($0)) + 84 | 0);
    $230 = HEAP32[$229 >> 2] | 0;
    $231 = ((($0)) + 88 | 0);
    $232 = HEAP32[$231 >> 2] | 0;
    $233 = ((($0)) + 92 | 0);
    $234 = HEAP32[$233 >> 2] | 0;
    $235 = ((($0)) + 96 | 0);
    $236 = HEAP32[$235 >> 2] | 0;
    $237 = ((($0)) + 100 | 0);
    $238 = HEAP32[$237 >> 2] | 0;
    $239 = ((($0)) + 104 | 0);
    $240 = HEAP32[$239 >> 2] | 0;
    $241 = ((($0)) + 108 | 0);
    $242 = HEAP32[$241 >> 2] | 0;
    $243 = ((($0)) + 112 | 0);
    $244 = HEAP32[$243 >> 2] | 0;
    $245 = ((($0)) + 116 | 0);
    $246 = HEAP32[$245 >> 2] | 0;
    $247 = $246 >>> 22;
    $248 = $246 & 4194303;
    $249 = ($247 * 977) | 0;
    $250 = (($249) + ($228)) | 0;
    $251 = $247 << 6;
    $252 = (($251) + ($230)) | 0;
    $253 = $250 >>> 26;
    $254 = (($252) + ($253)) | 0;
    $255 = $250 ^ 976;
    $256 = $254 >>> 26;
    $257 = (($256) + ($232)) | 0;
    $258 = $254 | $250;
    $259 = $254 ^ 64;
    $260 = $259 & $255;
    $261 = $257 >>> 26;
    $262 = (($261) + ($234)) | 0;
    $263 = $258 | $257;
    $264 = $260 & $257;
    $265 = $262 >>> 26;
    $266 = (($265) + ($236)) | 0;
    $267 = $263 | $262;
    $268 = $264 & $262;
    $269 = $266 >>> 26;
    $270 = (($269) + ($238)) | 0;
    $271 = $267 | $266;
    $272 = $268 & $266;
    $273 = $270 >>> 26;
    $274 = (($273) + ($240)) | 0;
    $275 = $271 | $270;
    $276 = $272 & $270;
    $277 = $274 >>> 26;
    $278 = (($277) + ($242)) | 0;
    $279 = $275 | $274;
    $280 = $276 & $274;
    $281 = $278 >>> 26;
    $282 = (($281) + ($244)) | 0;
    $283 = $279 | $278;
    $284 = $280 & $278;
    $285 = $282 >>> 26;
    $286 = (($285) + ($248)) | 0;
    $287 = $283 | $282;
    $288 = $287 & 67108863;
    $289 = $284 & $282;
    $290 = $288 | $286;
    $291 = $286 ^ 62914560;
    $292 = $289 & $291;
    $293 = ($290 | 0) == (0);
    $294 = ($292 | 0) == (67108863);
    $295 = $293 | $294;
    $296 = HEAP32[$13 >> 2] | 0;
    $297 = (1 - ($296)) | 0;
    $298 = $295 ? $297 : 0;
    $299 = $297 << 1;
    $300 = Math_imul($299, $228) | 0;
    HEAP32[$227 >> 2] = $300;
    $301 = Math_imul($230, $299) | 0;
    HEAP32[$229 >> 2] = $301;
    $302 = Math_imul($232, $299) | 0;
    HEAP32[$231 >> 2] = $302;
    $303 = Math_imul($234, $299) | 0;
    HEAP32[$233 >> 2] = $303;
    $304 = Math_imul($236, $299) | 0;
    HEAP32[$235 >> 2] = $304;
    $305 = Math_imul($238, $299) | 0;
    HEAP32[$237 >> 2] = $305;
    $306 = Math_imul($240, $299) | 0;
    HEAP32[$239 >> 2] = $306;
    $307 = Math_imul($242, $299) | 0;
    HEAP32[$241 >> 2] = $307;
    $308 = Math_imul($244, $299) | 0;
    HEAP32[$243 >> 2] = $308;
    $309 = Math_imul($246, $299) | 0;
    HEAP32[$245 >> 2] = $309;
    dest = $0;
    src = $8;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $310 = HEAP32[$11 >> 2] | 0;
    $311 = (268431548 - ($310)) | 0;
    $312 = ((($11)) + 4 | 0);
    $313 = HEAP32[$312 >> 2] | 0;
    $314 = (268435196 - ($313)) | 0;
    $315 = ((($11)) + 8 | 0);
    $316 = HEAP32[$315 >> 2] | 0;
    $317 = (268435452 - ($316)) | 0;
    $318 = ((($11)) + 12 | 0);
    $319 = HEAP32[$318 >> 2] | 0;
    $320 = (268435452 - ($319)) | 0;
    $321 = ((($11)) + 16 | 0);
    $322 = HEAP32[$321 >> 2] | 0;
    $323 = (268435452 - ($322)) | 0;
    $324 = ((($11)) + 20 | 0);
    $325 = HEAP32[$324 >> 2] | 0;
    $326 = (268435452 - ($325)) | 0;
    $327 = ((($11)) + 24 | 0);
    $328 = HEAP32[$327 >> 2] | 0;
    $329 = (268435452 - ($328)) | 0;
    $330 = ((($11)) + 28 | 0);
    $331 = HEAP32[$330 >> 2] | 0;
    $332 = (268435452 - ($331)) | 0;
    $333 = ((($11)) + 32 | 0);
    $334 = HEAP32[$333 >> 2] | 0;
    $335 = (268435452 - ($334)) | 0;
    $336 = ((($11)) + 36 | 0);
    $337 = HEAP32[$336 >> 2] | 0;
    $338 = (16777212 - ($337)) | 0;
    $339 = HEAP32[$0 >> 2] | 0;
    $340 = (($339) + ($311)) | 0;
    HEAP32[$0 >> 2] = $340;
    $341 = ((($0)) + 4 | 0);
    $342 = HEAP32[$341 >> 2] | 0;
    $343 = (($342) + ($314)) | 0;
    HEAP32[$341 >> 2] = $343;
    $344 = ((($0)) + 8 | 0);
    $345 = HEAP32[$344 >> 2] | 0;
    $346 = (($345) + ($317)) | 0;
    HEAP32[$344 >> 2] = $346;
    $347 = ((($0)) + 12 | 0);
    $348 = HEAP32[$347 >> 2] | 0;
    $349 = (($348) + ($320)) | 0;
    HEAP32[$347 >> 2] = $349;
    $350 = ((($0)) + 16 | 0);
    $351 = HEAP32[$350 >> 2] | 0;
    $352 = (($351) + ($323)) | 0;
    HEAP32[$350 >> 2] = $352;
    $353 = ((($0)) + 20 | 0);
    $354 = HEAP32[$353 >> 2] | 0;
    $355 = (($354) + ($326)) | 0;
    HEAP32[$353 >> 2] = $355;
    $356 = ((($0)) + 24 | 0);
    $357 = HEAP32[$356 >> 2] | 0;
    $358 = (($357) + ($329)) | 0;
    HEAP32[$356 >> 2] = $358;
    $359 = ((($0)) + 28 | 0);
    $360 = HEAP32[$359 >> 2] | 0;
    $361 = (($360) + ($332)) | 0;
    HEAP32[$359 >> 2] = $361;
    $362 = ((($0)) + 32 | 0);
    $363 = HEAP32[$362 >> 2] | 0;
    $364 = (($363) + ($335)) | 0;
    HEAP32[$362 >> 2] = $364;
    $365 = ((($0)) + 36 | 0);
    $366 = HEAP32[$365 >> 2] | 0;
    $367 = (($366) + ($338)) | 0;
    HEAP32[$365 >> 2] = $367;
    _secp256k1_fe_normalize($0);
    $368 = ($311 * 3) | 0;
    HEAP32[$11 >> 2] = $368;
    $369 = ($314 * 3) | 0;
    HEAP32[$312 >> 2] = $369;
    $370 = ($317 * 3) | 0;
    HEAP32[$315 >> 2] = $370;
    $371 = ($320 * 3) | 0;
    HEAP32[$318 >> 2] = $371;
    $372 = ($323 * 3) | 0;
    HEAP32[$321 >> 2] = $372;
    $373 = ($326 * 3) | 0;
    HEAP32[$324 >> 2] = $373;
    $374 = ($329 * 3) | 0;
    HEAP32[$327 >> 2] = $374;
    $375 = ($332 * 3) | 0;
    HEAP32[$330 >> 2] = $375;
    $376 = ($335 * 3) | 0;
    HEAP32[$333 >> 2] = $376;
    $377 = ($338 * 3) | 0;
    HEAP32[$336 >> 2] = $377;
    $378 = HEAP32[$8 >> 2] | 0;
    $379 = $378 << 1;
    $380 = HEAP32[$106 >> 2] | 0;
    $381 = $380 << 1;
    $382 = HEAP32[$111 >> 2] | 0;
    $383 = $382 << 1;
    $384 = HEAP32[$116 >> 2] | 0;
    $385 = $384 << 1;
    $386 = HEAP32[$121 >> 2] | 0;
    $387 = $386 << 1;
    $388 = HEAP32[$126 >> 2] | 0;
    $389 = $388 << 1;
    $390 = HEAP32[$131 >> 2] | 0;
    $391 = $390 << 1;
    $392 = HEAP32[$136 >> 2] | 0;
    $393 = $392 << 1;
    $394 = HEAP32[$141 >> 2] | 0;
    $395 = $394 << 1;
    $396 = HEAP32[$146 >> 2] | 0;
    $397 = $396 << 1;
    $398 = (($379) + ($368)) | 0;
    HEAP32[$8 >> 2] = $398;
    $399 = (($381) + ($369)) | 0;
    HEAP32[$106 >> 2] = $399;
    $400 = (($383) + ($370)) | 0;
    HEAP32[$111 >> 2] = $400;
    $401 = (($385) + ($371)) | 0;
    HEAP32[$116 >> 2] = $401;
    $402 = (($387) + ($372)) | 0;
    HEAP32[$121 >> 2] = $402;
    $403 = (($389) + ($373)) | 0;
    HEAP32[$126 >> 2] = $403;
    $404 = (($391) + ($374)) | 0;
    HEAP32[$131 >> 2] = $404;
    $405 = (($393) + ($375)) | 0;
    HEAP32[$136 >> 2] = $405;
    $406 = (($395) + ($376)) | 0;
    HEAP32[$141 >> 2] = $406;
    $407 = (($397) + ($377)) | 0;
    HEAP32[$146 >> 2] = $407;
    _secp256k1_fe_mul($8, $8, $12);
    $408 = HEAP32[$10 >> 2] | 0;
    $409 = HEAP32[$8 >> 2] | 0;
    $410 = (($409) + ($408)) | 0;
    HEAP32[$8 >> 2] = $410;
    $411 = ((($10)) + 4 | 0);
    $412 = HEAP32[$411 >> 2] | 0;
    $413 = HEAP32[$106 >> 2] | 0;
    $414 = (($413) + ($412)) | 0;
    HEAP32[$106 >> 2] = $414;
    $415 = ((($10)) + 8 | 0);
    $416 = HEAP32[$415 >> 2] | 0;
    $417 = HEAP32[$111 >> 2] | 0;
    $418 = (($417) + ($416)) | 0;
    HEAP32[$111 >> 2] = $418;
    $419 = ((($10)) + 12 | 0);
    $420 = HEAP32[$419 >> 2] | 0;
    $421 = HEAP32[$116 >> 2] | 0;
    $422 = (($421) + ($420)) | 0;
    HEAP32[$116 >> 2] = $422;
    $423 = ((($10)) + 16 | 0);
    $424 = HEAP32[$423 >> 2] | 0;
    $425 = HEAP32[$121 >> 2] | 0;
    $426 = (($425) + ($424)) | 0;
    HEAP32[$121 >> 2] = $426;
    $427 = ((($10)) + 20 | 0);
    $428 = HEAP32[$427 >> 2] | 0;
    $429 = HEAP32[$126 >> 2] | 0;
    $430 = (($429) + ($428)) | 0;
    HEAP32[$126 >> 2] = $430;
    $431 = ((($10)) + 24 | 0);
    $432 = HEAP32[$431 >> 2] | 0;
    $433 = HEAP32[$131 >> 2] | 0;
    $434 = (($433) + ($432)) | 0;
    HEAP32[$131 >> 2] = $434;
    $435 = ((($10)) + 28 | 0);
    $436 = HEAP32[$435 >> 2] | 0;
    $437 = HEAP32[$136 >> 2] | 0;
    $438 = (($437) + ($436)) | 0;
    HEAP32[$136 >> 2] = $438;
    $439 = ((($10)) + 32 | 0);
    $440 = HEAP32[$439 >> 2] | 0;
    $441 = HEAP32[$141 >> 2] | 0;
    $442 = (($441) + ($440)) | 0;
    HEAP32[$141 >> 2] = $442;
    $443 = ((($10)) + 36 | 0);
    $444 = HEAP32[$443 >> 2] | 0;
    $445 = HEAP32[$146 >> 2] | 0;
    $446 = (($445) + ($444)) | 0;
    HEAP32[$146 >> 2] = $446;
    $447 = (402647322 - ($410)) | 0;
    $448 = ((($0)) + 40 | 0);
    $449 = (402652794 - ($414)) | 0;
    $450 = ((($0)) + 44 | 0);
    $451 = (402653178 - ($418)) | 0;
    $452 = ((($0)) + 48 | 0);
    $453 = (402653178 - ($422)) | 0;
    $454 = ((($0)) + 52 | 0);
    $455 = (402653178 - ($426)) | 0;
    $456 = ((($0)) + 56 | 0);
    $457 = (402653178 - ($430)) | 0;
    $458 = ((($0)) + 60 | 0);
    $459 = (402653178 - ($434)) | 0;
    $460 = ((($0)) + 64 | 0);
    $461 = (402653178 - ($438)) | 0;
    $462 = ((($0)) + 68 | 0);
    $463 = (402653178 - ($442)) | 0;
    $464 = ((($0)) + 72 | 0);
    $465 = (25165818 - ($446)) | 0;
    $466 = ((($0)) + 76 | 0);
    $467 = $465 >>> 22;
    $468 = $465 & 4194303;
    $469 = ($467 * 977) | 0;
    $470 = (($469) + ($447)) | 0;
    $471 = $467 << 6;
    $472 = (($471) + ($449)) | 0;
    $473 = $470 >>> 26;
    $474 = (($472) + ($473)) | 0;
    $475 = $470 & 67108863;
    $476 = $474 >>> 26;
    $477 = (($476) + ($451)) | 0;
    $478 = $474 & 67108863;
    $479 = $477 >>> 26;
    $480 = (($479) + ($453)) | 0;
    $481 = $477 & 67108863;
    $482 = $480 >>> 26;
    $483 = (($482) + ($455)) | 0;
    $484 = $480 & 67108863;
    $485 = $483 >>> 26;
    $486 = (($485) + ($457)) | 0;
    $487 = $483 & 67108863;
    $488 = $486 >>> 26;
    $489 = (($488) + ($459)) | 0;
    $490 = $486 & 67108863;
    $491 = $489 >>> 26;
    $492 = (($491) + ($461)) | 0;
    $493 = $489 & 67108863;
    $494 = $492 >>> 26;
    $495 = (($494) + ($463)) | 0;
    $496 = $492 & 67108863;
    $497 = $495 >>> 26;
    $498 = (($497) + ($468)) | 0;
    $499 = $495 & 67108863;
    HEAP32[$448 >> 2] = $475;
    HEAP32[$450 >> 2] = $478;
    HEAP32[$452 >> 2] = $481;
    HEAP32[$454 >> 2] = $484;
    HEAP32[$456 >> 2] = $487;
    HEAP32[$458 >> 2] = $490;
    HEAP32[$460 >> 2] = $493;
    HEAP32[$462 >> 2] = $496;
    HEAP32[$464 >> 2] = $499;
    HEAP32[$466 >> 2] = $498;
    $500 = HEAP32[$13 >> 2] | 0;
    $501 = (1 - ($500)) | 0;
    $502 = $501 << 2;
    $503 = HEAP32[$0 >> 2] | 0;
    $504 = Math_imul($502, $503) | 0;
    HEAP32[$0 >> 2] = $504;
    $505 = HEAP32[$341 >> 2] | 0;
    $506 = Math_imul($505, $502) | 0;
    HEAP32[$341 >> 2] = $506;
    $507 = HEAP32[$344 >> 2] | 0;
    $508 = Math_imul($507, $502) | 0;
    HEAP32[$344 >> 2] = $508;
    $509 = HEAP32[$347 >> 2] | 0;
    $510 = Math_imul($509, $502) | 0;
    HEAP32[$347 >> 2] = $510;
    $511 = HEAP32[$350 >> 2] | 0;
    $512 = Math_imul($511, $502) | 0;
    HEAP32[$350 >> 2] = $512;
    $513 = HEAP32[$353 >> 2] | 0;
    $514 = Math_imul($513, $502) | 0;
    HEAP32[$353 >> 2] = $514;
    $515 = HEAP32[$356 >> 2] | 0;
    $516 = Math_imul($515, $502) | 0;
    HEAP32[$356 >> 2] = $516;
    $517 = HEAP32[$359 >> 2] | 0;
    $518 = Math_imul($517, $502) | 0;
    HEAP32[$359 >> 2] = $518;
    $519 = HEAP32[$362 >> 2] | 0;
    $520 = Math_imul($519, $502) | 0;
    HEAP32[$362 >> 2] = $520;
    $521 = HEAP32[$365 >> 2] | 0;
    $522 = Math_imul($521, $502) | 0;
    HEAP32[$365 >> 2] = $522;
    $523 = HEAP32[$13 >> 2] | 0;
    $524 = (1 - ($523)) | 0;
    $525 = $524 << 2;
    $526 = Math_imul($525, $475) | 0;
    HEAP32[$448 >> 2] = $526;
    $527 = Math_imul($478, $525) | 0;
    HEAP32[$450 >> 2] = $527;
    $528 = Math_imul($481, $525) | 0;
    HEAP32[$452 >> 2] = $528;
    $529 = Math_imul($484, $525) | 0;
    HEAP32[$454 >> 2] = $529;
    $530 = Math_imul($487, $525) | 0;
    HEAP32[$456 >> 2] = $530;
    $531 = Math_imul($490, $525) | 0;
    HEAP32[$458 >> 2] = $531;
    $532 = Math_imul($493, $525) | 0;
    HEAP32[$460 >> 2] = $532;
    $533 = Math_imul($496, $525) | 0;
    HEAP32[$462 >> 2] = $533;
    $534 = Math_imul($499, $525) | 0;
    HEAP32[$464 >> 2] = $534;
    $535 = Math_imul($498, $525) | 0;
    HEAP32[$466 >> 2] = $535;
    $536 = HEAP32[$13 >> 2] | 0;
    $537 = (($536) + -1) | 0;
    $538 = (0 - ($536)) | 0;
    $539 = $504 & $537;
    $540 = HEAP32[$2 >> 2] | 0;
    $541 = $540 & $538;
    $542 = $541 | $539;
    HEAP32[$0 >> 2] = $542;
    $543 = $506 & $537;
    $544 = ((($2)) + 4 | 0);
    $545 = HEAP32[$544 >> 2] | 0;
    $546 = $545 & $538;
    $547 = $546 | $543;
    HEAP32[$341 >> 2] = $547;
    $548 = $508 & $537;
    $549 = ((($2)) + 8 | 0);
    $550 = HEAP32[$549 >> 2] | 0;
    $551 = $550 & $538;
    $552 = $551 | $548;
    HEAP32[$344 >> 2] = $552;
    $553 = $510 & $537;
    $554 = ((($2)) + 12 | 0);
    $555 = HEAP32[$554 >> 2] | 0;
    $556 = $555 & $538;
    $557 = $556 | $553;
    HEAP32[$347 >> 2] = $557;
    $558 = $512 & $537;
    $559 = ((($2)) + 16 | 0);
    $560 = HEAP32[$559 >> 2] | 0;
    $561 = $560 & $538;
    $562 = $561 | $558;
    HEAP32[$350 >> 2] = $562;
    $563 = $514 & $537;
    $564 = ((($2)) + 20 | 0);
    $565 = HEAP32[$564 >> 2] | 0;
    $566 = $565 & $538;
    $567 = $566 | $563;
    HEAP32[$353 >> 2] = $567;
    $568 = $516 & $537;
    $569 = ((($2)) + 24 | 0);
    $570 = HEAP32[$569 >> 2] | 0;
    $571 = $570 & $538;
    $572 = $571 | $568;
    HEAP32[$356 >> 2] = $572;
    $573 = $518 & $537;
    $574 = ((($2)) + 28 | 0);
    $575 = HEAP32[$574 >> 2] | 0;
    $576 = $575 & $538;
    $577 = $576 | $573;
    HEAP32[$359 >> 2] = $577;
    $578 = $520 & $537;
    $579 = ((($2)) + 32 | 0);
    $580 = HEAP32[$579 >> 2] | 0;
    $581 = $580 & $538;
    $582 = $581 | $578;
    HEAP32[$362 >> 2] = $582;
    $583 = $522 & $537;
    $584 = ((($2)) + 36 | 0);
    $585 = HEAP32[$584 >> 2] | 0;
    $586 = $585 & $538;
    $587 = $586 | $583;
    HEAP32[$365 >> 2] = $587;
    $588 = HEAP32[$13 >> 2] | 0;
    $589 = (($588) + -1) | 0;
    $590 = (0 - ($588)) | 0;
    $591 = $526 & $589;
    $592 = HEAP32[$100 >> 2] | 0;
    $593 = $592 & $590;
    $594 = $593 | $591;
    HEAP32[$448 >> 2] = $594;
    $595 = $527 & $589;
    $596 = ((($2)) + 44 | 0);
    $597 = HEAP32[$596 >> 2] | 0;
    $598 = $597 & $590;
    $599 = $598 | $595;
    HEAP32[$450 >> 2] = $599;
    $600 = $528 & $589;
    $601 = ((($2)) + 48 | 0);
    $602 = HEAP32[$601 >> 2] | 0;
    $603 = $602 & $590;
    $604 = $603 | $600;
    HEAP32[$452 >> 2] = $604;
    $605 = $529 & $589;
    $606 = ((($2)) + 52 | 0);
    $607 = HEAP32[$606 >> 2] | 0;
    $608 = $607 & $590;
    $609 = $608 | $605;
    HEAP32[$454 >> 2] = $609;
    $610 = HEAP32[$456 >> 2] | 0;
    $611 = $610 & $589;
    $612 = ((($2)) + 56 | 0);
    $613 = HEAP32[$612 >> 2] | 0;
    $614 = $613 & $590;
    $615 = $614 | $611;
    HEAP32[$456 >> 2] = $615;
    $616 = HEAP32[$458 >> 2] | 0;
    $617 = $616 & $589;
    $618 = ((($2)) + 60 | 0);
    $619 = HEAP32[$618 >> 2] | 0;
    $620 = $619 & $590;
    $621 = $620 | $617;
    HEAP32[$458 >> 2] = $621;
    $622 = HEAP32[$460 >> 2] | 0;
    $623 = $622 & $589;
    $624 = ((($2)) + 64 | 0);
    $625 = HEAP32[$624 >> 2] | 0;
    $626 = $625 & $590;
    $627 = $626 | $623;
    HEAP32[$460 >> 2] = $627;
    $628 = HEAP32[$462 >> 2] | 0;
    $629 = $628 & $589;
    $630 = ((($2)) + 68 | 0);
    $631 = HEAP32[$630 >> 2] | 0;
    $632 = $631 & $590;
    $633 = $632 | $629;
    HEAP32[$462 >> 2] = $633;
    $634 = HEAP32[$464 >> 2] | 0;
    $635 = $634 & $589;
    $636 = ((($2)) + 72 | 0);
    $637 = HEAP32[$636 >> 2] | 0;
    $638 = $637 & $590;
    $639 = $638 | $635;
    HEAP32[$464 >> 2] = $639;
    $640 = HEAP32[$466 >> 2] | 0;
    $641 = $640 & $589;
    $642 = ((($2)) + 76 | 0);
    $643 = HEAP32[$642 >> 2] | 0;
    $644 = $643 & $590;
    $645 = $644 | $641;
    HEAP32[$466 >> 2] = $645;
    $646 = HEAP32[$13 >> 2] | 0;
    $647 = (($646) + -1) | 0;
    $648 = HEAP32[$227 >> 2] | 0;
    $649 = $648 & $647;
    $650 = $646 & 1;
    $651 = $649 | $650;
    HEAP32[$227 >> 2] = $651;
    $652 = HEAP32[$229 >> 2] | 0;
    $653 = $652 & $647;
    HEAP32[$229 >> 2] = $653;
    $654 = HEAP32[$231 >> 2] | 0;
    $655 = $654 & $647;
    HEAP32[$231 >> 2] = $655;
    $656 = HEAP32[$233 >> 2] | 0;
    $657 = $656 & $647;
    HEAP32[$233 >> 2] = $657;
    $658 = HEAP32[$235 >> 2] | 0;
    $659 = $658 & $647;
    HEAP32[$235 >> 2] = $659;
    $660 = HEAP32[$237 >> 2] | 0;
    $661 = $660 & $647;
    HEAP32[$237 >> 2] = $661;
    $662 = HEAP32[$239 >> 2] | 0;
    $663 = $662 & $647;
    HEAP32[$239 >> 2] = $663;
    $664 = HEAP32[$241 >> 2] | 0;
    $665 = $664 & $647;
    HEAP32[$241 >> 2] = $665;
    $666 = HEAP32[$243 >> 2] | 0;
    $667 = $666 & $647;
    HEAP32[$243 >> 2] = $667;
    $668 = HEAP32[$245 >> 2] | 0;
    $669 = $668 & $647;
    HEAP32[$245 >> 2] = $669;
    $670 = ((($0)) + 120 | 0);
    HEAP32[$670 >> 2] = $298;
    STACKTOP = sp;
    return;
  }

  function _secp256k1_fe_normalize($0) {
    $0 = $0 | 0;
    var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0,
      $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
    var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0,
      $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
    var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0,
      $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
    var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0,
      $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
    var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0,
      $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
    var $97 = 0, $98 = 0, $99 = 0, $fold = 0, $fold138 = 0, $fold139 = 0, $fold140 = 0, $fold141 = 0, $fold142 = 0,
      $fold143 = 0, $fold144 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = ((($0)) + 4 | 0);
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ((($0)) + 8 | 0);
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ((($0)) + 12 | 0);
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ((($0)) + 16 | 0);
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ((($0)) + 20 | 0);
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = ((($0)) + 24 | 0);
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ((($0)) + 28 | 0);
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = ((($0)) + 32 | 0);
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = ((($0)) + 36 | 0);
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $19 >>> 22;
    $21 = $19 & 4194303;
    $22 = ($20 * 977) | 0;
    $23 = (($22) + ($1)) | 0;
    $24 = $20 << 6;
    $25 = (($24) + ($3)) | 0;
    $26 = $23 >>> 26;
    $27 = (($25) + ($26)) | 0;
    $28 = $23 & 67108863;
    $29 = $27 >>> 26;
    $30 = (($29) + ($5)) | 0;
    $31 = $27 & 67108863;
    $32 = $30 >>> 26;
    $33 = (($32) + ($7)) | 0;
    $34 = $30 & 67108863;
    $35 = $33 >>> 26;
    $36 = (($35) + ($9)) | 0;
    $37 = $33 & 67108863;
    $38 = $33 & $30;
    $39 = $36 >>> 26;
    $40 = (($39) + ($11)) | 0;
    $41 = $36 & 67108863;
    $42 = $38 & $36;
    $43 = $40 >>> 26;
    $44 = (($43) + ($13)) | 0;
    $45 = $40 & 67108863;
    $46 = $42 & $40;
    $47 = $44 >>> 26;
    $48 = (($47) + ($15)) | 0;
    $49 = $44 & 67108863;
    $50 = $46 & $49;
    $51 = $48 >>> 26;
    $52 = (($51) + ($17)) | 0;
    $53 = $48 & 67108863;
    $54 = $50 & $48;
    $55 = $52 >>> 26;
    $56 = (($55) + ($21)) | 0;
    $57 = $52 & 67108863;
    $58 = $54 & $52;
    $59 = $56 >>> 22;
    $60 = ($56 | 0) == (4194303);
    $61 = ($58 | 0) == (67108863);
    $62 = $61 & $60;
    $63 = (($31) + 64) | 0;
    $64 = (($28) + 977) | 0;
    $65 = $64 >>> 26;
    $66 = (($63) + ($65)) | 0;
    $67 = ($66 >>> 0) > (67108863);
    $68 = $67 & $62;
    $69 = $68 & 1;
    $70 = $69 | $59;
    $71 = (0 - ($70)) | 0;
    $72 = $71 & 977;
    $73 = (($72) + ($28)) | 0;
    $74 = $70 << 6;
    $75 = (($74) + ($31)) | 0;
    $76 = $73 >>> 26;
    $77 = (($75) + ($76)) | 0;
    $fold = (($72) + ($23)) | 0;
    $78 = $fold & 67108863;
    $79 = $77 >>> 26;
    $80 = (($79) + ($34)) | 0;
    $81 = $77 & 67108863;
    $82 = $80 >>> 26;
    $83 = (($82) + ($37)) | 0;
    $fold138 = (($79) + ($30)) | 0;
    $84 = $fold138 & 67108863;
    $85 = $83 >>> 26;
    $86 = (($85) + ($41)) | 0;
    $fold139 = (($82) + ($33)) | 0;
    $87 = $fold139 & 67108863;
    $88 = $86 >>> 26;
    $89 = (($88) + ($45)) | 0;
    $fold140 = (($85) + ($36)) | 0;
    $90 = $fold140 & 67108863;
    $91 = $89 >>> 26;
    $92 = (($91) + ($49)) | 0;
    $fold141 = (($88) + ($40)) | 0;
    $93 = $fold141 & 67108863;
    $94 = $92 >>> 26;
    $95 = (($94) + ($53)) | 0;
    $fold142 = (($91) + ($44)) | 0;
    $96 = $fold142 & 67108863;
    $97 = $95 >>> 26;
    $98 = (($97) + ($57)) | 0;
    $fold143 = (($94) + ($48)) | 0;
    $99 = $fold143 & 67108863;
    $100 = $98 >>> 26;
    $101 = (($100) + ($56)) | 0;
    $fold144 = (($97) + ($52)) | 0;
    $102 = $fold144 & 67108863;
    $103 = $101 & 4194303;
    HEAP32[$0 >> 2] = $78;
    HEAP32[$2 >> 2] = $81;
    HEAP32[$4 >> 2] = $84;
    HEAP32[$6 >> 2] = $87;
    HEAP32[$8 >> 2] = $90;
    HEAP32[$10 >> 2] = $93;
    HEAP32[$12 >> 2] = $96;
    HEAP32[$14 >> 2] = $99;
    HEAP32[$16 >> 2] = $102;
    HEAP32[$18 >> 2] = $103;
    return;
  }

  function _secp256k1_scalar_reduce_512($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $$not$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0,
      $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
    var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0,
      $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
    var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0,
      $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
    var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0,
      $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
    var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0,
      $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
    var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0,
      $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
    var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0,
      $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
    var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0,
      $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
    var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0,
      $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
    var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0,
      $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
    var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0,
      $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
    var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0,
      $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
    var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0,
      $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
    var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0,
      $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
    var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0,
      $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
    var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0,
      $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
    var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0,
      $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
    var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0,
      $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
    var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0,
      $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
    var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0,
      $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
    var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0,
      $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
    var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0,
      $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
    var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0,
      $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
    var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0,
      $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
    var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0,
      $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
    var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0,
      $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
    var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0,
      $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
    var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0,
      $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
    var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0,
      $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
    var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0,
      $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
    var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0,
      $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
    var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0,
      $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
    var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0,
      $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
    var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0,
      $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
    var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0,
      $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
    var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0,
      $74 = 0, $740 = 0, $741 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
    var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0,
      $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
    var $99 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $2 = ((($1)) + 32 | 0);
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ((($1)) + 36 | 0);
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ((($1)) + 40 | 0);
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ((($1)) + 44 | 0);
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ((($1)) + 48 | 0);
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = ((($1)) + 52 | 0);
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ((($1)) + 56 | 0);
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = ((($1)) + 60 | 0);
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = HEAP32[$1 >> 2] | 0;
    $19 = (___muldi3(($3 | 0), 0, 801750719, 0) | 0);
    $20 = tempRet0;
    $21 = (($18) + ($19)) | 0;
    $22 = ($21 >>> 0) < ($19 >>> 0);
    $23 = $22 & 1;
    $24 = ((($1)) + 4 | 0);
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = (($25) + ($20)) | 0;
    $27 = (($26) + ($23)) | 0;
    $28 = ($27 >>> 0) < ($25 >>> 0);
    $29 = $28 & 1;
    $30 = (___muldi3(($5 | 0), 0, 801750719, 0) | 0);
    $31 = tempRet0;
    $32 = (($27) + ($30)) | 0;
    $33 = ($32 >>> 0) < ($30 >>> 0);
    $34 = $33 & 1;
    $35 = (___muldi3(($3 | 0), 0, 1076732275, 0) | 0);
    $36 = tempRet0;
    $37 = (($32) + ($35)) | 0;
    $38 = ($37 >>> 0) < ($35 >>> 0);
    $39 = $38 & 1;
    $40 = (($39) + ($36)) | 0;
    $41 = (($29) + ($31)) | 0;
    $42 = (($41) + ($34)) | 0;
    $43 = (($42) + ($40)) | 0;
    $44 = ($43 >>> 0) < ($40 >>> 0);
    $45 = $44 & 1;
    $46 = ((($1)) + 8 | 0);
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = (($43) + ($47)) | 0;
    $49 = ($48 >>> 0) < ($47 >>> 0);
    $50 = $49 & 1;
    $51 = (___muldi3(($7 | 0), 0, 801750719, 0) | 0);
    $52 = tempRet0;
    $53 = (($48) + ($51)) | 0;
    $54 = ($53 >>> 0) < ($51 >>> 0);
    $55 = $54 & 1;
    $56 = (___muldi3(($5 | 0), 0, 1076732275, 0) | 0);
    $57 = tempRet0;
    $58 = (($53) + ($56)) | 0;
    $59 = ($58 >>> 0) < ($56 >>> 0);
    $60 = $59 & 1;
    $61 = (($60) + ($57)) | 0;
    $62 = (($45) + ($52)) | 0;
    $63 = (($62) + ($50)) | 0;
    $64 = (($63) + ($55)) | 0;
    $65 = (($64) + ($61)) | 0;
    $66 = ($65 >>> 0) < ($61 >>> 0);
    $67 = $66 & 1;
    $68 = (___muldi3(($3 | 0), 0, 1354194884, 0) | 0);
    $69 = tempRet0;
    $70 = (($58) + ($68)) | 0;
    $71 = ($70 >>> 0) < ($68 >>> 0);
    $72 = $71 & 1;
    $73 = (($72) + ($69)) | 0;
    $74 = (($65) + ($73)) | 0;
    $75 = ($74 >>> 0) < ($73 >>> 0);
    $76 = $75 & 1;
    $77 = ((($1)) + 12 | 0);
    $78 = HEAP32[$77 >> 2] | 0;
    $79 = (($74) + ($78)) | 0;
    $80 = ($79 >>> 0) < ($78 >>> 0);
    $81 = $80 & 1;
    $82 = (___muldi3(($9 | 0), 0, 801750719, 0) | 0);
    $83 = tempRet0;
    $84 = (($79) + ($82)) | 0;
    $85 = ($84 >>> 0) < ($82 >>> 0);
    $86 = $85 & 1;
    $87 = (___muldi3(($7 | 0), 0, 1076732275, 0) | 0);
    $88 = tempRet0;
    $89 = (($84) + ($87)) | 0;
    $90 = ($89 >>> 0) < ($87 >>> 0);
    $91 = $90 & 1;
    $92 = (($91) + ($88)) | 0;
    $93 = (($67) + ($83)) | 0;
    $94 = (($93) + ($76)) | 0;
    $95 = (($94) + ($81)) | 0;
    $96 = (($95) + ($86)) | 0;
    $97 = (($96) + ($92)) | 0;
    $98 = ($97 >>> 0) < ($92 >>> 0);
    $99 = $98 & 1;
    $100 = (___muldi3(($5 | 0), 0, 1354194884, 0) | 0);
    $101 = tempRet0;
    $102 = (($89) + ($100)) | 0;
    $103 = ($102 >>> 0) < ($100 >>> 0);
    $104 = $103 & 1;
    $105 = (($104) + ($101)) | 0;
    $106 = (($97) + ($105)) | 0;
    $107 = ($106 >>> 0) < ($105 >>> 0);
    $108 = $107 & 1;
    $109 = (___muldi3(($3 | 0), 0, 1162945305, 0) | 0);
    $110 = tempRet0;
    $111 = (($102) + ($109)) | 0;
    $112 = ($111 >>> 0) < ($109 >>> 0);
    $113 = $112 & 1;
    $114 = (($113) + ($110)) | 0;
    $115 = (($106) + ($114)) | 0;
    $116 = ($115 >>> 0) < ($114 >>> 0);
    $117 = $116 & 1;
    $118 = ((($1)) + 16 | 0);
    $119 = HEAP32[$118 >> 2] | 0;
    $120 = (($115) + ($119)) | 0;
    $121 = ($120 >>> 0) < ($119 >>> 0);
    $122 = $121 & 1;
    $123 = (___muldi3(($11 | 0), 0, 801750719, 0) | 0);
    $124 = tempRet0;
    $125 = (($120) + ($123)) | 0;
    $126 = ($125 >>> 0) < ($123 >>> 0);
    $127 = $126 & 1;
    $128 = (___muldi3(($9 | 0), 0, 1076732275, 0) | 0);
    $129 = tempRet0;
    $130 = (($125) + ($128)) | 0;
    $131 = ($130 >>> 0) < ($128 >>> 0);
    $132 = $131 & 1;
    $133 = (($132) + ($129)) | 0;
    $134 = (($99) + ($124)) | 0;
    $135 = (($134) + ($108)) | 0;
    $136 = (($135) + ($117)) | 0;
    $137 = (($136) + ($122)) | 0;
    $138 = (($137) + ($127)) | 0;
    $139 = (($138) + ($133)) | 0;
    $140 = ($139 >>> 0) < ($133 >>> 0);
    $141 = $140 & 1;
    $142 = (___muldi3(($7 | 0), 0, 1354194884, 0) | 0);
    $143 = tempRet0;
    $144 = (($130) + ($142)) | 0;
    $145 = ($144 >>> 0) < ($142 >>> 0);
    $146 = $145 & 1;
    $147 = (($146) + ($143)) | 0;
    $148 = (($139) + ($147)) | 0;
    $149 = ($148 >>> 0) < ($147 >>> 0);
    $150 = $149 & 1;
    $151 = (___muldi3(($5 | 0), 0, 1162945305, 0) | 0);
    $152 = tempRet0;
    $153 = (($144) + ($151)) | 0;
    $154 = ($153 >>> 0) < ($151 >>> 0);
    $155 = $154 & 1;
    $156 = (($155) + ($152)) | 0;
    $157 = (($148) + ($156)) | 0;
    $158 = ($157 >>> 0) < ($156 >>> 0);
    $159 = $158 & 1;
    $160 = (($153) + ($3)) | 0;
    $161 = ($160 >>> 0) < ($3 >>> 0);
    $162 = $161 & 1;
    $163 = (($157) + ($162)) | 0;
    $164 = ($163 >>> 0) < ($162 >>> 0);
    $165 = $164 & 1;
    $166 = ((($1)) + 20 | 0);
    $167 = HEAP32[$166 >> 2] | 0;
    $168 = (($163) + ($167)) | 0;
    $169 = ($168 >>> 0) < ($167 >>> 0);
    $170 = $169 & 1;
    $171 = (___muldi3(($13 | 0), 0, 801750719, 0) | 0);
    $172 = tempRet0;
    $173 = (($168) + ($171)) | 0;
    $174 = ($173 >>> 0) < ($171 >>> 0);
    $175 = $174 & 1;
    $176 = (___muldi3(($11 | 0), 0, 1076732275, 0) | 0);
    $177 = tempRet0;
    $178 = (($173) + ($176)) | 0;
    $179 = ($178 >>> 0) < ($176 >>> 0);
    $180 = $179 & 1;
    $181 = (($180) + ($177)) | 0;
    $182 = (($141) + ($172)) | 0;
    $183 = (($182) + ($150)) | 0;
    $184 = (($183) + ($159)) | 0;
    $185 = (($184) + ($165)) | 0;
    $186 = (($185) + ($170)) | 0;
    $187 = (($186) + ($175)) | 0;
    $188 = (($187) + ($181)) | 0;
    $189 = ($188 >>> 0) < ($181 >>> 0);
    $190 = $189 & 1;
    $191 = (___muldi3(($9 | 0), 0, 1354194884, 0) | 0);
    $192 = tempRet0;
    $193 = (($178) + ($191)) | 0;
    $194 = ($193 >>> 0) < ($191 >>> 0);
    $195 = $194 & 1;
    $196 = (($195) + ($192)) | 0;
    $197 = (($188) + ($196)) | 0;
    $198 = ($197 >>> 0) < ($196 >>> 0);
    $199 = $198 & 1;
    $200 = (___muldi3(($7 | 0), 0, 1162945305, 0) | 0);
    $201 = tempRet0;
    $202 = (($193) + ($200)) | 0;
    $203 = ($202 >>> 0) < ($200 >>> 0);
    $204 = $203 & 1;
    $205 = (($204) + ($201)) | 0;
    $206 = (($197) + ($205)) | 0;
    $207 = ($206 >>> 0) < ($205 >>> 0);
    $208 = $207 & 1;
    $209 = (($202) + ($5)) | 0;
    $210 = ($209 >>> 0) < ($5 >>> 0);
    $211 = $210 & 1;
    $212 = (($206) + ($211)) | 0;
    $213 = ($212 >>> 0) < ($211 >>> 0);
    $214 = $213 & 1;
    $215 = ((($1)) + 24 | 0);
    $216 = HEAP32[$215 >> 2] | 0;
    $217 = (($212) + ($216)) | 0;
    $218 = ($217 >>> 0) < ($216 >>> 0);
    $219 = $218 & 1;
    $220 = (___muldi3(($15 | 0), 0, 801750719, 0) | 0);
    $221 = tempRet0;
    $222 = (($217) + ($220)) | 0;
    $223 = ($222 >>> 0) < ($220 >>> 0);
    $224 = $223 & 1;
    $225 = (___muldi3(($13 | 0), 0, 1076732275, 0) | 0);
    $226 = tempRet0;
    $227 = (($222) + ($225)) | 0;
    $228 = ($227 >>> 0) < ($225 >>> 0);
    $229 = $228 & 1;
    $230 = (($229) + ($226)) | 0;
    $231 = (($190) + ($221)) | 0;
    $232 = (($231) + ($199)) | 0;
    $233 = (($232) + ($208)) | 0;
    $234 = (($233) + ($214)) | 0;
    $235 = (($234) + ($219)) | 0;
    $236 = (($235) + ($224)) | 0;
    $237 = (($236) + ($230)) | 0;
    $238 = ($237 >>> 0) < ($230 >>> 0);
    $239 = $238 & 1;
    $240 = (___muldi3(($11 | 0), 0, 1354194884, 0) | 0);
    $241 = tempRet0;
    $242 = (($227) + ($240)) | 0;
    $243 = ($242 >>> 0) < ($240 >>> 0);
    $244 = $243 & 1;
    $245 = (($244) + ($241)) | 0;
    $246 = (($237) + ($245)) | 0;
    $247 = ($246 >>> 0) < ($245 >>> 0);
    $248 = $247 & 1;
    $249 = (___muldi3(($9 | 0), 0, 1162945305, 0) | 0);
    $250 = tempRet0;
    $251 = (($242) + ($249)) | 0;
    $252 = ($251 >>> 0) < ($249 >>> 0);
    $253 = $252 & 1;
    $254 = (($253) + ($250)) | 0;
    $255 = (($246) + ($254)) | 0;
    $256 = ($255 >>> 0) < ($254 >>> 0);
    $257 = $256 & 1;
    $258 = (($251) + ($7)) | 0;
    $259 = ($258 >>> 0) < ($7 >>> 0);
    $260 = $259 & 1;
    $261 = (($255) + ($260)) | 0;
    $262 = ($261 >>> 0) < ($260 >>> 0);
    $263 = $262 & 1;
    $264 = ((($1)) + 28 | 0);
    $265 = HEAP32[$264 >> 2] | 0;
    $266 = (($261) + ($265)) | 0;
    $267 = ($266 >>> 0) < ($265 >>> 0);
    $268 = $267 & 1;
    $269 = (___muldi3(($17 | 0), 0, 801750719, 0) | 0);
    $270 = tempRet0;
    $271 = (($266) + ($269)) | 0;
    $272 = ($271 >>> 0) < ($269 >>> 0);
    $273 = $272 & 1;
    $274 = (___muldi3(($15 | 0), 0, 1076732275, 0) | 0);
    $275 = tempRet0;
    $276 = (($271) + ($274)) | 0;
    $277 = ($276 >>> 0) < ($274 >>> 0);
    $278 = $277 & 1;
    $279 = (($278) + ($275)) | 0;
    $280 = (($239) + ($270)) | 0;
    $281 = (($280) + ($248)) | 0;
    $282 = (($281) + ($257)) | 0;
    $283 = (($282) + ($263)) | 0;
    $284 = (($283) + ($268)) | 0;
    $285 = (($284) + ($273)) | 0;
    $286 = (($285) + ($279)) | 0;
    $287 = ($286 >>> 0) < ($279 >>> 0);
    $288 = $287 & 1;
    $289 = (___muldi3(($13 | 0), 0, 1354194884, 0) | 0);
    $290 = tempRet0;
    $291 = (($276) + ($289)) | 0;
    $292 = ($291 >>> 0) < ($289 >>> 0);
    $293 = $292 & 1;
    $294 = (($293) + ($290)) | 0;
    $295 = (($286) + ($294)) | 0;
    $296 = ($295 >>> 0) < ($294 >>> 0);
    $297 = $296 & 1;
    $298 = (($297) + ($288)) | 0;
    $299 = (___muldi3(($11 | 0), 0, 1162945305, 0) | 0);
    $300 = tempRet0;
    $301 = (($291) + ($299)) | 0;
    $302 = ($301 >>> 0) < ($299 >>> 0);
    $303 = $302 & 1;
    $304 = (($303) + ($300)) | 0;
    $305 = (($295) + ($304)) | 0;
    $306 = ($305 >>> 0) < ($304 >>> 0);
    $307 = $306 & 1;
    $308 = (($298) + ($307)) | 0;
    $309 = (($301) + ($9)) | 0;
    $310 = ($309 >>> 0) < ($9 >>> 0);
    $311 = $310 & 1;
    $312 = (($305) + ($311)) | 0;
    $313 = ($312 >>> 0) < ($311 >>> 0);
    $314 = $313 & 1;
    $315 = (($308) + ($314)) | 0;
    $316 = (___muldi3(($17 | 0), 0, 1076732275, 0) | 0);
    $317 = tempRet0;
    $318 = (($312) + ($316)) | 0;
    $319 = ($318 >>> 0) < ($316 >>> 0);
    $320 = $319 & 1;
    $321 = (($320) + ($317)) | 0;
    $322 = (($315) + ($321)) | 0;
    $323 = ($322 >>> 0) < ($321 >>> 0);
    $324 = $323 & 1;
    $325 = (___muldi3(($15 | 0), 0, 1354194884, 0) | 0);
    $326 = tempRet0;
    $327 = (($318) + ($325)) | 0;
    $328 = ($327 >>> 0) < ($325 >>> 0);
    $329 = $328 & 1;
    $330 = (($329) + ($326)) | 0;
    $331 = (($322) + ($330)) | 0;
    $332 = ($331 >>> 0) < ($330 >>> 0);
    $333 = $332 & 1;
    $334 = (($333) + ($324)) | 0;
    $335 = (___muldi3(($13 | 0), 0, 1162945305, 0) | 0);
    $336 = tempRet0;
    $337 = (($327) + ($335)) | 0;
    $338 = ($337 >>> 0) < ($335 >>> 0);
    $339 = $338 & 1;
    $340 = (($339) + ($336)) | 0;
    $341 = (($331) + ($340)) | 0;
    $342 = ($341 >>> 0) < ($340 >>> 0);
    $343 = $342 & 1;
    $344 = (($334) + ($343)) | 0;
    $345 = (($337) + ($11)) | 0;
    $346 = ($345 >>> 0) < ($11 >>> 0);
    $347 = $346 & 1;
    $348 = (($341) + ($347)) | 0;
    $349 = ($348 >>> 0) < ($347 >>> 0);
    $350 = $349 & 1;
    $351 = (($344) + ($350)) | 0;
    $352 = (___muldi3(($17 | 0), 0, 1354194884, 0) | 0);
    $353 = tempRet0;
    $354 = (($348) + ($352)) | 0;
    $355 = ($354 >>> 0) < ($352 >>> 0);
    $356 = $355 & 1;
    $357 = (($356) + ($353)) | 0;
    $358 = (($351) + ($357)) | 0;
    $359 = ($358 >>> 0) < ($357 >>> 0);
    $360 = $359 & 1;
    $361 = (___muldi3(($15 | 0), 0, 1162945305, 0) | 0);
    $362 = tempRet0;
    $363 = (($354) + ($361)) | 0;
    $364 = ($363 >>> 0) < ($361 >>> 0);
    $365 = $364 & 1;
    $366 = (($365) + ($362)) | 0;
    $367 = (($358) + ($366)) | 0;
    $368 = ($367 >>> 0) < ($366 >>> 0);
    $369 = $368 & 1;
    $370 = (($369) + ($360)) | 0;
    $371 = (($363) + ($13)) | 0;
    $372 = ($371 >>> 0) < ($13 >>> 0);
    $373 = $372 & 1;
    $374 = (($367) + ($373)) | 0;
    $375 = ($374 >>> 0) < ($373 >>> 0);
    $376 = $375 & 1;
    $377 = (($370) + ($376)) | 0;
    $378 = (___muldi3(($17 | 0), 0, 1162945305, 0) | 0);
    $379 = tempRet0;
    $380 = (($374) + ($378)) | 0;
    $381 = ($380 >>> 0) < ($378 >>> 0);
    $382 = $381 & 1;
    $383 = (($382) + ($379)) | 0;
    $384 = (($377) + ($383)) | 0;
    $385 = ($384 >>> 0) < ($383 >>> 0);
    $386 = $385 & 1;
    $387 = (($380) + ($15)) | 0;
    $388 = ($387 >>> 0) < ($15 >>> 0);
    $389 = $388 & 1;
    $390 = (($384) + ($389)) | 0;
    $391 = ($390 >>> 0) < ($389 >>> 0);
    $392 = $391 & 1;
    $393 = (($392) + ($386)) | 0;
    $394 = (($390) + ($17)) | 0;
    $395 = ($394 >>> 0) < ($17 >>> 0);
    $396 = $395 & 1;
    $397 = (($393) + ($396)) | 0;
    $398 = (___muldi3(($345 | 0), 0, 801750719, 0) | 0);
    $399 = tempRet0;
    $400 = (($398) + ($21)) | 0;
    $401 = ($400 >>> 0) < ($398 >>> 0);
    $402 = $401 & 1;
    $403 = (($399) + ($37)) | 0;
    $404 = (($403) + ($402)) | 0;
    $405 = ($404 >>> 0) < ($37 >>> 0);
    $406 = $405 & 1;
    $407 = (___muldi3(($371 | 0), 0, 801750719, 0) | 0);
    $408 = tempRet0;
    $409 = (($407) + ($404)) | 0;
    $410 = ($409 >>> 0) < ($407 >>> 0);
    $411 = $410 & 1;
    $412 = (___muldi3(($345 | 0), 0, 1076732275, 0) | 0);
    $413 = tempRet0;
    $414 = (($409) + ($412)) | 0;
    $415 = ($414 >>> 0) < ($412 >>> 0);
    $416 = $415 & 1;
    $417 = (($416) + ($413)) | 0;
    $418 = (($408) + ($406)) | 0;
    $419 = (($418) + ($411)) | 0;
    $420 = (($419) + ($417)) | 0;
    $421 = ($420 >>> 0) < ($417 >>> 0);
    $422 = $421 & 1;
    $423 = (($420) + ($70)) | 0;
    $424 = ($423 >>> 0) < ($70 >>> 0);
    $425 = $424 & 1;
    $426 = (___muldi3(($387 | 0), 0, 801750719, 0) | 0);
    $427 = tempRet0;
    $428 = (($423) + ($426)) | 0;
    $429 = ($428 >>> 0) < ($426 >>> 0);
    $430 = $429 & 1;
    $431 = (___muldi3(($371 | 0), 0, 1076732275, 0) | 0);
    $432 = tempRet0;
    $433 = (($428) + ($431)) | 0;
    $434 = ($433 >>> 0) < ($431 >>> 0);
    $435 = $434 & 1;
    $436 = (($435) + ($432)) | 0;
    $437 = (($422) + ($427)) | 0;
    $438 = (($437) + ($425)) | 0;
    $439 = (($438) + ($430)) | 0;
    $440 = (($439) + ($436)) | 0;
    $441 = ($440 >>> 0) < ($436 >>> 0);
    $442 = $441 & 1;
    $443 = (___muldi3(($345 | 0), 0, 1354194884, 0) | 0);
    $444 = tempRet0;
    $445 = (($433) + ($443)) | 0;
    $446 = ($445 >>> 0) < ($443 >>> 0);
    $447 = $446 & 1;
    $448 = (($447) + ($444)) | 0;
    $449 = (($440) + ($448)) | 0;
    $450 = ($449 >>> 0) < ($448 >>> 0);
    $451 = $450 & 1;
    $452 = (($449) + ($111)) | 0;
    $453 = ($452 >>> 0) < ($111 >>> 0);
    $454 = $453 & 1;
    $455 = (___muldi3(($394 | 0), 0, 801750719, 0) | 0);
    $456 = tempRet0;
    $457 = (($452) + ($455)) | 0;
    $458 = ($457 >>> 0) < ($455 >>> 0);
    $459 = $458 & 1;
    $460 = (___muldi3(($387 | 0), 0, 1076732275, 0) | 0);
    $461 = tempRet0;
    $462 = (($457) + ($460)) | 0;
    $463 = ($462 >>> 0) < ($460 >>> 0);
    $464 = $463 & 1;
    $465 = (($464) + ($461)) | 0;
    $466 = (($442) + ($456)) | 0;
    $467 = (($466) + ($451)) | 0;
    $468 = (($467) + ($454)) | 0;
    $469 = (($468) + ($459)) | 0;
    $470 = (($469) + ($465)) | 0;
    $471 = ($470 >>> 0) < ($465 >>> 0);
    $472 = $471 & 1;
    $473 = (___muldi3(($371 | 0), 0, 1354194884, 0) | 0);
    $474 = tempRet0;
    $475 = (($462) + ($473)) | 0;
    $476 = ($475 >>> 0) < ($473 >>> 0);
    $477 = $476 & 1;
    $478 = (($477) + ($474)) | 0;
    $479 = (($470) + ($478)) | 0;
    $480 = ($479 >>> 0) < ($478 >>> 0);
    $481 = $480 & 1;
    $482 = (___muldi3(($345 | 0), 0, 1162945305, 0) | 0);
    $483 = tempRet0;
    $484 = (($475) + ($482)) | 0;
    $485 = ($484 >>> 0) < ($482 >>> 0);
    $486 = $485 & 1;
    $487 = (($486) + ($483)) | 0;
    $488 = (($479) + ($487)) | 0;
    $489 = ($488 >>> 0) < ($487 >>> 0);
    $490 = $489 & 1;
    $491 = (($488) + ($160)) | 0;
    $492 = ($491 >>> 0) < ($160 >>> 0);
    $493 = $492 & 1;
    $494 = (___muldi3(($397 | 0), 0, 801750719, 0) | 0);
    $495 = tempRet0;
    $496 = (($491) + ($494)) | 0;
    $497 = ($496 >>> 0) < ($494 >>> 0);
    $498 = $497 & 1;
    $499 = (___muldi3(($394 | 0), 0, 1076732275, 0) | 0);
    $500 = tempRet0;
    $501 = (($496) + ($499)) | 0;
    $502 = ($501 >>> 0) < ($499 >>> 0);
    $503 = $502 & 1;
    $504 = (($503) + ($500)) | 0;
    $505 = (($472) + ($495)) | 0;
    $506 = (($505) + ($481)) | 0;
    $507 = (($506) + ($490)) | 0;
    $508 = (($507) + ($493)) | 0;
    $509 = (($508) + ($498)) | 0;
    $510 = (($509) + ($504)) | 0;
    $511 = ($510 >>> 0) < ($504 >>> 0);
    $512 = $511 & 1;
    $513 = (___muldi3(($387 | 0), 0, 1354194884, 0) | 0);
    $514 = tempRet0;
    $515 = (($501) + ($513)) | 0;
    $516 = ($515 >>> 0) < ($513 >>> 0);
    $517 = $516 & 1;
    $518 = (($517) + ($514)) | 0;
    $519 = (($510) + ($518)) | 0;
    $520 = ($519 >>> 0) < ($518 >>> 0);
    $521 = $520 & 1;
    $522 = (($521) + ($512)) | 0;
    $523 = (___muldi3(($371 | 0), 0, 1162945305, 0) | 0);
    $524 = tempRet0;
    $525 = (($515) + ($523)) | 0;
    $526 = ($525 >>> 0) < ($523 >>> 0);
    $527 = $526 & 1;
    $528 = (($527) + ($524)) | 0;
    $529 = (($519) + ($528)) | 0;
    $530 = ($529 >>> 0) < ($528 >>> 0);
    $531 = $530 & 1;
    $532 = (($522) + ($531)) | 0;
    $533 = (($525) + ($345)) | 0;
    $534 = ($533 >>> 0) < ($345 >>> 0);
    $535 = $534 & 1;
    $536 = (($529) + ($535)) | 0;
    $537 = ($536 >>> 0) < ($535 >>> 0);
    $538 = $537 & 1;
    $539 = (($532) + ($538)) | 0;
    $540 = (($536) + ($209)) | 0;
    $541 = ($540 >>> 0) < ($209 >>> 0);
    $542 = $541 & 1;
    $543 = (($539) + ($542)) | 0;
    $544 = (___muldi3(($397 | 0), 0, 1076732275, 0) | 0);
    $545 = tempRet0;
    $546 = (($540) + ($544)) | 0;
    $547 = ($546 >>> 0) < ($544 >>> 0);
    $548 = $547 & 1;
    $549 = (($548) + ($545)) | 0;
    $550 = (($543) + ($549)) | 0;
    $551 = ($550 >>> 0) < ($549 >>> 0);
    $552 = $551 & 1;
    $553 = (___muldi3(($394 | 0), 0, 1354194884, 0) | 0);
    $554 = tempRet0;
    $555 = (($546) + ($553)) | 0;
    $556 = ($555 >>> 0) < ($553 >>> 0);
    $557 = $556 & 1;
    $558 = (($557) + ($554)) | 0;
    $559 = (($550) + ($558)) | 0;
    $560 = ($559 >>> 0) < ($558 >>> 0);
    $561 = $560 & 1;
    $562 = (($561) + ($552)) | 0;
    $563 = (___muldi3(($387 | 0), 0, 1162945305, 0) | 0);
    $564 = tempRet0;
    $565 = (($555) + ($563)) | 0;
    $566 = ($565 >>> 0) < ($563 >>> 0);
    $567 = $566 & 1;
    $568 = (($567) + ($564)) | 0;
    $569 = (($559) + ($568)) | 0;
    $570 = ($569 >>> 0) < ($568 >>> 0);
    $571 = $570 & 1;
    $572 = (($562) + ($571)) | 0;
    $573 = (($565) + ($371)) | 0;
    $574 = ($573 >>> 0) < ($371 >>> 0);
    $575 = $574 & 1;
    $576 = (($569) + ($575)) | 0;
    $577 = ($576 >>> 0) < ($575 >>> 0);
    $578 = $577 & 1;
    $579 = (($572) + ($578)) | 0;
    $580 = (($576) + ($258)) | 0;
    $581 = ($580 >>> 0) < ($258 >>> 0);
    $582 = $581 & 1;
    $583 = (($579) + ($582)) | 0;
    $584 = (___muldi3(($397 | 0), 0, 1354194884, 0) | 0);
    $585 = tempRet0;
    $586 = (($580) + ($584)) | 0;
    $587 = ($586 >>> 0) < ($584 >>> 0);
    $588 = $587 & 1;
    $589 = (($588) + ($585)) | 0;
    $590 = (($583) + ($589)) | 0;
    $591 = ($590 >>> 0) < ($589 >>> 0);
    $592 = $591 & 1;
    $593 = (___muldi3(($394 | 0), 0, 1162945305, 0) | 0);
    $594 = tempRet0;
    $595 = (($586) + ($593)) | 0;
    $596 = ($595 >>> 0) < ($593 >>> 0);
    $597 = $596 & 1;
    $598 = (($597) + ($594)) | 0;
    $599 = (($590) + ($598)) | 0;
    $600 = ($599 >>> 0) < ($598 >>> 0);
    $601 = $600 & 1;
    $602 = (($595) + ($387)) | 0;
    $603 = ($602 >>> 0) < ($387 >>> 0);
    $604 = $603 & 1;
    $605 = (($599) + ($604)) | 0;
    $606 = ($605 >>> 0) < ($604 >>> 0);
    $607 = $606 & 1;
    $608 = (($605) + ($309)) | 0;
    $609 = ($608 >>> 0) < ($309 >>> 0);
    $610 = $609 & 1;
    $611 = (___muldi3(($397 | 0), 0, 1162945305, 0) | 0);
    $612 = tempRet0;
    $613 = (($608) + ($611)) | 0;
    $614 = ($613 >>> 0) < ($611 >>> 0);
    $615 = $614 & 1;
    $616 = (($613) + ($394)) | 0;
    $617 = ($616 >>> 0) < ($394 >>> 0);
    $618 = $617 & 1;
    $619 = (($612) + ($397)) | 0;
    $620 = (($619) + ($592)) | 0;
    $621 = (($620) + ($601)) | 0;
    $622 = (($621) + ($607)) | 0;
    $623 = (($622) + ($610)) | 0;
    $624 = (($623) + ($615)) | 0;
    $625 = (($624) + ($618)) | 0;
    $626 = (___muldi3(($625 | 0), 0, 801750719, 0) | 0);
    $627 = tempRet0;
    $628 = (_i64Add(($626 | 0), ($627 | 0), ($400 | 0), 0) | 0);
    $629 = tempRet0;
    HEAP32[$0 >> 2] = $628;
    $630 = (___muldi3(($625 | 0), 0, 1076732275, 0) | 0);
    $631 = tempRet0;
    $632 = (_i64Add(($630 | 0), ($631 | 0), ($414 | 0), 0) | 0);
    $633 = tempRet0;
    $634 = (_i64Add(($632 | 0), ($633 | 0), ($629 | 0), 0) | 0);
    $635 = tempRet0;
    $636 = ((($0)) + 4 | 0);
    HEAP32[$636 >> 2] = $634;
    $637 = (___muldi3(($625 | 0), 0, 1354194884, 0) | 0);
    $638 = tempRet0;
    $639 = (_i64Add(($637 | 0), ($638 | 0), ($445 | 0), 0) | 0);
    $640 = tempRet0;
    $641 = (_i64Add(($639 | 0), ($640 | 0), ($635 | 0), 0) | 0);
    $642 = tempRet0;
    $643 = ((($0)) + 8 | 0);
    HEAP32[$643 >> 2] = $641;
    $644 = (___muldi3(($625 | 0), 0, 1162945305, 0) | 0);
    $645 = tempRet0;
    $646 = (_i64Add(($644 | 0), ($645 | 0), ($484 | 0), 0) | 0);
    $647 = tempRet0;
    $648 = (_i64Add(($646 | 0), ($647 | 0), ($642 | 0), 0) | 0);
    $649 = tempRet0;
    $650 = ((($0)) + 12 | 0);
    HEAP32[$650 >> 2] = $648;
    $651 = (_i64Add(($625 | 0), 0, ($533 | 0), 0) | 0);
    $652 = tempRet0;
    $653 = (_i64Add(($651 | 0), ($652 | 0), ($649 | 0), 0) | 0);
    $654 = tempRet0;
    $655 = ((($0)) + 16 | 0);
    HEAP32[$655 >> 2] = $653;
    $656 = (_i64Add(($654 | 0), 0, ($573 | 0), 0) | 0);
    $657 = tempRet0;
    $658 = ((($0)) + 20 | 0);
    HEAP32[$658 >> 2] = $656;
    $659 = (_i64Add(($657 | 0), 0, ($602 | 0), 0) | 0);
    $660 = tempRet0;
    $661 = ((($0)) + 24 | 0);
    HEAP32[$661 >> 2] = $659;
    $662 = (_i64Add(($660 | 0), 0, ($616 | 0), 0) | 0);
    $663 = tempRet0;
    $664 = ((($0)) + 28 | 0);
    HEAP32[$664 >> 2] = $662;
    $665 = $662 & $659;
    $666 = $663 & $660;
    $667 = $656 & $665;
    $657 & $666;
    $668 = ($667 | 0) != (-1);
    $669 = ($653 >>> 0) < (4294967294);
    $670 = $669 | $668;
    $671 = $670 & 1;
    $672 = ($653 | 0) == (-1);
    $673 = $672 & 1;
    $674 = $671 ^ -1;
    $675 = $673 & $674;
    $676 = ($648 >>> 0) < (3132021990);
    $677 = $676 & 1;
    $$not$i = $673 ^ 1;
    $678 = $677 & $$not$i;
    $679 = $671 | $678;
    $680 = ($648 >>> 0) > (3132021990);
    $681 = $680 & 1;
    $682 = $679 ^ -1;
    $683 = $681 & $682;
    $684 = $683 | $675;
    $685 = ($641 >>> 0) < (2940772411);
    $686 = $685 & 1;
    $687 = $684 ^ -1;
    $688 = $686 & $687;
    $689 = $688 | $679;
    $690 = ($641 >>> 0) > (2940772411);
    $691 = $690 & 1;
    $692 = $689 ^ -1;
    $693 = $691 & $692;
    $694 = $693 | $684;
    $695 = ($634 >>> 0) < (3218235020);
    $696 = $695 & 1;
    $697 = $694 ^ -1;
    $698 = $696 & $697;
    $699 = $698 | $689;
    $700 = ($634 >>> 0) > (3218235020);
    $701 = $700 & 1;
    $702 = $699 ^ -1;
    $703 = $701 & $702;
    $704 = $703 | $694;
    $705 = ($628 >>> 0) > (3493216576);
    $706 = $705 & 1;
    $707 = $706 & $702;
    $708 = $704 | $707;
    $709 = (_i64Add(($708 | 0), 0, ($663 | 0), 0) | 0);
    $710 = tempRet0;
    $711 = Math_imul($709, 801750719) | 0;
    $712 = (_i64Add(($711 | 0), 0, ($628 | 0), 0) | 0);
    $713 = tempRet0;
    HEAP32[$0 >> 2] = $712;
    $714 = Math_imul($709, 1076732275) | 0;
    $715 = (_i64Add(($714 | 0), 0, ($634 | 0), 0) | 0);
    $716 = tempRet0;
    $717 = (_i64Add(($715 | 0), ($716 | 0), ($713 | 0), 0) | 0);
    $718 = tempRet0;
    HEAP32[$636 >> 2] = $717;
    $719 = Math_imul($709, 1354194884) | 0;
    $720 = (_i64Add(($719 | 0), 0, ($641 | 0), 0) | 0);
    $721 = tempRet0;
    $722 = (_i64Add(($720 | 0), ($721 | 0), ($718 | 0), 0) | 0);
    $723 = tempRet0;
    HEAP32[$643 >> 2] = $722;
    $724 = Math_imul($709, 1162945305) | 0;
    $725 = (_i64Add(($724 | 0), 0, ($648 | 0), 0) | 0);
    $726 = tempRet0;
    $727 = (_i64Add(($725 | 0), ($726 | 0), ($723 | 0), 0) | 0);
    $728 = tempRet0;
    HEAP32[$650 >> 2] = $727;
    $729 = (_i64Add(($709 | 0), 0, ($653 | 0), 0) | 0);
    $730 = tempRet0;
    $731 = (_i64Add(($729 | 0), ($730 | 0), ($728 | 0), 0) | 0);
    $732 = tempRet0;
    HEAP32[$655 >> 2] = $731;
    $733 = HEAP32[$658 >> 2] | 0;
    $734 = (_i64Add(($732 | 0), 0, ($733 | 0), 0) | 0);
    $735 = tempRet0;
    HEAP32[$658 >> 2] = $734;
    $736 = HEAP32[$661 >> 2] | 0;
    $737 = (_i64Add(($735 | 0), 0, ($736 | 0), 0) | 0);
    $738 = tempRet0;
    HEAP32[$661 >> 2] = $737;
    $739 = HEAP32[$664 >> 2] | 0;
    $740 = (_i64Add(($738 | 0), 0, ($739 | 0), 0) | 0);
    $741 = tempRet0;
    HEAP32[$664 >> 2] = $740;
    return;
  }

  function _secp256k1_fe_set_b32($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $$0 = 0, $$04144 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0,
      $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
    var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0,
      $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
    var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0,
      $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
    var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0,
      $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $exitcond = 0;
    var dest = 0, label = 0, sp = 0, stop = 0;
    sp = STACKTOP;
    $2 = ((($0)) + 16 | 0);
    $3 = ((($0)) + 12 | 0);
    $4 = ((($0)) + 8 | 0);
    $5 = ((($0)) + 4 | 0);
    $6 = ((($0)) + 36 | 0);
    $7 = ((($0)) + 32 | 0);
    $8 = ((($0)) + 28 | 0);
    $9 = ((($0)) + 24 | 0);
    $10 = ((($0)) + 20 | 0);
    dest = $0;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = 0 | 0;
      dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $$04144 = 0;
    while (1) {
      $11 = $$04144 << 3;
      $12 = (31 - ($$04144)) | 0;
      $13 = (($1) + ($12) | 0);
      $14 = (($11 | 0) / 26) & -1;
      $15 = (($11 | 0) % 26) & -1;
      $16 = HEAP8[$13 >> 0] | 0;
      $17 = $16 & 3;
      $18 = $17 & 255;
      $19 = $18 << $15;
      $20 = (($0) + ($14 << 2) | 0);
      $21 = HEAP32[$20 >> 2] | 0;
      $22 = $19 | $21;
      HEAP32[$20 >> 2] = $22;
      $23 = $11 | 2;
      $24 = (($23 | 0) / 26) & -1;
      $25 = (($23 | 0) % 26) & -1;
      $26 = HEAP8[$13 >> 0] | 0;
      $27 = $26 & 255;
      $28 = $27 >>> 2;
      $29 = $28 & 3;
      $30 = $29 << $25;
      $31 = (($0) + ($24 << 2) | 0);
      $32 = HEAP32[$31 >> 2] | 0;
      $33 = $30 | $32;
      HEAP32[$31 >> 2] = $33;
      $34 = $11 | 4;
      $35 = (($34 | 0) / 26) & -1;
      $36 = (($34 | 0) % 26) & -1;
      $37 = HEAP8[$13 >> 0] | 0;
      $38 = $37 & 255;
      $39 = $38 >>> 4;
      $40 = $39 & 3;
      $41 = $40 << $36;
      $42 = (($0) + ($35 << 2) | 0);
      $43 = HEAP32[$42 >> 2] | 0;
      $44 = $41 | $43;
      HEAP32[$42 >> 2] = $44;
      $45 = $11 | 6;
      $46 = (($45 | 0) / 26) & -1;
      $47 = (($45 | 0) % 26) & -1;
      $48 = HEAP8[$13 >> 0] | 0;
      $49 = $48 & 255;
      $50 = $49 >>> 6;
      $51 = $50 << $47;
      $52 = (($0) + ($46 << 2) | 0);
      $53 = HEAP32[$52 >> 2] | 0;
      $54 = $51 | $53;
      HEAP32[$52 >> 2] = $54;
      $55 = (($$04144) + 1) | 0;
      $exitcond = ($55 | 0) == (32);
      if ($exitcond) {
        break;
      } else {
        $$04144 = $55;
      }
    }
    $56 = HEAP32[$6 >> 2] | 0;
    $57 = ($56 | 0) == (4194303);
    if ($57) {
      $58 = HEAP32[$7 >> 2] | 0;
      $59 = HEAP32[$8 >> 2] | 0;
      $60 = $59 & $58;
      $61 = HEAP32[$9 >> 2] | 0;
      $62 = $60 & $61;
      $63 = HEAP32[$10 >> 2] | 0;
      $64 = $62 & $63;
      $65 = HEAP32[$2 >> 2] | 0;
      $66 = $64 & $65;
      $67 = HEAP32[$3 >> 2] | 0;
      $68 = $66 & $67;
      $69 = HEAP32[$4 >> 2] | 0;
      $70 = $68 & $69;
      $71 = ($70 | 0) == (67108863);
      if ($71) {
        $72 = HEAP32[$5 >> 2] | 0;
        $73 = (($72) + 64) | 0;
        $74 = HEAP32[$0 >> 2] | 0;
        $75 = (($74) + 977) | 0;
        $76 = $75 >>> 26;
        $77 = (($73) + ($76)) | 0;
        $78 = ($77 >>> 0) > (67108863);
        if ($78) {
          $$0 = 0;
          return ($$0 | 0);
        }
      }
    }
    $$0 = 1;
    return ($$0 | 0);
  }

  function _secp256k1_ge_set_xo_var($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$0 = 0, $$542$i = 0, $$641$i = 0, $$740$i = 0, $$idx$val = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0,
      $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
    var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0,
      $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
    var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0,
      $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
    var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0,
      $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
    var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0,
      $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
    var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0,
      $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
    var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0,
      $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
    var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond48$i = 0, $exitcond49$i = 0, dest = 0, label = 0,
      sp = 0, src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 640 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(640 | 0);
    $3 = sp + 600 | 0;
    $4 = sp + 560 | 0;
    $5 = sp + 520 | 0;
    $6 = sp + 480 | 0;
    $7 = sp + 440 | 0;
    $8 = sp + 400 | 0;
    $9 = sp + 360 | 0;
    $10 = sp + 320 | 0;
    $11 = sp + 280 | 0;
    $12 = sp + 240 | 0;
    $13 = sp + 200 | 0;
    $14 = sp + 160 | 0;
    $15 = sp + 120 | 0;
    $16 = sp + 80 | 0;
    $17 = sp + 40 | 0;
    $18 = sp;
    dest = $0;
    src = $1;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($16, $1);
    _secp256k1_fe_mul($17, $1, $16);
    $19 = ((($0)) + 80 | 0);
    HEAP32[$19 >> 2] = 0;
    $20 = ((($18)) + 4 | 0);
    $21 = HEAP32[$17 >> 2] | 0;
    $22 = (($21) + 7) | 0;
    HEAP32[$18 >> 2] = $22;
    $23 = ((($17)) + 4 | 0);
    $24 = HEAP32[$23 >> 2] | 0;
    HEAP32[$20 >> 2] = $24;
    $25 = ((($17)) + 8 | 0);
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = ((($18)) + 8 | 0);
    HEAP32[$27 >> 2] = $26;
    $28 = ((($17)) + 12 | 0);
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = ((($18)) + 12 | 0);
    HEAP32[$30 >> 2] = $29;
    $31 = ((($17)) + 16 | 0);
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = ((($18)) + 16 | 0);
    HEAP32[$33 >> 2] = $32;
    $34 = ((($17)) + 20 | 0);
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = ((($18)) + 20 | 0);
    HEAP32[$36 >> 2] = $35;
    $37 = ((($17)) + 24 | 0);
    $38 = HEAP32[$37 >> 2] | 0;
    $39 = ((($18)) + 24 | 0);
    HEAP32[$39 >> 2] = $38;
    $40 = ((($17)) + 28 | 0);
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = ((($18)) + 28 | 0);
    HEAP32[$42 >> 2] = $41;
    $43 = ((($17)) + 32 | 0);
    $44 = HEAP32[$43 >> 2] | 0;
    $45 = ((($18)) + 32 | 0);
    HEAP32[$45 >> 2] = $44;
    $46 = ((($17)) + 36 | 0);
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = ((($18)) + 36 | 0);
    HEAP32[$48 >> 2] = $47;
    _secp256k1_fe_sqr($4, $18);
    _secp256k1_fe_mul($4, $4, $18);
    _secp256k1_fe_sqr($5, $4);
    _secp256k1_fe_mul($5, $5, $18);
    dest = $6;
    src = $5;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($6, $6);
    _secp256k1_fe_sqr($6, $6);
    _secp256k1_fe_sqr($6, $6);
    _secp256k1_fe_mul($6, $6, $5);
    dest = $7;
    src = $6;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_sqr($7, $7);
    _secp256k1_fe_mul($7, $7, $5);
    dest = $8;
    src = $7;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_sqr($8, $8);
    _secp256k1_fe_mul($8, $8, $4);
    dest = $9;
    src = $8;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($9, $9);
    _secp256k1_fe_sqr($9, $9);
    _secp256k1_fe_sqr($9, $9);
    _secp256k1_fe_sqr($9, $9);
    _secp256k1_fe_sqr($9, $9);
    _secp256k1_fe_sqr($9, $9);
    _secp256k1_fe_sqr($9, $9);
    _secp256k1_fe_sqr($9, $9);
    _secp256k1_fe_sqr($9, $9);
    _secp256k1_fe_sqr($9, $9);
    _secp256k1_fe_sqr($9, $9);
    _secp256k1_fe_mul($9, $9, $8);
    dest = $10;
    src = $9;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_sqr($10, $10);
    _secp256k1_fe_mul($10, $10, $9);
    dest = $11;
    src = $10;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $$542$i = 0;
    while (1) {
      _secp256k1_fe_sqr($11, $11);
      $49 = (($$542$i) + 1) | 0;
      $exitcond49$i = ($49 | 0) == (44);
      if ($exitcond49$i) {
        break;
      } else {
        $$542$i = $49;
      }
    }
    $50 = ((($0)) + 40 | 0);
    _secp256k1_fe_mul($11, $11, $10);
    dest = $12;
    src = $11;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $$641$i = 0;
    while (1) {
      _secp256k1_fe_sqr($12, $12);
      $51 = (($$641$i) + 1) | 0;
      $exitcond48$i = ($51 | 0) == (88);
      if ($exitcond48$i) {
        break;
      } else {
        $$641$i = $51;
      }
    }
    _secp256k1_fe_mul($12, $12, $11);
    dest = $13;
    src = $12;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $$740$i = 0;
    while (1) {
      _secp256k1_fe_sqr($13, $13);
      $52 = (($$740$i) + 1) | 0;
      $exitcond$i = ($52 | 0) == (44);
      if ($exitcond$i) {
        break;
      } else {
        $$740$i = $52;
      }
    }
    _secp256k1_fe_mul($13, $13, $10);
    dest = $14;
    src = $13;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($14, $14);
    _secp256k1_fe_sqr($14, $14);
    _secp256k1_fe_sqr($14, $14);
    _secp256k1_fe_mul($14, $14, $5);
    dest = $15;
    src = $14;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_mul($15, $15, $9);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_mul($15, $15, $4);
    _secp256k1_fe_sqr($15, $15);
    _secp256k1_fe_sqr($50, $15);
    _secp256k1_fe_sqr($15, $50);
    $53 = HEAP32[$15 >> 2] | 0;
    $54 = (268431548 - ($53)) | 0;
    $55 = ((($15)) + 4 | 0);
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = (268435196 - ($56)) | 0;
    $58 = ((($3)) + 4 | 0);
    $59 = ((($15)) + 8 | 0);
    $60 = HEAP32[$59 >> 2] | 0;
    $61 = (268435452 - ($60)) | 0;
    $62 = ((($3)) + 8 | 0);
    $63 = ((($15)) + 12 | 0);
    $64 = HEAP32[$63 >> 2] | 0;
    $65 = (268435452 - ($64)) | 0;
    $66 = ((($3)) + 12 | 0);
    $67 = ((($15)) + 16 | 0);
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = (268435452 - ($68)) | 0;
    $70 = ((($3)) + 16 | 0);
    $71 = ((($15)) + 20 | 0);
    $72 = HEAP32[$71 >> 2] | 0;
    $73 = (268435452 - ($72)) | 0;
    $74 = ((($3)) + 20 | 0);
    $75 = ((($15)) + 24 | 0);
    $76 = HEAP32[$75 >> 2] | 0;
    $77 = (268435452 - ($76)) | 0;
    $78 = ((($3)) + 24 | 0);
    $79 = ((($15)) + 28 | 0);
    $80 = HEAP32[$79 >> 2] | 0;
    $81 = (268435452 - ($80)) | 0;
    $82 = ((($3)) + 28 | 0);
    $83 = ((($15)) + 32 | 0);
    $84 = HEAP32[$83 >> 2] | 0;
    $85 = (268435452 - ($84)) | 0;
    $86 = ((($3)) + 32 | 0);
    $87 = ((($15)) + 36 | 0);
    $88 = HEAP32[$87 >> 2] | 0;
    $89 = (16777212 - ($88)) | 0;
    $90 = ((($3)) + 36 | 0);
    $91 = HEAP32[$18 >> 2] | 0;
    $92 = (($54) + ($91)) | 0;
    HEAP32[$3 >> 2] = $92;
    $93 = HEAP32[$20 >> 2] | 0;
    $94 = (($57) + ($93)) | 0;
    HEAP32[$58 >> 2] = $94;
    $95 = HEAP32[$27 >> 2] | 0;
    $96 = (($61) + ($95)) | 0;
    HEAP32[$62 >> 2] = $96;
    $97 = HEAP32[$30 >> 2] | 0;
    $98 = (($65) + ($97)) | 0;
    HEAP32[$66 >> 2] = $98;
    $99 = HEAP32[$33 >> 2] | 0;
    $100 = (($69) + ($99)) | 0;
    HEAP32[$70 >> 2] = $100;
    $101 = (($73) + ($35)) | 0;
    HEAP32[$74 >> 2] = $101;
    $102 = HEAP32[$39 >> 2] | 0;
    $103 = (($77) + ($102)) | 0;
    HEAP32[$78 >> 2] = $103;
    $104 = HEAP32[$42 >> 2] | 0;
    $105 = (($81) + ($104)) | 0;
    HEAP32[$82 >> 2] = $105;
    $106 = HEAP32[$45 >> 2] | 0;
    $107 = (($85) + ($106)) | 0;
    HEAP32[$86 >> 2] = $107;
    $108 = HEAP32[$48 >> 2] | 0;
    $109 = (($89) + ($108)) | 0;
    HEAP32[$90 >> 2] = $109;
    $110 = (_secp256k1_fe_normalizes_to_zero_var($3) | 0);
    $111 = ($110 | 0) == (0);
    if ($111) {
      $$0 = 0;
      STACKTOP = sp;
      return ($$0 | 0);
    }
    _secp256k1_fe_normalize_var($50);
    $$idx$val = HEAP32[$50 >> 2] | 0;
    $112 = $$idx$val & 1;
    $113 = ($112 | 0) == ($2 | 0);
    if ($113) {
      $$0 = 1;
      STACKTOP = sp;
      return ($$0 | 0);
    }
    $114 = (268431548 - ($$idx$val)) | 0;
    HEAP32[$50 >> 2] = $114;
    $115 = ((($0)) + 44 | 0);
    $116 = HEAP32[$115 >> 2] | 0;
    $117 = (268435196 - ($116)) | 0;
    HEAP32[$115 >> 2] = $117;
    $118 = ((($0)) + 48 | 0);
    $119 = HEAP32[$118 >> 2] | 0;
    $120 = (268435452 - ($119)) | 0;
    HEAP32[$118 >> 2] = $120;
    $121 = ((($0)) + 52 | 0);
    $122 = HEAP32[$121 >> 2] | 0;
    $123 = (268435452 - ($122)) | 0;
    HEAP32[$121 >> 2] = $123;
    $124 = ((($0)) + 56 | 0);
    $125 = HEAP32[$124 >> 2] | 0;
    $126 = (268435452 - ($125)) | 0;
    HEAP32[$124 >> 2] = $126;
    $127 = ((($0)) + 60 | 0);
    $128 = HEAP32[$127 >> 2] | 0;
    $129 = (268435452 - ($128)) | 0;
    HEAP32[$127 >> 2] = $129;
    $130 = ((($0)) + 64 | 0);
    $131 = HEAP32[$130 >> 2] | 0;
    $132 = (268435452 - ($131)) | 0;
    HEAP32[$130 >> 2] = $132;
    $133 = ((($0)) + 68 | 0);
    $134 = HEAP32[$133 >> 2] | 0;
    $135 = (268435452 - ($134)) | 0;
    HEAP32[$133 >> 2] = $135;
    $136 = ((($0)) + 72 | 0);
    $137 = HEAP32[$136 >> 2] | 0;
    $138 = (268435452 - ($137)) | 0;
    HEAP32[$136 >> 2] = $138;
    $139 = ((($0)) + 76 | 0);
    $140 = HEAP32[$139 >> 2] | 0;
    $141 = (16777212 - ($140)) | 0;
    HEAP32[$139 >> 2] = $141;
    $$0 = 1;
    STACKTOP = sp;
    return ($$0 | 0);
  }

  function _secp256k1_gej_add_var($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0,
      $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
    var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0,
      $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
    var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0,
      $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
    var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0,
      $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
    var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0,
      $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
    var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0,
      $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
    var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0,
      $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
    var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0,
      $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
    var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0,
      $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
    var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0,
      $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
    var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0,
      $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
    var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0,
      $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
    var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0,
      $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
    var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0,
      $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $36 = 0, $37 = 0;
    var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0,
      $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
    var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0,
      $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
    var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0,
      $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
    var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0,
      stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 480 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480 | 0);
    $3 = sp + 440 | 0;
    $4 = sp + 400 | 0;
    $5 = sp + 360 | 0;
    $6 = sp + 320 | 0;
    $7 = sp + 280 | 0;
    $8 = sp + 240 | 0;
    $9 = sp + 200 | 0;
    $10 = sp + 160 | 0;
    $11 = sp + 120 | 0;
    $12 = sp + 80 | 0;
    $13 = sp + 40 | 0;
    $14 = sp;
    $15 = ((($1)) + 120 | 0);
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ($16 | 0) == (0);
    if (!($17)) {
      dest = $0;
      src = $2;
      stop = dest + 124 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      STACKTOP = sp;
      return;
    }
    $18 = ((($2)) + 120 | 0);
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = ($19 | 0) == (0);
    if (!($20)) {
      dest = $0;
      src = $1;
      stop = dest + 124 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      STACKTOP = sp;
      return;
    }
    $21 = ((($0)) + 120 | 0);
    HEAP32[$21 >> 2] = 0;
    $22 = ((($2)) + 80 | 0);
    _secp256k1_fe_sqr($3, $22);
    $23 = ((($1)) + 80 | 0);
    _secp256k1_fe_sqr($4, $23);
    _secp256k1_fe_mul($5, $1, $3);
    _secp256k1_fe_mul($6, $2, $4);
    $24 = ((($1)) + 40 | 0);
    _secp256k1_fe_mul($7, $24, $3);
    _secp256k1_fe_mul($7, $7, $22);
    $25 = ((($2)) + 40 | 0);
    _secp256k1_fe_mul($8, $25, $4);
    _secp256k1_fe_mul($8, $8, $23);
    $26 = HEAP32[$5 >> 2] | 0;
    $27 = (268431548 - ($26)) | 0;
    $28 = ((($5)) + 4 | 0);
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = (268435196 - ($29)) | 0;
    $31 = ((($9)) + 4 | 0);
    $32 = ((($5)) + 8 | 0);
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = (268435452 - ($33)) | 0;
    $35 = ((($9)) + 8 | 0);
    $36 = ((($5)) + 12 | 0);
    $37 = HEAP32[$36 >> 2] | 0;
    $38 = (268435452 - ($37)) | 0;
    $39 = ((($9)) + 12 | 0);
    $40 = ((($5)) + 16 | 0);
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = (268435452 - ($41)) | 0;
    $43 = ((($9)) + 16 | 0);
    $44 = ((($5)) + 20 | 0);
    $45 = HEAP32[$44 >> 2] | 0;
    $46 = (268435452 - ($45)) | 0;
    $47 = ((($9)) + 20 | 0);
    $48 = ((($5)) + 24 | 0);
    $49 = HEAP32[$48 >> 2] | 0;
    $50 = (268435452 - ($49)) | 0;
    $51 = ((($9)) + 24 | 0);
    $52 = ((($5)) + 28 | 0);
    $53 = HEAP32[$52 >> 2] | 0;
    $54 = (268435452 - ($53)) | 0;
    $55 = ((($9)) + 28 | 0);
    $56 = ((($5)) + 32 | 0);
    $57 = HEAP32[$56 >> 2] | 0;
    $58 = (268435452 - ($57)) | 0;
    $59 = ((($9)) + 32 | 0);
    $60 = ((($5)) + 36 | 0);
    $61 = HEAP32[$60 >> 2] | 0;
    $62 = (16777212 - ($61)) | 0;
    $63 = ((($9)) + 36 | 0);
    $64 = HEAP32[$6 >> 2] | 0;
    $65 = (($27) + ($64)) | 0;
    HEAP32[$9 >> 2] = $65;
    $66 = ((($6)) + 4 | 0);
    $67 = HEAP32[$66 >> 2] | 0;
    $68 = (($30) + ($67)) | 0;
    HEAP32[$31 >> 2] = $68;
    $69 = ((($6)) + 8 | 0);
    $70 = HEAP32[$69 >> 2] | 0;
    $71 = (($34) + ($70)) | 0;
    HEAP32[$35 >> 2] = $71;
    $72 = ((($6)) + 12 | 0);
    $73 = HEAP32[$72 >> 2] | 0;
    $74 = (($38) + ($73)) | 0;
    HEAP32[$39 >> 2] = $74;
    $75 = ((($6)) + 16 | 0);
    $76 = HEAP32[$75 >> 2] | 0;
    $77 = (($42) + ($76)) | 0;
    HEAP32[$43 >> 2] = $77;
    $78 = ((($6)) + 20 | 0);
    $79 = HEAP32[$78 >> 2] | 0;
    $80 = (($46) + ($79)) | 0;
    HEAP32[$47 >> 2] = $80;
    $81 = ((($6)) + 24 | 0);
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = (($50) + ($82)) | 0;
    HEAP32[$51 >> 2] = $83;
    $84 = ((($6)) + 28 | 0);
    $85 = HEAP32[$84 >> 2] | 0;
    $86 = (($54) + ($85)) | 0;
    HEAP32[$55 >> 2] = $86;
    $87 = ((($6)) + 32 | 0);
    $88 = HEAP32[$87 >> 2] | 0;
    $89 = (($58) + ($88)) | 0;
    HEAP32[$59 >> 2] = $89;
    $90 = ((($6)) + 36 | 0);
    $91 = HEAP32[$90 >> 2] | 0;
    $92 = (($62) + ($91)) | 0;
    HEAP32[$63 >> 2] = $92;
    $93 = HEAP32[$7 >> 2] | 0;
    $94 = (268431548 - ($93)) | 0;
    $95 = ((($7)) + 4 | 0);
    $96 = HEAP32[$95 >> 2] | 0;
    $97 = (268435196 - ($96)) | 0;
    $98 = ((($10)) + 4 | 0);
    $99 = ((($7)) + 8 | 0);
    $100 = HEAP32[$99 >> 2] | 0;
    $101 = (268435452 - ($100)) | 0;
    $102 = ((($10)) + 8 | 0);
    $103 = ((($7)) + 12 | 0);
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = (268435452 - ($104)) | 0;
    $106 = ((($10)) + 12 | 0);
    $107 = ((($7)) + 16 | 0);
    $108 = HEAP32[$107 >> 2] | 0;
    $109 = (268435452 - ($108)) | 0;
    $110 = ((($10)) + 16 | 0);
    $111 = ((($7)) + 20 | 0);
    $112 = HEAP32[$111 >> 2] | 0;
    $113 = (268435452 - ($112)) | 0;
    $114 = ((($10)) + 20 | 0);
    $115 = ((($7)) + 24 | 0);
    $116 = HEAP32[$115 >> 2] | 0;
    $117 = (268435452 - ($116)) | 0;
    $118 = ((($10)) + 24 | 0);
    $119 = ((($7)) + 28 | 0);
    $120 = HEAP32[$119 >> 2] | 0;
    $121 = (268435452 - ($120)) | 0;
    $122 = ((($10)) + 28 | 0);
    $123 = ((($7)) + 32 | 0);
    $124 = HEAP32[$123 >> 2] | 0;
    $125 = (268435452 - ($124)) | 0;
    $126 = ((($10)) + 32 | 0);
    $127 = ((($7)) + 36 | 0);
    $128 = HEAP32[$127 >> 2] | 0;
    $129 = (16777212 - ($128)) | 0;
    $130 = ((($10)) + 36 | 0);
    $131 = HEAP32[$8 >> 2] | 0;
    $132 = (($94) + ($131)) | 0;
    HEAP32[$10 >> 2] = $132;
    $133 = ((($8)) + 4 | 0);
    $134 = HEAP32[$133 >> 2] | 0;
    $135 = (($97) + ($134)) | 0;
    HEAP32[$98 >> 2] = $135;
    $136 = ((($8)) + 8 | 0);
    $137 = HEAP32[$136 >> 2] | 0;
    $138 = (($101) + ($137)) | 0;
    HEAP32[$102 >> 2] = $138;
    $139 = ((($8)) + 12 | 0);
    $140 = HEAP32[$139 >> 2] | 0;
    $141 = (($105) + ($140)) | 0;
    HEAP32[$106 >> 2] = $141;
    $142 = ((($8)) + 16 | 0);
    $143 = HEAP32[$142 >> 2] | 0;
    $144 = (($109) + ($143)) | 0;
    HEAP32[$110 >> 2] = $144;
    $145 = ((($8)) + 20 | 0);
    $146 = HEAP32[$145 >> 2] | 0;
    $147 = (($113) + ($146)) | 0;
    HEAP32[$114 >> 2] = $147;
    $148 = ((($8)) + 24 | 0);
    $149 = HEAP32[$148 >> 2] | 0;
    $150 = (($117) + ($149)) | 0;
    HEAP32[$118 >> 2] = $150;
    $151 = ((($8)) + 28 | 0);
    $152 = HEAP32[$151 >> 2] | 0;
    $153 = (($121) + ($152)) | 0;
    HEAP32[$122 >> 2] = $153;
    $154 = ((($8)) + 32 | 0);
    $155 = HEAP32[$154 >> 2] | 0;
    $156 = (($125) + ($155)) | 0;
    HEAP32[$126 >> 2] = $156;
    $157 = ((($8)) + 36 | 0);
    $158 = HEAP32[$157 >> 2] | 0;
    $159 = (($129) + ($158)) | 0;
    HEAP32[$130 >> 2] = $159;
    $160 = (_secp256k1_fe_normalizes_to_zero_var($9) | 0);
    $161 = ($160 | 0) == (0);
    if ($161) {
      _secp256k1_fe_sqr($11, $10);
      _secp256k1_fe_sqr($12, $9);
      _secp256k1_fe_mul($13, $9, $12);
      _secp256k1_fe_mul($9, $9, $22);
      $164 = ((($0)) + 80 | 0);
      _secp256k1_fe_mul($164, $23, $9);
      _secp256k1_fe_mul($14, $5, $12);
      dest = $0;
      src = $14;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $165 = HEAP32[$0 >> 2] | 0;
      $166 = $165 << 1;
      $167 = ((($0)) + 4 | 0);
      $168 = HEAP32[$167 >> 2] | 0;
      $169 = $168 << 1;
      $170 = ((($0)) + 8 | 0);
      $171 = HEAP32[$170 >> 2] | 0;
      $172 = $171 << 1;
      $173 = ((($0)) + 12 | 0);
      $174 = HEAP32[$173 >> 2] | 0;
      $175 = $174 << 1;
      $176 = ((($0)) + 16 | 0);
      $177 = HEAP32[$176 >> 2] | 0;
      $178 = $177 << 1;
      $179 = ((($0)) + 20 | 0);
      $180 = HEAP32[$179 >> 2] | 0;
      $181 = $180 << 1;
      $182 = ((($0)) + 24 | 0);
      $183 = HEAP32[$182 >> 2] | 0;
      $184 = $183 << 1;
      $185 = ((($0)) + 28 | 0);
      $186 = HEAP32[$185 >> 2] | 0;
      $187 = $186 << 1;
      $188 = ((($0)) + 32 | 0);
      $189 = HEAP32[$188 >> 2] | 0;
      $190 = $189 << 1;
      $191 = ((($0)) + 36 | 0);
      $192 = HEAP32[$191 >> 2] | 0;
      $193 = $192 << 1;
      $194 = HEAP32[$13 >> 2] | 0;
      $195 = (($166) + ($194)) | 0;
      $196 = ((($13)) + 4 | 0);
      $197 = HEAP32[$196 >> 2] | 0;
      $198 = (($169) + ($197)) | 0;
      $199 = ((($13)) + 8 | 0);
      $200 = HEAP32[$199 >> 2] | 0;
      $201 = (($172) + ($200)) | 0;
      $202 = ((($13)) + 12 | 0);
      $203 = HEAP32[$202 >> 2] | 0;
      $204 = (($175) + ($203)) | 0;
      $205 = ((($13)) + 16 | 0);
      $206 = HEAP32[$205 >> 2] | 0;
      $207 = (($178) + ($206)) | 0;
      $208 = ((($13)) + 20 | 0);
      $209 = HEAP32[$208 >> 2] | 0;
      $210 = (($181) + ($209)) | 0;
      $211 = ((($13)) + 24 | 0);
      $212 = HEAP32[$211 >> 2] | 0;
      $213 = (($184) + ($212)) | 0;
      $214 = ((($13)) + 28 | 0);
      $215 = HEAP32[$214 >> 2] | 0;
      $216 = (($187) + ($215)) | 0;
      $217 = ((($13)) + 32 | 0);
      $218 = HEAP32[$217 >> 2] | 0;
      $219 = (($190) + ($218)) | 0;
      $220 = ((($13)) + 36 | 0);
      $221 = HEAP32[$220 >> 2] | 0;
      $222 = (($193) + ($221)) | 0;
      $223 = (536863096 - ($195)) | 0;
      $224 = (536870392 - ($198)) | 0;
      $225 = (536870904 - ($201)) | 0;
      $226 = (536870904 - ($204)) | 0;
      $227 = (536870904 - ($207)) | 0;
      $228 = (536870904 - ($210)) | 0;
      $229 = (536870904 - ($213)) | 0;
      $230 = (536870904 - ($216)) | 0;
      $231 = (536870904 - ($219)) | 0;
      $232 = (33554424 - ($222)) | 0;
      $233 = HEAP32[$11 >> 2] | 0;
      $234 = (($223) + ($233)) | 0;
      HEAP32[$0 >> 2] = $234;
      $235 = ((($11)) + 4 | 0);
      $236 = HEAP32[$235 >> 2] | 0;
      $237 = (($224) + ($236)) | 0;
      HEAP32[$167 >> 2] = $237;
      $238 = ((($11)) + 8 | 0);
      $239 = HEAP32[$238 >> 2] | 0;
      $240 = (($225) + ($239)) | 0;
      HEAP32[$170 >> 2] = $240;
      $241 = ((($11)) + 12 | 0);
      $242 = HEAP32[$241 >> 2] | 0;
      $243 = (($226) + ($242)) | 0;
      HEAP32[$173 >> 2] = $243;
      $244 = ((($11)) + 16 | 0);
      $245 = HEAP32[$244 >> 2] | 0;
      $246 = (($227) + ($245)) | 0;
      HEAP32[$176 >> 2] = $246;
      $247 = ((($11)) + 20 | 0);
      $248 = HEAP32[$247 >> 2] | 0;
      $249 = (($228) + ($248)) | 0;
      HEAP32[$179 >> 2] = $249;
      $250 = ((($11)) + 24 | 0);
      $251 = HEAP32[$250 >> 2] | 0;
      $252 = (($229) + ($251)) | 0;
      HEAP32[$182 >> 2] = $252;
      $253 = ((($11)) + 28 | 0);
      $254 = HEAP32[$253 >> 2] | 0;
      $255 = (($230) + ($254)) | 0;
      HEAP32[$185 >> 2] = $255;
      $256 = ((($11)) + 32 | 0);
      $257 = HEAP32[$256 >> 2] | 0;
      $258 = (($231) + ($257)) | 0;
      HEAP32[$188 >> 2] = $258;
      $259 = ((($11)) + 36 | 0);
      $260 = HEAP32[$259 >> 2] | 0;
      $261 = (($232) + ($260)) | 0;
      HEAP32[$191 >> 2] = $261;
      $262 = ((($0)) + 40 | 0);
      $263 = (805294644 - ($234)) | 0;
      $264 = (805305588 - ($237)) | 0;
      $265 = ((($0)) + 44 | 0);
      $266 = (805306356 - ($240)) | 0;
      $267 = ((($0)) + 48 | 0);
      $268 = (805306356 - ($243)) | 0;
      $269 = ((($0)) + 52 | 0);
      $270 = (805306356 - ($246)) | 0;
      $271 = ((($0)) + 56 | 0);
      $272 = (805306356 - ($249)) | 0;
      $273 = ((($0)) + 60 | 0);
      $274 = (805306356 - ($252)) | 0;
      $275 = ((($0)) + 64 | 0);
      $276 = (805306356 - ($255)) | 0;
      $277 = ((($0)) + 68 | 0);
      $278 = (805306356 - ($258)) | 0;
      $279 = ((($0)) + 72 | 0);
      $280 = (50331636 - ($261)) | 0;
      $281 = ((($0)) + 76 | 0);
      $282 = HEAP32[$14 >> 2] | 0;
      $283 = (($263) + ($282)) | 0;
      HEAP32[$262 >> 2] = $283;
      $284 = ((($14)) + 4 | 0);
      $285 = HEAP32[$284 >> 2] | 0;
      $286 = (($264) + ($285)) | 0;
      HEAP32[$265 >> 2] = $286;
      $287 = ((($14)) + 8 | 0);
      $288 = HEAP32[$287 >> 2] | 0;
      $289 = (($266) + ($288)) | 0;
      HEAP32[$267 >> 2] = $289;
      $290 = ((($14)) + 12 | 0);
      $291 = HEAP32[$290 >> 2] | 0;
      $292 = (($268) + ($291)) | 0;
      HEAP32[$269 >> 2] = $292;
      $293 = ((($14)) + 16 | 0);
      $294 = HEAP32[$293 >> 2] | 0;
      $295 = (($270) + ($294)) | 0;
      HEAP32[$271 >> 2] = $295;
      $296 = ((($14)) + 20 | 0);
      $297 = HEAP32[$296 >> 2] | 0;
      $298 = (($272) + ($297)) | 0;
      HEAP32[$273 >> 2] = $298;
      $299 = ((($14)) + 24 | 0);
      $300 = HEAP32[$299 >> 2] | 0;
      $301 = (($274) + ($300)) | 0;
      HEAP32[$275 >> 2] = $301;
      $302 = ((($14)) + 28 | 0);
      $303 = HEAP32[$302 >> 2] | 0;
      $304 = (($276) + ($303)) | 0;
      HEAP32[$277 >> 2] = $304;
      $305 = ((($14)) + 32 | 0);
      $306 = HEAP32[$305 >> 2] | 0;
      $307 = (($278) + ($306)) | 0;
      HEAP32[$279 >> 2] = $307;
      $308 = ((($14)) + 36 | 0);
      $309 = HEAP32[$308 >> 2] | 0;
      $310 = (($280) + ($309)) | 0;
      HEAP32[$281 >> 2] = $310;
      _secp256k1_fe_mul($262, $262, $10);
      _secp256k1_fe_mul($13, $13, $7);
      $311 = HEAP32[$13 >> 2] | 0;
      $312 = (268431548 - ($311)) | 0;
      HEAP32[$13 >> 2] = $312;
      $313 = HEAP32[$196 >> 2] | 0;
      $314 = (268435196 - ($313)) | 0;
      HEAP32[$196 >> 2] = $314;
      $315 = HEAP32[$199 >> 2] | 0;
      $316 = (268435452 - ($315)) | 0;
      HEAP32[$199 >> 2] = $316;
      $317 = HEAP32[$202 >> 2] | 0;
      $318 = (268435452 - ($317)) | 0;
      HEAP32[$202 >> 2] = $318;
      $319 = HEAP32[$205 >> 2] | 0;
      $320 = (268435452 - ($319)) | 0;
      HEAP32[$205 >> 2] = $320;
      $321 = HEAP32[$208 >> 2] | 0;
      $322 = (268435452 - ($321)) | 0;
      HEAP32[$208 >> 2] = $322;
      $323 = HEAP32[$211 >> 2] | 0;
      $324 = (268435452 - ($323)) | 0;
      HEAP32[$211 >> 2] = $324;
      $325 = HEAP32[$214 >> 2] | 0;
      $326 = (268435452 - ($325)) | 0;
      HEAP32[$214 >> 2] = $326;
      $327 = HEAP32[$217 >> 2] | 0;
      $328 = (268435452 - ($327)) | 0;
      HEAP32[$217 >> 2] = $328;
      $329 = HEAP32[$220 >> 2] | 0;
      $330 = (16777212 - ($329)) | 0;
      HEAP32[$220 >> 2] = $330;
      $331 = HEAP32[$262 >> 2] | 0;
      $332 = (($331) + ($312)) | 0;
      HEAP32[$262 >> 2] = $332;
      $333 = HEAP32[$265 >> 2] | 0;
      $334 = (($333) + ($314)) | 0;
      HEAP32[$265 >> 2] = $334;
      $335 = HEAP32[$267 >> 2] | 0;
      $336 = (($335) + ($316)) | 0;
      HEAP32[$267 >> 2] = $336;
      $337 = HEAP32[$269 >> 2] | 0;
      $338 = (($337) + ($318)) | 0;
      HEAP32[$269 >> 2] = $338;
      $339 = HEAP32[$271 >> 2] | 0;
      $340 = (($339) + ($320)) | 0;
      HEAP32[$271 >> 2] = $340;
      $341 = HEAP32[$273 >> 2] | 0;
      $342 = (($341) + ($322)) | 0;
      HEAP32[$273 >> 2] = $342;
      $343 = HEAP32[$275 >> 2] | 0;
      $344 = (($343) + ($324)) | 0;
      HEAP32[$275 >> 2] = $344;
      $345 = HEAP32[$277 >> 2] | 0;
      $346 = (($345) + ($326)) | 0;
      HEAP32[$277 >> 2] = $346;
      $347 = HEAP32[$279 >> 2] | 0;
      $348 = (($347) + ($328)) | 0;
      HEAP32[$279 >> 2] = $348;
      $349 = HEAP32[$281 >> 2] | 0;
      $350 = (($349) + ($330)) | 0;
      HEAP32[$281 >> 2] = $350;
      STACKTOP = sp;
      return;
    }
    $162 = (_secp256k1_fe_normalizes_to_zero_var($10) | 0);
    $163 = ($162 | 0) == (0);
    if ($163) {
      HEAP32[$21 >> 2] = 1;
      STACKTOP = sp;
      return;
    } else {
      _secp256k1_gej_double_var($0, $1, 0);
      STACKTOP = sp;
      return;
    }
  }

  function _secp256k1_ge_set_all_gej_var($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$0$lcssa = 0, $$029$i = 0, $$029$i$phi = 0, $$03743 = 0, $$044 = 0, $$1 = 0, $$128$i = 0, $$13841 = 0,
      $$242 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
    var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0,
      $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
    var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0,
      $9 = 0, $exitcond = 0, $exitcond49 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0,
      $vararg_ptr2 = 0;
    var $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 160 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160 | 0);
    $vararg_buffer3 = sp + 16 | 0;
    $vararg_buffer = sp;
    $3 = sp + 112 | 0;
    $4 = sp + 72 | 0;
    $5 = sp + 32 | 0;
    $6 = ($0 * 40) | 0;
    $7 = (_malloc($6) | 0);
    $8 = ($7 | 0) == (0 | 0);
    if ($8) {
      $9 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer >> 2] = 1676;
      $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
      HEAP32[$vararg_ptr1 >> 2] = 67;
      $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
      HEAP32[$vararg_ptr2 >> 2] = 1689;
      (_fprintf($9, 628, $vararg_buffer) | 0);
      _abort();
      // unreachable;
    }
    $10 = ($0 | 0) == (0);
    if ($10) {
      $$0$lcssa = 0;
    } else {
      $$03743 = 0;
      $$044 = 0;
      while (1) {
        $11 = (((($2) + (($$03743 * 124) | 0) | 0)) + 120 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ($12 | 0) == (0);
        if ($13) {
          $14 = (((($2) + (($$03743 * 124) | 0) | 0)) + 80 | 0);
          $15 = (($7) + (($$044 * 40) | 0) | 0);
          $16 = (($$044) + 1) | 0;
          dest = $15;
          src = $14;
          stop = dest + 40 | 0;
          do {
            HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
            dest = dest + 4 | 0;
            src = src + 4 | 0;
          } while ((dest | 0) < (stop | 0));
          $$1 = $16;
        } else {
          $$1 = $$044;
        }
        $17 = (($$03743) + 1) | 0;
        $exitcond49 = ($17 | 0) == ($0 | 0);
        if ($exitcond49) {
          $$0$lcssa = $$1;
          break;
        } else {
          $$03743 = $17;
          $$044 = $$1;
        }
      }
    }
    $18 = ($$0$lcssa * 40) | 0;
    $19 = (_malloc($18) | 0);
    $20 = ($19 | 0) == (0 | 0);
    if ($20) {
      $21 = HEAP32[125] | 0;
      HEAP32[$vararg_buffer3 >> 2] = 1676;
      $vararg_ptr6 = ((($vararg_buffer3)) + 4 | 0);
      HEAP32[$vararg_ptr6 >> 2] = 67;
      $vararg_ptr7 = ((($vararg_buffer3)) + 8 | 0);
      HEAP32[$vararg_ptr7 >> 2] = 1689;
      (_fprintf($21, 628, $vararg_buffer3) | 0);
      _abort();
      // unreachable;
    }
    $22 = ($$0$lcssa | 0) == (0);
    if (!($22)) {
      dest = $19;
      src = $7;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
      $23 = ($$0$lcssa | 0) == (1);
      if ($23) {
        _secp256k1_fe_inv($5, $19);
      } else {
        $$029$i = 0;
        $25 = 1;
        while (1) {
          $24 = (($19) + (($25 * 40) | 0) | 0);
          $26 = (($19) + (($$029$i * 40) | 0) | 0);
          $27 = (($7) + (($25 * 40) | 0) | 0);
          _secp256k1_fe_mul($24, $26, $27);
          $28 = (($25) + 1) | 0;
          $29 = ($28 >>> 0) < ($$0$lcssa >>> 0);
          if ($29) {
            $$029$i$phi = $25;
            $25 = $28;
            $$029$i = $$029$i$phi;
          } else {
            break;
          }
        }
        _secp256k1_fe_inv($5, $24);
        $$128$i = $25;
        while (1) {
          $30 = (($$128$i) + -1) | 0;
          $31 = (($19) + (($$128$i * 40) | 0) | 0);
          $32 = (($19) + (($30 * 40) | 0) | 0);
          _secp256k1_fe_mul($31, $32, $5);
          $33 = (($7) + (($$128$i * 40) | 0) | 0);
          _secp256k1_fe_mul($5, $5, $33);
          $34 = ($30 | 0) == (0);
          if ($34) {
            break;
          } else {
            $$128$i = $30;
          }
        }
      }
      dest = $19;
      src = $5;
      stop = dest + 40 | 0;
      do {
        HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
        dest = dest + 4 | 0;
        src = src + 4 | 0;
      } while ((dest | 0) < (stop | 0));
    }
    _free($7);
    if ($10) {
      _free($19);
      STACKTOP = sp;
      return;
    }
    $$13841 = 0;
    $$242 = 0;
    while (1) {
      $35 = (((($2) + (($$13841 * 124) | 0) | 0)) + 120 | 0);
      $36 = HEAP32[$35 >> 2] | 0;
      $37 = (((($1) + (($$13841 * 84) | 0) | 0)) + 80 | 0);
      HEAP32[$37 >> 2] = $36;
      $38 = ($36 | 0) == (0);
      if ($38) {
        $39 = (($$242) + 1) | 0;
        $40 = (($19) + (($$242 * 40) | 0) | 0);
        _secp256k1_fe_sqr($3, $40);
        _secp256k1_fe_mul($4, $3, $40);
        $41 = (($1) + (($$13841 * 84) | 0) | 0);
        $42 = (($2) + (($$13841 * 124) | 0) | 0);
        _secp256k1_fe_mul($41, $42, $3);
        $43 = (((($1) + (($$13841 * 84) | 0) | 0)) + 40 | 0);
        $44 = (((($2) + (($$13841 * 124) | 0) | 0)) + 40 | 0);
        _secp256k1_fe_mul($43, $44, $4);
        $45 = HEAP32[$35 >> 2] | 0;
        HEAP32[$37 >> 2] = $45;
        $$3 = $39;
      } else {
        $$3 = $$242;
      }
      $46 = (($$13841) + 1) | 0;
      $exitcond = ($46 | 0) == ($0 | 0);
      if ($exitcond) {
        break;
      } else {
        $$13841 = $46;
        $$242 = $$3;
      }
    }
    _free($19);
    STACKTOP = sp;
    return;
  }

  function _secp256k1_ge_to_storage($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0,
      $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
    var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0,
      $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
    var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0,
      $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
    var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0,
      $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
    var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0,
      $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
    var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 80 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80 | 0);
    $2 = sp + 40 | 0;
    $3 = sp;
    dest = $2;
    src = $1;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_normalize($2);
    $4 = ((($1)) + 40 | 0);
    dest = $3;
    src = $4;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_fe_normalize($3);
    $5 = HEAP32[$2 >> 2] | 0;
    $6 = ((($2)) + 4 | 0);
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7 << 26;
    $9 = $8 | $5;
    HEAP32[$0 >> 2] = $9;
    $10 = $7 >>> 6;
    $11 = ((($2)) + 8 | 0);
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 << 20;
    $14 = $13 | $10;
    $15 = ((($0)) + 4 | 0);
    HEAP32[$15 >> 2] = $14;
    $16 = $12 >>> 12;
    $17 = ((($2)) + 12 | 0);
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18 << 14;
    $20 = $19 | $16;
    $21 = ((($0)) + 8 | 0);
    HEAP32[$21 >> 2] = $20;
    $22 = $18 >>> 18;
    $23 = ((($2)) + 16 | 0);
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $24 << 8;
    $26 = $25 | $22;
    $27 = ((($0)) + 12 | 0);
    HEAP32[$27 >> 2] = $26;
    $28 = $24 >>> 24;
    $29 = ((($2)) + 20 | 0);
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = $30 << 2;
    $32 = $31 | $28;
    $33 = ((($2)) + 24 | 0);
    $34 = HEAP32[$33 >> 2] | 0;
    $35 = $34 << 28;
    $36 = $32 | $35;
    $37 = ((($0)) + 16 | 0);
    HEAP32[$37 >> 2] = $36;
    $38 = $34 >>> 4;
    $39 = ((($2)) + 28 | 0);
    $40 = HEAP32[$39 >> 2] | 0;
    $41 = $40 << 22;
    $42 = $41 | $38;
    $43 = ((($0)) + 20 | 0);
    HEAP32[$43 >> 2] = $42;
    $44 = $40 >>> 10;
    $45 = ((($2)) + 32 | 0);
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = $46 << 16;
    $48 = $47 | $44;
    $49 = ((($0)) + 24 | 0);
    HEAP32[$49 >> 2] = $48;
    $50 = $46 >>> 16;
    $51 = ((($2)) + 36 | 0);
    $52 = HEAP32[$51 >> 2] | 0;
    $53 = $52 << 10;
    $54 = $53 | $50;
    $55 = ((($0)) + 28 | 0);
    HEAP32[$55 >> 2] = $54;
    $56 = HEAP32[$3 >> 2] | 0;
    $57 = ((($3)) + 4 | 0);
    $58 = HEAP32[$57 >> 2] | 0;
    $59 = $58 << 26;
    $60 = $59 | $56;
    $61 = ((($0)) + 32 | 0);
    HEAP32[$61 >> 2] = $60;
    $62 = $58 >>> 6;
    $63 = ((($3)) + 8 | 0);
    $64 = HEAP32[$63 >> 2] | 0;
    $65 = $64 << 20;
    $66 = $65 | $62;
    $67 = ((($0)) + 36 | 0);
    HEAP32[$67 >> 2] = $66;
    $68 = $64 >>> 12;
    $69 = ((($3)) + 12 | 0);
    $70 = HEAP32[$69 >> 2] | 0;
    $71 = $70 << 14;
    $72 = $71 | $68;
    $73 = ((($0)) + 40 | 0);
    HEAP32[$73 >> 2] = $72;
    $74 = $70 >>> 18;
    $75 = ((($3)) + 16 | 0);
    $76 = HEAP32[$75 >> 2] | 0;
    $77 = $76 << 8;
    $78 = $77 | $74;
    $79 = ((($0)) + 44 | 0);
    HEAP32[$79 >> 2] = $78;
    $80 = $76 >>> 24;
    $81 = ((($3)) + 20 | 0);
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = $82 << 2;
    $84 = $83 | $80;
    $85 = ((($3)) + 24 | 0);
    $86 = HEAP32[$85 >> 2] | 0;
    $87 = $86 << 28;
    $88 = $84 | $87;
    $89 = ((($0)) + 48 | 0);
    HEAP32[$89 >> 2] = $88;
    $90 = $86 >>> 4;
    $91 = ((($3)) + 28 | 0);
    $92 = HEAP32[$91 >> 2] | 0;
    $93 = $92 << 22;
    $94 = $93 | $90;
    $95 = ((($0)) + 52 | 0);
    HEAP32[$95 >> 2] = $94;
    $96 = $92 >>> 10;
    $97 = ((($3)) + 32 | 0);
    $98 = HEAP32[$97 >> 2] | 0;
    $99 = $98 << 16;
    $100 = $99 | $96;
    $101 = ((($0)) + 56 | 0);
    HEAP32[$101 >> 2] = $100;
    $102 = $98 >>> 16;
    $103 = ((($3)) + 36 | 0);
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = $104 << 10;
    $106 = $105 | $102;
    $107 = ((($0)) + 60 | 0);
    HEAP32[$107 >> 2] = $106;
    STACKTOP = sp;
    return;
  }

  function _secp256k1_rfc6979_hmac_sha256_initialize($0, $1, $2, $3, $4, $5) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    $4 = $4 | 0;
    $5 = $5 | 0;
    var $$0$lcssa$i$i113783 = 0, $$0$lcssa$i$i131789 = 0, $$0$lcssa$i$i140 = 0, $$0$lcssa$i$i149 = 0,
      $$0$lcssa$i$i16738 = 0, $$0$lcssa$i$i191810 = 0, $$0$lcssa$i$i233831 = 0, $$0$lcssa$i$i25 = 0,
      $$0$lcssa$i$i251837 = 0, $$0$lcssa$i$i260 = 0, $$0$lcssa$i$i302858 = 0, $$0$lcssa$i$i34741 = 0,
      $$0$lcssa$i$i71762 = 0, $$0$lcssa$i$i732 = 0, $$0$lcssa$i168801 = 0, $$0$lcssa$i210822 = 0, $$0$lcssa$i279849 = 0,
      $$0$lcssa$i321870 = 0, $$0$lcssa$i339747 = 0, $$0$lcssa$i348750 = 0;
    var $$0$lcssa$i366768 = 0, $$0$lcssa$i375771 = 0, $$0$lcssa$i393795 = 0, $$0$lcssa$i402798 = 0,
      $$0$lcssa$i420816 = 0, $$0$lcssa$i429819 = 0, $$0$lcssa$i447843 = 0, $$0$lcssa$i456846 = 0, $$0$lcssa$i474864 = 0,
      $$0$lcssa$i483867 = 0, $$0$lcssa$i48753 = 0, $$0$lcssa$i492744 = 0, $$0$lcssa$i501765 = 0, $$0$lcssa$i510792 = 0,
      $$0$lcssa$i519813 = 0, $$0$lcssa$i528840 = 0, $$0$lcssa$i537861 = 0, $$0$lcssa$i6$i = 0, $$0$lcssa$i6$i157 = 0,
      $$0$lcssa$i6$i199 = 0;
    var $$0$lcssa$i6$i268 = 0, $$0$lcssa$i6$i310 = 0, $$0$lcssa$i6$i79 = 0, $$0$lcssa$i90774 = 0, $$02$i = 0,
      $$02$i171 = 0, $$02$i213 = 0, $$02$i282 = 0, $$02$i51 = 0, $$02$i93 = 0, $$020$lcssa$i$i112782 = 0,
      $$020$lcssa$i$i130788 = 0, $$020$lcssa$i$i139 = 0, $$020$lcssa$i$i148 = 0, $$020$lcssa$i$i15737 = 0,
      $$020$lcssa$i$i190809 = 0, $$020$lcssa$i$i232830 = 0, $$020$lcssa$i$i24 = 0, $$020$lcssa$i$i250836 = 0,
      $$020$lcssa$i$i259 = 0;
    var $$020$lcssa$i$i301857 = 0, $$020$lcssa$i$i33740 = 0, $$020$lcssa$i$i70761 = 0, $$020$lcssa$i$i731 = 0,
      $$020$lcssa$i167800 = 0, $$020$lcssa$i209821 = 0, $$020$lcssa$i278848 = 0, $$020$lcssa$i320869 = 0,
      $$020$lcssa$i338746 = 0, $$020$lcssa$i347749 = 0, $$020$lcssa$i365767 = 0, $$020$lcssa$i374770 = 0,
      $$020$lcssa$i392794 = 0, $$020$lcssa$i401797 = 0, $$020$lcssa$i419815 = 0, $$020$lcssa$i428818 = 0,
      $$020$lcssa$i446842 = 0, $$020$lcssa$i455845 = 0, $$020$lcssa$i473863 = 0, $$020$lcssa$i47752 = 0;
    var $$020$lcssa$i482866 = 0, $$020$lcssa$i491743 = 0, $$020$lcssa$i5$i = 0, $$020$lcssa$i5$i158 = 0,
      $$020$lcssa$i5$i200 = 0, $$020$lcssa$i5$i269 = 0, $$020$lcssa$i5$i311 = 0, $$020$lcssa$i5$i80 = 0,
      $$020$lcssa$i500764 = 0, $$020$lcssa$i509791 = 0, $$020$lcssa$i518812 = 0, $$020$lcssa$i527839 = 0,
      $$020$lcssa$i536860 = 0, $$020$lcssa$i89773 = 0, $$02023$i$i = 0, $$02023$i$i109 = 0, $$02023$i$i12 = 0,
      $$02023$i$i127 = 0, $$02023$i$i136 = 0, $$02023$i$i145 = 0;
    var $$02023$i$i154 = 0, $$02023$i$i187 = 0, $$02023$i$i196 = 0, $$02023$i$i21 = 0, $$02023$i$i229 = 0,
      $$02023$i$i247 = 0, $$02023$i$i256 = 0, $$02023$i$i265 = 0, $$02023$i$i298 = 0, $$02023$i$i30 = 0,
      $$02023$i$i307 = 0, $$02023$i$i39 = 0, $$02023$i$i67 = 0, $$02023$i$i76 = 0, $$02023$i164 = 0, $$02023$i206 = 0,
      $$02023$i275 = 0, $$02023$i317 = 0, $$02023$i335 = 0, $$02023$i344 = 0;
    var $$02023$i362 = 0, $$02023$i371 = 0, $$02023$i389 = 0, $$02023$i398 = 0, $$02023$i416 = 0, $$02023$i425 = 0,
      $$02023$i44 = 0, $$02023$i443 = 0, $$02023$i452 = 0, $$02023$i470 = 0, $$02023$i479 = 0, $$02023$i488 = 0,
      $$02023$i497 = 0, $$02023$i506 = 0, $$02023$i515 = 0, $$02023$i524 = 0, $$02023$i533 = 0, $$02023$i86 = 0,
      $$021$lcssa$i$i111781 = 0, $$021$lcssa$i$i129787 = 0;
    var $$021$lcssa$i$i138 = 0, $$021$lcssa$i$i147 = 0, $$021$lcssa$i$i14736 = 0, $$021$lcssa$i$i189808 = 0,
      $$021$lcssa$i$i23 = 0, $$021$lcssa$i$i231829 = 0, $$021$lcssa$i$i249835 = 0, $$021$lcssa$i$i258 = 0,
      $$021$lcssa$i$i300856 = 0, $$021$lcssa$i$i32739 = 0, $$021$lcssa$i$i69760 = 0, $$021$lcssa$i$i730 = 0,
      $$021$lcssa$i166799 = 0, $$021$lcssa$i208820 = 0, $$021$lcssa$i277847 = 0, $$021$lcssa$i319868 = 0,
      $$021$lcssa$i337745 = 0, $$021$lcssa$i346748 = 0, $$021$lcssa$i364766 = 0, $$021$lcssa$i373769 = 0;
    var $$021$lcssa$i391793 = 0, $$021$lcssa$i4$i = 0, $$021$lcssa$i4$i159 = 0, $$021$lcssa$i4$i201 = 0,
      $$021$lcssa$i4$i270 = 0, $$021$lcssa$i4$i312 = 0, $$021$lcssa$i4$i81 = 0, $$021$lcssa$i400796 = 0,
      $$021$lcssa$i418814 = 0, $$021$lcssa$i427817 = 0, $$021$lcssa$i445841 = 0, $$021$lcssa$i454844 = 0,
      $$021$lcssa$i46751 = 0, $$021$lcssa$i472862 = 0, $$021$lcssa$i481865 = 0, $$021$lcssa$i490742 = 0,
      $$021$lcssa$i499763 = 0, $$021$lcssa$i508790 = 0, $$021$lcssa$i517811 = 0, $$021$lcssa$i526838 = 0;
    var $$021$lcssa$i535859 = 0, $$021$lcssa$i88772 = 0, $$02122$i$i = 0, $$02122$i$i110 = 0, $$02122$i$i128 = 0,
      $$02122$i$i13 = 0, $$02122$i$i137 = 0, $$02122$i$i146 = 0, $$02122$i$i155 = 0, $$02122$i$i188 = 0,
      $$02122$i$i197 = 0, $$02122$i$i22 = 0, $$02122$i$i230 = 0, $$02122$i$i248 = 0, $$02122$i$i257 = 0,
      $$02122$i$i266 = 0, $$02122$i$i299 = 0, $$02122$i$i308 = 0, $$02122$i$i31 = 0, $$02122$i$i40 = 0;
    var $$02122$i$i68 = 0, $$02122$i$i77 = 0, $$02122$i165 = 0, $$02122$i207 = 0, $$02122$i276 = 0, $$02122$i318 = 0,
      $$02122$i336 = 0, $$02122$i345 = 0, $$02122$i363 = 0, $$02122$i372 = 0, $$02122$i390 = 0, $$02122$i399 = 0,
      $$02122$i417 = 0, $$02122$i426 = 0, $$02122$i444 = 0, $$02122$i45 = 0, $$02122$i453 = 0, $$02122$i471 = 0,
      $$02122$i480 = 0, $$02122$i489 = 0;
    var $$02122$i498 = 0, $$02122$i507 = 0, $$02122$i516 = 0, $$02122$i525 = 0, $$02122$i534 = 0, $$02122$i87 = 0,
      $$024$i$i = 0, $$024$i$i108 = 0, $$024$i$i11 = 0, $$024$i$i126 = 0, $$024$i$i135 = 0, $$024$i$i144 = 0,
      $$024$i$i153 = 0, $$024$i$i186 = 0, $$024$i$i195 = 0, $$024$i$i20 = 0, $$024$i$i228 = 0, $$024$i$i246 = 0,
      $$024$i$i255 = 0, $$024$i$i264 = 0;
    var $$024$i$i29 = 0, $$024$i$i297 = 0, $$024$i$i306 = 0, $$024$i$i38 = 0, $$024$i$i66 = 0, $$024$i$i75 = 0,
      $$024$i163 = 0, $$024$i205 = 0, $$024$i274 = 0, $$024$i316 = 0, $$024$i334 = 0, $$024$i343 = 0, $$024$i361 = 0,
      $$024$i370 = 0, $$024$i388 = 0, $$024$i397 = 0, $$024$i415 = 0, $$024$i424 = 0, $$024$i43 = 0, $$024$i442 = 0;
    var $$024$i451 = 0, $$024$i469 = 0, $$024$i478 = 0, $$024$i487 = 0, $$024$i496 = 0, $$024$i505 = 0, $$024$i514 = 0,
      $$024$i523 = 0, $$024$i532 = 0, $$024$i85 = 0, $$11$i = 0, $$11$i173 = 0, $$11$i215 = 0, $$11$i284 = 0,
      $$11$i53 = 0, $$11$i95 = 0, $$pre$phiZ2D = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0564$0$$sroa_idx = 0,
      $$sroa$0596$0$$sroa_idx = 0;
    var $$sroa$10$0$$sroa_idx = 0, $$sroa$10562$0$$sroa_idx = 0, $$sroa$10578$0$$sroa_idx = 0,
      $$sroa$10594$0$$sroa_idx = 0, $$sroa$10610$0$$sroa_idx = 0, $$sroa$10626$0$$sroa_idx = 0,
      $$sroa$10642$0$$sroa_idx = 0, $$sroa$10674$0$$sroa_idx = 0, $$sroa$10706$0$$sroa_idx = 0,
      $$sroa$4$0$$sroa_idx = 0, $$sroa$4550$0$$sroa_idx = 0, $$sroa$4566$0$$sroa_idx = 0, $$sroa$4582$0$$sroa_idx = 0,
      $$sroa$4598$0$$sroa_idx = 0, $$sroa$4614$0$$sroa_idx = 0, $$sroa$4630$0$$sroa_idx = 0,
      $$sroa$4662$0$$sroa_idx = 0, $$sroa$4694$0$$sroa_idx = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$5552$0$$sroa_idx = 0;
    var $$sroa$5568$0$$sroa_idx = 0, $$sroa$5584$0$$sroa_idx = 0, $$sroa$5600$0$$sroa_idx = 0,
      $$sroa$5616$0$$sroa_idx = 0, $$sroa$5632$0$$sroa_idx = 0, $$sroa$5664$0$$sroa_idx = 0,
      $$sroa$5696$0$$sroa_idx = 0, $$sroa$6$0$$sroa_idx = 0, $$sroa$6554$0$$sroa_idx = 0, $$sroa$6570$0$$sroa_idx = 0,
      $$sroa$6586$0$$sroa_idx = 0, $$sroa$6602$0$$sroa_idx = 0, $$sroa$6618$0$$sroa_idx = 0,
      $$sroa$6634$0$$sroa_idx = 0, $$sroa$6666$0$$sroa_idx = 0, $$sroa$6698$0$$sroa_idx = 0, $$sroa$7$0$$sroa_idx = 0,
      $$sroa$7556$0$$sroa_idx = 0, $$sroa$7572$0$$sroa_idx = 0, $$sroa$7588$0$$sroa_idx = 0;
    var $$sroa$7604$0$$sroa_idx = 0, $$sroa$7620$0$$sroa_idx = 0, $$sroa$7636$0$$sroa_idx = 0,
      $$sroa$7668$0$$sroa_idx = 0, $$sroa$7700$0$$sroa_idx = 0, $$sroa$8$0$$sroa_idx = 0, $$sroa$8558$0$$sroa_idx = 0,
      $$sroa$8574$0$$sroa_idx = 0, $$sroa$8590$0$$sroa_idx = 0, $$sroa$8606$0$$sroa_idx = 0,
      $$sroa$8622$0$$sroa_idx = 0, $$sroa$8638$0$$sroa_idx = 0, $$sroa$8670$0$$sroa_idx = 0,
      $$sroa$8702$0$$sroa_idx = 0, $$sroa$9$0$$sroa_idx = 0, $$sroa$9560$0$$sroa_idx = 0, $$sroa$9576$0$$sroa_idx = 0,
      $$sroa$9592$0$$sroa_idx = 0, $$sroa$9608$0$$sroa_idx = 0, $$sroa$9624$0$$sroa_idx = 0;
    var $$sroa$9640$0$$sroa_idx = 0, $$sroa$9672$0$$sroa_idx = 0, $$sroa$9704$0$$sroa_idx = 0, $10 = 0, $100 = 0,
      $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0,
      $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0;
    var $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0,
      $1023 = 0, $1024 = 0, $1025 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
    var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0,
      $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
    var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0,
      $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
    var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0,
      $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
    var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0,
      $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
    var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0,
      $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0;
    var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0,
      $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
    var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0,
      $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
    var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0,
      $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
    var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0,
      $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
    var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0,
      $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
    var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0,
      $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
    var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0,
      $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
    var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0,
      $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
    var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0,
      $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
    var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0,
      $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
    var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0,
      $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0;
    var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0,
      $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
    var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0,
      $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
    var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0,
      $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
    var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0,
      $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
    var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0,
      $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
    var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0,
      $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
    var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0,
      $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
    var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0,
      $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
    var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0,
      $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
    var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0,
      $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
    var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0,
      $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
    var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0,
      $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
    var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0,
      $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
    var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0,
      $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
    var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0,
      $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
    var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0,
      $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
    var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0,
      $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
    var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0,
      $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
    var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0,
      $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
    var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0,
      $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
    var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0,
      $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
    var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0,
      $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
    var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0,
      $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
    var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0,
      $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
    var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0,
      $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
    var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0,
      $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
    var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0,
      $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
    var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0,
      $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
    var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0,
      $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
    var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0,
      $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
    var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0,
      $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
    var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0,
      $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
    var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0,
      $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
    var $997 = 0, $998 = 0, $999 = 0, $exitcond$i = 0, $exitcond$i174 = 0, $exitcond$i216 = 0, $exitcond$i285 = 0,
      $exitcond$i54 = 0, $exitcond$i96 = 0, $exitcond3$i = 0, $exitcond3$i172 = 0, $exitcond3$i214 = 0,
      $exitcond3$i283 = 0, $exitcond3$i52 = 0, $exitcond3$i94 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0;
    var stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 592 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(592 | 0);
    $6 = sp + 512 | 0;
    $7 = sp + 504 | 0;
    $8 = sp + 496 | 0;
    $9 = sp + 488 | 0;
    $10 = sp + 480 | 0;
    $11 = sp + 472 | 0;
    $12 = sp + 464 | 0;
    $13 = sp + 456 | 0;
    $14 = sp + 448 | 0;
    $15 = sp + 440 | 0;
    $16 = sp + 432 | 0;
    $17 = sp + 424 | 0;
    $18 = sp + 392 | 0;
    $19 = sp + 520 | 0;
    $20 = sp;
    ;HEAP32[$0 >> 2] = 16843009 | 0;
    HEAP32[$0 + 4 >> 2] = 16843009 | 0;
    HEAP32[$0 + 8 >> 2] = 16843009 | 0;
    HEAP32[$0 + 12 >> 2] = 16843009 | 0;
    HEAP32[$0 + 16 >> 2] = 16843009 | 0;
    HEAP32[$0 + 20 >> 2] = 16843009 | 0;
    HEAP32[$0 + 24 >> 2] = 16843009 | 0;
    HEAP32[$0 + 28 >> 2] = 16843009 | 0;
    $21 = ((($0)) + 32 | 0);
    ;HEAP32[$21 >> 2] = 0 | 0;
    HEAP32[$21 + 4 >> 2] = 0 | 0;
    HEAP32[$21 + 8 >> 2] = 0 | 0;
    HEAP32[$21 + 12 >> 2] = 0 | 0;
    HEAP32[$21 + 16 >> 2] = 0 | 0;
    HEAP32[$21 + 20 >> 2] = 0 | 0;
    HEAP32[$21 + 24 >> 2] = 0 | 0;
    HEAP32[$21 + 28 >> 2] = 0 | 0;
    $22 = ((($19)) + 32 | 0);
    $23 = ((($20)) + 196 | 0);
    dest = $19;
    stop = dest + 64 | 0;
    do {
      HEAP8[dest >> 0] = 0 | 0;
      dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP32[$23 >> 2] = 1779033703;
    $24 = ((($20)) + 200 | 0);
    HEAP32[$24 >> 2] = -1150833019;
    $25 = ((($20)) + 204 | 0);
    HEAP32[$25 >> 2] = 1013904242;
    $26 = ((($20)) + 208 | 0);
    HEAP32[$26 >> 2] = -1521486534;
    $27 = ((($20)) + 212 | 0);
    HEAP32[$27 >> 2] = 1359893119;
    $28 = ((($20)) + 216 | 0);
    HEAP32[$28 >> 2] = -1694144372;
    $29 = ((($20)) + 220 | 0);
    HEAP32[$29 >> 2] = 528734635;
    $30 = ((($20)) + 224 | 0);
    HEAP32[$30 >> 2] = 1541459225;
    $31 = ((($20)) + 388 | 0);
    HEAP32[$31 >> 2] = 0;
    $$02$i = 0;
    while (1) {
      $32 = (($19) + ($$02$i) | 0);
      $33 = HEAP8[$32 >> 0] | 0;
      $34 = $33 ^ 92;
      HEAP8[$32 >> 0] = $34;
      $35 = (($$02$i) + 1) | 0;
      $exitcond3$i = ($35 | 0) == (64);
      if ($exitcond3$i) {
        break;
      } else {
        $$02$i = $35;
      }
    }
    HEAP32[$31 >> 2] = 64;
    $36 = ((($20)) + 324 | 0);
    dest = $36;
    src = $19;
    stop = dest + 64 | 0;
    do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_sha256_transform($23, $36);
    HEAP32[$20 >> 2] = 1779033703;
    $37 = ((($20)) + 4 | 0);
    HEAP32[$37 >> 2] = -1150833019;
    $38 = ((($20)) + 8 | 0);
    HEAP32[$38 >> 2] = 1013904242;
    $39 = ((($20)) + 12 | 0);
    HEAP32[$39 >> 2] = -1521486534;
    $40 = ((($20)) + 16 | 0);
    HEAP32[$40 >> 2] = 1359893119;
    $41 = ((($20)) + 20 | 0);
    HEAP32[$41 >> 2] = -1694144372;
    $42 = ((($20)) + 24 | 0);
    HEAP32[$42 >> 2] = 528734635;
    $43 = ((($20)) + 28 | 0);
    HEAP32[$43 >> 2] = 1541459225;
    $44 = ((($20)) + 192 | 0);
    HEAP32[$44 >> 2] = 0;
    $$11$i = 0;
    while (1) {
      $45 = (($19) + ($$11$i) | 0);
      $46 = HEAP8[$45 >> 0] | 0;
      $47 = $46 ^ 106;
      HEAP8[$45 >> 0] = $47;
      $48 = (($$11$i) + 1) | 0;
      $exitcond$i = ($48 | 0) == (64);
      if ($exitcond$i) {
        break;
      } else {
        $$11$i = $48;
      }
    }
    HEAP32[$44 >> 2] = 64;
    $49 = ((($20)) + 128 | 0);
    dest = $49;
    src = $19;
    stop = dest + 64 | 0;
    do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_sha256_transform($20, $49);
    $50 = HEAP32[$44 >> 2] | 0;
    $51 = $50 & 63;
    $52 = (($50) + 32) | 0;
    HEAP32[$44 >> 2] = $52;
    $53 = (($51) + 32) | 0;
    $54 = ($53 >>> 0) > (63);
    if ($54) {
      $$02023$i$i = 32;
      $$02122$i$i = $0;
      $$024$i$i = $51;
      while (1) {
        $55 = (($49) + ($$024$i$i) | 0);
        $56 = (64 - ($$024$i$i)) | 0;
        _memcpy(($55 | 0), ($$02122$i$i | 0), ($56 | 0)) | 0;
        $57 = (($$02122$i$i) + ($56) | 0);
        $58 = (($$02023$i$i) - ($56)) | 0;
        _secp256k1_sha256_transform($20, $49);
        $59 = ($58 >>> 0) > (63);
        if ($59) {
          $$02023$i$i = $58;
          $$02122$i$i = $57;
          $$024$i$i = 0;
        } else {
          break;
        }
      }
      $60 = ($58 | 0) == (0);
      if (!($60)) {
        $$0$lcssa$i$i732 = 0;
        $$020$lcssa$i$i731 = $58;
        $$021$lcssa$i$i730 = $57;
        label = 8;
      }
    } else {
      $$0$lcssa$i$i732 = $51;
      $$020$lcssa$i$i731 = 32;
      $$021$lcssa$i$i730 = $0;
      label = 8;
    }
    if ((label | 0) == 8) {
      $61 = (($49) + ($$0$lcssa$i$i732) | 0);
      _memcpy(($61 | 0), ($$021$lcssa$i$i730 | 0), ($$020$lcssa$i$i731 | 0)) | 0;
    }
    $62 = HEAP32[$44 >> 2] | 0;
    $63 = $62 & 63;
    $64 = (($62) + 1) | 0;
    HEAP32[$44 >> 2] = $64;
    $65 = (($63) + 1) | 0;
    $66 = ($65 >>> 0) > (63);
    if ($66) {
      $67 = ((($49)) + 63 | 0);
      HEAP8[$67 >> 0] = 0;
      _secp256k1_sha256_transform($20, $49);
    } else {
      $68 = (($49) + ($63) | 0);
      HEAP8[$68 >> 0] = 0;
    }
    $69 = HEAP32[$44 >> 2] | 0;
    $70 = $69 & 63;
    $71 = (($69) + 32) | 0;
    HEAP32[$44 >> 2] = $71;
    $72 = (($70) + 32) | 0;
    $73 = ($72 >>> 0) > (63);
    if ($73) {
      $$02023$i$i12 = 32;
      $$02122$i$i13 = $1;
      $$024$i$i11 = $70;
      while (1) {
        $74 = (($49) + ($$024$i$i11) | 0);
        $75 = (64 - ($$024$i$i11)) | 0;
        _memcpy(($74 | 0), ($$02122$i$i13 | 0), ($75 | 0)) | 0;
        $76 = (($$02122$i$i13) + ($75) | 0);
        $77 = (($$02023$i$i12) - ($75)) | 0;
        _secp256k1_sha256_transform($20, $49);
        $78 = ($77 >>> 0) > (63);
        if ($78) {
          $$02023$i$i12 = $77;
          $$02122$i$i13 = $76;
          $$024$i$i11 = 0;
        } else {
          break;
        }
      }
      $79 = ($77 | 0) == (0);
      if (!($79)) {
        $$0$lcssa$i$i16738 = 0;
        $$020$lcssa$i$i15737 = $77;
        $$021$lcssa$i$i14736 = $76;
        label = 15;
      }
    } else {
      $$0$lcssa$i$i16738 = $70;
      $$020$lcssa$i$i15737 = 32;
      $$021$lcssa$i$i14736 = $1;
      label = 15;
    }
    if ((label | 0) == 15) {
      $80 = (($49) + ($$0$lcssa$i$i16738) | 0);
      _memcpy(($80 | 0), ($$021$lcssa$i$i14736 | 0), ($$020$lcssa$i$i15737 | 0)) | 0;
    }
    $81 = HEAP32[$44 >> 2] | 0;
    $82 = $81 & 63;
    $83 = (($81) + ($3)) | 0;
    HEAP32[$44 >> 2] = $83;
    $84 = (($82) + ($3)) | 0;
    $85 = ($84 >>> 0) > (63);
    if ($85) {
      $$02023$i$i21 = $3;
      $$02122$i$i22 = $2;
      $$024$i$i20 = $82;
      while (1) {
        $86 = (($49) + ($$024$i$i20) | 0);
        $87 = (64 - ($$024$i$i20)) | 0;
        _memcpy(($86 | 0), ($$02122$i$i22 | 0), ($87 | 0)) | 0;
        $88 = (($$02122$i$i22) + ($87) | 0);
        $89 = (($$02023$i$i21) - ($87)) | 0;
        _secp256k1_sha256_transform($20, $49);
        $90 = ($89 >>> 0) > (63);
        if ($90) {
          $$02023$i$i21 = $89;
          $$02122$i$i22 = $88;
          $$024$i$i20 = 0;
        } else {
          $$0$lcssa$i$i25 = 0;
          $$020$lcssa$i$i24 = $89;
          $$021$lcssa$i$i23 = $88;
          break;
        }
      }
    } else {
      $$0$lcssa$i$i25 = $82;
      $$020$lcssa$i$i24 = $3;
      $$021$lcssa$i$i23 = $2;
    }
    $91 = ($$020$lcssa$i$i24 | 0) == (0);
    if (!($91)) {
      $92 = (($49) + ($$0$lcssa$i$i25) | 0);
      _memcpy(($92 | 0), ($$021$lcssa$i$i23 | 0), ($$020$lcssa$i$i24 | 0)) | 0;
    }
    $93 = ($4 | 0) != (0 | 0);
    $94 = ($5 | 0) != (0);
    $or$cond = $93 & $94;
    do {
      if ($or$cond) {
        $95 = HEAP32[$44 >> 2] | 0;
        $96 = $95 & 63;
        $97 = (($95) + ($5)) | 0;
        HEAP32[$44 >> 2] = $97;
        $98 = (($96) + ($5)) | 0;
        $99 = ($98 >>> 0) > (63);
        if ($99) {
          $$02023$i$i30 = $5;
          $$02122$i$i31 = $4;
          $$024$i$i29 = $96;
          while (1) {
            $100 = (($49) + ($$024$i$i29) | 0);
            $101 = (64 - ($$024$i$i29)) | 0;
            _memcpy(($100 | 0), ($$02122$i$i31 | 0), ($101 | 0)) | 0;
            $102 = (($$02122$i$i31) + ($101) | 0);
            $103 = (($$02023$i$i30) - ($101)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $104 = ($103 >>> 0) > (63);
            if ($104) {
              $$02023$i$i30 = $103;
              $$02122$i$i31 = $102;
              $$024$i$i29 = 0;
            } else {
              break;
            }
          }
          $105 = ($103 | 0) == (0);
          if (!($105)) {
            $$0$lcssa$i$i34741 = 0;
            $$020$lcssa$i$i33740 = $103;
            $$021$lcssa$i$i32739 = $102;
            label = 24;
          }
        } else {
          $$0$lcssa$i$i34741 = $96;
          $$020$lcssa$i$i33740 = $5;
          $$021$lcssa$i$i32739 = $4;
          label = 24;
        }
        if ((label | 0) == 24) {
          $106 = (($49) + ($$0$lcssa$i$i34741) | 0);
          _memcpy(($106 | 0), ($$021$lcssa$i$i32739 | 0), ($$020$lcssa$i$i33740 | 0)) | 0;
        }
        $107 = HEAP32[$44 >> 2] | 0;
        $108 = $107 >>> 29;
        $109 = $108 << 24;
        HEAP32[$11 >> 2] = $109;
        $110 = $107 << 27;
        $111 = $107 << 11;
        $112 = $111 & 16711680;
        $113 = $112 | $110;
        $114 = $107 >>> 5;
        $115 = $114 & 65280;
        $116 = $113 | $115;
        $117 = $107 >>> 21;
        $118 = $117 & 255;
        $119 = $116 | $118;
        $120 = ((($11)) + 4 | 0);
        HEAP32[$120 >> 2] = $119;
        $121 = (119 - ($107)) | 0;
        $122 = $121 & 63;
        $123 = (($122) + 1) | 0;
        $124 = $107 & 63;
        $125 = (($107) + ($123)) | 0;
        HEAP32[$44 >> 2] = $125;
        $126 = (($124) + ($123)) | 0;
        $127 = ($126 >>> 0) > (63);
        if ($127) {
          $$02023$i488 = $123;
          $$02122$i489 = 1612;
          $$024$i487 = $124;
          while (1) {
            $128 = (($49) + ($$024$i487) | 0);
            $129 = (64 - ($$024$i487)) | 0;
            _memcpy(($128 | 0), ($$02122$i489 | 0), ($129 | 0)) | 0;
            $130 = (($$02122$i489) + ($129) | 0);
            $131 = (($$02023$i488) - ($129)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $132 = ($131 >>> 0) > (63);
            if ($132) {
              $$02023$i488 = $131;
              $$02122$i489 = $130;
              $$024$i487 = 0;
            } else {
              break;
            }
          }
          $133 = ($131 | 0) == (0);
          if (!($133)) {
            $$0$lcssa$i492744 = 0;
            $$020$lcssa$i491743 = $131;
            $$021$lcssa$i490742 = $130;
            label = 28;
          }
        } else {
          $$0$lcssa$i492744 = $124;
          $$020$lcssa$i491743 = $123;
          $$021$lcssa$i490742 = 1612;
          label = 28;
        }
        if ((label | 0) == 28) {
          $134 = (($49) + ($$0$lcssa$i492744) | 0);
          _memcpy(($134 | 0), ($$021$lcssa$i490742 | 0), ($$020$lcssa$i491743 | 0)) | 0;
        }
        $135 = HEAP32[$44 >> 2] | 0;
        $136 = $135 & 63;
        $137 = (($135) + 8) | 0;
        HEAP32[$44 >> 2] = $137;
        $138 = (($136) + 8) | 0;
        $139 = ($138 >>> 0) > (63);
        if ($139) {
          $$02023$i335 = 8;
          $$02122$i336 = $11;
          $$024$i334 = $136;
          while (1) {
            $140 = (($49) + ($$024$i334) | 0);
            $141 = (64 - ($$024$i334)) | 0;
            _memcpy(($140 | 0), ($$02122$i336 | 0), ($141 | 0)) | 0;
            $142 = (($$02122$i336) + ($141) | 0);
            $143 = (($$02023$i335) - ($141)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $144 = ($143 >>> 0) > (63);
            if ($144) {
              $$02023$i335 = $143;
              $$02122$i336 = $142;
              $$024$i334 = 0;
            } else {
              break;
            }
          }
          $145 = ($143 | 0) == (0);
          if (!($145)) {
            $$0$lcssa$i339747 = 0;
            $$020$lcssa$i338746 = $143;
            $$021$lcssa$i337745 = $142;
            label = 32;
          }
        } else {
          $$0$lcssa$i339747 = $136;
          $$020$lcssa$i338746 = 8;
          $$021$lcssa$i337745 = $11;
          label = 32;
        }
        if ((label | 0) == 32) {
          $146 = (($49) + ($$0$lcssa$i339747) | 0);
          _memcpy(($146 | 0), ($$021$lcssa$i337745 | 0), ($$020$lcssa$i338746 | 0)) | 0;
        }
        $147 = HEAP32[$20 >> 2] | 0;
        $148 = (_llvm_bswap_i32(($147 | 0)) | 0);
        HEAP32[$20 >> 2] = 0;
        $149 = HEAP32[$37 >> 2] | 0;
        $150 = (_llvm_bswap_i32(($149 | 0)) | 0);
        HEAP32[$37 >> 2] = 0;
        $151 = HEAP32[$38 >> 2] | 0;
        $152 = (_llvm_bswap_i32(($151 | 0)) | 0);
        HEAP32[$38 >> 2] = 0;
        $153 = HEAP32[$39 >> 2] | 0;
        $154 = (_llvm_bswap_i32(($153 | 0)) | 0);
        HEAP32[$39 >> 2] = 0;
        $155 = HEAP32[$40 >> 2] | 0;
        $156 = (_llvm_bswap_i32(($155 | 0)) | 0);
        HEAP32[$40 >> 2] = 0;
        $157 = HEAP32[$41 >> 2] | 0;
        $158 = (_llvm_bswap_i32(($157 | 0)) | 0);
        HEAP32[$41 >> 2] = 0;
        $159 = HEAP32[$42 >> 2] | 0;
        $160 = (_llvm_bswap_i32(($159 | 0)) | 0);
        HEAP32[$42 >> 2] = 0;
        $161 = HEAP32[$43 >> 2] | 0;
        $162 = (_llvm_bswap_i32(($161 | 0)) | 0);
        HEAP32[$43 >> 2] = 0;
        HEAP32[$18 >> 2] = $148;
        $$sroa$4630$0$$sroa_idx = ((($18)) + 4 | 0);
        HEAP32[$$sroa$4630$0$$sroa_idx >> 2] = $150;
        $$sroa$5632$0$$sroa_idx = ((($18)) + 8 | 0);
        HEAP32[$$sroa$5632$0$$sroa_idx >> 2] = $152;
        $$sroa$6634$0$$sroa_idx = ((($18)) + 12 | 0);
        HEAP32[$$sroa$6634$0$$sroa_idx >> 2] = $154;
        $$sroa$7636$0$$sroa_idx = ((($18)) + 16 | 0);
        HEAP32[$$sroa$7636$0$$sroa_idx >> 2] = $156;
        $$sroa$8638$0$$sroa_idx = ((($18)) + 20 | 0);
        HEAP32[$$sroa$8638$0$$sroa_idx >> 2] = $158;
        $$sroa$9640$0$$sroa_idx = ((($18)) + 24 | 0);
        HEAP32[$$sroa$9640$0$$sroa_idx >> 2] = $160;
        $$sroa$10642$0$$sroa_idx = ((($18)) + 28 | 0);
        HEAP32[$$sroa$10642$0$$sroa_idx >> 2] = $162;
        $163 = HEAP32[$31 >> 2] | 0;
        $164 = $163 & 63;
        $165 = (($163) + 32) | 0;
        HEAP32[$31 >> 2] = $165;
        $166 = (($164) + 32) | 0;
        $167 = ($166 >>> 0) > (63);
        if ($167) {
          $$02023$i$i39 = 32;
          $$02122$i$i40 = $18;
          $$024$i$i38 = $164;
          while (1) {
            $168 = (($36) + ($$024$i$i38) | 0);
            $169 = (64 - ($$024$i$i38)) | 0;
            _memcpy(($168 | 0), ($$02122$i$i40 | 0), ($169 | 0)) | 0;
            $170 = (($$02122$i$i40) + ($169) | 0);
            $171 = (($$02023$i$i39) - ($169)) | 0;
            _secp256k1_sha256_transform($23, $36);
            $172 = ($171 >>> 0) > (63);
            if ($172) {
              $$02023$i$i39 = $171;
              $$02122$i$i40 = $170;
              $$024$i$i38 = 0;
            } else {
              break;
            }
          }
          $173 = ($171 | 0) == (0);
          if (!($173)) {
            $$0$lcssa$i6$i = 0;
            $$020$lcssa$i5$i = $171;
            $$021$lcssa$i4$i = $170;
            label = 36;
          }
        } else {
          $$0$lcssa$i6$i = $164;
          $$020$lcssa$i5$i = 32;
          $$021$lcssa$i4$i = $18;
          label = 36;
        }
        if ((label | 0) == 36) {
          $174 = (($36) + ($$0$lcssa$i6$i) | 0);
          _memcpy(($174 | 0), ($$021$lcssa$i4$i | 0), ($$020$lcssa$i5$i | 0)) | 0;
        }
        $175 = HEAP32[$31 >> 2] | 0;
        $176 = $175 >>> 29;
        $177 = $176 << 24;
        HEAP32[$17 >> 2] = $177;
        $178 = $175 << 27;
        $179 = $175 << 11;
        $180 = $179 & 16711680;
        $181 = $180 | $178;
        $182 = $175 >>> 5;
        $183 = $182 & 65280;
        $184 = $181 | $183;
        $185 = $175 >>> 21;
        $186 = $185 & 255;
        $187 = $184 | $186;
        $188 = ((($17)) + 4 | 0);
        HEAP32[$188 >> 2] = $187;
        $189 = (119 - ($175)) | 0;
        $190 = $189 & 63;
        $191 = (($190) + 1) | 0;
        $192 = $175 & 63;
        $193 = (($175) + ($191)) | 0;
        HEAP32[$31 >> 2] = $193;
        $194 = (($192) + ($191)) | 0;
        $195 = ($194 >>> 0) > (63);
        if ($195) {
          $$02023$i344 = $191;
          $$02122$i345 = 1612;
          $$024$i343 = $192;
          while (1) {
            $196 = (($36) + ($$024$i343) | 0);
            $197 = (64 - ($$024$i343)) | 0;
            _memcpy(($196 | 0), ($$02122$i345 | 0), ($197 | 0)) | 0;
            $198 = (($$02122$i345) + ($197) | 0);
            $199 = (($$02023$i344) - ($197)) | 0;
            _secp256k1_sha256_transform($23, $36);
            $200 = ($199 >>> 0) > (63);
            if ($200) {
              $$02023$i344 = $199;
              $$02122$i345 = $198;
              $$024$i343 = 0;
            } else {
              break;
            }
          }
          $201 = ($199 | 0) == (0);
          if (!($201)) {
            $$0$lcssa$i348750 = 0;
            $$020$lcssa$i347749 = $199;
            $$021$lcssa$i346748 = $198;
            label = 40;
          }
        } else {
          $$0$lcssa$i348750 = $192;
          $$020$lcssa$i347749 = $191;
          $$021$lcssa$i346748 = 1612;
          label = 40;
        }
        if ((label | 0) == 40) {
          $202 = (($36) + ($$0$lcssa$i348750) | 0);
          _memcpy(($202 | 0), ($$021$lcssa$i346748 | 0), ($$020$lcssa$i347749 | 0)) | 0;
        }
        $203 = HEAP32[$31 >> 2] | 0;
        $204 = $203 & 63;
        $205 = (($203) + 8) | 0;
        HEAP32[$31 >> 2] = $205;
        $206 = (($204) + 8) | 0;
        $207 = ($206 >>> 0) > (63);
        if ($207) {
          $$02023$i44 = 8;
          $$02122$i45 = $17;
          $$024$i43 = $204;
          while (1) {
            $208 = (($36) + ($$024$i43) | 0);
            $209 = (64 - ($$024$i43)) | 0;
            _memcpy(($208 | 0), ($$02122$i45 | 0), ($209 | 0)) | 0;
            $210 = (($$02122$i45) + ($209) | 0);
            $211 = (($$02023$i44) - ($209)) | 0;
            _secp256k1_sha256_transform($23, $36);
            $212 = ($211 >>> 0) > (63);
            if ($212) {
              $$02023$i44 = $211;
              $$02122$i45 = $210;
              $$024$i43 = 0;
            } else {
              break;
            }
          }
          $213 = ($211 | 0) == (0);
          if (!($213)) {
            $$0$lcssa$i48753 = 0;
            $$020$lcssa$i47752 = $211;
            $$021$lcssa$i46751 = $210;
            label = 44;
          }
        } else {
          $$0$lcssa$i48753 = $204;
          $$020$lcssa$i47752 = 8;
          $$021$lcssa$i46751 = $17;
          label = 44;
        }
        if ((label | 0) == 44) {
          $214 = (($36) + ($$0$lcssa$i48753) | 0);
          _memcpy(($214 | 0), ($$021$lcssa$i46751 | 0), ($$020$lcssa$i47752 | 0)) | 0;
        }
        $215 = HEAP32[$23 >> 2] | 0;
        $216 = (_llvm_bswap_i32(($215 | 0)) | 0);
        $217 = HEAP32[$24 >> 2] | 0;
        $218 = (_llvm_bswap_i32(($217 | 0)) | 0);
        $219 = HEAP32[$25 >> 2] | 0;
        $220 = (_llvm_bswap_i32(($219 | 0)) | 0);
        $221 = HEAP32[$26 >> 2] | 0;
        $222 = (_llvm_bswap_i32(($221 | 0)) | 0);
        $223 = HEAP32[$27 >> 2] | 0;
        $224 = (_llvm_bswap_i32(($223 | 0)) | 0);
        $225 = HEAP32[$28 >> 2] | 0;
        $226 = (_llvm_bswap_i32(($225 | 0)) | 0);
        $227 = HEAP32[$29 >> 2] | 0;
        $228 = (_llvm_bswap_i32(($227 | 0)) | 0);
        $229 = HEAP32[$30 >> 2] | 0;
        $230 = (_llvm_bswap_i32(($229 | 0)) | 0);
        $$sroa$0$0$$sroa_idx = ((($0)) + 32 | 0);
        HEAP8[$$sroa$0$0$$sroa_idx >> 0] = $216 & 255;
        HEAP8[$$sroa$0$0$$sroa_idx + 1 >> 0] = ($216 >> 8) & 255;
        HEAP8[$$sroa$0$0$$sroa_idx + 2 >> 0] = ($216 >> 16) & 255;
        HEAP8[$$sroa$0$0$$sroa_idx + 3 >> 0] = $216 >> 24;
        $$sroa$4$0$$sroa_idx = ((($0)) + 36 | 0);
        HEAP8[$$sroa$4$0$$sroa_idx >> 0] = $218 & 255;
        HEAP8[$$sroa$4$0$$sroa_idx + 1 >> 0] = ($218 >> 8) & 255;
        HEAP8[$$sroa$4$0$$sroa_idx + 2 >> 0] = ($218 >> 16) & 255;
        HEAP8[$$sroa$4$0$$sroa_idx + 3 >> 0] = $218 >> 24;
        $$sroa$5$0$$sroa_idx = ((($0)) + 40 | 0);
        HEAP8[$$sroa$5$0$$sroa_idx >> 0] = $220 & 255;
        HEAP8[$$sroa$5$0$$sroa_idx + 1 >> 0] = ($220 >> 8) & 255;
        HEAP8[$$sroa$5$0$$sroa_idx + 2 >> 0] = ($220 >> 16) & 255;
        HEAP8[$$sroa$5$0$$sroa_idx + 3 >> 0] = $220 >> 24;
        $$sroa$6$0$$sroa_idx = ((($0)) + 44 | 0);
        HEAP8[$$sroa$6$0$$sroa_idx >> 0] = $222 & 255;
        HEAP8[$$sroa$6$0$$sroa_idx + 1 >> 0] = ($222 >> 8) & 255;
        HEAP8[$$sroa$6$0$$sroa_idx + 2 >> 0] = ($222 >> 16) & 255;
        HEAP8[$$sroa$6$0$$sroa_idx + 3 >> 0] = $222 >> 24;
        $$sroa$7$0$$sroa_idx = ((($0)) + 48 | 0);
        HEAP8[$$sroa$7$0$$sroa_idx >> 0] = $224 & 255;
        HEAP8[$$sroa$7$0$$sroa_idx + 1 >> 0] = ($224 >> 8) & 255;
        HEAP8[$$sroa$7$0$$sroa_idx + 2 >> 0] = ($224 >> 16) & 255;
        HEAP8[$$sroa$7$0$$sroa_idx + 3 >> 0] = $224 >> 24;
        $$sroa$8$0$$sroa_idx = ((($0)) + 52 | 0);
        HEAP8[$$sroa$8$0$$sroa_idx >> 0] = $226 & 255;
        HEAP8[$$sroa$8$0$$sroa_idx + 1 >> 0] = ($226 >> 8) & 255;
        HEAP8[$$sroa$8$0$$sroa_idx + 2 >> 0] = ($226 >> 16) & 255;
        HEAP8[$$sroa$8$0$$sroa_idx + 3 >> 0] = $226 >> 24;
        $$sroa$9$0$$sroa_idx = ((($0)) + 56 | 0);
        HEAP8[$$sroa$9$0$$sroa_idx >> 0] = $228 & 255;
        HEAP8[$$sroa$9$0$$sroa_idx + 1 >> 0] = ($228 >> 8) & 255;
        HEAP8[$$sroa$9$0$$sroa_idx + 2 >> 0] = ($228 >> 16) & 255;
        HEAP8[$$sroa$9$0$$sroa_idx + 3 >> 0] = $228 >> 24;
        $$sroa$10$0$$sroa_idx = ((($0)) + 60 | 0);
        HEAP8[$$sroa$10$0$$sroa_idx >> 0] = $230 & 255;
        HEAP8[$$sroa$10$0$$sroa_idx + 1 >> 0] = ($230 >> 8) & 255;
        HEAP8[$$sroa$10$0$$sroa_idx + 2 >> 0] = ($230 >> 16) & 255;
        HEAP8[$$sroa$10$0$$sroa_idx + 3 >> 0] = $230 >> 24;
        dest = $19;
        src = $21;
        stop = dest + 32 | 0;
        do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        dest = $22;
        stop = dest + 32 | 0;
        do {
          HEAP8[dest >> 0] = 0 | 0;
          dest = dest + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        HEAP32[$23 >> 2] = 1779033703;
        HEAP32[$24 >> 2] = -1150833019;
        HEAP32[$25 >> 2] = 1013904242;
        HEAP32[$26 >> 2] = -1521486534;
        HEAP32[$27 >> 2] = 1359893119;
        HEAP32[$28 >> 2] = -1694144372;
        HEAP32[$29 >> 2] = 528734635;
        HEAP32[$30 >> 2] = 1541459225;
        HEAP32[$31 >> 2] = 0;
        $$02$i51 = 0;
        while (1) {
          $231 = (($19) + ($$02$i51) | 0);
          $232 = HEAP8[$231 >> 0] | 0;
          $233 = $232 ^ 92;
          HEAP8[$231 >> 0] = $233;
          $234 = (($$02$i51) + 1) | 0;
          $exitcond3$i52 = ($234 | 0) == (64);
          if ($exitcond3$i52) {
            break;
          } else {
            $$02$i51 = $234;
          }
        }
        HEAP32[$31 >> 2] = 64;
        dest = $36;
        src = $19;
        stop = dest + 64 | 0;
        do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        _secp256k1_sha256_transform($23, $36);
        HEAP32[$20 >> 2] = 1779033703;
        HEAP32[$37 >> 2] = -1150833019;
        HEAP32[$38 >> 2] = 1013904242;
        HEAP32[$39 >> 2] = -1521486534;
        HEAP32[$40 >> 2] = 1359893119;
        HEAP32[$41 >> 2] = -1694144372;
        HEAP32[$42 >> 2] = 528734635;
        HEAP32[$43 >> 2] = 1541459225;
        HEAP32[$44 >> 2] = 0;
        $$11$i53 = 0;
        while (1) {
          $235 = (($19) + ($$11$i53) | 0);
          $236 = HEAP8[$235 >> 0] | 0;
          $237 = $236 ^ 106;
          HEAP8[$235 >> 0] = $237;
          $238 = (($$11$i53) + 1) | 0;
          $exitcond$i54 = ($238 | 0) == (64);
          if ($exitcond$i54) {
            break;
          } else {
            $$11$i53 = $238;
          }
        }
        HEAP32[$44 >> 2] = 64;
        dest = $49;
        src = $19;
        stop = dest + 64 | 0;
        do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        _secp256k1_sha256_transform($20, $49);
        $239 = HEAP32[$44 >> 2] | 0;
        $240 = $239 & 63;
        $241 = (($239) + 32) | 0;
        HEAP32[$44 >> 2] = $241;
        $242 = (($240) + 32) | 0;
        $243 = ($242 >>> 0) > (63);
        if ($243) {
          $$02023$i$i67 = 32;
          $$02122$i$i68 = $0;
          $$024$i$i66 = $240;
          while (1) {
            $244 = (($49) + ($$024$i$i66) | 0);
            $245 = (64 - ($$024$i$i66)) | 0;
            _memcpy(($244 | 0), ($$02122$i$i68 | 0), ($245 | 0)) | 0;
            $246 = (($$02122$i$i68) + ($245) | 0);
            $247 = (($$02023$i$i67) - ($245)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $248 = ($247 >>> 0) > (63);
            if ($248) {
              $$02023$i$i67 = $247;
              $$02122$i$i68 = $246;
              $$024$i$i66 = 0;
            } else {
              break;
            }
          }
          $249 = ($247 | 0) == (0);
          if (!($249)) {
            $$0$lcssa$i$i71762 = 0;
            $$020$lcssa$i$i70761 = $247;
            $$021$lcssa$i$i69760 = $246;
            label = 52;
          }
        } else {
          $$0$lcssa$i$i71762 = $240;
          $$020$lcssa$i$i70761 = 32;
          $$021$lcssa$i$i69760 = $0;
          label = 52;
        }
        if ((label | 0) == 52) {
          $250 = (($49) + ($$0$lcssa$i$i71762) | 0);
          _memcpy(($250 | 0), ($$021$lcssa$i$i69760 | 0), ($$020$lcssa$i$i70761 | 0)) | 0;
        }
        $251 = HEAP32[$44 >> 2] | 0;
        $252 = $251 >>> 29;
        $253 = $252 << 24;
        HEAP32[$10 >> 2] = $253;
        $254 = $251 << 27;
        $255 = $251 << 11;
        $256 = $255 & 16711680;
        $257 = $256 | $254;
        $258 = $251 >>> 5;
        $259 = $258 & 65280;
        $260 = $257 | $259;
        $261 = $251 >>> 21;
        $262 = $261 & 255;
        $263 = $260 | $262;
        $264 = ((($10)) + 4 | 0);
        HEAP32[$264 >> 2] = $263;
        $265 = (119 - ($251)) | 0;
        $266 = $265 & 63;
        $267 = (($266) + 1) | 0;
        $268 = $251 & 63;
        $269 = (($251) + ($267)) | 0;
        HEAP32[$44 >> 2] = $269;
        $270 = (($268) + ($267)) | 0;
        $271 = ($270 >>> 0) > (63);
        if ($271) {
          $$02023$i497 = $267;
          $$02122$i498 = 1612;
          $$024$i496 = $268;
          while (1) {
            $272 = (($49) + ($$024$i496) | 0);
            $273 = (64 - ($$024$i496)) | 0;
            _memcpy(($272 | 0), ($$02122$i498 | 0), ($273 | 0)) | 0;
            $274 = (($$02122$i498) + ($273) | 0);
            $275 = (($$02023$i497) - ($273)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $276 = ($275 >>> 0) > (63);
            if ($276) {
              $$02023$i497 = $275;
              $$02122$i498 = $274;
              $$024$i496 = 0;
            } else {
              break;
            }
          }
          $277 = ($275 | 0) == (0);
          if (!($277)) {
            $$0$lcssa$i501765 = 0;
            $$020$lcssa$i500764 = $275;
            $$021$lcssa$i499763 = $274;
            label = 56;
          }
        } else {
          $$0$lcssa$i501765 = $268;
          $$020$lcssa$i500764 = $267;
          $$021$lcssa$i499763 = 1612;
          label = 56;
        }
        if ((label | 0) == 56) {
          $278 = (($49) + ($$0$lcssa$i501765) | 0);
          _memcpy(($278 | 0), ($$021$lcssa$i499763 | 0), ($$020$lcssa$i500764 | 0)) | 0;
        }
        $279 = HEAP32[$44 >> 2] | 0;
        $280 = $279 & 63;
        $281 = (($279) + 8) | 0;
        HEAP32[$44 >> 2] = $281;
        $282 = (($280) + 8) | 0;
        $283 = ($282 >>> 0) > (63);
        if ($283) {
          $$02023$i362 = 8;
          $$02122$i363 = $10;
          $$024$i361 = $280;
          while (1) {
            $284 = (($49) + ($$024$i361) | 0);
            $285 = (64 - ($$024$i361)) | 0;
            _memcpy(($284 | 0), ($$02122$i363 | 0), ($285 | 0)) | 0;
            $286 = (($$02122$i363) + ($285) | 0);
            $287 = (($$02023$i362) - ($285)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $288 = ($287 >>> 0) > (63);
            if ($288) {
              $$02023$i362 = $287;
              $$02122$i363 = $286;
              $$024$i361 = 0;
            } else {
              break;
            }
          }
          $289 = ($287 | 0) == (0);
          if (!($289)) {
            $$0$lcssa$i366768 = 0;
            $$020$lcssa$i365767 = $287;
            $$021$lcssa$i364766 = $286;
            label = 60;
          }
        } else {
          $$0$lcssa$i366768 = $280;
          $$020$lcssa$i365767 = 8;
          $$021$lcssa$i364766 = $10;
          label = 60;
        }
        if ((label | 0) == 60) {
          $290 = (($49) + ($$0$lcssa$i366768) | 0);
          _memcpy(($290 | 0), ($$021$lcssa$i364766 | 0), ($$020$lcssa$i365767 | 0)) | 0;
        }
        $291 = HEAP32[$20 >> 2] | 0;
        $292 = (_llvm_bswap_i32(($291 | 0)) | 0);
        HEAP32[$20 >> 2] = 0;
        $293 = HEAP32[$37 >> 2] | 0;
        $294 = (_llvm_bswap_i32(($293 | 0)) | 0);
        HEAP32[$37 >> 2] = 0;
        $295 = HEAP32[$38 >> 2] | 0;
        $296 = (_llvm_bswap_i32(($295 | 0)) | 0);
        HEAP32[$38 >> 2] = 0;
        $297 = HEAP32[$39 >> 2] | 0;
        $298 = (_llvm_bswap_i32(($297 | 0)) | 0);
        HEAP32[$39 >> 2] = 0;
        $299 = HEAP32[$40 >> 2] | 0;
        $300 = (_llvm_bswap_i32(($299 | 0)) | 0);
        HEAP32[$40 >> 2] = 0;
        $301 = HEAP32[$41 >> 2] | 0;
        $302 = (_llvm_bswap_i32(($301 | 0)) | 0);
        HEAP32[$41 >> 2] = 0;
        $303 = HEAP32[$42 >> 2] | 0;
        $304 = (_llvm_bswap_i32(($303 | 0)) | 0);
        HEAP32[$42 >> 2] = 0;
        $305 = HEAP32[$43 >> 2] | 0;
        $306 = (_llvm_bswap_i32(($305 | 0)) | 0);
        HEAP32[$43 >> 2] = 0;
        HEAP32[$18 >> 2] = $292;
        HEAP32[$$sroa$4630$0$$sroa_idx >> 2] = $294;
        HEAP32[$$sroa$5632$0$$sroa_idx >> 2] = $296;
        HEAP32[$$sroa$6634$0$$sroa_idx >> 2] = $298;
        HEAP32[$$sroa$7636$0$$sroa_idx >> 2] = $300;
        HEAP32[$$sroa$8638$0$$sroa_idx >> 2] = $302;
        HEAP32[$$sroa$9640$0$$sroa_idx >> 2] = $304;
        HEAP32[$$sroa$10642$0$$sroa_idx >> 2] = $306;
        $307 = HEAP32[$31 >> 2] | 0;
        $308 = $307 & 63;
        $309 = (($307) + 32) | 0;
        HEAP32[$31 >> 2] = $309;
        $310 = (($308) + 32) | 0;
        $311 = ($310 >>> 0) > (63);
        if ($311) {
          $$02023$i$i76 = 32;
          $$02122$i$i77 = $18;
          $$024$i$i75 = $308;
          while (1) {
            $312 = (($36) + ($$024$i$i75) | 0);
            $313 = (64 - ($$024$i$i75)) | 0;
            _memcpy(($312 | 0), ($$02122$i$i77 | 0), ($313 | 0)) | 0;
            $314 = (($$02122$i$i77) + ($313) | 0);
            $315 = (($$02023$i$i76) - ($313)) | 0;
            _secp256k1_sha256_transform($23, $36);
            $316 = ($315 >>> 0) > (63);
            if ($316) {
              $$02023$i$i76 = $315;
              $$02122$i$i77 = $314;
              $$024$i$i75 = 0;
            } else {
              break;
            }
          }
          $317 = ($315 | 0) == (0);
          if (!($317)) {
            $$0$lcssa$i6$i79 = 0;
            $$020$lcssa$i5$i80 = $315;
            $$021$lcssa$i4$i81 = $314;
            label = 64;
          }
        } else {
          $$0$lcssa$i6$i79 = $308;
          $$020$lcssa$i5$i80 = 32;
          $$021$lcssa$i4$i81 = $18;
          label = 64;
        }
        if ((label | 0) == 64) {
          $318 = (($36) + ($$0$lcssa$i6$i79) | 0);
          _memcpy(($318 | 0), ($$021$lcssa$i4$i81 | 0), ($$020$lcssa$i5$i80 | 0)) | 0;
        }
        $319 = HEAP32[$31 >> 2] | 0;
        $320 = $319 >>> 29;
        $321 = $320 << 24;
        HEAP32[$16 >> 2] = $321;
        $322 = $319 << 27;
        $323 = $319 << 11;
        $324 = $323 & 16711680;
        $325 = $324 | $322;
        $326 = $319 >>> 5;
        $327 = $326 & 65280;
        $328 = $325 | $327;
        $329 = $319 >>> 21;
        $330 = $329 & 255;
        $331 = $328 | $330;
        $332 = ((($16)) + 4 | 0);
        HEAP32[$332 >> 2] = $331;
        $333 = (119 - ($319)) | 0;
        $334 = $333 & 63;
        $335 = (($334) + 1) | 0;
        $336 = $319 & 63;
        $337 = (($319) + ($335)) | 0;
        HEAP32[$31 >> 2] = $337;
        $338 = (($336) + ($335)) | 0;
        $339 = ($338 >>> 0) > (63);
        if ($339) {
          $$02023$i371 = $335;
          $$02122$i372 = 1612;
          $$024$i370 = $336;
          while (1) {
            $340 = (($36) + ($$024$i370) | 0);
            $341 = (64 - ($$024$i370)) | 0;
            _memcpy(($340 | 0), ($$02122$i372 | 0), ($341 | 0)) | 0;
            $342 = (($$02122$i372) + ($341) | 0);
            $343 = (($$02023$i371) - ($341)) | 0;
            _secp256k1_sha256_transform($23, $36);
            $344 = ($343 >>> 0) > (63);
            if ($344) {
              $$02023$i371 = $343;
              $$02122$i372 = $342;
              $$024$i370 = 0;
            } else {
              break;
            }
          }
          $345 = ($343 | 0) == (0);
          if (!($345)) {
            $$0$lcssa$i375771 = 0;
            $$020$lcssa$i374770 = $343;
            $$021$lcssa$i373769 = $342;
            label = 68;
          }
        } else {
          $$0$lcssa$i375771 = $336;
          $$020$lcssa$i374770 = $335;
          $$021$lcssa$i373769 = 1612;
          label = 68;
        }
        if ((label | 0) == 68) {
          $346 = (($36) + ($$0$lcssa$i375771) | 0);
          _memcpy(($346 | 0), ($$021$lcssa$i373769 | 0), ($$020$lcssa$i374770 | 0)) | 0;
        }
        $347 = HEAP32[$31 >> 2] | 0;
        $348 = $347 & 63;
        $349 = (($347) + 8) | 0;
        HEAP32[$31 >> 2] = $349;
        $350 = (($348) + 8) | 0;
        $351 = ($350 >>> 0) > (63);
        if ($351) {
          $$02023$i86 = 8;
          $$02122$i87 = $16;
          $$024$i85 = $348;
          while (1) {
            $352 = (($36) + ($$024$i85) | 0);
            $353 = (64 - ($$024$i85)) | 0;
            _memcpy(($352 | 0), ($$02122$i87 | 0), ($353 | 0)) | 0;
            $354 = (($$02122$i87) + ($353) | 0);
            $355 = (($$02023$i86) - ($353)) | 0;
            _secp256k1_sha256_transform($23, $36);
            $356 = ($355 >>> 0) > (63);
            if ($356) {
              $$02023$i86 = $355;
              $$02122$i87 = $354;
              $$024$i85 = 0;
            } else {
              break;
            }
          }
          $357 = ($355 | 0) == (0);
          if (!($357)) {
            $$0$lcssa$i90774 = 0;
            $$020$lcssa$i89773 = $355;
            $$021$lcssa$i88772 = $354;
            label = 72;
          }
        } else {
          $$0$lcssa$i90774 = $348;
          $$020$lcssa$i89773 = 8;
          $$021$lcssa$i88772 = $16;
          label = 72;
        }
        if ((label | 0) == 72) {
          $358 = (($36) + ($$0$lcssa$i90774) | 0);
          _memcpy(($358 | 0), ($$021$lcssa$i88772 | 0), ($$020$lcssa$i89773 | 0)) | 0;
        }
        $359 = HEAP32[$23 >> 2] | 0;
        $360 = (_llvm_bswap_i32(($359 | 0)) | 0);
        $361 = HEAP32[$24 >> 2] | 0;
        $362 = (_llvm_bswap_i32(($361 | 0)) | 0);
        $363 = HEAP32[$25 >> 2] | 0;
        $364 = (_llvm_bswap_i32(($363 | 0)) | 0);
        $365 = HEAP32[$26 >> 2] | 0;
        $366 = (_llvm_bswap_i32(($365 | 0)) | 0);
        $367 = HEAP32[$27 >> 2] | 0;
        $368 = (_llvm_bswap_i32(($367 | 0)) | 0);
        $369 = HEAP32[$28 >> 2] | 0;
        $370 = (_llvm_bswap_i32(($369 | 0)) | 0);
        $371 = HEAP32[$29 >> 2] | 0;
        $372 = (_llvm_bswap_i32(($371 | 0)) | 0);
        $373 = HEAP32[$30 >> 2] | 0;
        $374 = (_llvm_bswap_i32(($373 | 0)) | 0);
        HEAP8[$0 >> 0] = $360 & 255;
        HEAP8[$0 + 1 >> 0] = ($360 >> 8) & 255;
        HEAP8[$0 + 2 >> 0] = ($360 >> 16) & 255;
        HEAP8[$0 + 3 >> 0] = $360 >> 24;
        $$sroa$4550$0$$sroa_idx = ((($0)) + 4 | 0);
        HEAP8[$$sroa$4550$0$$sroa_idx >> 0] = $362 & 255;
        HEAP8[$$sroa$4550$0$$sroa_idx + 1 >> 0] = ($362 >> 8) & 255;
        HEAP8[$$sroa$4550$0$$sroa_idx + 2 >> 0] = ($362 >> 16) & 255;
        HEAP8[$$sroa$4550$0$$sroa_idx + 3 >> 0] = $362 >> 24;
        $$sroa$5552$0$$sroa_idx = ((($0)) + 8 | 0);
        HEAP8[$$sroa$5552$0$$sroa_idx >> 0] = $364 & 255;
        HEAP8[$$sroa$5552$0$$sroa_idx + 1 >> 0] = ($364 >> 8) & 255;
        HEAP8[$$sroa$5552$0$$sroa_idx + 2 >> 0] = ($364 >> 16) & 255;
        HEAP8[$$sroa$5552$0$$sroa_idx + 3 >> 0] = $364 >> 24;
        $$sroa$6554$0$$sroa_idx = ((($0)) + 12 | 0);
        HEAP8[$$sroa$6554$0$$sroa_idx >> 0] = $366 & 255;
        HEAP8[$$sroa$6554$0$$sroa_idx + 1 >> 0] = ($366 >> 8) & 255;
        HEAP8[$$sroa$6554$0$$sroa_idx + 2 >> 0] = ($366 >> 16) & 255;
        HEAP8[$$sroa$6554$0$$sroa_idx + 3 >> 0] = $366 >> 24;
        $$sroa$7556$0$$sroa_idx = ((($0)) + 16 | 0);
        HEAP8[$$sroa$7556$0$$sroa_idx >> 0] = $368 & 255;
        HEAP8[$$sroa$7556$0$$sroa_idx + 1 >> 0] = ($368 >> 8) & 255;
        HEAP8[$$sroa$7556$0$$sroa_idx + 2 >> 0] = ($368 >> 16) & 255;
        HEAP8[$$sroa$7556$0$$sroa_idx + 3 >> 0] = $368 >> 24;
        $$sroa$8558$0$$sroa_idx = ((($0)) + 20 | 0);
        HEAP8[$$sroa$8558$0$$sroa_idx >> 0] = $370 & 255;
        HEAP8[$$sroa$8558$0$$sroa_idx + 1 >> 0] = ($370 >> 8) & 255;
        HEAP8[$$sroa$8558$0$$sroa_idx + 2 >> 0] = ($370 >> 16) & 255;
        HEAP8[$$sroa$8558$0$$sroa_idx + 3 >> 0] = $370 >> 24;
        $$sroa$9560$0$$sroa_idx = ((($0)) + 24 | 0);
        HEAP8[$$sroa$9560$0$$sroa_idx >> 0] = $372 & 255;
        HEAP8[$$sroa$9560$0$$sroa_idx + 1 >> 0] = ($372 >> 8) & 255;
        HEAP8[$$sroa$9560$0$$sroa_idx + 2 >> 0] = ($372 >> 16) & 255;
        HEAP8[$$sroa$9560$0$$sroa_idx + 3 >> 0] = $372 >> 24;
        $$sroa$10562$0$$sroa_idx = ((($0)) + 28 | 0);
        HEAP8[$$sroa$10562$0$$sroa_idx >> 0] = $374 & 255;
        HEAP8[$$sroa$10562$0$$sroa_idx + 1 >> 0] = ($374 >> 8) & 255;
        HEAP8[$$sroa$10562$0$$sroa_idx + 2 >> 0] = ($374 >> 16) & 255;
        HEAP8[$$sroa$10562$0$$sroa_idx + 3 >> 0] = $374 >> 24;
        dest = $19;
        src = $21;
        stop = dest + 32 | 0;
        do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        dest = $22;
        stop = dest + 32 | 0;
        do {
          HEAP8[dest >> 0] = 0 | 0;
          dest = dest + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        HEAP32[$23 >> 2] = 1779033703;
        HEAP32[$24 >> 2] = -1150833019;
        HEAP32[$25 >> 2] = 1013904242;
        HEAP32[$26 >> 2] = -1521486534;
        HEAP32[$27 >> 2] = 1359893119;
        HEAP32[$28 >> 2] = -1694144372;
        HEAP32[$29 >> 2] = 528734635;
        HEAP32[$30 >> 2] = 1541459225;
        HEAP32[$31 >> 2] = 0;
        $$02$i93 = 0;
        while (1) {
          $375 = (($19) + ($$02$i93) | 0);
          $376 = HEAP8[$375 >> 0] | 0;
          $377 = $376 ^ 92;
          HEAP8[$375 >> 0] = $377;
          $378 = (($$02$i93) + 1) | 0;
          $exitcond3$i94 = ($378 | 0) == (64);
          if ($exitcond3$i94) {
            break;
          } else {
            $$02$i93 = $378;
          }
        }
        HEAP32[$31 >> 2] = 64;
        dest = $36;
        src = $19;
        stop = dest + 64 | 0;
        do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        _secp256k1_sha256_transform($23, $36);
        HEAP32[$20 >> 2] = 1779033703;
        HEAP32[$37 >> 2] = -1150833019;
        HEAP32[$38 >> 2] = 1013904242;
        HEAP32[$39 >> 2] = -1521486534;
        HEAP32[$40 >> 2] = 1359893119;
        HEAP32[$41 >> 2] = -1694144372;
        HEAP32[$42 >> 2] = 528734635;
        HEAP32[$43 >> 2] = 1541459225;
        HEAP32[$44 >> 2] = 0;
        $$11$i95 = 0;
        while (1) {
          $379 = (($19) + ($$11$i95) | 0);
          $380 = HEAP8[$379 >> 0] | 0;
          $381 = $380 ^ 106;
          HEAP8[$379 >> 0] = $381;
          $382 = (($$11$i95) + 1) | 0;
          $exitcond$i96 = ($382 | 0) == (64);
          if ($exitcond$i96) {
            break;
          } else {
            $$11$i95 = $382;
          }
        }
        HEAP32[$44 >> 2] = 64;
        dest = $49;
        src = $19;
        stop = dest + 64 | 0;
        do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        _secp256k1_sha256_transform($20, $49);
        $383 = HEAP32[$44 >> 2] | 0;
        $384 = $383 & 63;
        $385 = (($383) + 32) | 0;
        HEAP32[$44 >> 2] = $385;
        $386 = (($384) + 32) | 0;
        $387 = ($386 >>> 0) > (63);
        if ($387) {
          $$02023$i$i109 = 32;
          $$02122$i$i110 = $0;
          $$024$i$i108 = $384;
          while (1) {
            $388 = (($49) + ($$024$i$i108) | 0);
            $389 = (64 - ($$024$i$i108)) | 0;
            _memcpy(($388 | 0), ($$02122$i$i110 | 0), ($389 | 0)) | 0;
            $390 = (($$02122$i$i110) + ($389) | 0);
            $391 = (($$02023$i$i109) - ($389)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $392 = ($391 >>> 0) > (63);
            if ($392) {
              $$02023$i$i109 = $391;
              $$02122$i$i110 = $390;
              $$024$i$i108 = 0;
            } else {
              break;
            }
          }
          $393 = ($391 | 0) == (0);
          if (!($393)) {
            $$0$lcssa$i$i113783 = 0;
            $$020$lcssa$i$i112782 = $391;
            $$021$lcssa$i$i111781 = $390;
            label = 80;
          }
        } else {
          $$0$lcssa$i$i113783 = $384;
          $$020$lcssa$i$i112782 = 32;
          $$021$lcssa$i$i111781 = $0;
          label = 80;
        }
        if ((label | 0) == 80) {
          $394 = (($49) + ($$0$lcssa$i$i113783) | 0);
          _memcpy(($394 | 0), ($$021$lcssa$i$i111781 | 0), ($$020$lcssa$i$i112782 | 0)) | 0;
        }
        $395 = HEAP32[$44 >> 2] | 0;
        $396 = $395 & 63;
        $397 = (($395) + 1) | 0;
        HEAP32[$44 >> 2] = $397;
        $398 = (($396) + 1) | 0;
        $399 = ($398 >>> 0) > (63);
        if ($399) {
          $400 = ((($49)) + 63 | 0);
          HEAP8[$400 >> 0] = 1;
          _secp256k1_sha256_transform($20, $49);
        } else {
          $401 = (($49) + ($396) | 0);
          HEAP8[$401 >> 0] = 1;
        }
        $402 = HEAP32[$44 >> 2] | 0;
        $403 = $402 & 63;
        $404 = (($402) + 32) | 0;
        HEAP32[$44 >> 2] = $404;
        $405 = (($403) + 32) | 0;
        $406 = ($405 >>> 0) > (63);
        if ($406) {
          $$02023$i$i127 = 32;
          $$02122$i$i128 = $1;
          $$024$i$i126 = $403;
          while (1) {
            $407 = (($49) + ($$024$i$i126) | 0);
            $408 = (64 - ($$024$i$i126)) | 0;
            _memcpy(($407 | 0), ($$02122$i$i128 | 0), ($408 | 0)) | 0;
            $409 = (($$02122$i$i128) + ($408) | 0);
            $410 = (($$02023$i$i127) - ($408)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $411 = ($410 >>> 0) > (63);
            if ($411) {
              $$02023$i$i127 = $410;
              $$02122$i$i128 = $409;
              $$024$i$i126 = 0;
            } else {
              break;
            }
          }
          $412 = ($410 | 0) == (0);
          if (!($412)) {
            $$0$lcssa$i$i131789 = 0;
            $$020$lcssa$i$i130788 = $410;
            $$021$lcssa$i$i129787 = $409;
            label = 87;
          }
        } else {
          $$0$lcssa$i$i131789 = $403;
          $$020$lcssa$i$i130788 = 32;
          $$021$lcssa$i$i129787 = $1;
          label = 87;
        }
        if ((label | 0) == 87) {
          $413 = (($49) + ($$0$lcssa$i$i131789) | 0);
          _memcpy(($413 | 0), ($$021$lcssa$i$i129787 | 0), ($$020$lcssa$i$i130788 | 0)) | 0;
        }
        $414 = HEAP32[$44 >> 2] | 0;
        $415 = $414 & 63;
        $416 = (($414) + ($3)) | 0;
        HEAP32[$44 >> 2] = $416;
        $417 = (($415) + ($3)) | 0;
        $418 = ($417 >>> 0) > (63);
        if ($418) {
          $$02023$i$i136 = $3;
          $$02122$i$i137 = $2;
          $$024$i$i135 = $415;
          while (1) {
            $419 = (($49) + ($$024$i$i135) | 0);
            $420 = (64 - ($$024$i$i135)) | 0;
            _memcpy(($419 | 0), ($$02122$i$i137 | 0), ($420 | 0)) | 0;
            $421 = (($$02122$i$i137) + ($420) | 0);
            $422 = (($$02023$i$i136) - ($420)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $423 = ($422 >>> 0) > (63);
            if ($423) {
              $$02023$i$i136 = $422;
              $$02122$i$i137 = $421;
              $$024$i$i135 = 0;
            } else {
              $$0$lcssa$i$i140 = 0;
              $$020$lcssa$i$i139 = $422;
              $$021$lcssa$i$i138 = $421;
              break;
            }
          }
        } else {
          $$0$lcssa$i$i140 = $415;
          $$020$lcssa$i$i139 = $3;
          $$021$lcssa$i$i138 = $2;
        }
        $424 = ($$020$lcssa$i$i139 | 0) == (0);
        if (!($424)) {
          $425 = (($49) + ($$0$lcssa$i$i140) | 0);
          _memcpy(($425 | 0), ($$021$lcssa$i$i138 | 0), ($$020$lcssa$i$i139 | 0)) | 0;
        }
        $426 = HEAP32[$44 >> 2] | 0;
        $427 = $426 & 63;
        $428 = (($426) + ($5)) | 0;
        HEAP32[$44 >> 2] = $428;
        $429 = (($427) + ($5)) | 0;
        $430 = ($429 >>> 0) > (63);
        if ($430) {
          $$02023$i$i145 = $5;
          $$02122$i$i146 = $4;
          $$024$i$i144 = $427;
          while (1) {
            $431 = (($49) + ($$024$i$i144) | 0);
            $432 = (64 - ($$024$i$i144)) | 0;
            _memcpy(($431 | 0), ($$02122$i$i146 | 0), ($432 | 0)) | 0;
            $433 = (($$02122$i$i146) + ($432) | 0);
            $434 = (($$02023$i$i145) - ($432)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $435 = ($434 >>> 0) > (63);
            if ($435) {
              $$02023$i$i145 = $434;
              $$02122$i$i146 = $433;
              $$024$i$i144 = 0;
            } else {
              $$0$lcssa$i$i149 = 0;
              $$020$lcssa$i$i148 = $434;
              $$021$lcssa$i$i147 = $433;
              break;
            }
          }
        } else {
          $$0$lcssa$i$i149 = $427;
          $$020$lcssa$i$i148 = $5;
          $$021$lcssa$i$i147 = $4;
        }
        $436 = ($$020$lcssa$i$i148 | 0) == (0);
        if ($436) {
          $$pre$phiZ2D = $18;
          break;
        }
        $437 = (($49) + ($$0$lcssa$i$i149) | 0);
        _memcpy(($437 | 0), ($$021$lcssa$i$i147 | 0), ($$020$lcssa$i$i148 | 0)) | 0;
        $$pre$phiZ2D = $18;
      } else {
        $438 = HEAP32[$44 >> 2] | 0;
        $439 = $438 >>> 29;
        $440 = $439 << 24;
        HEAP32[$9 >> 2] = $440;
        $441 = $438 << 27;
        $442 = $438 << 11;
        $443 = $442 & 16711680;
        $444 = $443 | $441;
        $445 = $438 >>> 5;
        $446 = $445 & 65280;
        $447 = $444 | $446;
        $448 = $438 >>> 21;
        $449 = $448 & 255;
        $450 = $447 | $449;
        $451 = ((($9)) + 4 | 0);
        HEAP32[$451 >> 2] = $450;
        $452 = (119 - ($438)) | 0;
        $453 = $452 & 63;
        $454 = (($453) + 1) | 0;
        $455 = $438 & 63;
        $456 = (($438) + ($454)) | 0;
        HEAP32[$44 >> 2] = $456;
        $457 = (($455) + ($454)) | 0;
        $458 = ($457 >>> 0) > (63);
        if ($458) {
          $$02023$i506 = $454;
          $$02122$i507 = 1612;
          $$024$i505 = $455;
          while (1) {
            $459 = (($49) + ($$024$i505) | 0);
            $460 = (64 - ($$024$i505)) | 0;
            _memcpy(($459 | 0), ($$02122$i507 | 0), ($460 | 0)) | 0;
            $461 = (($$02122$i507) + ($460) | 0);
            $462 = (($$02023$i506) - ($460)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $463 = ($462 >>> 0) > (63);
            if ($463) {
              $$02023$i506 = $462;
              $$02122$i507 = $461;
              $$024$i505 = 0;
            } else {
              break;
            }
          }
          $464 = ($462 | 0) == (0);
          if (!($464)) {
            $$0$lcssa$i510792 = 0;
            $$020$lcssa$i509791 = $462;
            $$021$lcssa$i508790 = $461;
            label = 99;
          }
        } else {
          $$0$lcssa$i510792 = $455;
          $$020$lcssa$i509791 = $454;
          $$021$lcssa$i508790 = 1612;
          label = 99;
        }
        if ((label | 0) == 99) {
          $465 = (($49) + ($$0$lcssa$i510792) | 0);
          _memcpy(($465 | 0), ($$021$lcssa$i508790 | 0), ($$020$lcssa$i509791 | 0)) | 0;
        }
        $466 = HEAP32[$44 >> 2] | 0;
        $467 = $466 & 63;
        $468 = (($466) + 8) | 0;
        HEAP32[$44 >> 2] = $468;
        $469 = (($467) + 8) | 0;
        $470 = ($469 >>> 0) > (63);
        if ($470) {
          $$02023$i389 = 8;
          $$02122$i390 = $9;
          $$024$i388 = $467;
          while (1) {
            $471 = (($49) + ($$024$i388) | 0);
            $472 = (64 - ($$024$i388)) | 0;
            _memcpy(($471 | 0), ($$02122$i390 | 0), ($472 | 0)) | 0;
            $473 = (($$02122$i390) + ($472) | 0);
            $474 = (($$02023$i389) - ($472)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $475 = ($474 >>> 0) > (63);
            if ($475) {
              $$02023$i389 = $474;
              $$02122$i390 = $473;
              $$024$i388 = 0;
            } else {
              break;
            }
          }
          $476 = ($474 | 0) == (0);
          if (!($476)) {
            $$0$lcssa$i393795 = 0;
            $$020$lcssa$i392794 = $474;
            $$021$lcssa$i391793 = $473;
            label = 103;
          }
        } else {
          $$0$lcssa$i393795 = $467;
          $$020$lcssa$i392794 = 8;
          $$021$lcssa$i391793 = $9;
          label = 103;
        }
        if ((label | 0) == 103) {
          $477 = (($49) + ($$0$lcssa$i393795) | 0);
          _memcpy(($477 | 0), ($$021$lcssa$i391793 | 0), ($$020$lcssa$i392794 | 0)) | 0;
        }
        $478 = HEAP32[$20 >> 2] | 0;
        $479 = (_llvm_bswap_i32(($478 | 0)) | 0);
        HEAP32[$20 >> 2] = 0;
        $480 = HEAP32[$37 >> 2] | 0;
        $481 = (_llvm_bswap_i32(($480 | 0)) | 0);
        HEAP32[$37 >> 2] = 0;
        $482 = HEAP32[$38 >> 2] | 0;
        $483 = (_llvm_bswap_i32(($482 | 0)) | 0);
        HEAP32[$38 >> 2] = 0;
        $484 = HEAP32[$39 >> 2] | 0;
        $485 = (_llvm_bswap_i32(($484 | 0)) | 0);
        HEAP32[$39 >> 2] = 0;
        $486 = HEAP32[$40 >> 2] | 0;
        $487 = (_llvm_bswap_i32(($486 | 0)) | 0);
        HEAP32[$40 >> 2] = 0;
        $488 = HEAP32[$41 >> 2] | 0;
        $489 = (_llvm_bswap_i32(($488 | 0)) | 0);
        HEAP32[$41 >> 2] = 0;
        $490 = HEAP32[$42 >> 2] | 0;
        $491 = (_llvm_bswap_i32(($490 | 0)) | 0);
        HEAP32[$42 >> 2] = 0;
        $492 = HEAP32[$43 >> 2] | 0;
        $493 = (_llvm_bswap_i32(($492 | 0)) | 0);
        HEAP32[$43 >> 2] = 0;
        HEAP32[$18 >> 2] = $479;
        $$sroa$4662$0$$sroa_idx = ((($18)) + 4 | 0);
        HEAP32[$$sroa$4662$0$$sroa_idx >> 2] = $481;
        $$sroa$5664$0$$sroa_idx = ((($18)) + 8 | 0);
        HEAP32[$$sroa$5664$0$$sroa_idx >> 2] = $483;
        $$sroa$6666$0$$sroa_idx = ((($18)) + 12 | 0);
        HEAP32[$$sroa$6666$0$$sroa_idx >> 2] = $485;
        $$sroa$7668$0$$sroa_idx = ((($18)) + 16 | 0);
        HEAP32[$$sroa$7668$0$$sroa_idx >> 2] = $487;
        $$sroa$8670$0$$sroa_idx = ((($18)) + 20 | 0);
        HEAP32[$$sroa$8670$0$$sroa_idx >> 2] = $489;
        $$sroa$9672$0$$sroa_idx = ((($18)) + 24 | 0);
        HEAP32[$$sroa$9672$0$$sroa_idx >> 2] = $491;
        $$sroa$10674$0$$sroa_idx = ((($18)) + 28 | 0);
        HEAP32[$$sroa$10674$0$$sroa_idx >> 2] = $493;
        $494 = HEAP32[$31 >> 2] | 0;
        $495 = $494 & 63;
        $496 = (($494) + 32) | 0;
        HEAP32[$31 >> 2] = $496;
        $497 = (($495) + 32) | 0;
        $498 = ($497 >>> 0) > (63);
        if ($498) {
          $$02023$i$i154 = 32;
          $$02122$i$i155 = $18;
          $$024$i$i153 = $495;
          while (1) {
            $499 = (($36) + ($$024$i$i153) | 0);
            $500 = (64 - ($$024$i$i153)) | 0;
            _memcpy(($499 | 0), ($$02122$i$i155 | 0), ($500 | 0)) | 0;
            $501 = (($$02122$i$i155) + ($500) | 0);
            $502 = (($$02023$i$i154) - ($500)) | 0;
            _secp256k1_sha256_transform($23, $36);
            $503 = ($502 >>> 0) > (63);
            if ($503) {
              $$02023$i$i154 = $502;
              $$02122$i$i155 = $501;
              $$024$i$i153 = 0;
            } else {
              break;
            }
          }
          $504 = ($502 | 0) == (0);
          if (!($504)) {
            $$0$lcssa$i6$i157 = 0;
            $$020$lcssa$i5$i158 = $502;
            $$021$lcssa$i4$i159 = $501;
            label = 107;
          }
        } else {
          $$0$lcssa$i6$i157 = $495;
          $$020$lcssa$i5$i158 = 32;
          $$021$lcssa$i4$i159 = $18;
          label = 107;
        }
        if ((label | 0) == 107) {
          $505 = (($36) + ($$0$lcssa$i6$i157) | 0);
          _memcpy(($505 | 0), ($$021$lcssa$i4$i159 | 0), ($$020$lcssa$i5$i158 | 0)) | 0;
        }
        $506 = HEAP32[$31 >> 2] | 0;
        $507 = $506 >>> 29;
        $508 = $507 << 24;
        HEAP32[$15 >> 2] = $508;
        $509 = $506 << 27;
        $510 = $506 << 11;
        $511 = $510 & 16711680;
        $512 = $511 | $509;
        $513 = $506 >>> 5;
        $514 = $513 & 65280;
        $515 = $512 | $514;
        $516 = $506 >>> 21;
        $517 = $516 & 255;
        $518 = $515 | $517;
        $519 = ((($15)) + 4 | 0);
        HEAP32[$519 >> 2] = $518;
        $520 = (119 - ($506)) | 0;
        $521 = $520 & 63;
        $522 = (($521) + 1) | 0;
        $523 = $506 & 63;
        $524 = (($506) + ($522)) | 0;
        HEAP32[$31 >> 2] = $524;
        $525 = (($523) + ($522)) | 0;
        $526 = ($525 >>> 0) > (63);
        if ($526) {
          $$02023$i398 = $522;
          $$02122$i399 = 1612;
          $$024$i397 = $523;
          while (1) {
            $527 = (($36) + ($$024$i397) | 0);
            $528 = (64 - ($$024$i397)) | 0;
            _memcpy(($527 | 0), ($$02122$i399 | 0), ($528 | 0)) | 0;
            $529 = (($$02122$i399) + ($528) | 0);
            $530 = (($$02023$i398) - ($528)) | 0;
            _secp256k1_sha256_transform($23, $36);
            $531 = ($530 >>> 0) > (63);
            if ($531) {
              $$02023$i398 = $530;
              $$02122$i399 = $529;
              $$024$i397 = 0;
            } else {
              break;
            }
          }
          $532 = ($530 | 0) == (0);
          if (!($532)) {
            $$0$lcssa$i402798 = 0;
            $$020$lcssa$i401797 = $530;
            $$021$lcssa$i400796 = $529;
            label = 111;
          }
        } else {
          $$0$lcssa$i402798 = $523;
          $$020$lcssa$i401797 = $522;
          $$021$lcssa$i400796 = 1612;
          label = 111;
        }
        if ((label | 0) == 111) {
          $533 = (($36) + ($$0$lcssa$i402798) | 0);
          _memcpy(($533 | 0), ($$021$lcssa$i400796 | 0), ($$020$lcssa$i401797 | 0)) | 0;
        }
        $534 = HEAP32[$31 >> 2] | 0;
        $535 = $534 & 63;
        $536 = (($534) + 8) | 0;
        HEAP32[$31 >> 2] = $536;
        $537 = (($535) + 8) | 0;
        $538 = ($537 >>> 0) > (63);
        if ($538) {
          $$02023$i164 = 8;
          $$02122$i165 = $15;
          $$024$i163 = $535;
          while (1) {
            $539 = (($36) + ($$024$i163) | 0);
            $540 = (64 - ($$024$i163)) | 0;
            _memcpy(($539 | 0), ($$02122$i165 | 0), ($540 | 0)) | 0;
            $541 = (($$02122$i165) + ($540) | 0);
            $542 = (($$02023$i164) - ($540)) | 0;
            _secp256k1_sha256_transform($23, $36);
            $543 = ($542 >>> 0) > (63);
            if ($543) {
              $$02023$i164 = $542;
              $$02122$i165 = $541;
              $$024$i163 = 0;
            } else {
              break;
            }
          }
          $544 = ($542 | 0) == (0);
          if (!($544)) {
            $$0$lcssa$i168801 = 0;
            $$020$lcssa$i167800 = $542;
            $$021$lcssa$i166799 = $541;
            label = 115;
          }
        } else {
          $$0$lcssa$i168801 = $535;
          $$020$lcssa$i167800 = 8;
          $$021$lcssa$i166799 = $15;
          label = 115;
        }
        if ((label | 0) == 115) {
          $545 = (($36) + ($$0$lcssa$i168801) | 0);
          _memcpy(($545 | 0), ($$021$lcssa$i166799 | 0), ($$020$lcssa$i167800 | 0)) | 0;
        }
        $546 = HEAP32[$23 >> 2] | 0;
        $547 = (_llvm_bswap_i32(($546 | 0)) | 0);
        $548 = HEAP32[$24 >> 2] | 0;
        $549 = (_llvm_bswap_i32(($548 | 0)) | 0);
        $550 = HEAP32[$25 >> 2] | 0;
        $551 = (_llvm_bswap_i32(($550 | 0)) | 0);
        $552 = HEAP32[$26 >> 2] | 0;
        $553 = (_llvm_bswap_i32(($552 | 0)) | 0);
        $554 = HEAP32[$27 >> 2] | 0;
        $555 = (_llvm_bswap_i32(($554 | 0)) | 0);
        $556 = HEAP32[$28 >> 2] | 0;
        $557 = (_llvm_bswap_i32(($556 | 0)) | 0);
        $558 = HEAP32[$29 >> 2] | 0;
        $559 = (_llvm_bswap_i32(($558 | 0)) | 0);
        $560 = HEAP32[$30 >> 2] | 0;
        $561 = (_llvm_bswap_i32(($560 | 0)) | 0);
        $$sroa$0564$0$$sroa_idx = ((($0)) + 32 | 0);
        HEAP8[$$sroa$0564$0$$sroa_idx >> 0] = $547 & 255;
        HEAP8[$$sroa$0564$0$$sroa_idx + 1 >> 0] = ($547 >> 8) & 255;
        HEAP8[$$sroa$0564$0$$sroa_idx + 2 >> 0] = ($547 >> 16) & 255;
        HEAP8[$$sroa$0564$0$$sroa_idx + 3 >> 0] = $547 >> 24;
        $$sroa$4566$0$$sroa_idx = ((($0)) + 36 | 0);
        HEAP8[$$sroa$4566$0$$sroa_idx >> 0] = $549 & 255;
        HEAP8[$$sroa$4566$0$$sroa_idx + 1 >> 0] = ($549 >> 8) & 255;
        HEAP8[$$sroa$4566$0$$sroa_idx + 2 >> 0] = ($549 >> 16) & 255;
        HEAP8[$$sroa$4566$0$$sroa_idx + 3 >> 0] = $549 >> 24;
        $$sroa$5568$0$$sroa_idx = ((($0)) + 40 | 0);
        HEAP8[$$sroa$5568$0$$sroa_idx >> 0] = $551 & 255;
        HEAP8[$$sroa$5568$0$$sroa_idx + 1 >> 0] = ($551 >> 8) & 255;
        HEAP8[$$sroa$5568$0$$sroa_idx + 2 >> 0] = ($551 >> 16) & 255;
        HEAP8[$$sroa$5568$0$$sroa_idx + 3 >> 0] = $551 >> 24;
        $$sroa$6570$0$$sroa_idx = ((($0)) + 44 | 0);
        HEAP8[$$sroa$6570$0$$sroa_idx >> 0] = $553 & 255;
        HEAP8[$$sroa$6570$0$$sroa_idx + 1 >> 0] = ($553 >> 8) & 255;
        HEAP8[$$sroa$6570$0$$sroa_idx + 2 >> 0] = ($553 >> 16) & 255;
        HEAP8[$$sroa$6570$0$$sroa_idx + 3 >> 0] = $553 >> 24;
        $$sroa$7572$0$$sroa_idx = ((($0)) + 48 | 0);
        HEAP8[$$sroa$7572$0$$sroa_idx >> 0] = $555 & 255;
        HEAP8[$$sroa$7572$0$$sroa_idx + 1 >> 0] = ($555 >> 8) & 255;
        HEAP8[$$sroa$7572$0$$sroa_idx + 2 >> 0] = ($555 >> 16) & 255;
        HEAP8[$$sroa$7572$0$$sroa_idx + 3 >> 0] = $555 >> 24;
        $$sroa$8574$0$$sroa_idx = ((($0)) + 52 | 0);
        HEAP8[$$sroa$8574$0$$sroa_idx >> 0] = $557 & 255;
        HEAP8[$$sroa$8574$0$$sroa_idx + 1 >> 0] = ($557 >> 8) & 255;
        HEAP8[$$sroa$8574$0$$sroa_idx + 2 >> 0] = ($557 >> 16) & 255;
        HEAP8[$$sroa$8574$0$$sroa_idx + 3 >> 0] = $557 >> 24;
        $$sroa$9576$0$$sroa_idx = ((($0)) + 56 | 0);
        HEAP8[$$sroa$9576$0$$sroa_idx >> 0] = $559 & 255;
        HEAP8[$$sroa$9576$0$$sroa_idx + 1 >> 0] = ($559 >> 8) & 255;
        HEAP8[$$sroa$9576$0$$sroa_idx + 2 >> 0] = ($559 >> 16) & 255;
        HEAP8[$$sroa$9576$0$$sroa_idx + 3 >> 0] = $559 >> 24;
        $$sroa$10578$0$$sroa_idx = ((($0)) + 60 | 0);
        HEAP8[$$sroa$10578$0$$sroa_idx >> 0] = $561 & 255;
        HEAP8[$$sroa$10578$0$$sroa_idx + 1 >> 0] = ($561 >> 8) & 255;
        HEAP8[$$sroa$10578$0$$sroa_idx + 2 >> 0] = ($561 >> 16) & 255;
        HEAP8[$$sroa$10578$0$$sroa_idx + 3 >> 0] = $561 >> 24;
        dest = $19;
        src = $21;
        stop = dest + 32 | 0;
        do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        dest = $22;
        stop = dest + 32 | 0;
        do {
          HEAP8[dest >> 0] = 0 | 0;
          dest = dest + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        HEAP32[$23 >> 2] = 1779033703;
        HEAP32[$24 >> 2] = -1150833019;
        HEAP32[$25 >> 2] = 1013904242;
        HEAP32[$26 >> 2] = -1521486534;
        HEAP32[$27 >> 2] = 1359893119;
        HEAP32[$28 >> 2] = -1694144372;
        HEAP32[$29 >> 2] = 528734635;
        HEAP32[$30 >> 2] = 1541459225;
        HEAP32[$31 >> 2] = 0;
        $$02$i171 = 0;
        while (1) {
          $562 = (($19) + ($$02$i171) | 0);
          $563 = HEAP8[$562 >> 0] | 0;
          $564 = $563 ^ 92;
          HEAP8[$562 >> 0] = $564;
          $565 = (($$02$i171) + 1) | 0;
          $exitcond3$i172 = ($565 | 0) == (64);
          if ($exitcond3$i172) {
            break;
          } else {
            $$02$i171 = $565;
          }
        }
        HEAP32[$31 >> 2] = 64;
        dest = $36;
        src = $19;
        stop = dest + 64 | 0;
        do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        _secp256k1_sha256_transform($23, $36);
        HEAP32[$20 >> 2] = 1779033703;
        HEAP32[$37 >> 2] = -1150833019;
        HEAP32[$38 >> 2] = 1013904242;
        HEAP32[$39 >> 2] = -1521486534;
        HEAP32[$40 >> 2] = 1359893119;
        HEAP32[$41 >> 2] = -1694144372;
        HEAP32[$42 >> 2] = 528734635;
        HEAP32[$43 >> 2] = 1541459225;
        HEAP32[$44 >> 2] = 0;
        $$11$i173 = 0;
        while (1) {
          $566 = (($19) + ($$11$i173) | 0);
          $567 = HEAP8[$566 >> 0] | 0;
          $568 = $567 ^ 106;
          HEAP8[$566 >> 0] = $568;
          $569 = (($$11$i173) + 1) | 0;
          $exitcond$i174 = ($569 | 0) == (64);
          if ($exitcond$i174) {
            break;
          } else {
            $$11$i173 = $569;
          }
        }
        HEAP32[$44 >> 2] = 64;
        dest = $49;
        src = $19;
        stop = dest + 64 | 0;
        do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        _secp256k1_sha256_transform($20, $49);
        $570 = HEAP32[$44 >> 2] | 0;
        $571 = $570 & 63;
        $572 = (($570) + 32) | 0;
        HEAP32[$44 >> 2] = $572;
        $573 = (($571) + 32) | 0;
        $574 = ($573 >>> 0) > (63);
        if ($574) {
          $$02023$i$i187 = 32;
          $$02122$i$i188 = $0;
          $$024$i$i186 = $571;
          while (1) {
            $575 = (($49) + ($$024$i$i186) | 0);
            $576 = (64 - ($$024$i$i186)) | 0;
            _memcpy(($575 | 0), ($$02122$i$i188 | 0), ($576 | 0)) | 0;
            $577 = (($$02122$i$i188) + ($576) | 0);
            $578 = (($$02023$i$i187) - ($576)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $579 = ($578 >>> 0) > (63);
            if ($579) {
              $$02023$i$i187 = $578;
              $$02122$i$i188 = $577;
              $$024$i$i186 = 0;
            } else {
              break;
            }
          }
          $580 = ($578 | 0) == (0);
          if (!($580)) {
            $$0$lcssa$i$i191810 = 0;
            $$020$lcssa$i$i190809 = $578;
            $$021$lcssa$i$i189808 = $577;
            label = 123;
          }
        } else {
          $$0$lcssa$i$i191810 = $571;
          $$020$lcssa$i$i190809 = 32;
          $$021$lcssa$i$i189808 = $0;
          label = 123;
        }
        if ((label | 0) == 123) {
          $581 = (($49) + ($$0$lcssa$i$i191810) | 0);
          _memcpy(($581 | 0), ($$021$lcssa$i$i189808 | 0), ($$020$lcssa$i$i190809 | 0)) | 0;
        }
        $582 = HEAP32[$44 >> 2] | 0;
        $583 = $582 >>> 29;
        $584 = $583 << 24;
        HEAP32[$8 >> 2] = $584;
        $585 = $582 << 27;
        $586 = $582 << 11;
        $587 = $586 & 16711680;
        $588 = $587 | $585;
        $589 = $582 >>> 5;
        $590 = $589 & 65280;
        $591 = $588 | $590;
        $592 = $582 >>> 21;
        $593 = $592 & 255;
        $594 = $591 | $593;
        $595 = ((($8)) + 4 | 0);
        HEAP32[$595 >> 2] = $594;
        $596 = (119 - ($582)) | 0;
        $597 = $596 & 63;
        $598 = (($597) + 1) | 0;
        $599 = $582 & 63;
        $600 = (($582) + ($598)) | 0;
        HEAP32[$44 >> 2] = $600;
        $601 = (($599) + ($598)) | 0;
        $602 = ($601 >>> 0) > (63);
        if ($602) {
          $$02023$i515 = $598;
          $$02122$i516 = 1612;
          $$024$i514 = $599;
          while (1) {
            $603 = (($49) + ($$024$i514) | 0);
            $604 = (64 - ($$024$i514)) | 0;
            _memcpy(($603 | 0), ($$02122$i516 | 0), ($604 | 0)) | 0;
            $605 = (($$02122$i516) + ($604) | 0);
            $606 = (($$02023$i515) - ($604)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $607 = ($606 >>> 0) > (63);
            if ($607) {
              $$02023$i515 = $606;
              $$02122$i516 = $605;
              $$024$i514 = 0;
            } else {
              break;
            }
          }
          $608 = ($606 | 0) == (0);
          if (!($608)) {
            $$0$lcssa$i519813 = 0;
            $$020$lcssa$i518812 = $606;
            $$021$lcssa$i517811 = $605;
            label = 127;
          }
        } else {
          $$0$lcssa$i519813 = $599;
          $$020$lcssa$i518812 = $598;
          $$021$lcssa$i517811 = 1612;
          label = 127;
        }
        if ((label | 0) == 127) {
          $609 = (($49) + ($$0$lcssa$i519813) | 0);
          _memcpy(($609 | 0), ($$021$lcssa$i517811 | 0), ($$020$lcssa$i518812 | 0)) | 0;
        }
        $610 = HEAP32[$44 >> 2] | 0;
        $611 = $610 & 63;
        $612 = (($610) + 8) | 0;
        HEAP32[$44 >> 2] = $612;
        $613 = (($611) + 8) | 0;
        $614 = ($613 >>> 0) > (63);
        if ($614) {
          $$02023$i416 = 8;
          $$02122$i417 = $8;
          $$024$i415 = $611;
          while (1) {
            $615 = (($49) + ($$024$i415) | 0);
            $616 = (64 - ($$024$i415)) | 0;
            _memcpy(($615 | 0), ($$02122$i417 | 0), ($616 | 0)) | 0;
            $617 = (($$02122$i417) + ($616) | 0);
            $618 = (($$02023$i416) - ($616)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $619 = ($618 >>> 0) > (63);
            if ($619) {
              $$02023$i416 = $618;
              $$02122$i417 = $617;
              $$024$i415 = 0;
            } else {
              break;
            }
          }
          $620 = ($618 | 0) == (0);
          if (!($620)) {
            $$0$lcssa$i420816 = 0;
            $$020$lcssa$i419815 = $618;
            $$021$lcssa$i418814 = $617;
            label = 131;
          }
        } else {
          $$0$lcssa$i420816 = $611;
          $$020$lcssa$i419815 = 8;
          $$021$lcssa$i418814 = $8;
          label = 131;
        }
        if ((label | 0) == 131) {
          $621 = (($49) + ($$0$lcssa$i420816) | 0);
          _memcpy(($621 | 0), ($$021$lcssa$i418814 | 0), ($$020$lcssa$i419815 | 0)) | 0;
        }
        $622 = HEAP32[$20 >> 2] | 0;
        $623 = (_llvm_bswap_i32(($622 | 0)) | 0);
        HEAP32[$20 >> 2] = 0;
        $624 = HEAP32[$37 >> 2] | 0;
        $625 = (_llvm_bswap_i32(($624 | 0)) | 0);
        HEAP32[$37 >> 2] = 0;
        $626 = HEAP32[$38 >> 2] | 0;
        $627 = (_llvm_bswap_i32(($626 | 0)) | 0);
        HEAP32[$38 >> 2] = 0;
        $628 = HEAP32[$39 >> 2] | 0;
        $629 = (_llvm_bswap_i32(($628 | 0)) | 0);
        HEAP32[$39 >> 2] = 0;
        $630 = HEAP32[$40 >> 2] | 0;
        $631 = (_llvm_bswap_i32(($630 | 0)) | 0);
        HEAP32[$40 >> 2] = 0;
        $632 = HEAP32[$41 >> 2] | 0;
        $633 = (_llvm_bswap_i32(($632 | 0)) | 0);
        HEAP32[$41 >> 2] = 0;
        $634 = HEAP32[$42 >> 2] | 0;
        $635 = (_llvm_bswap_i32(($634 | 0)) | 0);
        HEAP32[$42 >> 2] = 0;
        $636 = HEAP32[$43 >> 2] | 0;
        $637 = (_llvm_bswap_i32(($636 | 0)) | 0);
        HEAP32[$43 >> 2] = 0;
        HEAP32[$18 >> 2] = $623;
        HEAP32[$$sroa$4662$0$$sroa_idx >> 2] = $625;
        HEAP32[$$sroa$5664$0$$sroa_idx >> 2] = $627;
        HEAP32[$$sroa$6666$0$$sroa_idx >> 2] = $629;
        HEAP32[$$sroa$7668$0$$sroa_idx >> 2] = $631;
        HEAP32[$$sroa$8670$0$$sroa_idx >> 2] = $633;
        HEAP32[$$sroa$9672$0$$sroa_idx >> 2] = $635;
        HEAP32[$$sroa$10674$0$$sroa_idx >> 2] = $637;
        $638 = HEAP32[$31 >> 2] | 0;
        $639 = $638 & 63;
        $640 = (($638) + 32) | 0;
        HEAP32[$31 >> 2] = $640;
        $641 = (($639) + 32) | 0;
        $642 = ($641 >>> 0) > (63);
        if ($642) {
          $$02023$i$i196 = 32;
          $$02122$i$i197 = $18;
          $$024$i$i195 = $639;
          while (1) {
            $643 = (($36) + ($$024$i$i195) | 0);
            $644 = (64 - ($$024$i$i195)) | 0;
            _memcpy(($643 | 0), ($$02122$i$i197 | 0), ($644 | 0)) | 0;
            $645 = (($$02122$i$i197) + ($644) | 0);
            $646 = (($$02023$i$i196) - ($644)) | 0;
            _secp256k1_sha256_transform($23, $36);
            $647 = ($646 >>> 0) > (63);
            if ($647) {
              $$02023$i$i196 = $646;
              $$02122$i$i197 = $645;
              $$024$i$i195 = 0;
            } else {
              break;
            }
          }
          $648 = ($646 | 0) == (0);
          if (!($648)) {
            $$0$lcssa$i6$i199 = 0;
            $$020$lcssa$i5$i200 = $646;
            $$021$lcssa$i4$i201 = $645;
            label = 135;
          }
        } else {
          $$0$lcssa$i6$i199 = $639;
          $$020$lcssa$i5$i200 = 32;
          $$021$lcssa$i4$i201 = $18;
          label = 135;
        }
        if ((label | 0) == 135) {
          $649 = (($36) + ($$0$lcssa$i6$i199) | 0);
          _memcpy(($649 | 0), ($$021$lcssa$i4$i201 | 0), ($$020$lcssa$i5$i200 | 0)) | 0;
        }
        $650 = HEAP32[$31 >> 2] | 0;
        $651 = $650 >>> 29;
        $652 = $651 << 24;
        HEAP32[$14 >> 2] = $652;
        $653 = $650 << 27;
        $654 = $650 << 11;
        $655 = $654 & 16711680;
        $656 = $655 | $653;
        $657 = $650 >>> 5;
        $658 = $657 & 65280;
        $659 = $656 | $658;
        $660 = $650 >>> 21;
        $661 = $660 & 255;
        $662 = $659 | $661;
        $663 = ((($14)) + 4 | 0);
        HEAP32[$663 >> 2] = $662;
        $664 = (119 - ($650)) | 0;
        $665 = $664 & 63;
        $666 = (($665) + 1) | 0;
        $667 = $650 & 63;
        $668 = (($650) + ($666)) | 0;
        HEAP32[$31 >> 2] = $668;
        $669 = (($667) + ($666)) | 0;
        $670 = ($669 >>> 0) > (63);
        if ($670) {
          $$02023$i425 = $666;
          $$02122$i426 = 1612;
          $$024$i424 = $667;
          while (1) {
            $671 = (($36) + ($$024$i424) | 0);
            $672 = (64 - ($$024$i424)) | 0;
            _memcpy(($671 | 0), ($$02122$i426 | 0), ($672 | 0)) | 0;
            $673 = (($$02122$i426) + ($672) | 0);
            $674 = (($$02023$i425) - ($672)) | 0;
            _secp256k1_sha256_transform($23, $36);
            $675 = ($674 >>> 0) > (63);
            if ($675) {
              $$02023$i425 = $674;
              $$02122$i426 = $673;
              $$024$i424 = 0;
            } else {
              break;
            }
          }
          $676 = ($674 | 0) == (0);
          if (!($676)) {
            $$0$lcssa$i429819 = 0;
            $$020$lcssa$i428818 = $674;
            $$021$lcssa$i427817 = $673;
            label = 139;
          }
        } else {
          $$0$lcssa$i429819 = $667;
          $$020$lcssa$i428818 = $666;
          $$021$lcssa$i427817 = 1612;
          label = 139;
        }
        if ((label | 0) == 139) {
          $677 = (($36) + ($$0$lcssa$i429819) | 0);
          _memcpy(($677 | 0), ($$021$lcssa$i427817 | 0), ($$020$lcssa$i428818 | 0)) | 0;
        }
        $678 = HEAP32[$31 >> 2] | 0;
        $679 = $678 & 63;
        $680 = (($678) + 8) | 0;
        HEAP32[$31 >> 2] = $680;
        $681 = (($679) + 8) | 0;
        $682 = ($681 >>> 0) > (63);
        if ($682) {
          $$02023$i206 = 8;
          $$02122$i207 = $14;
          $$024$i205 = $679;
          while (1) {
            $683 = (($36) + ($$024$i205) | 0);
            $684 = (64 - ($$024$i205)) | 0;
            _memcpy(($683 | 0), ($$02122$i207 | 0), ($684 | 0)) | 0;
            $685 = (($$02122$i207) + ($684) | 0);
            $686 = (($$02023$i206) - ($684)) | 0;
            _secp256k1_sha256_transform($23, $36);
            $687 = ($686 >>> 0) > (63);
            if ($687) {
              $$02023$i206 = $686;
              $$02122$i207 = $685;
              $$024$i205 = 0;
            } else {
              break;
            }
          }
          $688 = ($686 | 0) == (0);
          if (!($688)) {
            $$0$lcssa$i210822 = 0;
            $$020$lcssa$i209821 = $686;
            $$021$lcssa$i208820 = $685;
            label = 143;
          }
        } else {
          $$0$lcssa$i210822 = $679;
          $$020$lcssa$i209821 = 8;
          $$021$lcssa$i208820 = $14;
          label = 143;
        }
        if ((label | 0) == 143) {
          $689 = (($36) + ($$0$lcssa$i210822) | 0);
          _memcpy(($689 | 0), ($$021$lcssa$i208820 | 0), ($$020$lcssa$i209821 | 0)) | 0;
        }
        $690 = HEAP32[$23 >> 2] | 0;
        $691 = (_llvm_bswap_i32(($690 | 0)) | 0);
        $692 = HEAP32[$24 >> 2] | 0;
        $693 = (_llvm_bswap_i32(($692 | 0)) | 0);
        $694 = HEAP32[$25 >> 2] | 0;
        $695 = (_llvm_bswap_i32(($694 | 0)) | 0);
        $696 = HEAP32[$26 >> 2] | 0;
        $697 = (_llvm_bswap_i32(($696 | 0)) | 0);
        $698 = HEAP32[$27 >> 2] | 0;
        $699 = (_llvm_bswap_i32(($698 | 0)) | 0);
        $700 = HEAP32[$28 >> 2] | 0;
        $701 = (_llvm_bswap_i32(($700 | 0)) | 0);
        $702 = HEAP32[$29 >> 2] | 0;
        $703 = (_llvm_bswap_i32(($702 | 0)) | 0);
        $704 = HEAP32[$30 >> 2] | 0;
        $705 = (_llvm_bswap_i32(($704 | 0)) | 0);
        HEAP8[$0 >> 0] = $691 & 255;
        HEAP8[$0 + 1 >> 0] = ($691 >> 8) & 255;
        HEAP8[$0 + 2 >> 0] = ($691 >> 16) & 255;
        HEAP8[$0 + 3 >> 0] = $691 >> 24;
        $$sroa$4582$0$$sroa_idx = ((($0)) + 4 | 0);
        HEAP8[$$sroa$4582$0$$sroa_idx >> 0] = $693 & 255;
        HEAP8[$$sroa$4582$0$$sroa_idx + 1 >> 0] = ($693 >> 8) & 255;
        HEAP8[$$sroa$4582$0$$sroa_idx + 2 >> 0] = ($693 >> 16) & 255;
        HEAP8[$$sroa$4582$0$$sroa_idx + 3 >> 0] = $693 >> 24;
        $$sroa$5584$0$$sroa_idx = ((($0)) + 8 | 0);
        HEAP8[$$sroa$5584$0$$sroa_idx >> 0] = $695 & 255;
        HEAP8[$$sroa$5584$0$$sroa_idx + 1 >> 0] = ($695 >> 8) & 255;
        HEAP8[$$sroa$5584$0$$sroa_idx + 2 >> 0] = ($695 >> 16) & 255;
        HEAP8[$$sroa$5584$0$$sroa_idx + 3 >> 0] = $695 >> 24;
        $$sroa$6586$0$$sroa_idx = ((($0)) + 12 | 0);
        HEAP8[$$sroa$6586$0$$sroa_idx >> 0] = $697 & 255;
        HEAP8[$$sroa$6586$0$$sroa_idx + 1 >> 0] = ($697 >> 8) & 255;
        HEAP8[$$sroa$6586$0$$sroa_idx + 2 >> 0] = ($697 >> 16) & 255;
        HEAP8[$$sroa$6586$0$$sroa_idx + 3 >> 0] = $697 >> 24;
        $$sroa$7588$0$$sroa_idx = ((($0)) + 16 | 0);
        HEAP8[$$sroa$7588$0$$sroa_idx >> 0] = $699 & 255;
        HEAP8[$$sroa$7588$0$$sroa_idx + 1 >> 0] = ($699 >> 8) & 255;
        HEAP8[$$sroa$7588$0$$sroa_idx + 2 >> 0] = ($699 >> 16) & 255;
        HEAP8[$$sroa$7588$0$$sroa_idx + 3 >> 0] = $699 >> 24;
        $$sroa$8590$0$$sroa_idx = ((($0)) + 20 | 0);
        HEAP8[$$sroa$8590$0$$sroa_idx >> 0] = $701 & 255;
        HEAP8[$$sroa$8590$0$$sroa_idx + 1 >> 0] = ($701 >> 8) & 255;
        HEAP8[$$sroa$8590$0$$sroa_idx + 2 >> 0] = ($701 >> 16) & 255;
        HEAP8[$$sroa$8590$0$$sroa_idx + 3 >> 0] = $701 >> 24;
        $$sroa$9592$0$$sroa_idx = ((($0)) + 24 | 0);
        HEAP8[$$sroa$9592$0$$sroa_idx >> 0] = $703 & 255;
        HEAP8[$$sroa$9592$0$$sroa_idx + 1 >> 0] = ($703 >> 8) & 255;
        HEAP8[$$sroa$9592$0$$sroa_idx + 2 >> 0] = ($703 >> 16) & 255;
        HEAP8[$$sroa$9592$0$$sroa_idx + 3 >> 0] = $703 >> 24;
        $$sroa$10594$0$$sroa_idx = ((($0)) + 28 | 0);
        HEAP8[$$sroa$10594$0$$sroa_idx >> 0] = $705 & 255;
        HEAP8[$$sroa$10594$0$$sroa_idx + 1 >> 0] = ($705 >> 8) & 255;
        HEAP8[$$sroa$10594$0$$sroa_idx + 2 >> 0] = ($705 >> 16) & 255;
        HEAP8[$$sroa$10594$0$$sroa_idx + 3 >> 0] = $705 >> 24;
        dest = $19;
        src = $21;
        stop = dest + 32 | 0;
        do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        dest = $22;
        stop = dest + 32 | 0;
        do {
          HEAP8[dest >> 0] = 0 | 0;
          dest = dest + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        HEAP32[$23 >> 2] = 1779033703;
        HEAP32[$24 >> 2] = -1150833019;
        HEAP32[$25 >> 2] = 1013904242;
        HEAP32[$26 >> 2] = -1521486534;
        HEAP32[$27 >> 2] = 1359893119;
        HEAP32[$28 >> 2] = -1694144372;
        HEAP32[$29 >> 2] = 528734635;
        HEAP32[$30 >> 2] = 1541459225;
        HEAP32[$31 >> 2] = 0;
        $$02$i213 = 0;
        while (1) {
          $706 = (($19) + ($$02$i213) | 0);
          $707 = HEAP8[$706 >> 0] | 0;
          $708 = $707 ^ 92;
          HEAP8[$706 >> 0] = $708;
          $709 = (($$02$i213) + 1) | 0;
          $exitcond3$i214 = ($709 | 0) == (64);
          if ($exitcond3$i214) {
            break;
          } else {
            $$02$i213 = $709;
          }
        }
        HEAP32[$31 >> 2] = 64;
        dest = $36;
        src = $19;
        stop = dest + 64 | 0;
        do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        _secp256k1_sha256_transform($23, $36);
        HEAP32[$20 >> 2] = 1779033703;
        HEAP32[$37 >> 2] = -1150833019;
        HEAP32[$38 >> 2] = 1013904242;
        HEAP32[$39 >> 2] = -1521486534;
        HEAP32[$40 >> 2] = 1359893119;
        HEAP32[$41 >> 2] = -1694144372;
        HEAP32[$42 >> 2] = 528734635;
        HEAP32[$43 >> 2] = 1541459225;
        HEAP32[$44 >> 2] = 0;
        $$11$i215 = 0;
        while (1) {
          $710 = (($19) + ($$11$i215) | 0);
          $711 = HEAP8[$710 >> 0] | 0;
          $712 = $711 ^ 106;
          HEAP8[$710 >> 0] = $712;
          $713 = (($$11$i215) + 1) | 0;
          $exitcond$i216 = ($713 | 0) == (64);
          if ($exitcond$i216) {
            break;
          } else {
            $$11$i215 = $713;
          }
        }
        HEAP32[$44 >> 2] = 64;
        dest = $49;
        src = $19;
        stop = dest + 64 | 0;
        do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        _secp256k1_sha256_transform($20, $49);
        $714 = HEAP32[$44 >> 2] | 0;
        $715 = $714 & 63;
        $716 = (($714) + 32) | 0;
        HEAP32[$44 >> 2] = $716;
        $717 = (($715) + 32) | 0;
        $718 = ($717 >>> 0) > (63);
        if ($718) {
          $$02023$i$i229 = 32;
          $$02122$i$i230 = $0;
          $$024$i$i228 = $715;
          while (1) {
            $719 = (($49) + ($$024$i$i228) | 0);
            $720 = (64 - ($$024$i$i228)) | 0;
            _memcpy(($719 | 0), ($$02122$i$i230 | 0), ($720 | 0)) | 0;
            $721 = (($$02122$i$i230) + ($720) | 0);
            $722 = (($$02023$i$i229) - ($720)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $723 = ($722 >>> 0) > (63);
            if ($723) {
              $$02023$i$i229 = $722;
              $$02122$i$i230 = $721;
              $$024$i$i228 = 0;
            } else {
              break;
            }
          }
          $724 = ($722 | 0) == (0);
          if (!($724)) {
            $$0$lcssa$i$i233831 = 0;
            $$020$lcssa$i$i232830 = $722;
            $$021$lcssa$i$i231829 = $721;
            label = 151;
          }
        } else {
          $$0$lcssa$i$i233831 = $715;
          $$020$lcssa$i$i232830 = 32;
          $$021$lcssa$i$i231829 = $0;
          label = 151;
        }
        if ((label | 0) == 151) {
          $725 = (($49) + ($$0$lcssa$i$i233831) | 0);
          _memcpy(($725 | 0), ($$021$lcssa$i$i231829 | 0), ($$020$lcssa$i$i232830 | 0)) | 0;
        }
        $726 = HEAP32[$44 >> 2] | 0;
        $727 = $726 & 63;
        $728 = (($726) + 1) | 0;
        HEAP32[$44 >> 2] = $728;
        $729 = (($727) + 1) | 0;
        $730 = ($729 >>> 0) > (63);
        if ($730) {
          $731 = ((($49)) + 63 | 0);
          HEAP8[$731 >> 0] = 1;
          _secp256k1_sha256_transform($20, $49);
        } else {
          $732 = (($49) + ($727) | 0);
          HEAP8[$732 >> 0] = 1;
        }
        $733 = HEAP32[$44 >> 2] | 0;
        $734 = $733 & 63;
        $735 = (($733) + 32) | 0;
        HEAP32[$44 >> 2] = $735;
        $736 = (($734) + 32) | 0;
        $737 = ($736 >>> 0) > (63);
        if ($737) {
          $$02023$i$i247 = 32;
          $$02122$i$i248 = $1;
          $$024$i$i246 = $734;
          while (1) {
            $738 = (($49) + ($$024$i$i246) | 0);
            $739 = (64 - ($$024$i$i246)) | 0;
            _memcpy(($738 | 0), ($$02122$i$i248 | 0), ($739 | 0)) | 0;
            $740 = (($$02122$i$i248) + ($739) | 0);
            $741 = (($$02023$i$i247) - ($739)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $742 = ($741 >>> 0) > (63);
            if ($742) {
              $$02023$i$i247 = $741;
              $$02122$i$i248 = $740;
              $$024$i$i246 = 0;
            } else {
              break;
            }
          }
          $743 = ($741 | 0) == (0);
          if (!($743)) {
            $$0$lcssa$i$i251837 = 0;
            $$020$lcssa$i$i250836 = $741;
            $$021$lcssa$i$i249835 = $740;
            label = 158;
          }
        } else {
          $$0$lcssa$i$i251837 = $734;
          $$020$lcssa$i$i250836 = 32;
          $$021$lcssa$i$i249835 = $1;
          label = 158;
        }
        if ((label | 0) == 158) {
          $744 = (($49) + ($$0$lcssa$i$i251837) | 0);
          _memcpy(($744 | 0), ($$021$lcssa$i$i249835 | 0), ($$020$lcssa$i$i250836 | 0)) | 0;
        }
        $745 = HEAP32[$44 >> 2] | 0;
        $746 = $745 & 63;
        $747 = (($745) + ($3)) | 0;
        HEAP32[$44 >> 2] = $747;
        $748 = (($746) + ($3)) | 0;
        $749 = ($748 >>> 0) > (63);
        if ($749) {
          $$02023$i$i256 = $3;
          $$02122$i$i257 = $2;
          $$024$i$i255 = $746;
          while (1) {
            $750 = (($49) + ($$024$i$i255) | 0);
            $751 = (64 - ($$024$i$i255)) | 0;
            _memcpy(($750 | 0), ($$02122$i$i257 | 0), ($751 | 0)) | 0;
            $752 = (($$02122$i$i257) + ($751) | 0);
            $753 = (($$02023$i$i256) - ($751)) | 0;
            _secp256k1_sha256_transform($20, $49);
            $754 = ($753 >>> 0) > (63);
            if ($754) {
              $$02023$i$i256 = $753;
              $$02122$i$i257 = $752;
              $$024$i$i255 = 0;
            } else {
              $$0$lcssa$i$i260 = 0;
              $$020$lcssa$i$i259 = $753;
              $$021$lcssa$i$i258 = $752;
              break;
            }
          }
        } else {
          $$0$lcssa$i$i260 = $746;
          $$020$lcssa$i$i259 = $3;
          $$021$lcssa$i$i258 = $2;
        }
        $755 = ($$020$lcssa$i$i259 | 0) == (0);
        if ($755) {
          $$pre$phiZ2D = $18;
          break;
        }
        $756 = (($49) + ($$0$lcssa$i$i260) | 0);
        _memcpy(($756 | 0), ($$021$lcssa$i$i258 | 0), ($$020$lcssa$i$i259 | 0)) | 0;
        $$pre$phiZ2D = $18;
      }
    } while (0);
    $757 = HEAP32[$44 >> 2] | 0;
    $758 = $757 >>> 29;
    $759 = $758 << 24;
    HEAP32[$7 >> 2] = $759;
    $760 = $757 << 27;
    $761 = $757 << 11;
    $762 = $761 & 16711680;
    $763 = $762 | $760;
    $764 = $757 >>> 5;
    $765 = $764 & 65280;
    $766 = $763 | $765;
    $767 = $757 >>> 21;
    $768 = $767 & 255;
    $769 = $766 | $768;
    $770 = ((($7)) + 4 | 0);
    HEAP32[$770 >> 2] = $769;
    $771 = (119 - ($757)) | 0;
    $772 = $771 & 63;
    $773 = (($772) + 1) | 0;
    $774 = $757 & 63;
    $775 = (($757) + ($773)) | 0;
    HEAP32[$44 >> 2] = $775;
    $776 = (($774) + ($773)) | 0;
    $777 = ($776 >>> 0) > (63);
    if ($777) {
      $$02023$i524 = $773;
      $$02122$i525 = 1612;
      $$024$i523 = $774;
      while (1) {
        $778 = (($49) + ($$024$i523) | 0);
        $779 = (64 - ($$024$i523)) | 0;
        _memcpy(($778 | 0), ($$02122$i525 | 0), ($779 | 0)) | 0;
        $780 = (($$02122$i525) + ($779) | 0);
        $781 = (($$02023$i524) - ($779)) | 0;
        _secp256k1_sha256_transform($20, $49);
        $782 = ($781 >>> 0) > (63);
        if ($782) {
          $$02023$i524 = $781;
          $$02122$i525 = $780;
          $$024$i523 = 0;
        } else {
          break;
        }
      }
      $783 = ($781 | 0) == (0);
      if (!($783)) {
        $$0$lcssa$i528840 = 0;
        $$020$lcssa$i527839 = $781;
        $$021$lcssa$i526838 = $780;
        label = 166;
      }
    } else {
      $$0$lcssa$i528840 = $774;
      $$020$lcssa$i527839 = $773;
      $$021$lcssa$i526838 = 1612;
      label = 166;
    }
    if ((label | 0) == 166) {
      $784 = (($49) + ($$0$lcssa$i528840) | 0);
      _memcpy(($784 | 0), ($$021$lcssa$i526838 | 0), ($$020$lcssa$i527839 | 0)) | 0;
    }
    $785 = HEAP32[$44 >> 2] | 0;
    $786 = $785 & 63;
    $787 = (($785) + 8) | 0;
    HEAP32[$44 >> 2] = $787;
    $788 = (($786) + 8) | 0;
    $789 = ($788 >>> 0) > (63);
    if ($789) {
      $$02023$i443 = 8;
      $$02122$i444 = $7;
      $$024$i442 = $786;
      while (1) {
        $790 = (($49) + ($$024$i442) | 0);
        $791 = (64 - ($$024$i442)) | 0;
        _memcpy(($790 | 0), ($$02122$i444 | 0), ($791 | 0)) | 0;
        $792 = (($$02122$i444) + ($791) | 0);
        $793 = (($$02023$i443) - ($791)) | 0;
        _secp256k1_sha256_transform($20, $49);
        $794 = ($793 >>> 0) > (63);
        if ($794) {
          $$02023$i443 = $793;
          $$02122$i444 = $792;
          $$024$i442 = 0;
        } else {
          break;
        }
      }
      $795 = ($793 | 0) == (0);
      if (!($795)) {
        $$0$lcssa$i447843 = 0;
        $$020$lcssa$i446842 = $793;
        $$021$lcssa$i445841 = $792;
        label = 170;
      }
    } else {
      $$0$lcssa$i447843 = $786;
      $$020$lcssa$i446842 = 8;
      $$021$lcssa$i445841 = $7;
      label = 170;
    }
    if ((label | 0) == 170) {
      $796 = (($49) + ($$0$lcssa$i447843) | 0);
      _memcpy(($796 | 0), ($$021$lcssa$i445841 | 0), ($$020$lcssa$i446842 | 0)) | 0;
    }
    $797 = HEAP32[$20 >> 2] | 0;
    $798 = (_llvm_bswap_i32(($797 | 0)) | 0);
    HEAP32[$20 >> 2] = 0;
    $799 = HEAP32[$37 >> 2] | 0;
    $800 = (_llvm_bswap_i32(($799 | 0)) | 0);
    HEAP32[$37 >> 2] = 0;
    $801 = HEAP32[$38 >> 2] | 0;
    $802 = (_llvm_bswap_i32(($801 | 0)) | 0);
    HEAP32[$38 >> 2] = 0;
    $803 = HEAP32[$39 >> 2] | 0;
    $804 = (_llvm_bswap_i32(($803 | 0)) | 0);
    HEAP32[$39 >> 2] = 0;
    $805 = HEAP32[$40 >> 2] | 0;
    $806 = (_llvm_bswap_i32(($805 | 0)) | 0);
    HEAP32[$40 >> 2] = 0;
    $807 = HEAP32[$41 >> 2] | 0;
    $808 = (_llvm_bswap_i32(($807 | 0)) | 0);
    HEAP32[$41 >> 2] = 0;
    $809 = HEAP32[$42 >> 2] | 0;
    $810 = (_llvm_bswap_i32(($809 | 0)) | 0);
    HEAP32[$42 >> 2] = 0;
    $811 = HEAP32[$43 >> 2] | 0;
    $812 = (_llvm_bswap_i32(($811 | 0)) | 0);
    HEAP32[$43 >> 2] = 0;
    HEAP32[$18 >> 2] = $798;
    $$sroa$4694$0$$sroa_idx = ((($18)) + 4 | 0);
    HEAP32[$$sroa$4694$0$$sroa_idx >> 2] = $800;
    $$sroa$5696$0$$sroa_idx = ((($18)) + 8 | 0);
    HEAP32[$$sroa$5696$0$$sroa_idx >> 2] = $802;
    $$sroa$6698$0$$sroa_idx = ((($18)) + 12 | 0);
    HEAP32[$$sroa$6698$0$$sroa_idx >> 2] = $804;
    $$sroa$7700$0$$sroa_idx = ((($18)) + 16 | 0);
    HEAP32[$$sroa$7700$0$$sroa_idx >> 2] = $806;
    $$sroa$8702$0$$sroa_idx = ((($18)) + 20 | 0);
    HEAP32[$$sroa$8702$0$$sroa_idx >> 2] = $808;
    $$sroa$9704$0$$sroa_idx = ((($18)) + 24 | 0);
    HEAP32[$$sroa$9704$0$$sroa_idx >> 2] = $810;
    $$sroa$10706$0$$sroa_idx = ((($18)) + 28 | 0);
    HEAP32[$$sroa$10706$0$$sroa_idx >> 2] = $812;
    $813 = HEAP32[$31 >> 2] | 0;
    $814 = $813 & 63;
    $815 = (($813) + 32) | 0;
    HEAP32[$31 >> 2] = $815;
    $816 = (($814) + 32) | 0;
    $817 = ($816 >>> 0) > (63);
    if ($817) {
      $$02023$i$i265 = 32;
      $$02122$i$i266 = $$pre$phiZ2D;
      $$024$i$i264 = $814;
      while (1) {
        $818 = (($36) + ($$024$i$i264) | 0);
        $819 = (64 - ($$024$i$i264)) | 0;
        _memcpy(($818 | 0), ($$02122$i$i266 | 0), ($819 | 0)) | 0;
        $820 = (($$02122$i$i266) + ($819) | 0);
        $821 = (($$02023$i$i265) - ($819)) | 0;
        _secp256k1_sha256_transform($23, $36);
        $822 = ($821 >>> 0) > (63);
        if ($822) {
          $$02023$i$i265 = $821;
          $$02122$i$i266 = $820;
          $$024$i$i264 = 0;
        } else {
          break;
        }
      }
      $823 = ($821 | 0) == (0);
      if (!($823)) {
        $$0$lcssa$i6$i268 = 0;
        $$020$lcssa$i5$i269 = $821;
        $$021$lcssa$i4$i270 = $820;
        label = 174;
      }
    } else {
      $$0$lcssa$i6$i268 = $814;
      $$020$lcssa$i5$i269 = 32;
      $$021$lcssa$i4$i270 = $$pre$phiZ2D;
      label = 174;
    }
    if ((label | 0) == 174) {
      $824 = (($36) + ($$0$lcssa$i6$i268) | 0);
      _memcpy(($824 | 0), ($$021$lcssa$i4$i270 | 0), ($$020$lcssa$i5$i269 | 0)) | 0;
    }
    $825 = HEAP32[$31 >> 2] | 0;
    $826 = $825 >>> 29;
    $827 = $826 << 24;
    HEAP32[$13 >> 2] = $827;
    $828 = $825 << 27;
    $829 = $825 << 11;
    $830 = $829 & 16711680;
    $831 = $830 | $828;
    $832 = $825 >>> 5;
    $833 = $832 & 65280;
    $834 = $831 | $833;
    $835 = $825 >>> 21;
    $836 = $835 & 255;
    $837 = $834 | $836;
    $838 = ((($13)) + 4 | 0);
    HEAP32[$838 >> 2] = $837;
    $839 = (119 - ($825)) | 0;
    $840 = $839 & 63;
    $841 = (($840) + 1) | 0;
    $842 = $825 & 63;
    $843 = (($825) + ($841)) | 0;
    HEAP32[$31 >> 2] = $843;
    $844 = (($842) + ($841)) | 0;
    $845 = ($844 >>> 0) > (63);
    if ($845) {
      $$02023$i452 = $841;
      $$02122$i453 = 1612;
      $$024$i451 = $842;
      while (1) {
        $846 = (($36) + ($$024$i451) | 0);
        $847 = (64 - ($$024$i451)) | 0;
        _memcpy(($846 | 0), ($$02122$i453 | 0), ($847 | 0)) | 0;
        $848 = (($$02122$i453) + ($847) | 0);
        $849 = (($$02023$i452) - ($847)) | 0;
        _secp256k1_sha256_transform($23, $36);
        $850 = ($849 >>> 0) > (63);
        if ($850) {
          $$02023$i452 = $849;
          $$02122$i453 = $848;
          $$024$i451 = 0;
        } else {
          break;
        }
      }
      $851 = ($849 | 0) == (0);
      if (!($851)) {
        $$0$lcssa$i456846 = 0;
        $$020$lcssa$i455845 = $849;
        $$021$lcssa$i454844 = $848;
        label = 178;
      }
    } else {
      $$0$lcssa$i456846 = $842;
      $$020$lcssa$i455845 = $841;
      $$021$lcssa$i454844 = 1612;
      label = 178;
    }
    if ((label | 0) == 178) {
      $852 = (($36) + ($$0$lcssa$i456846) | 0);
      _memcpy(($852 | 0), ($$021$lcssa$i454844 | 0), ($$020$lcssa$i455845 | 0)) | 0;
    }
    $853 = HEAP32[$31 >> 2] | 0;
    $854 = $853 & 63;
    $855 = (($853) + 8) | 0;
    HEAP32[$31 >> 2] = $855;
    $856 = (($854) + 8) | 0;
    $857 = ($856 >>> 0) > (63);
    if ($857) {
      $$02023$i275 = 8;
      $$02122$i276 = $13;
      $$024$i274 = $854;
      while (1) {
        $858 = (($36) + ($$024$i274) | 0);
        $859 = (64 - ($$024$i274)) | 0;
        _memcpy(($858 | 0), ($$02122$i276 | 0), ($859 | 0)) | 0;
        $860 = (($$02122$i276) + ($859) | 0);
        $861 = (($$02023$i275) - ($859)) | 0;
        _secp256k1_sha256_transform($23, $36);
        $862 = ($861 >>> 0) > (63);
        if ($862) {
          $$02023$i275 = $861;
          $$02122$i276 = $860;
          $$024$i274 = 0;
        } else {
          break;
        }
      }
      $863 = ($861 | 0) == (0);
      if (!($863)) {
        $$0$lcssa$i279849 = 0;
        $$020$lcssa$i278848 = $861;
        $$021$lcssa$i277847 = $860;
        label = 182;
      }
    } else {
      $$0$lcssa$i279849 = $854;
      $$020$lcssa$i278848 = 8;
      $$021$lcssa$i277847 = $13;
      label = 182;
    }
    if ((label | 0) == 182) {
      $864 = (($36) + ($$0$lcssa$i279849) | 0);
      _memcpy(($864 | 0), ($$021$lcssa$i277847 | 0), ($$020$lcssa$i278848 | 0)) | 0;
    }
    $865 = HEAP32[$23 >> 2] | 0;
    $866 = (_llvm_bswap_i32(($865 | 0)) | 0);
    $867 = HEAP32[$24 >> 2] | 0;
    $868 = (_llvm_bswap_i32(($867 | 0)) | 0);
    $869 = HEAP32[$25 >> 2] | 0;
    $870 = (_llvm_bswap_i32(($869 | 0)) | 0);
    $871 = HEAP32[$26 >> 2] | 0;
    $872 = (_llvm_bswap_i32(($871 | 0)) | 0);
    $873 = HEAP32[$27 >> 2] | 0;
    $874 = (_llvm_bswap_i32(($873 | 0)) | 0);
    $875 = HEAP32[$28 >> 2] | 0;
    $876 = (_llvm_bswap_i32(($875 | 0)) | 0);
    $877 = HEAP32[$29 >> 2] | 0;
    $878 = (_llvm_bswap_i32(($877 | 0)) | 0);
    $879 = HEAP32[$30 >> 2] | 0;
    $880 = (_llvm_bswap_i32(($879 | 0)) | 0);
    $$sroa$0596$0$$sroa_idx = ((($0)) + 32 | 0);
    HEAP8[$$sroa$0596$0$$sroa_idx >> 0] = $866 & 255;
    HEAP8[$$sroa$0596$0$$sroa_idx + 1 >> 0] = ($866 >> 8) & 255;
    HEAP8[$$sroa$0596$0$$sroa_idx + 2 >> 0] = ($866 >> 16) & 255;
    HEAP8[$$sroa$0596$0$$sroa_idx + 3 >> 0] = $866 >> 24;
    $$sroa$4598$0$$sroa_idx = ((($0)) + 36 | 0);
    HEAP8[$$sroa$4598$0$$sroa_idx >> 0] = $868 & 255;
    HEAP8[$$sroa$4598$0$$sroa_idx + 1 >> 0] = ($868 >> 8) & 255;
    HEAP8[$$sroa$4598$0$$sroa_idx + 2 >> 0] = ($868 >> 16) & 255;
    HEAP8[$$sroa$4598$0$$sroa_idx + 3 >> 0] = $868 >> 24;
    $$sroa$5600$0$$sroa_idx = ((($0)) + 40 | 0);
    HEAP8[$$sroa$5600$0$$sroa_idx >> 0] = $870 & 255;
    HEAP8[$$sroa$5600$0$$sroa_idx + 1 >> 0] = ($870 >> 8) & 255;
    HEAP8[$$sroa$5600$0$$sroa_idx + 2 >> 0] = ($870 >> 16) & 255;
    HEAP8[$$sroa$5600$0$$sroa_idx + 3 >> 0] = $870 >> 24;
    $$sroa$6602$0$$sroa_idx = ((($0)) + 44 | 0);
    HEAP8[$$sroa$6602$0$$sroa_idx >> 0] = $872 & 255;
    HEAP8[$$sroa$6602$0$$sroa_idx + 1 >> 0] = ($872 >> 8) & 255;
    HEAP8[$$sroa$6602$0$$sroa_idx + 2 >> 0] = ($872 >> 16) & 255;
    HEAP8[$$sroa$6602$0$$sroa_idx + 3 >> 0] = $872 >> 24;
    $$sroa$7604$0$$sroa_idx = ((($0)) + 48 | 0);
    HEAP8[$$sroa$7604$0$$sroa_idx >> 0] = $874 & 255;
    HEAP8[$$sroa$7604$0$$sroa_idx + 1 >> 0] = ($874 >> 8) & 255;
    HEAP8[$$sroa$7604$0$$sroa_idx + 2 >> 0] = ($874 >> 16) & 255;
    HEAP8[$$sroa$7604$0$$sroa_idx + 3 >> 0] = $874 >> 24;
    $$sroa$8606$0$$sroa_idx = ((($0)) + 52 | 0);
    HEAP8[$$sroa$8606$0$$sroa_idx >> 0] = $876 & 255;
    HEAP8[$$sroa$8606$0$$sroa_idx + 1 >> 0] = ($876 >> 8) & 255;
    HEAP8[$$sroa$8606$0$$sroa_idx + 2 >> 0] = ($876 >> 16) & 255;
    HEAP8[$$sroa$8606$0$$sroa_idx + 3 >> 0] = $876 >> 24;
    $$sroa$9608$0$$sroa_idx = ((($0)) + 56 | 0);
    HEAP8[$$sroa$9608$0$$sroa_idx >> 0] = $878 & 255;
    HEAP8[$$sroa$9608$0$$sroa_idx + 1 >> 0] = ($878 >> 8) & 255;
    HEAP8[$$sroa$9608$0$$sroa_idx + 2 >> 0] = ($878 >> 16) & 255;
    HEAP8[$$sroa$9608$0$$sroa_idx + 3 >> 0] = $878 >> 24;
    $$sroa$10610$0$$sroa_idx = ((($0)) + 60 | 0);
    HEAP8[$$sroa$10610$0$$sroa_idx >> 0] = $880 & 255;
    HEAP8[$$sroa$10610$0$$sroa_idx + 1 >> 0] = ($880 >> 8) & 255;
    HEAP8[$$sroa$10610$0$$sroa_idx + 2 >> 0] = ($880 >> 16) & 255;
    HEAP8[$$sroa$10610$0$$sroa_idx + 3 >> 0] = $880 >> 24;
    dest = $19;
    src = $21;
    stop = dest + 32 | 0;
    do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $22;
    stop = dest + 32 | 0;
    do {
      HEAP8[dest >> 0] = 0 | 0;
      dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP32[$23 >> 2] = 1779033703;
    HEAP32[$24 >> 2] = -1150833019;
    HEAP32[$25 >> 2] = 1013904242;
    HEAP32[$26 >> 2] = -1521486534;
    HEAP32[$27 >> 2] = 1359893119;
    HEAP32[$28 >> 2] = -1694144372;
    HEAP32[$29 >> 2] = 528734635;
    HEAP32[$30 >> 2] = 1541459225;
    HEAP32[$31 >> 2] = 0;
    $$02$i282 = 0;
    while (1) {
      $881 = (($19) + ($$02$i282) | 0);
      $882 = HEAP8[$881 >> 0] | 0;
      $883 = $882 ^ 92;
      HEAP8[$881 >> 0] = $883;
      $884 = (($$02$i282) + 1) | 0;
      $exitcond3$i283 = ($884 | 0) == (64);
      if ($exitcond3$i283) {
        break;
      } else {
        $$02$i282 = $884;
      }
    }
    HEAP32[$31 >> 2] = 64;
    dest = $36;
    src = $19;
    stop = dest + 64 | 0;
    do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_sha256_transform($23, $36);
    HEAP32[$20 >> 2] = 1779033703;
    HEAP32[$37 >> 2] = -1150833019;
    HEAP32[$38 >> 2] = 1013904242;
    HEAP32[$39 >> 2] = -1521486534;
    HEAP32[$40 >> 2] = 1359893119;
    HEAP32[$41 >> 2] = -1694144372;
    HEAP32[$42 >> 2] = 528734635;
    HEAP32[$43 >> 2] = 1541459225;
    HEAP32[$44 >> 2] = 0;
    $$11$i284 = 0;
    while (1) {
      $885 = (($19) + ($$11$i284) | 0);
      $886 = HEAP8[$885 >> 0] | 0;
      $887 = $886 ^ 106;
      HEAP8[$885 >> 0] = $887;
      $888 = (($$11$i284) + 1) | 0;
      $exitcond$i285 = ($888 | 0) == (64);
      if ($exitcond$i285) {
        break;
      } else {
        $$11$i284 = $888;
      }
    }
    HEAP32[$44 >> 2] = 64;
    dest = $49;
    src = $19;
    stop = dest + 64 | 0;
    do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_sha256_transform($20, $49);
    $889 = HEAP32[$44 >> 2] | 0;
    $890 = $889 & 63;
    $891 = (($889) + 32) | 0;
    HEAP32[$44 >> 2] = $891;
    $892 = (($890) + 32) | 0;
    $893 = ($892 >>> 0) > (63);
    if ($893) {
      $$02023$i$i298 = 32;
      $$02122$i$i299 = $0;
      $$024$i$i297 = $890;
      while (1) {
        $894 = (($49) + ($$024$i$i297) | 0);
        $895 = (64 - ($$024$i$i297)) | 0;
        _memcpy(($894 | 0), ($$02122$i$i299 | 0), ($895 | 0)) | 0;
        $896 = (($$02122$i$i299) + ($895) | 0);
        $897 = (($$02023$i$i298) - ($895)) | 0;
        _secp256k1_sha256_transform($20, $49);
        $898 = ($897 >>> 0) > (63);
        if ($898) {
          $$02023$i$i298 = $897;
          $$02122$i$i299 = $896;
          $$024$i$i297 = 0;
        } else {
          break;
        }
      }
      $899 = ($897 | 0) == (0);
      if (!($899)) {
        $$0$lcssa$i$i302858 = 0;
        $$020$lcssa$i$i301857 = $897;
        $$021$lcssa$i$i300856 = $896;
        label = 190;
      }
    } else {
      $$0$lcssa$i$i302858 = $890;
      $$020$lcssa$i$i301857 = 32;
      $$021$lcssa$i$i300856 = $0;
      label = 190;
    }
    if ((label | 0) == 190) {
      $900 = (($49) + ($$0$lcssa$i$i302858) | 0);
      _memcpy(($900 | 0), ($$021$lcssa$i$i300856 | 0), ($$020$lcssa$i$i301857 | 0)) | 0;
    }
    $901 = HEAP32[$44 >> 2] | 0;
    $902 = $901 >>> 29;
    $903 = $902 << 24;
    HEAP32[$6 >> 2] = $903;
    $904 = $901 << 27;
    $905 = $901 << 11;
    $906 = $905 & 16711680;
    $907 = $906 | $904;
    $908 = $901 >>> 5;
    $909 = $908 & 65280;
    $910 = $907 | $909;
    $911 = $901 >>> 21;
    $912 = $911 & 255;
    $913 = $910 | $912;
    $914 = ((($6)) + 4 | 0);
    HEAP32[$914 >> 2] = $913;
    $915 = (119 - ($901)) | 0;
    $916 = $915 & 63;
    $917 = (($916) + 1) | 0;
    $918 = $901 & 63;
    $919 = (($901) + ($917)) | 0;
    HEAP32[$44 >> 2] = $919;
    $920 = (($918) + ($917)) | 0;
    $921 = ($920 >>> 0) > (63);
    if ($921) {
      $$02023$i533 = $917;
      $$02122$i534 = 1612;
      $$024$i532 = $918;
      while (1) {
        $922 = (($49) + ($$024$i532) | 0);
        $923 = (64 - ($$024$i532)) | 0;
        _memcpy(($922 | 0), ($$02122$i534 | 0), ($923 | 0)) | 0;
        $924 = (($$02122$i534) + ($923) | 0);
        $925 = (($$02023$i533) - ($923)) | 0;
        _secp256k1_sha256_transform($20, $49);
        $926 = ($925 >>> 0) > (63);
        if ($926) {
          $$02023$i533 = $925;
          $$02122$i534 = $924;
          $$024$i532 = 0;
        } else {
          break;
        }
      }
      $927 = ($925 | 0) == (0);
      if (!($927)) {
        $$0$lcssa$i537861 = 0;
        $$020$lcssa$i536860 = $925;
        $$021$lcssa$i535859 = $924;
        label = 194;
      }
    } else {
      $$0$lcssa$i537861 = $918;
      $$020$lcssa$i536860 = $917;
      $$021$lcssa$i535859 = 1612;
      label = 194;
    }
    if ((label | 0) == 194) {
      $928 = (($49) + ($$0$lcssa$i537861) | 0);
      _memcpy(($928 | 0), ($$021$lcssa$i535859 | 0), ($$020$lcssa$i536860 | 0)) | 0;
    }
    $929 = HEAP32[$44 >> 2] | 0;
    $930 = $929 & 63;
    $931 = (($929) + 8) | 0;
    HEAP32[$44 >> 2] = $931;
    $932 = (($930) + 8) | 0;
    $933 = ($932 >>> 0) > (63);
    if ($933) {
      $$02023$i470 = 8;
      $$02122$i471 = $6;
      $$024$i469 = $930;
      while (1) {
        $934 = (($49) + ($$024$i469) | 0);
        $935 = (64 - ($$024$i469)) | 0;
        _memcpy(($934 | 0), ($$02122$i471 | 0), ($935 | 0)) | 0;
        $936 = (($$02122$i471) + ($935) | 0);
        $937 = (($$02023$i470) - ($935)) | 0;
        _secp256k1_sha256_transform($20, $49);
        $938 = ($937 >>> 0) > (63);
        if ($938) {
          $$02023$i470 = $937;
          $$02122$i471 = $936;
          $$024$i469 = 0;
        } else {
          break;
        }
      }
      $939 = ($937 | 0) == (0);
      if (!($939)) {
        $$0$lcssa$i474864 = 0;
        $$020$lcssa$i473863 = $937;
        $$021$lcssa$i472862 = $936;
        label = 198;
      }
    } else {
      $$0$lcssa$i474864 = $930;
      $$020$lcssa$i473863 = 8;
      $$021$lcssa$i472862 = $6;
      label = 198;
    }
    if ((label | 0) == 198) {
      $940 = (($49) + ($$0$lcssa$i474864) | 0);
      _memcpy(($940 | 0), ($$021$lcssa$i472862 | 0), ($$020$lcssa$i473863 | 0)) | 0;
    }
    $941 = HEAP32[$20 >> 2] | 0;
    $942 = (_llvm_bswap_i32(($941 | 0)) | 0);
    HEAP32[$20 >> 2] = 0;
    $943 = HEAP32[$37 >> 2] | 0;
    $944 = (_llvm_bswap_i32(($943 | 0)) | 0);
    HEAP32[$37 >> 2] = 0;
    $945 = HEAP32[$38 >> 2] | 0;
    $946 = (_llvm_bswap_i32(($945 | 0)) | 0);
    HEAP32[$38 >> 2] = 0;
    $947 = HEAP32[$39 >> 2] | 0;
    $948 = (_llvm_bswap_i32(($947 | 0)) | 0);
    HEAP32[$39 >> 2] = 0;
    $949 = HEAP32[$40 >> 2] | 0;
    $950 = (_llvm_bswap_i32(($949 | 0)) | 0);
    HEAP32[$40 >> 2] = 0;
    $951 = HEAP32[$41 >> 2] | 0;
    $952 = (_llvm_bswap_i32(($951 | 0)) | 0);
    HEAP32[$41 >> 2] = 0;
    $953 = HEAP32[$42 >> 2] | 0;
    $954 = (_llvm_bswap_i32(($953 | 0)) | 0);
    HEAP32[$42 >> 2] = 0;
    $955 = HEAP32[$43 >> 2] | 0;
    $956 = (_llvm_bswap_i32(($955 | 0)) | 0);
    HEAP32[$43 >> 2] = 0;
    HEAP32[$18 >> 2] = $942;
    HEAP32[$$sroa$4694$0$$sroa_idx >> 2] = $944;
    HEAP32[$$sroa$5696$0$$sroa_idx >> 2] = $946;
    HEAP32[$$sroa$6698$0$$sroa_idx >> 2] = $948;
    HEAP32[$$sroa$7700$0$$sroa_idx >> 2] = $950;
    HEAP32[$$sroa$8702$0$$sroa_idx >> 2] = $952;
    HEAP32[$$sroa$9704$0$$sroa_idx >> 2] = $954;
    HEAP32[$$sroa$10706$0$$sroa_idx >> 2] = $956;
    $957 = HEAP32[$31 >> 2] | 0;
    $958 = $957 & 63;
    $959 = (($957) + 32) | 0;
    HEAP32[$31 >> 2] = $959;
    $960 = (($958) + 32) | 0;
    $961 = ($960 >>> 0) > (63);
    if ($961) {
      $$02023$i$i307 = 32;
      $$02122$i$i308 = $$pre$phiZ2D;
      $$024$i$i306 = $958;
      while (1) {
        $962 = (($36) + ($$024$i$i306) | 0);
        $963 = (64 - ($$024$i$i306)) | 0;
        _memcpy(($962 | 0), ($$02122$i$i308 | 0), ($963 | 0)) | 0;
        $964 = (($$02122$i$i308) + ($963) | 0);
        $965 = (($$02023$i$i307) - ($963)) | 0;
        _secp256k1_sha256_transform($23, $36);
        $966 = ($965 >>> 0) > (63);
        if ($966) {
          $$02023$i$i307 = $965;
          $$02122$i$i308 = $964;
          $$024$i$i306 = 0;
        } else {
          break;
        }
      }
      $967 = ($965 | 0) == (0);
      if (!($967)) {
        $$0$lcssa$i6$i310 = 0;
        $$020$lcssa$i5$i311 = $965;
        $$021$lcssa$i4$i312 = $964;
        label = 202;
      }
    } else {
      $$0$lcssa$i6$i310 = $958;
      $$020$lcssa$i5$i311 = 32;
      $$021$lcssa$i4$i312 = $$pre$phiZ2D;
      label = 202;
    }
    if ((label | 0) == 202) {
      $968 = (($36) + ($$0$lcssa$i6$i310) | 0);
      _memcpy(($968 | 0), ($$021$lcssa$i4$i312 | 0), ($$020$lcssa$i5$i311 | 0)) | 0;
    }
    $969 = HEAP32[$31 >> 2] | 0;
    $970 = $969 >>> 29;
    $971 = $970 << 24;
    HEAP32[$12 >> 2] = $971;
    $972 = $969 << 27;
    $973 = $969 << 11;
    $974 = $973 & 16711680;
    $975 = $974 | $972;
    $976 = $969 >>> 5;
    $977 = $976 & 65280;
    $978 = $975 | $977;
    $979 = $969 >>> 21;
    $980 = $979 & 255;
    $981 = $978 | $980;
    $982 = ((($12)) + 4 | 0);
    HEAP32[$982 >> 2] = $981;
    $983 = (119 - ($969)) | 0;
    $984 = $983 & 63;
    $985 = (($984) + 1) | 0;
    $986 = $969 & 63;
    $987 = (($969) + ($985)) | 0;
    HEAP32[$31 >> 2] = $987;
    $988 = (($986) + ($985)) | 0;
    $989 = ($988 >>> 0) > (63);
    if ($989) {
      $$02023$i479 = $985;
      $$02122$i480 = 1612;
      $$024$i478 = $986;
      while (1) {
        $990 = (($36) + ($$024$i478) | 0);
        $991 = (64 - ($$024$i478)) | 0;
        _memcpy(($990 | 0), ($$02122$i480 | 0), ($991 | 0)) | 0;
        $992 = (($$02122$i480) + ($991) | 0);
        $993 = (($$02023$i479) - ($991)) | 0;
        _secp256k1_sha256_transform($23, $36);
        $994 = ($993 >>> 0) > (63);
        if ($994) {
          $$02023$i479 = $993;
          $$02122$i480 = $992;
          $$024$i478 = 0;
        } else {
          break;
        }
      }
      $995 = ($993 | 0) == (0);
      if (!($995)) {
        $$0$lcssa$i483867 = 0;
        $$020$lcssa$i482866 = $993;
        $$021$lcssa$i481865 = $992;
        label = 206;
      }
    } else {
      $$0$lcssa$i483867 = $986;
      $$020$lcssa$i482866 = $985;
      $$021$lcssa$i481865 = 1612;
      label = 206;
    }
    if ((label | 0) == 206) {
      $996 = (($36) + ($$0$lcssa$i483867) | 0);
      _memcpy(($996 | 0), ($$021$lcssa$i481865 | 0), ($$020$lcssa$i482866 | 0)) | 0;
    }
    $997 = HEAP32[$31 >> 2] | 0;
    $998 = $997 & 63;
    $999 = (($997) + 8) | 0;
    HEAP32[$31 >> 2] = $999;
    $1000 = (($998) + 8) | 0;
    $1001 = ($1000 >>> 0) > (63);
    if ($1001) {
      $$02023$i317 = 8;
      $$02122$i318 = $12;
      $$024$i316 = $998;
      while (1) {
        $1002 = (($36) + ($$024$i316) | 0);
        $1003 = (64 - ($$024$i316)) | 0;
        _memcpy(($1002 | 0), ($$02122$i318 | 0), ($1003 | 0)) | 0;
        $1004 = (($$02122$i318) + ($1003) | 0);
        $1005 = (($$02023$i317) - ($1003)) | 0;
        _secp256k1_sha256_transform($23, $36);
        $1006 = ($1005 >>> 0) > (63);
        if ($1006) {
          $$02023$i317 = $1005;
          $$02122$i318 = $1004;
          $$024$i316 = 0;
        } else {
          break;
        }
      }
      $1007 = ($1005 | 0) == (0);
      if ($1007) {
        $1009 = HEAP32[$23 >> 2] | 0;
        $1010 = (_llvm_bswap_i32(($1009 | 0)) | 0);
        HEAP32[$23 >> 2] = 0;
        $1011 = HEAP32[$24 >> 2] | 0;
        $1012 = (_llvm_bswap_i32(($1011 | 0)) | 0);
        HEAP32[$24 >> 2] = 0;
        $1013 = HEAP32[$25 >> 2] | 0;
        $1014 = (_llvm_bswap_i32(($1013 | 0)) | 0);
        HEAP32[$25 >> 2] = 0;
        $1015 = HEAP32[$26 >> 2] | 0;
        $1016 = (_llvm_bswap_i32(($1015 | 0)) | 0);
        HEAP32[$26 >> 2] = 0;
        $1017 = HEAP32[$27 >> 2] | 0;
        $1018 = (_llvm_bswap_i32(($1017 | 0)) | 0);
        HEAP32[$27 >> 2] = 0;
        $1019 = HEAP32[$28 >> 2] | 0;
        $1020 = (_llvm_bswap_i32(($1019 | 0)) | 0);
        HEAP32[$28 >> 2] = 0;
        $1021 = HEAP32[$29 >> 2] | 0;
        $1022 = (_llvm_bswap_i32(($1021 | 0)) | 0);
        HEAP32[$29 >> 2] = 0;
        $1023 = HEAP32[$30 >> 2] | 0;
        $1024 = (_llvm_bswap_i32(($1023 | 0)) | 0);
        HEAP8[$0 >> 0] = $1010 & 255;
        HEAP8[$0 + 1 >> 0] = ($1010 >> 8) & 255;
        HEAP8[$0 + 2 >> 0] = ($1010 >> 16) & 255;
        HEAP8[$0 + 3 >> 0] = $1010 >> 24;
        $$sroa$4614$0$$sroa_idx = ((($0)) + 4 | 0);
        HEAP8[$$sroa$4614$0$$sroa_idx >> 0] = $1012 & 255;
        HEAP8[$$sroa$4614$0$$sroa_idx + 1 >> 0] = ($1012 >> 8) & 255;
        HEAP8[$$sroa$4614$0$$sroa_idx + 2 >> 0] = ($1012 >> 16) & 255;
        HEAP8[$$sroa$4614$0$$sroa_idx + 3 >> 0] = $1012 >> 24;
        $$sroa$5616$0$$sroa_idx = ((($0)) + 8 | 0);
        HEAP8[$$sroa$5616$0$$sroa_idx >> 0] = $1014 & 255;
        HEAP8[$$sroa$5616$0$$sroa_idx + 1 >> 0] = ($1014 >> 8) & 255;
        HEAP8[$$sroa$5616$0$$sroa_idx + 2 >> 0] = ($1014 >> 16) & 255;
        HEAP8[$$sroa$5616$0$$sroa_idx + 3 >> 0] = $1014 >> 24;
        $$sroa$6618$0$$sroa_idx = ((($0)) + 12 | 0);
        HEAP8[$$sroa$6618$0$$sroa_idx >> 0] = $1016 & 255;
        HEAP8[$$sroa$6618$0$$sroa_idx + 1 >> 0] = ($1016 >> 8) & 255;
        HEAP8[$$sroa$6618$0$$sroa_idx + 2 >> 0] = ($1016 >> 16) & 255;
        HEAP8[$$sroa$6618$0$$sroa_idx + 3 >> 0] = $1016 >> 24;
        $$sroa$7620$0$$sroa_idx = ((($0)) + 16 | 0);
        HEAP8[$$sroa$7620$0$$sroa_idx >> 0] = $1018 & 255;
        HEAP8[$$sroa$7620$0$$sroa_idx + 1 >> 0] = ($1018 >> 8) & 255;
        HEAP8[$$sroa$7620$0$$sroa_idx + 2 >> 0] = ($1018 >> 16) & 255;
        HEAP8[$$sroa$7620$0$$sroa_idx + 3 >> 0] = $1018 >> 24;
        $$sroa$8622$0$$sroa_idx = ((($0)) + 20 | 0);
        HEAP8[$$sroa$8622$0$$sroa_idx >> 0] = $1020 & 255;
        HEAP8[$$sroa$8622$0$$sroa_idx + 1 >> 0] = ($1020 >> 8) & 255;
        HEAP8[$$sroa$8622$0$$sroa_idx + 2 >> 0] = ($1020 >> 16) & 255;
        HEAP8[$$sroa$8622$0$$sroa_idx + 3 >> 0] = $1020 >> 24;
        $$sroa$9624$0$$sroa_idx = ((($0)) + 24 | 0);
        HEAP8[$$sroa$9624$0$$sroa_idx >> 0] = $1022 & 255;
        HEAP8[$$sroa$9624$0$$sroa_idx + 1 >> 0] = ($1022 >> 8) & 255;
        HEAP8[$$sroa$9624$0$$sroa_idx + 2 >> 0] = ($1022 >> 16) & 255;
        HEAP8[$$sroa$9624$0$$sroa_idx + 3 >> 0] = $1022 >> 24;
        $$sroa$10626$0$$sroa_idx = ((($0)) + 28 | 0);
        HEAP8[$$sroa$10626$0$$sroa_idx >> 0] = $1024 & 255;
        HEAP8[$$sroa$10626$0$$sroa_idx + 1 >> 0] = ($1024 >> 8) & 255;
        HEAP8[$$sroa$10626$0$$sroa_idx + 2 >> 0] = ($1024 >> 16) & 255;
        HEAP8[$$sroa$10626$0$$sroa_idx + 3 >> 0] = $1024 >> 24;
        $1025 = ((($0)) + 64 | 0);
        HEAP32[$1025 >> 2] = 0;
        STACKTOP = sp;
        return;
      } else {
        $$0$lcssa$i321870 = 0;
        $$020$lcssa$i320869 = $1005;
        $$021$lcssa$i319868 = $1004;
      }
    } else {
      $$0$lcssa$i321870 = $998;
      $$020$lcssa$i320869 = 8;
      $$021$lcssa$i319868 = $12;
    }
    $1008 = (($36) + ($$0$lcssa$i321870) | 0);
    _memcpy(($1008 | 0), ($$021$lcssa$i319868 | 0), ($$020$lcssa$i320869 | 0)) | 0;
    $1009 = HEAP32[$23 >> 2] | 0;
    $1010 = (_llvm_bswap_i32(($1009 | 0)) | 0);
    HEAP32[$23 >> 2] = 0;
    $1011 = HEAP32[$24 >> 2] | 0;
    $1012 = (_llvm_bswap_i32(($1011 | 0)) | 0);
    HEAP32[$24 >> 2] = 0;
    $1013 = HEAP32[$25 >> 2] | 0;
    $1014 = (_llvm_bswap_i32(($1013 | 0)) | 0);
    HEAP32[$25 >> 2] = 0;
    $1015 = HEAP32[$26 >> 2] | 0;
    $1016 = (_llvm_bswap_i32(($1015 | 0)) | 0);
    HEAP32[$26 >> 2] = 0;
    $1017 = HEAP32[$27 >> 2] | 0;
    $1018 = (_llvm_bswap_i32(($1017 | 0)) | 0);
    HEAP32[$27 >> 2] = 0;
    $1019 = HEAP32[$28 >> 2] | 0;
    $1020 = (_llvm_bswap_i32(($1019 | 0)) | 0);
    HEAP32[$28 >> 2] = 0;
    $1021 = HEAP32[$29 >> 2] | 0;
    $1022 = (_llvm_bswap_i32(($1021 | 0)) | 0);
    HEAP32[$29 >> 2] = 0;
    $1023 = HEAP32[$30 >> 2] | 0;
    $1024 = (_llvm_bswap_i32(($1023 | 0)) | 0);
    HEAP8[$0 >> 0] = $1010 & 255;
    HEAP8[$0 + 1 >> 0] = ($1010 >> 8) & 255;
    HEAP8[$0 + 2 >> 0] = ($1010 >> 16) & 255;
    HEAP8[$0 + 3 >> 0] = $1010 >> 24;
    $$sroa$4614$0$$sroa_idx = ((($0)) + 4 | 0);
    HEAP8[$$sroa$4614$0$$sroa_idx >> 0] = $1012 & 255;
    HEAP8[$$sroa$4614$0$$sroa_idx + 1 >> 0] = ($1012 >> 8) & 255;
    HEAP8[$$sroa$4614$0$$sroa_idx + 2 >> 0] = ($1012 >> 16) & 255;
    HEAP8[$$sroa$4614$0$$sroa_idx + 3 >> 0] = $1012 >> 24;
    $$sroa$5616$0$$sroa_idx = ((($0)) + 8 | 0);
    HEAP8[$$sroa$5616$0$$sroa_idx >> 0] = $1014 & 255;
    HEAP8[$$sroa$5616$0$$sroa_idx + 1 >> 0] = ($1014 >> 8) & 255;
    HEAP8[$$sroa$5616$0$$sroa_idx + 2 >> 0] = ($1014 >> 16) & 255;
    HEAP8[$$sroa$5616$0$$sroa_idx + 3 >> 0] = $1014 >> 24;
    $$sroa$6618$0$$sroa_idx = ((($0)) + 12 | 0);
    HEAP8[$$sroa$6618$0$$sroa_idx >> 0] = $1016 & 255;
    HEAP8[$$sroa$6618$0$$sroa_idx + 1 >> 0] = ($1016 >> 8) & 255;
    HEAP8[$$sroa$6618$0$$sroa_idx + 2 >> 0] = ($1016 >> 16) & 255;
    HEAP8[$$sroa$6618$0$$sroa_idx + 3 >> 0] = $1016 >> 24;
    $$sroa$7620$0$$sroa_idx = ((($0)) + 16 | 0);
    HEAP8[$$sroa$7620$0$$sroa_idx >> 0] = $1018 & 255;
    HEAP8[$$sroa$7620$0$$sroa_idx + 1 >> 0] = ($1018 >> 8) & 255;
    HEAP8[$$sroa$7620$0$$sroa_idx + 2 >> 0] = ($1018 >> 16) & 255;
    HEAP8[$$sroa$7620$0$$sroa_idx + 3 >> 0] = $1018 >> 24;
    $$sroa$8622$0$$sroa_idx = ((($0)) + 20 | 0);
    HEAP8[$$sroa$8622$0$$sroa_idx >> 0] = $1020 & 255;
    HEAP8[$$sroa$8622$0$$sroa_idx + 1 >> 0] = ($1020 >> 8) & 255;
    HEAP8[$$sroa$8622$0$$sroa_idx + 2 >> 0] = ($1020 >> 16) & 255;
    HEAP8[$$sroa$8622$0$$sroa_idx + 3 >> 0] = $1020 >> 24;
    $$sroa$9624$0$$sroa_idx = ((($0)) + 24 | 0);
    HEAP8[$$sroa$9624$0$$sroa_idx >> 0] = $1022 & 255;
    HEAP8[$$sroa$9624$0$$sroa_idx + 1 >> 0] = ($1022 >> 8) & 255;
    HEAP8[$$sroa$9624$0$$sroa_idx + 2 >> 0] = ($1022 >> 16) & 255;
    HEAP8[$$sroa$9624$0$$sroa_idx + 3 >> 0] = $1022 >> 24;
    $$sroa$10626$0$$sroa_idx = ((($0)) + 28 | 0);
    HEAP8[$$sroa$10626$0$$sroa_idx >> 0] = $1024 & 255;
    HEAP8[$$sroa$10626$0$$sroa_idx + 1 >> 0] = ($1024 >> 8) & 255;
    HEAP8[$$sroa$10626$0$$sroa_idx + 2 >> 0] = ($1024 >> 16) & 255;
    HEAP8[$$sroa$10626$0$$sroa_idx + 3 >> 0] = $1024 >> 24;
    $1025 = ((($0)) + 64 | 0);
    HEAP32[$1025 >> 2] = 0;
    STACKTOP = sp;
    return;
  }

  function _secp256k1_rfc6979_hmac_sha256_generate($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $$0$lcssa$i$i312 = 0, $$0$lcssa$i$i44336 = 0, $$0$lcssa$i$i86357 = 0, $$0$lcssa$i105369 = 0,
      $$0$lcssa$i123321 = 0, $$0$lcssa$i132324 = 0, $$0$lcssa$i150342 = 0, $$0$lcssa$i159345 = 0, $$0$lcssa$i177363 = 0,
      $$0$lcssa$i186366 = 0, $$0$lcssa$i195318 = 0, $$0$lcssa$i204339 = 0, $$0$lcssa$i21327 = 0, $$0$lcssa$i213360 = 0,
      $$0$lcssa$i6$i = 0, $$0$lcssa$i6$i52 = 0, $$0$lcssa$i6$i94 = 0, $$0$lcssa$i63348 = 0, $$02$i = 0, $$02$i24 = 0;
    var $$02$i66 = 0, $$020$lcssa$i$i311 = 0, $$020$lcssa$i$i43335 = 0, $$020$lcssa$i$i85356 = 0,
      $$020$lcssa$i104368 = 0, $$020$lcssa$i122320 = 0, $$020$lcssa$i131323 = 0, $$020$lcssa$i149341 = 0,
      $$020$lcssa$i158344 = 0, $$020$lcssa$i176362 = 0, $$020$lcssa$i185365 = 0, $$020$lcssa$i194317 = 0,
      $$020$lcssa$i20326 = 0, $$020$lcssa$i203338 = 0, $$020$lcssa$i212359 = 0, $$020$lcssa$i5$i = 0,
      $$020$lcssa$i5$i53 = 0, $$020$lcssa$i5$i95 = 0, $$020$lcssa$i62347 = 0, $$02023$i$i = 0;
    var $$02023$i$i12 = 0, $$02023$i$i40 = 0, $$02023$i$i49 = 0, $$02023$i$i82 = 0, $$02023$i$i91 = 0, $$02023$i101 = 0,
      $$02023$i119 = 0, $$02023$i128 = 0, $$02023$i146 = 0, $$02023$i155 = 0, $$02023$i17 = 0, $$02023$i173 = 0,
      $$02023$i182 = 0, $$02023$i191 = 0, $$02023$i200 = 0, $$02023$i209 = 0, $$02023$i59 = 0, $$021$lcssa$i$i310 = 0,
      $$021$lcssa$i$i42334 = 0, $$021$lcssa$i$i84355 = 0;
    var $$021$lcssa$i103367 = 0, $$021$lcssa$i121319 = 0, $$021$lcssa$i130322 = 0, $$021$lcssa$i148340 = 0,
      $$021$lcssa$i157343 = 0, $$021$lcssa$i175361 = 0, $$021$lcssa$i184364 = 0, $$021$lcssa$i19325 = 0,
      $$021$lcssa$i193316 = 0, $$021$lcssa$i202337 = 0, $$021$lcssa$i211358 = 0, $$021$lcssa$i4$i = 0,
      $$021$lcssa$i4$i54 = 0, $$021$lcssa$i4$i96 = 0, $$021$lcssa$i61346 = 0, $$02122$i$i = 0, $$02122$i$i13 = 0,
      $$02122$i$i41 = 0, $$02122$i$i50 = 0, $$02122$i$i83 = 0;
    var $$02122$i$i92 = 0, $$02122$i102 = 0, $$02122$i120 = 0, $$02122$i129 = 0, $$02122$i147 = 0, $$02122$i156 = 0,
      $$02122$i174 = 0, $$02122$i18 = 0, $$02122$i183 = 0, $$02122$i192 = 0, $$02122$i201 = 0, $$02122$i210 = 0,
      $$02122$i60 = 0, $$024$i$i = 0, $$024$i$i11 = 0, $$024$i$i39 = 0, $$024$i$i48 = 0, $$024$i$i81 = 0,
      $$024$i$i90 = 0, $$024$i100 = 0;
    var $$024$i118 = 0, $$024$i127 = 0, $$024$i145 = 0, $$024$i154 = 0, $$024$i16 = 0, $$024$i172 = 0, $$024$i181 = 0,
      $$024$i190 = 0, $$024$i199 = 0, $$024$i208 = 0, $$024$i58 = 0, $$11$i = 0, $$11$i26 = 0, $$11$i68 = 0, $$pre = 0,
      $$pre$phi471Z2D = 0, $$pre$phi473Z2D = 0, $$pre$phi475Z2D = 0, $$pre$phi477Z2D = 0, $$pre$phiZ2D = 0;
    var $$pre472 = 0, $$pre479 = 0, $$pre481 = 0, $$pre483 = 0, $$pre485 = 0, $$pre487 = 0, $$pre489 = 0, $$pre491 = 0,
      $$pre494 = 0, $$pre496 = 0, $$pre498 = 0, $$pre500 = 0, $$pre502 = 0, $$pre504 = 0, $$pre506 = 0,
      $$sroa$0$0$$sroa_idx = 0, $$sroa$0240$0$$sroa_cast$pre$phiZZZZZZ2D = 0,
      $$sroa$0288$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$10$0$$sroa_idx = 0, $$sroa$10238$0$$sroa_idx = 0;
    var $$sroa$10254$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$10270$0$$sroa_idx = 0,
      $$sroa$10302$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$4226$0$$sroa_idx = 0,
      $$sroa$4242$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$4258$0$$sroa_idx = 0,
      $$sroa$4290$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$5228$0$$sroa_idx = 0,
      $$sroa$5244$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$5260$0$$sroa_idx = 0,
      $$sroa$5292$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$6$0$$sroa_idx = 0, $$sroa$6230$0$$sroa_idx = 0,
      $$sroa$6246$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$6262$0$$sroa_idx = 0,
      $$sroa$6294$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$7$0$$sroa_idx = 0, $$sroa$7232$0$$sroa_idx = 0;
    var $$sroa$7248$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$7264$0$$sroa_idx = 0,
      $$sroa$7296$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$8$0$$sroa_idx = 0, $$sroa$8234$0$$sroa_idx = 0,
      $$sroa$8250$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$8266$0$$sroa_idx = 0,
      $$sroa$8298$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$9$0$$sroa_idx = 0, $$sroa$9236$0$$sroa_idx = 0,
      $$sroa$9252$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $$sroa$9268$0$$sroa_idx = 0,
      $$sroa$9300$0$$sroa_cast$pre$phiZZZZZZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
    var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0,
      $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
    var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0,
      $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
    var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0,
      $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
    var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0,
      $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
    var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0,
      $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
    var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0,
      $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
    var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0,
      $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
    var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0,
      $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
    var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0,
      $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
    var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0,
      $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
    var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0,
      $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
    var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0,
      $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
    var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0,
      $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
    var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0,
      $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
    var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0,
      $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
    var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0,
      $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
    var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0,
      $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
    var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0,
      $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
    var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0,
      $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
    var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0,
      $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
    var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0,
      $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
    var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $5 = 0,
      $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
    var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0,
      $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
    var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0,
      $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
    var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i27 = 0, $exitcond$i69 = 0,
      $exitcond3$i = 0, $exitcond3$i25 = 0, $exitcond3$i67 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 928 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(928 | 0);
    $2 = sp + 856 | 0;
    $3 = sp + 848 | 0;
    $4 = sp + 840 | 0;
    $5 = sp + 832 | 0;
    $6 = sp + 824 | 0;
    $7 = sp + 816 | 0;
    $8 = sp + 784 | 0;
    $9 = sp + 864 | 0;
    $10 = sp + 392 | 0;
    $11 = sp;
    $12 = ((($0)) + 64 | 0);
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ($13 | 0) == (0);
    if ($14) {
      $$pre = ((($0)) + 32 | 0);
      $$pre472 = ((($9)) + 32 | 0);
      $$pre479 = ((($8)) + 4 | 0);
      $$pre481 = ((($8)) + 8 | 0);
      $$pre483 = ((($8)) + 12 | 0);
      $$pre485 = ((($8)) + 16 | 0);
      $$pre487 = ((($8)) + 20 | 0);
      $$pre489 = ((($8)) + 24 | 0);
      $$pre491 = ((($8)) + 28 | 0);
      $$pre494 = ((($0)) + 4 | 0);
      $$pre496 = ((($0)) + 8 | 0);
      $$pre498 = ((($0)) + 12 | 0);
      $$pre500 = ((($0)) + 16 | 0);
      $$pre502 = ((($0)) + 20 | 0);
      $$pre504 = ((($0)) + 24 | 0);
      $$pre506 = ((($0)) + 28 | 0);
      $$pre$phi471Z2D = $9;
      $$pre$phi473Z2D = $$pre472;
      $$pre$phi475Z2D = $0;
      $$pre$phi477Z2D = $8;
      $$pre$phiZ2D = $$pre;
      $$sroa$0240$0$$sroa_cast$pre$phiZZZZZZ2D = $0;
      $$sroa$0288$0$$sroa_cast$pre$phiZZZZZZ2D = $8;
      $$sroa$10254$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre506;
      $$sroa$10302$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre491;
      $$sroa$4242$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre494;
      $$sroa$4290$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre479;
      $$sroa$5244$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre496;
      $$sroa$5292$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre481;
      $$sroa$6246$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre498;
      $$sroa$6294$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre483;
      $$sroa$7248$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre500;
      $$sroa$7296$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre485;
      $$sroa$8250$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre502;
      $$sroa$8298$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre487;
      $$sroa$9252$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre504;
      $$sroa$9300$0$$sroa_cast$pre$phiZZZZZZ2D = $$pre489;
    } else {
      $15 = ((($0)) + 32 | 0);
      dest = $9;
      src = $15;
      stop = dest + 32 | 0;
      do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
        dest = dest + 1 | 0;
        src = src + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      $16 = ((($9)) + 32 | 0);
      dest = $16;
      stop = dest + 32 | 0;
      do {
        HEAP8[dest >> 0] = 0 | 0;
        dest = dest + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      $17 = ((($10)) + 196 | 0);
      HEAP32[$17 >> 2] = 1779033703;
      $18 = ((($10)) + 200 | 0);
      HEAP32[$18 >> 2] = -1150833019;
      $19 = ((($10)) + 204 | 0);
      HEAP32[$19 >> 2] = 1013904242;
      $20 = ((($10)) + 208 | 0);
      HEAP32[$20 >> 2] = -1521486534;
      $21 = ((($10)) + 212 | 0);
      HEAP32[$21 >> 2] = 1359893119;
      $22 = ((($10)) + 216 | 0);
      HEAP32[$22 >> 2] = -1694144372;
      $23 = ((($10)) + 220 | 0);
      HEAP32[$23 >> 2] = 528734635;
      $24 = ((($10)) + 224 | 0);
      HEAP32[$24 >> 2] = 1541459225;
      $25 = ((($10)) + 388 | 0);
      HEAP32[$25 >> 2] = 0;
      $$02$i = 0;
      while (1) {
        $26 = (($9) + ($$02$i) | 0);
        $27 = HEAP8[$26 >> 0] | 0;
        $28 = $27 ^ 92;
        HEAP8[$26 >> 0] = $28;
        $29 = (($$02$i) + 1) | 0;
        $exitcond3$i = ($29 | 0) == (64);
        if ($exitcond3$i) {
          break;
        } else {
          $$02$i = $29;
        }
      }
      HEAP32[$25 >> 2] = 64;
      $30 = ((($10)) + 324 | 0);
      dest = $30;
      src = $9;
      stop = dest + 64 | 0;
      do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
        dest = dest + 1 | 0;
        src = src + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      _secp256k1_sha256_transform($17, $30);
      HEAP32[$10 >> 2] = 1779033703;
      $31 = ((($10)) + 4 | 0);
      HEAP32[$31 >> 2] = -1150833019;
      $32 = ((($10)) + 8 | 0);
      HEAP32[$32 >> 2] = 1013904242;
      $33 = ((($10)) + 12 | 0);
      HEAP32[$33 >> 2] = -1521486534;
      $34 = ((($10)) + 16 | 0);
      HEAP32[$34 >> 2] = 1359893119;
      $35 = ((($10)) + 20 | 0);
      HEAP32[$35 >> 2] = -1694144372;
      $36 = ((($10)) + 24 | 0);
      HEAP32[$36 >> 2] = 528734635;
      $37 = ((($10)) + 28 | 0);
      HEAP32[$37 >> 2] = 1541459225;
      $38 = ((($10)) + 192 | 0);
      HEAP32[$38 >> 2] = 0;
      $$11$i = 0;
      while (1) {
        $39 = (($9) + ($$11$i) | 0);
        $40 = HEAP8[$39 >> 0] | 0;
        $41 = $40 ^ 106;
        HEAP8[$39 >> 0] = $41;
        $42 = (($$11$i) + 1) | 0;
        $exitcond$i = ($42 | 0) == (64);
        if ($exitcond$i) {
          break;
        } else {
          $$11$i = $42;
        }
      }
      HEAP32[$38 >> 2] = 64;
      $43 = ((($10)) + 128 | 0);
      dest = $43;
      src = $9;
      stop = dest + 64 | 0;
      do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
        dest = dest + 1 | 0;
        src = src + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      _secp256k1_sha256_transform($10, $43);
      $44 = HEAP32[$38 >> 2] | 0;
      $45 = $44 & 63;
      $46 = (($44) + 32) | 0;
      HEAP32[$38 >> 2] = $46;
      $47 = (($45) + 32) | 0;
      $48 = ($47 >>> 0) > (63);
      if ($48) {
        $$02023$i$i = 32;
        $$02122$i$i = $0;
        $$024$i$i = $45;
        while (1) {
          $49 = (($43) + ($$024$i$i) | 0);
          $50 = (64 - ($$024$i$i)) | 0;
          _memcpy(($49 | 0), ($$02122$i$i | 0), ($50 | 0)) | 0;
          $51 = (($$02122$i$i) + ($50) | 0);
          $52 = (($$02023$i$i) - ($50)) | 0;
          _secp256k1_sha256_transform($10, $43);
          $53 = ($52 >>> 0) > (63);
          if ($53) {
            $$02023$i$i = $52;
            $$02122$i$i = $51;
            $$024$i$i = 0;
          } else {
            break;
          }
        }
        $54 = ($52 | 0) == (0);
        if (!($54)) {
          $$0$lcssa$i$i312 = 0;
          $$020$lcssa$i$i311 = $52;
          $$021$lcssa$i$i310 = $51;
          label = 10;
        }
      } else {
        $$0$lcssa$i$i312 = $45;
        $$020$lcssa$i$i311 = 32;
        $$021$lcssa$i$i310 = $0;
        label = 10;
      }
      if ((label | 0) == 10) {
        $55 = (($43) + ($$0$lcssa$i$i312) | 0);
        _memcpy(($55 | 0), ($$021$lcssa$i$i310 | 0), ($$020$lcssa$i$i311 | 0)) | 0;
      }
      $56 = HEAP32[$38 >> 2] | 0;
      $57 = $56 & 63;
      $58 = (($56) + 1) | 0;
      HEAP32[$38 >> 2] = $58;
      $59 = (($57) + 1) | 0;
      $60 = ($59 >>> 0) > (63);
      if ($60) {
        $61 = ((($43)) + 63 | 0);
        HEAP8[$61 >> 0] = 0;
        _secp256k1_sha256_transform($10, $43);
      } else {
        $62 = (($43) + ($57) | 0);
        HEAP8[$62 >> 0] = 0;
      }
      $63 = HEAP32[$38 >> 2] | 0;
      $64 = $63 >>> 29;
      $65 = $64 << 24;
      HEAP32[$4 >> 2] = $65;
      $66 = $63 << 27;
      $67 = $63 << 11;
      $68 = $67 & 16711680;
      $69 = $68 | $66;
      $70 = $63 >>> 5;
      $71 = $70 & 65280;
      $72 = $69 | $71;
      $73 = $63 >>> 21;
      $74 = $73 & 255;
      $75 = $72 | $74;
      $76 = ((($4)) + 4 | 0);
      HEAP32[$76 >> 2] = $75;
      $77 = (119 - ($63)) | 0;
      $78 = $77 & 63;
      $79 = (($78) + 1) | 0;
      $80 = $63 & 63;
      $81 = (($63) + ($79)) | 0;
      HEAP32[$38 >> 2] = $81;
      $82 = (($80) + ($79)) | 0;
      $83 = ($82 >>> 0) > (63);
      if ($83) {
        $$02023$i191 = $79;
        $$02122$i192 = 1612;
        $$024$i190 = $80;
        while (1) {
          $84 = (($43) + ($$024$i190) | 0);
          $85 = (64 - ($$024$i190)) | 0;
          _memcpy(($84 | 0), ($$02122$i192 | 0), ($85 | 0)) | 0;
          $86 = (($$02122$i192) + ($85) | 0);
          $87 = (($$02023$i191) - ($85)) | 0;
          _secp256k1_sha256_transform($10, $43);
          $88 = ($87 >>> 0) > (63);
          if ($88) {
            $$02023$i191 = $87;
            $$02122$i192 = $86;
            $$024$i190 = 0;
          } else {
            break;
          }
        }
        $89 = ($87 | 0) == (0);
        if (!($89)) {
          $$0$lcssa$i195318 = 0;
          $$020$lcssa$i194317 = $87;
          $$021$lcssa$i193316 = $86;
          label = 17;
        }
      } else {
        $$0$lcssa$i195318 = $80;
        $$020$lcssa$i194317 = $79;
        $$021$lcssa$i193316 = 1612;
        label = 17;
      }
      if ((label | 0) == 17) {
        $90 = (($43) + ($$0$lcssa$i195318) | 0);
        _memcpy(($90 | 0), ($$021$lcssa$i193316 | 0), ($$020$lcssa$i194317 | 0)) | 0;
      }
      $91 = HEAP32[$38 >> 2] | 0;
      $92 = $91 & 63;
      $93 = (($91) + 8) | 0;
      HEAP32[$38 >> 2] = $93;
      $94 = (($92) + 8) | 0;
      $95 = ($94 >>> 0) > (63);
      if ($95) {
        $$02023$i119 = 8;
        $$02122$i120 = $4;
        $$024$i118 = $92;
        while (1) {
          $96 = (($43) + ($$024$i118) | 0);
          $97 = (64 - ($$024$i118)) | 0;
          _memcpy(($96 | 0), ($$02122$i120 | 0), ($97 | 0)) | 0;
          $98 = (($$02122$i120) + ($97) | 0);
          $99 = (($$02023$i119) - ($97)) | 0;
          _secp256k1_sha256_transform($10, $43);
          $100 = ($99 >>> 0) > (63);
          if ($100) {
            $$02023$i119 = $99;
            $$02122$i120 = $98;
            $$024$i118 = 0;
          } else {
            break;
          }
        }
        $101 = ($99 | 0) == (0);
        if (!($101)) {
          $$0$lcssa$i123321 = 0;
          $$020$lcssa$i122320 = $99;
          $$021$lcssa$i121319 = $98;
          label = 21;
        }
      } else {
        $$0$lcssa$i123321 = $92;
        $$020$lcssa$i122320 = 8;
        $$021$lcssa$i121319 = $4;
        label = 21;
      }
      if ((label | 0) == 21) {
        $102 = (($43) + ($$0$lcssa$i123321) | 0);
        _memcpy(($102 | 0), ($$021$lcssa$i121319 | 0), ($$020$lcssa$i122320 | 0)) | 0;
      }
      $103 = HEAP32[$10 >> 2] | 0;
      $104 = (_llvm_bswap_i32(($103 | 0)) | 0);
      HEAP32[$10 >> 2] = 0;
      $105 = HEAP32[$31 >> 2] | 0;
      $106 = (_llvm_bswap_i32(($105 | 0)) | 0);
      HEAP32[$31 >> 2] = 0;
      $107 = HEAP32[$32 >> 2] | 0;
      $108 = (_llvm_bswap_i32(($107 | 0)) | 0);
      HEAP32[$32 >> 2] = 0;
      $109 = HEAP32[$33 >> 2] | 0;
      $110 = (_llvm_bswap_i32(($109 | 0)) | 0);
      HEAP32[$33 >> 2] = 0;
      $111 = HEAP32[$34 >> 2] | 0;
      $112 = (_llvm_bswap_i32(($111 | 0)) | 0);
      HEAP32[$34 >> 2] = 0;
      $113 = HEAP32[$35 >> 2] | 0;
      $114 = (_llvm_bswap_i32(($113 | 0)) | 0);
      HEAP32[$35 >> 2] = 0;
      $115 = HEAP32[$36 >> 2] | 0;
      $116 = (_llvm_bswap_i32(($115 | 0)) | 0);
      HEAP32[$36 >> 2] = 0;
      $117 = HEAP32[$37 >> 2] | 0;
      $118 = (_llvm_bswap_i32(($117 | 0)) | 0);
      HEAP32[$37 >> 2] = 0;
      HEAP32[$8 >> 2] = $104;
      $$sroa$4258$0$$sroa_idx = ((($8)) + 4 | 0);
      HEAP32[$$sroa$4258$0$$sroa_idx >> 2] = $106;
      $$sroa$5260$0$$sroa_idx = ((($8)) + 8 | 0);
      HEAP32[$$sroa$5260$0$$sroa_idx >> 2] = $108;
      $$sroa$6262$0$$sroa_idx = ((($8)) + 12 | 0);
      HEAP32[$$sroa$6262$0$$sroa_idx >> 2] = $110;
      $$sroa$7264$0$$sroa_idx = ((($8)) + 16 | 0);
      HEAP32[$$sroa$7264$0$$sroa_idx >> 2] = $112;
      $$sroa$8266$0$$sroa_idx = ((($8)) + 20 | 0);
      HEAP32[$$sroa$8266$0$$sroa_idx >> 2] = $114;
      $$sroa$9268$0$$sroa_idx = ((($8)) + 24 | 0);
      HEAP32[$$sroa$9268$0$$sroa_idx >> 2] = $116;
      $$sroa$10270$0$$sroa_idx = ((($8)) + 28 | 0);
      HEAP32[$$sroa$10270$0$$sroa_idx >> 2] = $118;
      $119 = HEAP32[$25 >> 2] | 0;
      $120 = $119 & 63;
      $121 = (($119) + 32) | 0;
      HEAP32[$25 >> 2] = $121;
      $122 = (($120) + 32) | 0;
      $123 = ($122 >>> 0) > (63);
      if ($123) {
        $$02023$i$i12 = 32;
        $$02122$i$i13 = $8;
        $$024$i$i11 = $120;
        while (1) {
          $124 = (($30) + ($$024$i$i11) | 0);
          $125 = (64 - ($$024$i$i11)) | 0;
          _memcpy(($124 | 0), ($$02122$i$i13 | 0), ($125 | 0)) | 0;
          $126 = (($$02122$i$i13) + ($125) | 0);
          $127 = (($$02023$i$i12) - ($125)) | 0;
          _secp256k1_sha256_transform($17, $30);
          $128 = ($127 >>> 0) > (63);
          if ($128) {
            $$02023$i$i12 = $127;
            $$02122$i$i13 = $126;
            $$024$i$i11 = 0;
          } else {
            break;
          }
        }
        $129 = ($127 | 0) == (0);
        if (!($129)) {
          $$0$lcssa$i6$i = 0;
          $$020$lcssa$i5$i = $127;
          $$021$lcssa$i4$i = $126;
          label = 25;
        }
      } else {
        $$0$lcssa$i6$i = $120;
        $$020$lcssa$i5$i = 32;
        $$021$lcssa$i4$i = $8;
        label = 25;
      }
      if ((label | 0) == 25) {
        $130 = (($30) + ($$0$lcssa$i6$i) | 0);
        _memcpy(($130 | 0), ($$021$lcssa$i4$i | 0), ($$020$lcssa$i5$i | 0)) | 0;
      }
      $131 = HEAP32[$25 >> 2] | 0;
      $132 = $131 >>> 29;
      $133 = $132 << 24;
      HEAP32[$7 >> 2] = $133;
      $134 = $131 << 27;
      $135 = $131 << 11;
      $136 = $135 & 16711680;
      $137 = $136 | $134;
      $138 = $131 >>> 5;
      $139 = $138 & 65280;
      $140 = $137 | $139;
      $141 = $131 >>> 21;
      $142 = $141 & 255;
      $143 = $140 | $142;
      $144 = ((($7)) + 4 | 0);
      HEAP32[$144 >> 2] = $143;
      $145 = (119 - ($131)) | 0;
      $146 = $145 & 63;
      $147 = (($146) + 1) | 0;
      $148 = $131 & 63;
      $149 = (($131) + ($147)) | 0;
      HEAP32[$25 >> 2] = $149;
      $150 = (($148) + ($147)) | 0;
      $151 = ($150 >>> 0) > (63);
      if ($151) {
        $$02023$i128 = $147;
        $$02122$i129 = 1612;
        $$024$i127 = $148;
        while (1) {
          $152 = (($30) + ($$024$i127) | 0);
          $153 = (64 - ($$024$i127)) | 0;
          _memcpy(($152 | 0), ($$02122$i129 | 0), ($153 | 0)) | 0;
          $154 = (($$02122$i129) + ($153) | 0);
          $155 = (($$02023$i128) - ($153)) | 0;
          _secp256k1_sha256_transform($17, $30);
          $156 = ($155 >>> 0) > (63);
          if ($156) {
            $$02023$i128 = $155;
            $$02122$i129 = $154;
            $$024$i127 = 0;
          } else {
            break;
          }
        }
        $157 = ($155 | 0) == (0);
        if (!($157)) {
          $$0$lcssa$i132324 = 0;
          $$020$lcssa$i131323 = $155;
          $$021$lcssa$i130322 = $154;
          label = 29;
        }
      } else {
        $$0$lcssa$i132324 = $148;
        $$020$lcssa$i131323 = $147;
        $$021$lcssa$i130322 = 1612;
        label = 29;
      }
      if ((label | 0) == 29) {
        $158 = (($30) + ($$0$lcssa$i132324) | 0);
        _memcpy(($158 | 0), ($$021$lcssa$i130322 | 0), ($$020$lcssa$i131323 | 0)) | 0;
      }
      $159 = HEAP32[$25 >> 2] | 0;
      $160 = $159 & 63;
      $161 = (($159) + 8) | 0;
      HEAP32[$25 >> 2] = $161;
      $162 = (($160) + 8) | 0;
      $163 = ($162 >>> 0) > (63);
      if ($163) {
        $$02023$i17 = 8;
        $$02122$i18 = $7;
        $$024$i16 = $160;
        while (1) {
          $164 = (($30) + ($$024$i16) | 0);
          $165 = (64 - ($$024$i16)) | 0;
          _memcpy(($164 | 0), ($$02122$i18 | 0), ($165 | 0)) | 0;
          $166 = (($$02122$i18) + ($165) | 0);
          $167 = (($$02023$i17) - ($165)) | 0;
          _secp256k1_sha256_transform($17, $30);
          $168 = ($167 >>> 0) > (63);
          if ($168) {
            $$02023$i17 = $167;
            $$02122$i18 = $166;
            $$024$i16 = 0;
          } else {
            break;
          }
        }
        $169 = ($167 | 0) == (0);
        if (!($169)) {
          $$0$lcssa$i21327 = 0;
          $$020$lcssa$i20326 = $167;
          $$021$lcssa$i19325 = $166;
          label = 33;
        }
      } else {
        $$0$lcssa$i21327 = $160;
        $$020$lcssa$i20326 = 8;
        $$021$lcssa$i19325 = $7;
        label = 33;
      }
      if ((label | 0) == 33) {
        $170 = (($30) + ($$0$lcssa$i21327) | 0);
        _memcpy(($170 | 0), ($$021$lcssa$i19325 | 0), ($$020$lcssa$i20326 | 0)) | 0;
      }
      $171 = HEAP32[$17 >> 2] | 0;
      $172 = (_llvm_bswap_i32(($171 | 0)) | 0);
      $173 = HEAP32[$18 >> 2] | 0;
      $174 = (_llvm_bswap_i32(($173 | 0)) | 0);
      $175 = HEAP32[$19 >> 2] | 0;
      $176 = (_llvm_bswap_i32(($175 | 0)) | 0);
      $177 = HEAP32[$20 >> 2] | 0;
      $178 = (_llvm_bswap_i32(($177 | 0)) | 0);
      $179 = HEAP32[$21 >> 2] | 0;
      $180 = (_llvm_bswap_i32(($179 | 0)) | 0);
      $181 = HEAP32[$22 >> 2] | 0;
      $182 = (_llvm_bswap_i32(($181 | 0)) | 0);
      $183 = HEAP32[$23 >> 2] | 0;
      $184 = (_llvm_bswap_i32(($183 | 0)) | 0);
      $185 = HEAP32[$24 >> 2] | 0;
      $186 = (_llvm_bswap_i32(($185 | 0)) | 0);
      $$sroa$0$0$$sroa_idx = ((($0)) + 32 | 0);
      HEAP8[$$sroa$0$0$$sroa_idx >> 0] = $172 & 255;
      HEAP8[$$sroa$0$0$$sroa_idx + 1 >> 0] = ($172 >> 8) & 255;
      HEAP8[$$sroa$0$0$$sroa_idx + 2 >> 0] = ($172 >> 16) & 255;
      HEAP8[$$sroa$0$0$$sroa_idx + 3 >> 0] = $172 >> 24;
      $$sroa$4$0$$sroa_idx = ((($0)) + 36 | 0);
      HEAP8[$$sroa$4$0$$sroa_idx >> 0] = $174 & 255;
      HEAP8[$$sroa$4$0$$sroa_idx + 1 >> 0] = ($174 >> 8) & 255;
      HEAP8[$$sroa$4$0$$sroa_idx + 2 >> 0] = ($174 >> 16) & 255;
      HEAP8[$$sroa$4$0$$sroa_idx + 3 >> 0] = $174 >> 24;
      $$sroa$5$0$$sroa_idx = ((($0)) + 40 | 0);
      HEAP8[$$sroa$5$0$$sroa_idx >> 0] = $176 & 255;
      HEAP8[$$sroa$5$0$$sroa_idx + 1 >> 0] = ($176 >> 8) & 255;
      HEAP8[$$sroa$5$0$$sroa_idx + 2 >> 0] = ($176 >> 16) & 255;
      HEAP8[$$sroa$5$0$$sroa_idx + 3 >> 0] = $176 >> 24;
      $$sroa$6$0$$sroa_idx = ((($0)) + 44 | 0);
      HEAP8[$$sroa$6$0$$sroa_idx >> 0] = $178 & 255;
      HEAP8[$$sroa$6$0$$sroa_idx + 1 >> 0] = ($178 >> 8) & 255;
      HEAP8[$$sroa$6$0$$sroa_idx + 2 >> 0] = ($178 >> 16) & 255;
      HEAP8[$$sroa$6$0$$sroa_idx + 3 >> 0] = $178 >> 24;
      $$sroa$7$0$$sroa_idx = ((($0)) + 48 | 0);
      HEAP8[$$sroa$7$0$$sroa_idx >> 0] = $180 & 255;
      HEAP8[$$sroa$7$0$$sroa_idx + 1 >> 0] = ($180 >> 8) & 255;
      HEAP8[$$sroa$7$0$$sroa_idx + 2 >> 0] = ($180 >> 16) & 255;
      HEAP8[$$sroa$7$0$$sroa_idx + 3 >> 0] = $180 >> 24;
      $$sroa$8$0$$sroa_idx = ((($0)) + 52 | 0);
      HEAP8[$$sroa$8$0$$sroa_idx >> 0] = $182 & 255;
      HEAP8[$$sroa$8$0$$sroa_idx + 1 >> 0] = ($182 >> 8) & 255;
      HEAP8[$$sroa$8$0$$sroa_idx + 2 >> 0] = ($182 >> 16) & 255;
      HEAP8[$$sroa$8$0$$sroa_idx + 3 >> 0] = $182 >> 24;
      $$sroa$9$0$$sroa_idx = ((($0)) + 56 | 0);
      HEAP8[$$sroa$9$0$$sroa_idx >> 0] = $184 & 255;
      HEAP8[$$sroa$9$0$$sroa_idx + 1 >> 0] = ($184 >> 8) & 255;
      HEAP8[$$sroa$9$0$$sroa_idx + 2 >> 0] = ($184 >> 16) & 255;
      HEAP8[$$sroa$9$0$$sroa_idx + 3 >> 0] = $184 >> 24;
      $$sroa$10$0$$sroa_idx = ((($0)) + 60 | 0);
      HEAP8[$$sroa$10$0$$sroa_idx >> 0] = $186 & 255;
      HEAP8[$$sroa$10$0$$sroa_idx + 1 >> 0] = ($186 >> 8) & 255;
      HEAP8[$$sroa$10$0$$sroa_idx + 2 >> 0] = ($186 >> 16) & 255;
      HEAP8[$$sroa$10$0$$sroa_idx + 3 >> 0] = $186 >> 24;
      dest = $9;
      src = $15;
      stop = dest + 32 | 0;
      do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
        dest = dest + 1 | 0;
        src = src + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      dest = $16;
      stop = dest + 32 | 0;
      do {
        HEAP8[dest >> 0] = 0 | 0;
        dest = dest + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      HEAP32[$17 >> 2] = 1779033703;
      HEAP32[$18 >> 2] = -1150833019;
      HEAP32[$19 >> 2] = 1013904242;
      HEAP32[$20 >> 2] = -1521486534;
      HEAP32[$21 >> 2] = 1359893119;
      HEAP32[$22 >> 2] = -1694144372;
      HEAP32[$23 >> 2] = 528734635;
      HEAP32[$24 >> 2] = 1541459225;
      HEAP32[$25 >> 2] = 0;
      $$02$i24 = 0;
      while (1) {
        $187 = (($9) + ($$02$i24) | 0);
        $188 = HEAP8[$187 >> 0] | 0;
        $189 = $188 ^ 92;
        HEAP8[$187 >> 0] = $189;
        $190 = (($$02$i24) + 1) | 0;
        $exitcond3$i25 = ($190 | 0) == (64);
        if ($exitcond3$i25) {
          break;
        } else {
          $$02$i24 = $190;
        }
      }
      HEAP32[$25 >> 2] = 64;
      dest = $30;
      src = $9;
      stop = dest + 64 | 0;
      do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
        dest = dest + 1 | 0;
        src = src + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      _secp256k1_sha256_transform($17, $30);
      HEAP32[$10 >> 2] = 1779033703;
      HEAP32[$31 >> 2] = -1150833019;
      HEAP32[$32 >> 2] = 1013904242;
      HEAP32[$33 >> 2] = -1521486534;
      HEAP32[$34 >> 2] = 1359893119;
      HEAP32[$35 >> 2] = -1694144372;
      HEAP32[$36 >> 2] = 528734635;
      HEAP32[$37 >> 2] = 1541459225;
      HEAP32[$38 >> 2] = 0;
      $$11$i26 = 0;
      while (1) {
        $191 = (($9) + ($$11$i26) | 0);
        $192 = HEAP8[$191 >> 0] | 0;
        $193 = $192 ^ 106;
        HEAP8[$191 >> 0] = $193;
        $194 = (($$11$i26) + 1) | 0;
        $exitcond$i27 = ($194 | 0) == (64);
        if ($exitcond$i27) {
          break;
        } else {
          $$11$i26 = $194;
        }
      }
      HEAP32[$38 >> 2] = 64;
      dest = $43;
      src = $9;
      stop = dest + 64 | 0;
      do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
        dest = dest + 1 | 0;
        src = src + 1 | 0;
      } while ((dest | 0) < (stop | 0));
      _secp256k1_sha256_transform($10, $43);
      $195 = HEAP32[$38 >> 2] | 0;
      $196 = $195 & 63;
      $197 = (($195) + 32) | 0;
      HEAP32[$38 >> 2] = $197;
      $198 = (($196) + 32) | 0;
      $199 = ($198 >>> 0) > (63);
      if ($199) {
        $$02023$i$i40 = 32;
        $$02122$i$i41 = $0;
        $$024$i$i39 = $196;
        while (1) {
          $200 = (($43) + ($$024$i$i39) | 0);
          $201 = (64 - ($$024$i$i39)) | 0;
          _memcpy(($200 | 0), ($$02122$i$i41 | 0), ($201 | 0)) | 0;
          $202 = (($$02122$i$i41) + ($201) | 0);
          $203 = (($$02023$i$i40) - ($201)) | 0;
          _secp256k1_sha256_transform($10, $43);
          $204 = ($203 >>> 0) > (63);
          if ($204) {
            $$02023$i$i40 = $203;
            $$02122$i$i41 = $202;
            $$024$i$i39 = 0;
          } else {
            break;
          }
        }
        $205 = ($203 | 0) == (0);
        if (!($205)) {
          $$0$lcssa$i$i44336 = 0;
          $$020$lcssa$i$i43335 = $203;
          $$021$lcssa$i$i42334 = $202;
          label = 41;
        }
      } else {
        $$0$lcssa$i$i44336 = $196;
        $$020$lcssa$i$i43335 = 32;
        $$021$lcssa$i$i42334 = $0;
        label = 41;
      }
      if ((label | 0) == 41) {
        $206 = (($43) + ($$0$lcssa$i$i44336) | 0);
        _memcpy(($206 | 0), ($$021$lcssa$i$i42334 | 0), ($$020$lcssa$i$i43335 | 0)) | 0;
      }
      $207 = HEAP32[$38 >> 2] | 0;
      $208 = $207 >>> 29;
      $209 = $208 << 24;
      HEAP32[$3 >> 2] = $209;
      $210 = $207 << 27;
      $211 = $207 << 11;
      $212 = $211 & 16711680;
      $213 = $212 | $210;
      $214 = $207 >>> 5;
      $215 = $214 & 65280;
      $216 = $213 | $215;
      $217 = $207 >>> 21;
      $218 = $217 & 255;
      $219 = $216 | $218;
      $220 = ((($3)) + 4 | 0);
      HEAP32[$220 >> 2] = $219;
      $221 = (119 - ($207)) | 0;
      $222 = $221 & 63;
      $223 = (($222) + 1) | 0;
      $224 = $207 & 63;
      $225 = (($207) + ($223)) | 0;
      HEAP32[$38 >> 2] = $225;
      $226 = (($224) + ($223)) | 0;
      $227 = ($226 >>> 0) > (63);
      if ($227) {
        $$02023$i200 = $223;
        $$02122$i201 = 1612;
        $$024$i199 = $224;
        while (1) {
          $228 = (($43) + ($$024$i199) | 0);
          $229 = (64 - ($$024$i199)) | 0;
          _memcpy(($228 | 0), ($$02122$i201 | 0), ($229 | 0)) | 0;
          $230 = (($$02122$i201) + ($229) | 0);
          $231 = (($$02023$i200) - ($229)) | 0;
          _secp256k1_sha256_transform($10, $43);
          $232 = ($231 >>> 0) > (63);
          if ($232) {
            $$02023$i200 = $231;
            $$02122$i201 = $230;
            $$024$i199 = 0;
          } else {
            break;
          }
        }
        $233 = ($231 | 0) == (0);
        if (!($233)) {
          $$0$lcssa$i204339 = 0;
          $$020$lcssa$i203338 = $231;
          $$021$lcssa$i202337 = $230;
          label = 45;
        }
      } else {
        $$0$lcssa$i204339 = $224;
        $$020$lcssa$i203338 = $223;
        $$021$lcssa$i202337 = 1612;
        label = 45;
      }
      if ((label | 0) == 45) {
        $234 = (($43) + ($$0$lcssa$i204339) | 0);
        _memcpy(($234 | 0), ($$021$lcssa$i202337 | 0), ($$020$lcssa$i203338 | 0)) | 0;
      }
      $235 = HEAP32[$38 >> 2] | 0;
      $236 = $235 & 63;
      $237 = (($235) + 8) | 0;
      HEAP32[$38 >> 2] = $237;
      $238 = (($236) + 8) | 0;
      $239 = ($238 >>> 0) > (63);
      if ($239) {
        $$02023$i146 = 8;
        $$02122$i147 = $3;
        $$024$i145 = $236;
        while (1) {
          $240 = (($43) + ($$024$i145) | 0);
          $241 = (64 - ($$024$i145)) | 0;
          _memcpy(($240 | 0), ($$02122$i147 | 0), ($241 | 0)) | 0;
          $242 = (($$02122$i147) + ($241) | 0);
          $243 = (($$02023$i146) - ($241)) | 0;
          _secp256k1_sha256_transform($10, $43);
          $244 = ($243 >>> 0) > (63);
          if ($244) {
            $$02023$i146 = $243;
            $$02122$i147 = $242;
            $$024$i145 = 0;
          } else {
            break;
          }
        }
        $245 = ($243 | 0) == (0);
        if (!($245)) {
          $$0$lcssa$i150342 = 0;
          $$020$lcssa$i149341 = $243;
          $$021$lcssa$i148340 = $242;
          label = 49;
        }
      } else {
        $$0$lcssa$i150342 = $236;
        $$020$lcssa$i149341 = 8;
        $$021$lcssa$i148340 = $3;
        label = 49;
      }
      if ((label | 0) == 49) {
        $246 = (($43) + ($$0$lcssa$i150342) | 0);
        _memcpy(($246 | 0), ($$021$lcssa$i148340 | 0), ($$020$lcssa$i149341 | 0)) | 0;
      }
      $247 = HEAP32[$10 >> 2] | 0;
      $248 = (_llvm_bswap_i32(($247 | 0)) | 0);
      HEAP32[$10 >> 2] = 0;
      $249 = HEAP32[$31 >> 2] | 0;
      $250 = (_llvm_bswap_i32(($249 | 0)) | 0);
      HEAP32[$31 >> 2] = 0;
      $251 = HEAP32[$32 >> 2] | 0;
      $252 = (_llvm_bswap_i32(($251 | 0)) | 0);
      HEAP32[$32 >> 2] = 0;
      $253 = HEAP32[$33 >> 2] | 0;
      $254 = (_llvm_bswap_i32(($253 | 0)) | 0);
      HEAP32[$33 >> 2] = 0;
      $255 = HEAP32[$34 >> 2] | 0;
      $256 = (_llvm_bswap_i32(($255 | 0)) | 0);
      HEAP32[$34 >> 2] = 0;
      $257 = HEAP32[$35 >> 2] | 0;
      $258 = (_llvm_bswap_i32(($257 | 0)) | 0);
      HEAP32[$35 >> 2] = 0;
      $259 = HEAP32[$36 >> 2] | 0;
      $260 = (_llvm_bswap_i32(($259 | 0)) | 0);
      HEAP32[$36 >> 2] = 0;
      $261 = HEAP32[$37 >> 2] | 0;
      $262 = (_llvm_bswap_i32(($261 | 0)) | 0);
      HEAP32[$37 >> 2] = 0;
      HEAP32[$8 >> 2] = $248;
      HEAP32[$$sroa$4258$0$$sroa_idx >> 2] = $250;
      HEAP32[$$sroa$5260$0$$sroa_idx >> 2] = $252;
      HEAP32[$$sroa$6262$0$$sroa_idx >> 2] = $254;
      HEAP32[$$sroa$7264$0$$sroa_idx >> 2] = $256;
      HEAP32[$$sroa$8266$0$$sroa_idx >> 2] = $258;
      HEAP32[$$sroa$9268$0$$sroa_idx >> 2] = $260;
      HEAP32[$$sroa$10270$0$$sroa_idx >> 2] = $262;
      $263 = HEAP32[$25 >> 2] | 0;
      $264 = $263 & 63;
      $265 = (($263) + 32) | 0;
      HEAP32[$25 >> 2] = $265;
      $266 = (($264) + 32) | 0;
      $267 = ($266 >>> 0) > (63);
      if ($267) {
        $$02023$i$i49 = 32;
        $$02122$i$i50 = $8;
        $$024$i$i48 = $264;
        while (1) {
          $268 = (($30) + ($$024$i$i48) | 0);
          $269 = (64 - ($$024$i$i48)) | 0;
          _memcpy(($268 | 0), ($$02122$i$i50 | 0), ($269 | 0)) | 0;
          $270 = (($$02122$i$i50) + ($269) | 0);
          $271 = (($$02023$i$i49) - ($269)) | 0;
          _secp256k1_sha256_transform($17, $30);
          $272 = ($271 >>> 0) > (63);
          if ($272) {
            $$02023$i$i49 = $271;
            $$02122$i$i50 = $270;
            $$024$i$i48 = 0;
          } else {
            break;
          }
        }
        $273 = ($271 | 0) == (0);
        if (!($273)) {
          $$0$lcssa$i6$i52 = 0;
          $$020$lcssa$i5$i53 = $271;
          $$021$lcssa$i4$i54 = $270;
          label = 53;
        }
      } else {
        $$0$lcssa$i6$i52 = $264;
        $$020$lcssa$i5$i53 = 32;
        $$021$lcssa$i4$i54 = $8;
        label = 53;
      }
      if ((label | 0) == 53) {
        $274 = (($30) + ($$0$lcssa$i6$i52) | 0);
        _memcpy(($274 | 0), ($$021$lcssa$i4$i54 | 0), ($$020$lcssa$i5$i53 | 0)) | 0;
      }
      $275 = HEAP32[$25 >> 2] | 0;
      $276 = $275 >>> 29;
      $277 = $276 << 24;
      HEAP32[$6 >> 2] = $277;
      $278 = $275 << 27;
      $279 = $275 << 11;
      $280 = $279 & 16711680;
      $281 = $280 | $278;
      $282 = $275 >>> 5;
      $283 = $282 & 65280;
      $284 = $281 | $283;
      $285 = $275 >>> 21;
      $286 = $285 & 255;
      $287 = $284 | $286;
      $288 = ((($6)) + 4 | 0);
      HEAP32[$288 >> 2] = $287;
      $289 = (119 - ($275)) | 0;
      $290 = $289 & 63;
      $291 = (($290) + 1) | 0;
      $292 = $275 & 63;
      $293 = (($275) + ($291)) | 0;
      HEAP32[$25 >> 2] = $293;
      $294 = (($292) + ($291)) | 0;
      $295 = ($294 >>> 0) > (63);
      if ($295) {
        $$02023$i155 = $291;
        $$02122$i156 = 1612;
        $$024$i154 = $292;
        while (1) {
          $296 = (($30) + ($$024$i154) | 0);
          $297 = (64 - ($$024$i154)) | 0;
          _memcpy(($296 | 0), ($$02122$i156 | 0), ($297 | 0)) | 0;
          $298 = (($$02122$i156) + ($297) | 0);
          $299 = (($$02023$i155) - ($297)) | 0;
          _secp256k1_sha256_transform($17, $30);
          $300 = ($299 >>> 0) > (63);
          if ($300) {
            $$02023$i155 = $299;
            $$02122$i156 = $298;
            $$024$i154 = 0;
          } else {
            break;
          }
        }
        $301 = ($299 | 0) == (0);
        if (!($301)) {
          $$0$lcssa$i159345 = 0;
          $$020$lcssa$i158344 = $299;
          $$021$lcssa$i157343 = $298;
          label = 57;
        }
      } else {
        $$0$lcssa$i159345 = $292;
        $$020$lcssa$i158344 = $291;
        $$021$lcssa$i157343 = 1612;
        label = 57;
      }
      if ((label | 0) == 57) {
        $302 = (($30) + ($$0$lcssa$i159345) | 0);
        _memcpy(($302 | 0), ($$021$lcssa$i157343 | 0), ($$020$lcssa$i158344 | 0)) | 0;
      }
      $303 = HEAP32[$25 >> 2] | 0;
      $304 = $303 & 63;
      $305 = (($303) + 8) | 0;
      HEAP32[$25 >> 2] = $305;
      $306 = (($304) + 8) | 0;
      $307 = ($306 >>> 0) > (63);
      if ($307) {
        $$02023$i59 = 8;
        $$02122$i60 = $6;
        $$024$i58 = $304;
        while (1) {
          $308 = (($30) + ($$024$i58) | 0);
          $309 = (64 - ($$024$i58)) | 0;
          _memcpy(($308 | 0), ($$02122$i60 | 0), ($309 | 0)) | 0;
          $310 = (($$02122$i60) + ($309) | 0);
          $311 = (($$02023$i59) - ($309)) | 0;
          _secp256k1_sha256_transform($17, $30);
          $312 = ($311 >>> 0) > (63);
          if ($312) {
            $$02023$i59 = $311;
            $$02122$i60 = $310;
            $$024$i58 = 0;
          } else {
            break;
          }
        }
        $313 = ($311 | 0) == (0);
        if (!($313)) {
          $$0$lcssa$i63348 = 0;
          $$020$lcssa$i62347 = $311;
          $$021$lcssa$i61346 = $310;
          label = 61;
        }
      } else {
        $$0$lcssa$i63348 = $304;
        $$020$lcssa$i62347 = 8;
        $$021$lcssa$i61346 = $6;
        label = 61;
      }
      if ((label | 0) == 61) {
        $314 = (($30) + ($$0$lcssa$i63348) | 0);
        _memcpy(($314 | 0), ($$021$lcssa$i61346 | 0), ($$020$lcssa$i62347 | 0)) | 0;
      }
      $315 = HEAP32[$17 >> 2] | 0;
      $316 = (_llvm_bswap_i32(($315 | 0)) | 0);
      HEAP32[$17 >> 2] = 0;
      $317 = HEAP32[$18 >> 2] | 0;
      $318 = (_llvm_bswap_i32(($317 | 0)) | 0);
      HEAP32[$18 >> 2] = 0;
      $319 = HEAP32[$19 >> 2] | 0;
      $320 = (_llvm_bswap_i32(($319 | 0)) | 0);
      HEAP32[$19 >> 2] = 0;
      $321 = HEAP32[$20 >> 2] | 0;
      $322 = (_llvm_bswap_i32(($321 | 0)) | 0);
      HEAP32[$20 >> 2] = 0;
      $323 = HEAP32[$21 >> 2] | 0;
      $324 = (_llvm_bswap_i32(($323 | 0)) | 0);
      HEAP32[$21 >> 2] = 0;
      $325 = HEAP32[$22 >> 2] | 0;
      $326 = (_llvm_bswap_i32(($325 | 0)) | 0);
      HEAP32[$22 >> 2] = 0;
      $327 = HEAP32[$23 >> 2] | 0;
      $328 = (_llvm_bswap_i32(($327 | 0)) | 0);
      HEAP32[$23 >> 2] = 0;
      $329 = HEAP32[$24 >> 2] | 0;
      $330 = (_llvm_bswap_i32(($329 | 0)) | 0);
      HEAP8[$0 >> 0] = $316 & 255;
      HEAP8[$0 + 1 >> 0] = ($316 >> 8) & 255;
      HEAP8[$0 + 2 >> 0] = ($316 >> 16) & 255;
      HEAP8[$0 + 3 >> 0] = $316 >> 24;
      $$sroa$4226$0$$sroa_idx = ((($0)) + 4 | 0);
      HEAP8[$$sroa$4226$0$$sroa_idx >> 0] = $318 & 255;
      HEAP8[$$sroa$4226$0$$sroa_idx + 1 >> 0] = ($318 >> 8) & 255;
      HEAP8[$$sroa$4226$0$$sroa_idx + 2 >> 0] = ($318 >> 16) & 255;
      HEAP8[$$sroa$4226$0$$sroa_idx + 3 >> 0] = $318 >> 24;
      $$sroa$5228$0$$sroa_idx = ((($0)) + 8 | 0);
      HEAP8[$$sroa$5228$0$$sroa_idx >> 0] = $320 & 255;
      HEAP8[$$sroa$5228$0$$sroa_idx + 1 >> 0] = ($320 >> 8) & 255;
      HEAP8[$$sroa$5228$0$$sroa_idx + 2 >> 0] = ($320 >> 16) & 255;
      HEAP8[$$sroa$5228$0$$sroa_idx + 3 >> 0] = $320 >> 24;
      $$sroa$6230$0$$sroa_idx = ((($0)) + 12 | 0);
      HEAP8[$$sroa$6230$0$$sroa_idx >> 0] = $322 & 255;
      HEAP8[$$sroa$6230$0$$sroa_idx + 1 >> 0] = ($322 >> 8) & 255;
      HEAP8[$$sroa$6230$0$$sroa_idx + 2 >> 0] = ($322 >> 16) & 255;
      HEAP8[$$sroa$6230$0$$sroa_idx + 3 >> 0] = $322 >> 24;
      $$sroa$7232$0$$sroa_idx = ((($0)) + 16 | 0);
      HEAP8[$$sroa$7232$0$$sroa_idx >> 0] = $324 & 255;
      HEAP8[$$sroa$7232$0$$sroa_idx + 1 >> 0] = ($324 >> 8) & 255;
      HEAP8[$$sroa$7232$0$$sroa_idx + 2 >> 0] = ($324 >> 16) & 255;
      HEAP8[$$sroa$7232$0$$sroa_idx + 3 >> 0] = $324 >> 24;
      $$sroa$8234$0$$sroa_idx = ((($0)) + 20 | 0);
      HEAP8[$$sroa$8234$0$$sroa_idx >> 0] = $326 & 255;
      HEAP8[$$sroa$8234$0$$sroa_idx + 1 >> 0] = ($326 >> 8) & 255;
      HEAP8[$$sroa$8234$0$$sroa_idx + 2 >> 0] = ($326 >> 16) & 255;
      HEAP8[$$sroa$8234$0$$sroa_idx + 3 >> 0] = $326 >> 24;
      $$sroa$9236$0$$sroa_idx = ((($0)) + 24 | 0);
      HEAP8[$$sroa$9236$0$$sroa_idx >> 0] = $328 & 255;
      HEAP8[$$sroa$9236$0$$sroa_idx + 1 >> 0] = ($328 >> 8) & 255;
      HEAP8[$$sroa$9236$0$$sroa_idx + 2 >> 0] = ($328 >> 16) & 255;
      HEAP8[$$sroa$9236$0$$sroa_idx + 3 >> 0] = $328 >> 24;
      $$sroa$10238$0$$sroa_idx = ((($0)) + 28 | 0);
      HEAP8[$$sroa$10238$0$$sroa_idx >> 0] = $330 & 255;
      HEAP8[$$sroa$10238$0$$sroa_idx + 1 >> 0] = ($330 >> 8) & 255;
      HEAP8[$$sroa$10238$0$$sroa_idx + 2 >> 0] = ($330 >> 16) & 255;
      HEAP8[$$sroa$10238$0$$sroa_idx + 3 >> 0] = $330 >> 24;
      $$pre$phi471Z2D = $9;
      $$pre$phi473Z2D = $16;
      $$pre$phi475Z2D = $0;
      $$pre$phi477Z2D = $8;
      $$pre$phiZ2D = $15;
      $$sroa$0240$0$$sroa_cast$pre$phiZZZZZZ2D = $0;
      $$sroa$0288$0$$sroa_cast$pre$phiZZZZZZ2D = $8;
      $$sroa$10254$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$10238$0$$sroa_idx;
      $$sroa$10302$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$10270$0$$sroa_idx;
      $$sroa$4242$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$4226$0$$sroa_idx;
      $$sroa$4290$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$4258$0$$sroa_idx;
      $$sroa$5244$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$5228$0$$sroa_idx;
      $$sroa$5292$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$5260$0$$sroa_idx;
      $$sroa$6246$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$6230$0$$sroa_idx;
      $$sroa$6294$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$6262$0$$sroa_idx;
      $$sroa$7248$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$7232$0$$sroa_idx;
      $$sroa$7296$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$7264$0$$sroa_idx;
      $$sroa$8250$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$8234$0$$sroa_idx;
      $$sroa$8298$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$8266$0$$sroa_idx;
      $$sroa$9252$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$9236$0$$sroa_idx;
      $$sroa$9300$0$$sroa_cast$pre$phiZZZZZZ2D = $$sroa$9268$0$$sroa_idx;
    }
    $331 = ((($11)) + 196 | 0);
    $332 = ((($11)) + 200 | 0);
    $333 = ((($11)) + 204 | 0);
    $334 = ((($11)) + 208 | 0);
    $335 = ((($11)) + 212 | 0);
    $336 = ((($11)) + 216 | 0);
    $337 = ((($11)) + 220 | 0);
    $338 = ((($11)) + 224 | 0);
    $339 = ((($11)) + 388 | 0);
    $340 = ((($11)) + 324 | 0);
    $341 = ((($11)) + 4 | 0);
    $342 = ((($11)) + 8 | 0);
    $343 = ((($11)) + 12 | 0);
    $344 = ((($11)) + 16 | 0);
    $345 = ((($11)) + 20 | 0);
    $346 = ((($11)) + 24 | 0);
    $347 = ((($11)) + 28 | 0);
    $348 = ((($11)) + 192 | 0);
    $349 = ((($11)) + 128 | 0);
    $350 = ((($2)) + 4 | 0);
    $351 = ((($5)) + 4 | 0);
    dest = $$pre$phi471Z2D;
    src = $$pre$phiZ2D;
    stop = dest + 32 | 0;
    do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    dest = $$pre$phi473Z2D;
    stop = dest + 32 | 0;
    do {
      HEAP8[dest >> 0] = 0 | 0;
      dest = dest + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP32[$331 >> 2] = 1779033703;
    HEAP32[$332 >> 2] = -1150833019;
    HEAP32[$333 >> 2] = 1013904242;
    HEAP32[$334 >> 2] = -1521486534;
    HEAP32[$335 >> 2] = 1359893119;
    HEAP32[$336 >> 2] = -1694144372;
    HEAP32[$337 >> 2] = 528734635;
    HEAP32[$338 >> 2] = 1541459225;
    HEAP32[$339 >> 2] = 0;
    $$02$i66 = 0;
    while (1) {
      $352 = (($9) + ($$02$i66) | 0);
      $353 = HEAP8[$352 >> 0] | 0;
      $354 = $353 ^ 92;
      HEAP8[$352 >> 0] = $354;
      $355 = (($$02$i66) + 1) | 0;
      $exitcond3$i67 = ($355 | 0) == (64);
      if ($exitcond3$i67) {
        break;
      } else {
        $$02$i66 = $355;
      }
    }
    HEAP32[$339 >> 2] = 64;
    dest = $340;
    src = $$pre$phi471Z2D;
    stop = dest + 64 | 0;
    do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_sha256_transform($331, $340);
    HEAP32[$11 >> 2] = 1779033703;
    HEAP32[$341 >> 2] = -1150833019;
    HEAP32[$342 >> 2] = 1013904242;
    HEAP32[$343 >> 2] = -1521486534;
    HEAP32[$344 >> 2] = 1359893119;
    HEAP32[$345 >> 2] = -1694144372;
    HEAP32[$346 >> 2] = 528734635;
    HEAP32[$347 >> 2] = 1541459225;
    HEAP32[$348 >> 2] = 0;
    $$11$i68 = 0;
    while (1) {
      $356 = (($9) + ($$11$i68) | 0);
      $357 = HEAP8[$356 >> 0] | 0;
      $358 = $357 ^ 106;
      HEAP8[$356 >> 0] = $358;
      $359 = (($$11$i68) + 1) | 0;
      $exitcond$i69 = ($359 | 0) == (64);
      if ($exitcond$i69) {
        break;
      } else {
        $$11$i68 = $359;
      }
    }
    HEAP32[$348 >> 2] = 64;
    dest = $349;
    src = $$pre$phi471Z2D;
    stop = dest + 64 | 0;
    do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    _secp256k1_sha256_transform($11, $349);
    $360 = HEAP32[$348 >> 2] | 0;
    $361 = $360 & 63;
    $362 = (($360) + 32) | 0;
    HEAP32[$348 >> 2] = $362;
    $363 = (($361) + 32) | 0;
    $364 = ($363 >>> 0) > (63);
    if ($364) {
      $$02023$i$i82 = 32;
      $$02122$i$i83 = $$pre$phi475Z2D;
      $$024$i$i81 = $361;
      while (1) {
        $365 = (($349) + ($$024$i$i81) | 0);
        $366 = (64 - ($$024$i$i81)) | 0;
        _memcpy(($365 | 0), ($$02122$i$i83 | 0), ($366 | 0)) | 0;
        $367 = (($$02122$i$i83) + ($366) | 0);
        $368 = (($$02023$i$i82) - ($366)) | 0;
        _secp256k1_sha256_transform($11, $349);
        $369 = ($368 >>> 0) > (63);
        if ($369) {
          $$02023$i$i82 = $368;
          $$02122$i$i83 = $367;
          $$024$i$i81 = 0;
        } else {
          break;
        }
      }
      $370 = ($368 | 0) == (0);
      if (!($370)) {
        $$0$lcssa$i$i86357 = 0;
        $$020$lcssa$i$i85356 = $368;
        $$021$lcssa$i$i84355 = $367;
        label = 70;
      }
    } else {
      $$0$lcssa$i$i86357 = $361;
      $$020$lcssa$i$i85356 = 32;
      $$021$lcssa$i$i84355 = $$pre$phi475Z2D;
      label = 70;
    }
    if ((label | 0) == 70) {
      $371 = (($349) + ($$0$lcssa$i$i86357) | 0);
      _memcpy(($371 | 0), ($$021$lcssa$i$i84355 | 0), ($$020$lcssa$i$i85356 | 0)) | 0;
    }
    $372 = HEAP32[$348 >> 2] | 0;
    $373 = $372 >>> 29;
    $374 = $373 << 24;
    HEAP32[$2 >> 2] = $374;
    $375 = $372 << 27;
    $376 = $372 << 11;
    $377 = $376 & 16711680;
    $378 = $377 | $375;
    $379 = $372 >>> 5;
    $380 = $379 & 65280;
    $381 = $378 | $380;
    $382 = $372 >>> 21;
    $383 = $382 & 255;
    $384 = $381 | $383;
    HEAP32[$350 >> 2] = $384;
    $385 = (119 - ($372)) | 0;
    $386 = $385 & 63;
    $387 = (($386) + 1) | 0;
    $388 = $372 & 63;
    $389 = (($372) + ($387)) | 0;
    HEAP32[$348 >> 2] = $389;
    $390 = (($388) + ($387)) | 0;
    $391 = ($390 >>> 0) > (63);
    if ($391) {
      $$02023$i209 = $387;
      $$02122$i210 = 1612;
      $$024$i208 = $388;
      while (1) {
        $392 = (($349) + ($$024$i208) | 0);
        $393 = (64 - ($$024$i208)) | 0;
        _memcpy(($392 | 0), ($$02122$i210 | 0), ($393 | 0)) | 0;
        $394 = (($$02122$i210) + ($393) | 0);
        $395 = (($$02023$i209) - ($393)) | 0;
        _secp256k1_sha256_transform($11, $349);
        $396 = ($395 >>> 0) > (63);
        if ($396) {
          $$02023$i209 = $395;
          $$02122$i210 = $394;
          $$024$i208 = 0;
        } else {
          break;
        }
      }
      $397 = ($395 | 0) == (0);
      if (!($397)) {
        $$0$lcssa$i213360 = 0;
        $$020$lcssa$i212359 = $395;
        $$021$lcssa$i211358 = $394;
        label = 74;
      }
    } else {
      $$0$lcssa$i213360 = $388;
      $$020$lcssa$i212359 = $387;
      $$021$lcssa$i211358 = 1612;
      label = 74;
    }
    if ((label | 0) == 74) {
      $398 = (($349) + ($$0$lcssa$i213360) | 0);
      _memcpy(($398 | 0), ($$021$lcssa$i211358 | 0), ($$020$lcssa$i212359 | 0)) | 0;
    }
    $399 = HEAP32[$348 >> 2] | 0;
    $400 = $399 & 63;
    $401 = (($399) + 8) | 0;
    HEAP32[$348 >> 2] = $401;
    $402 = (($400) + 8) | 0;
    $403 = ($402 >>> 0) > (63);
    if ($403) {
      $$02023$i173 = 8;
      $$02122$i174 = $2;
      $$024$i172 = $400;
      while (1) {
        $404 = (($349) + ($$024$i172) | 0);
        $405 = (64 - ($$024$i172)) | 0;
        _memcpy(($404 | 0), ($$02122$i174 | 0), ($405 | 0)) | 0;
        $406 = (($$02122$i174) + ($405) | 0);
        $407 = (($$02023$i173) - ($405)) | 0;
        _secp256k1_sha256_transform($11, $349);
        $408 = ($407 >>> 0) > (63);
        if ($408) {
          $$02023$i173 = $407;
          $$02122$i174 = $406;
          $$024$i172 = 0;
        } else {
          break;
        }
      }
      $409 = ($407 | 0) == (0);
      if (!($409)) {
        $$0$lcssa$i177363 = 0;
        $$020$lcssa$i176362 = $407;
        $$021$lcssa$i175361 = $406;
        label = 78;
      }
    } else {
      $$0$lcssa$i177363 = $400;
      $$020$lcssa$i176362 = 8;
      $$021$lcssa$i175361 = $2;
      label = 78;
    }
    if ((label | 0) == 78) {
      $410 = (($349) + ($$0$lcssa$i177363) | 0);
      _memcpy(($410 | 0), ($$021$lcssa$i175361 | 0), ($$020$lcssa$i176362 | 0)) | 0;
    }
    $411 = HEAP32[$11 >> 2] | 0;
    $412 = (_llvm_bswap_i32(($411 | 0)) | 0);
    HEAP32[$11 >> 2] = 0;
    $413 = HEAP32[$341 >> 2] | 0;
    $414 = (_llvm_bswap_i32(($413 | 0)) | 0);
    HEAP32[$341 >> 2] = 0;
    $415 = HEAP32[$342 >> 2] | 0;
    $416 = (_llvm_bswap_i32(($415 | 0)) | 0);
    HEAP32[$342 >> 2] = 0;
    $417 = HEAP32[$343 >> 2] | 0;
    $418 = (_llvm_bswap_i32(($417 | 0)) | 0);
    HEAP32[$343 >> 2] = 0;
    $419 = HEAP32[$344 >> 2] | 0;
    $420 = (_llvm_bswap_i32(($419 | 0)) | 0);
    HEAP32[$344 >> 2] = 0;
    $421 = HEAP32[$345 >> 2] | 0;
    $422 = (_llvm_bswap_i32(($421 | 0)) | 0);
    HEAP32[$345 >> 2] = 0;
    $423 = HEAP32[$346 >> 2] | 0;
    $424 = (_llvm_bswap_i32(($423 | 0)) | 0);
    HEAP32[$346 >> 2] = 0;
    $425 = HEAP32[$347 >> 2] | 0;
    $426 = (_llvm_bswap_i32(($425 | 0)) | 0);
    HEAP32[$347 >> 2] = 0;
    HEAP32[$$sroa$0288$0$$sroa_cast$pre$phiZZZZZZ2D >> 2] = $412;
    HEAP32[$$sroa$4290$0$$sroa_cast$pre$phiZZZZZZ2D >> 2] = $414;
    HEAP32[$$sroa$5292$0$$sroa_cast$pre$phiZZZZZZ2D >> 2] = $416;
    HEAP32[$$sroa$6294$0$$sroa_cast$pre$phiZZZZZZ2D >> 2] = $418;
    HEAP32[$$sroa$7296$0$$sroa_cast$pre$phiZZZZZZ2D >> 2] = $420;
    HEAP32[$$sroa$8298$0$$sroa_cast$pre$phiZZZZZZ2D >> 2] = $422;
    HEAP32[$$sroa$9300$0$$sroa_cast$pre$phiZZZZZZ2D >> 2] = $424;
    HEAP32[$$sroa$10302$0$$sroa_cast$pre$phiZZZZZZ2D >> 2] = $426;
    $427 = HEAP32[$339 >> 2] | 0;
    $428 = $427 & 63;
    $429 = (($427) + 32) | 0;
    HEAP32[$339 >> 2] = $429;
    $430 = (($428) + 32) | 0;
    $431 = ($430 >>> 0) > (63);
    if ($431) {
      $$02023$i$i91 = 32;
      $$02122$i$i92 = $$pre$phi477Z2D;
      $$024$i$i90 = $428;
      while (1) {
        $432 = (($340) + ($$024$i$i90) | 0);
        $433 = (64 - ($$024$i$i90)) | 0;
        _memcpy(($432 | 0), ($$02122$i$i92 | 0), ($433 | 0)) | 0;
        $434 = (($$02122$i$i92) + ($433) | 0);
        $435 = (($$02023$i$i91) - ($433)) | 0;
        _secp256k1_sha256_transform($331, $340);
        $436 = ($435 >>> 0) > (63);
        if ($436) {
          $$02023$i$i91 = $435;
          $$02122$i$i92 = $434;
          $$024$i$i90 = 0;
        } else {
          break;
        }
      }
      $437 = ($435 | 0) == (0);
      if (!($437)) {
        $$0$lcssa$i6$i94 = 0;
        $$020$lcssa$i5$i95 = $435;
        $$021$lcssa$i4$i96 = $434;
        label = 82;
      }
    } else {
      $$0$lcssa$i6$i94 = $428;
      $$020$lcssa$i5$i95 = 32;
      $$021$lcssa$i4$i96 = $$pre$phi477Z2D;
      label = 82;
    }
    if ((label | 0) == 82) {
      $438 = (($340) + ($$0$lcssa$i6$i94) | 0);
      _memcpy(($438 | 0), ($$021$lcssa$i4$i96 | 0), ($$020$lcssa$i5$i95 | 0)) | 0;
    }
    $439 = HEAP32[$339 >> 2] | 0;
    $440 = $439 >>> 29;
    $441 = $440 << 24;
    HEAP32[$5 >> 2] = $441;
    $442 = $439 << 27;
    $443 = $439 << 11;
    $444 = $443 & 16711680;
    $445 = $444 | $442;
    $446 = $439 >>> 5;
    $447 = $446 & 65280;
    $448 = $445 | $447;
    $449 = $439 >>> 21;
    $450 = $449 & 255;
    $451 = $448 | $450;
    HEAP32[$351 >> 2] = $451;
    $452 = (119 - ($439)) | 0;
    $453 = $452 & 63;
    $454 = (($453) + 1) | 0;
    $455 = $439 & 63;
    $456 = (($439) + ($454)) | 0;
    HEAP32[$339 >> 2] = $456;
    $457 = (($455) + ($454)) | 0;
    $458 = ($457 >>> 0) > (63);
    if ($458) {
      $$02023$i182 = $454;
      $$02122$i183 = 1612;
      $$024$i181 = $455;
      while (1) {
        $459 = (($340) + ($$024$i181) | 0);
        $460 = (64 - ($$024$i181)) | 0;
        _memcpy(($459 | 0), ($$02122$i183 | 0), ($460 | 0)) | 0;
        $461 = (($$02122$i183) + ($460) | 0);
        $462 = (($$02023$i182) - ($460)) | 0;
        _secp256k1_sha256_transform($331, $340);
        $463 = ($462 >>> 0) > (63);
        if ($463) {
          $$02023$i182 = $462;
          $$02122$i183 = $461;
          $$024$i181 = 0;
        } else {
          break;
        }
      }
      $464 = ($462 | 0) == (0);
      if (!($464)) {
        $$0$lcssa$i186366 = 0;
        $$020$lcssa$i185365 = $462;
        $$021$lcssa$i184364 = $461;
        label = 86;
      }
    } else {
      $$0$lcssa$i186366 = $455;
      $$020$lcssa$i185365 = $454;
      $$021$lcssa$i184364 = 1612;
      label = 86;
    }
    if ((label | 0) == 86) {
      $465 = (($340) + ($$0$lcssa$i186366) | 0);
      _memcpy(($465 | 0), ($$021$lcssa$i184364 | 0), ($$020$lcssa$i185365 | 0)) | 0;
    }
    $466 = HEAP32[$339 >> 2] | 0;
    $467 = $466 & 63;
    $468 = (($466) + 8) | 0;
    HEAP32[$339 >> 2] = $468;
    $469 = (($467) + 8) | 0;
    $470 = ($469 >>> 0) > (63);
    if ($470) {
      $$02023$i101 = 8;
      $$02122$i102 = $5;
      $$024$i100 = $467;
      while (1) {
        $471 = (($340) + ($$024$i100) | 0);
        $472 = (64 - ($$024$i100)) | 0;
        _memcpy(($471 | 0), ($$02122$i102 | 0), ($472 | 0)) | 0;
        $473 = (($$02122$i102) + ($472) | 0);
        $474 = (($$02023$i101) - ($472)) | 0;
        _secp256k1_sha256_transform($331, $340);
        $475 = ($474 >>> 0) > (63);
        if ($475) {
          $$02023$i101 = $474;
          $$02122$i102 = $473;
          $$024$i100 = 0;
        } else {
          break;
        }
      }
      $476 = ($474 | 0) == (0);
      if ($476) {
        $478 = HEAP32[$331 >> 2] | 0;
        $479 = (_llvm_bswap_i32(($478 | 0)) | 0);
        HEAP32[$331 >> 2] = 0;
        $480 = HEAP32[$332 >> 2] | 0;
        $481 = (_llvm_bswap_i32(($480 | 0)) | 0);
        HEAP32[$332 >> 2] = 0;
        $482 = HEAP32[$333 >> 2] | 0;
        $483 = (_llvm_bswap_i32(($482 | 0)) | 0);
        HEAP32[$333 >> 2] = 0;
        $484 = HEAP32[$334 >> 2] | 0;
        $485 = (_llvm_bswap_i32(($484 | 0)) | 0);
        HEAP32[$334 >> 2] = 0;
        $486 = HEAP32[$335 >> 2] | 0;
        $487 = (_llvm_bswap_i32(($486 | 0)) | 0);
        HEAP32[$335 >> 2] = 0;
        $488 = HEAP32[$336 >> 2] | 0;
        $489 = (_llvm_bswap_i32(($488 | 0)) | 0);
        HEAP32[$336 >> 2] = 0;
        $490 = HEAP32[$337 >> 2] | 0;
        $491 = (_llvm_bswap_i32(($490 | 0)) | 0);
        HEAP32[$337 >> 2] = 0;
        $492 = HEAP32[$338 >> 2] | 0;
        $493 = (_llvm_bswap_i32(($492 | 0)) | 0);
        HEAP8[$$sroa$0240$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $479 & 255;
        HEAP8[$$sroa$0240$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($479 >> 8) & 255;
        HEAP8[$$sroa$0240$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($479 >> 16) & 255;
        HEAP8[$$sroa$0240$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $479 >> 24;
        HEAP8[$$sroa$4242$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $481 & 255;
        HEAP8[$$sroa$4242$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($481 >> 8) & 255;
        HEAP8[$$sroa$4242$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($481 >> 16) & 255;
        HEAP8[$$sroa$4242$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $481 >> 24;
        HEAP8[$$sroa$5244$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $483 & 255;
        HEAP8[$$sroa$5244$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($483 >> 8) & 255;
        HEAP8[$$sroa$5244$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($483 >> 16) & 255;
        HEAP8[$$sroa$5244$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $483 >> 24;
        HEAP8[$$sroa$6246$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $485 & 255;
        HEAP8[$$sroa$6246$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($485 >> 8) & 255;
        HEAP8[$$sroa$6246$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($485 >> 16) & 255;
        HEAP8[$$sroa$6246$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $485 >> 24;
        HEAP8[$$sroa$7248$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $487 & 255;
        HEAP8[$$sroa$7248$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($487 >> 8) & 255;
        HEAP8[$$sroa$7248$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($487 >> 16) & 255;
        HEAP8[$$sroa$7248$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $487 >> 24;
        HEAP8[$$sroa$8250$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $489 & 255;
        HEAP8[$$sroa$8250$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($489 >> 8) & 255;
        HEAP8[$$sroa$8250$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($489 >> 16) & 255;
        HEAP8[$$sroa$8250$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $489 >> 24;
        HEAP8[$$sroa$9252$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $491 & 255;
        HEAP8[$$sroa$9252$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($491 >> 8) & 255;
        HEAP8[$$sroa$9252$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($491 >> 16) & 255;
        HEAP8[$$sroa$9252$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $491 >> 24;
        HEAP8[$$sroa$10254$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $493 & 255;
        HEAP8[$$sroa$10254$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($493 >> 8) & 255;
        HEAP8[$$sroa$10254$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($493 >> 16) & 255;
        HEAP8[$$sroa$10254$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $493 >> 24;
        dest = $1;
        src = $$pre$phi475Z2D;
        stop = dest + 32 | 0;
        do {
          HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
          dest = dest + 1 | 0;
          src = src + 1 | 0;
        } while ((dest | 0) < (stop | 0));
        HEAP32[$12 >> 2] = 1;
        STACKTOP = sp;
        return;
      } else {
        $$0$lcssa$i105369 = 0;
        $$020$lcssa$i104368 = $474;
        $$021$lcssa$i103367 = $473;
      }
    } else {
      $$0$lcssa$i105369 = $467;
      $$020$lcssa$i104368 = 8;
      $$021$lcssa$i103367 = $5;
    }
    $477 = (($340) + ($$0$lcssa$i105369) | 0);
    _memcpy(($477 | 0), ($$021$lcssa$i103367 | 0), ($$020$lcssa$i104368 | 0)) | 0;
    $478 = HEAP32[$331 >> 2] | 0;
    $479 = (_llvm_bswap_i32(($478 | 0)) | 0);
    HEAP32[$331 >> 2] = 0;
    $480 = HEAP32[$332 >> 2] | 0;
    $481 = (_llvm_bswap_i32(($480 | 0)) | 0);
    HEAP32[$332 >> 2] = 0;
    $482 = HEAP32[$333 >> 2] | 0;
    $483 = (_llvm_bswap_i32(($482 | 0)) | 0);
    HEAP32[$333 >> 2] = 0;
    $484 = HEAP32[$334 >> 2] | 0;
    $485 = (_llvm_bswap_i32(($484 | 0)) | 0);
    HEAP32[$334 >> 2] = 0;
    $486 = HEAP32[$335 >> 2] | 0;
    $487 = (_llvm_bswap_i32(($486 | 0)) | 0);
    HEAP32[$335 >> 2] = 0;
    $488 = HEAP32[$336 >> 2] | 0;
    $489 = (_llvm_bswap_i32(($488 | 0)) | 0);
    HEAP32[$336 >> 2] = 0;
    $490 = HEAP32[$337 >> 2] | 0;
    $491 = (_llvm_bswap_i32(($490 | 0)) | 0);
    HEAP32[$337 >> 2] = 0;
    $492 = HEAP32[$338 >> 2] | 0;
    $493 = (_llvm_bswap_i32(($492 | 0)) | 0);
    HEAP8[$$sroa$0240$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $479 & 255;
    HEAP8[$$sroa$0240$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($479 >> 8) & 255;
    HEAP8[$$sroa$0240$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($479 >> 16) & 255;
    HEAP8[$$sroa$0240$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $479 >> 24;
    HEAP8[$$sroa$4242$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $481 & 255;
    HEAP8[$$sroa$4242$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($481 >> 8) & 255;
    HEAP8[$$sroa$4242$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($481 >> 16) & 255;
    HEAP8[$$sroa$4242$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $481 >> 24;
    HEAP8[$$sroa$5244$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $483 & 255;
    HEAP8[$$sroa$5244$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($483 >> 8) & 255;
    HEAP8[$$sroa$5244$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($483 >> 16) & 255;
    HEAP8[$$sroa$5244$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $483 >> 24;
    HEAP8[$$sroa$6246$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $485 & 255;
    HEAP8[$$sroa$6246$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($485 >> 8) & 255;
    HEAP8[$$sroa$6246$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($485 >> 16) & 255;
    HEAP8[$$sroa$6246$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $485 >> 24;
    HEAP8[$$sroa$7248$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $487 & 255;
    HEAP8[$$sroa$7248$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($487 >> 8) & 255;
    HEAP8[$$sroa$7248$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($487 >> 16) & 255;
    HEAP8[$$sroa$7248$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $487 >> 24;
    HEAP8[$$sroa$8250$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $489 & 255;
    HEAP8[$$sroa$8250$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($489 >> 8) & 255;
    HEAP8[$$sroa$8250$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($489 >> 16) & 255;
    HEAP8[$$sroa$8250$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $489 >> 24;
    HEAP8[$$sroa$9252$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $491 & 255;
    HEAP8[$$sroa$9252$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($491 >> 8) & 255;
    HEAP8[$$sroa$9252$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($491 >> 16) & 255;
    HEAP8[$$sroa$9252$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $491 >> 24;
    HEAP8[$$sroa$10254$0$$sroa_cast$pre$phiZZZZZZ2D >> 0] = $493 & 255;
    HEAP8[$$sroa$10254$0$$sroa_cast$pre$phiZZZZZZ2D + 1 >> 0] = ($493 >> 8) & 255;
    HEAP8[$$sroa$10254$0$$sroa_cast$pre$phiZZZZZZ2D + 2 >> 0] = ($493 >> 16) & 255;
    HEAP8[$$sroa$10254$0$$sroa_cast$pre$phiZZZZZZ2D + 3 >> 0] = $493 >> 24;
    dest = $1;
    src = $$pre$phi475Z2D;
    stop = dest + 32 | 0;
    do {
      HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
    } while ((dest | 0) < (stop | 0));
    HEAP32[$12 >> 2] = 1;
    STACKTOP = sp;
    return;
  }

  function _secp256k1_rangeproof_genrand($0, $1, $2, $3, $4, $5, $6, $7, $8) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    $4 = $4 | 0;
    $5 = $5 | 0;
    $6 = $6 | 0;
    $7 = $7 | 0;
    $8 = $8 | 0;
    var $$04955 = 0, $$05057 = 0, $$05057$us = 0, $$05161 = 0, $$052$lcssa = 0, $$05260 = 0, $$062 = 0, $$1$lcssa = 0,
      $$153$lcssa = 0, $$15356 = 0, $$15356$us = 0, $$158 = 0, $$158$us = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0,
      $103 = 0, $104 = 0, $105 = 0;
    var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0,
      $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
    var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0,
      $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
    var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0,
      $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
    var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0,
      $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
    var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0,
      $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $20 = 0, $21 = 0;
    var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0,
      $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
    var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0,
      $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
    var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0,
      $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0;
    var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0,
      $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
    var $exitcond71 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 144 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144 | 0);
    $9 = sp + 112 | 0;
    $10 = sp + 40 | 0;
    $11 = sp + 8 | 0;
    $12 = sp;
    _secp256k1_rfc6979_hmac_sha256_initialize($10, $5, $6, 33, $7, $8);
    ;HEAP32[$11 >> 2] = 0 | 0;
    HEAP32[$11 + 4 >> 2] = 0 | 0;
    HEAP32[$11 + 8 >> 2] = 0 | 0;
    HEAP32[$11 + 12 >> 2] = 0 | 0;
    HEAP32[$11 + 16 >> 2] = 0 | 0;
    HEAP32[$11 + 20 >> 2] = 0 | 0;
    HEAP32[$11 + 24 >> 2] = 0 | 0;
    HEAP32[$11 + 28 >> 2] = 0 | 0;
    $13 = ($4 | 0) > (0);
    if (!($13)) {
      $$052$lcssa = 1;
      STACKTOP = sp;
      return ($$052$lcssa | 0);
    }
    $14 = (($4) + -1) | 0;
    $15 = ($2 | 0) == (0 | 0);
    $16 = ((($11)) + 4 | 0);
    $17 = ((($11)) + 8 | 0);
    $18 = ((($11)) + 12 | 0);
    $19 = ((($11)) + 16 | 0);
    $20 = ((($11)) + 20 | 0);
    $21 = ((($11)) + 24 | 0);
    $22 = ((($11)) + 28 | 0);
    $$05161 = 0;
    $$05260 = 1;
    $$062 = 0;
    while (1) {
      $23 = ($$05161 | 0) < ($14 | 0);
      if ($23) {
        _secp256k1_rfc6979_hmac_sha256_generate($10, $9);
        $24 = (($0) + ($$05161 << 5) | 0);
        $25 = (((($0) + ($$05161 << 5) | 0)) + 4 | 0);
        $26 = (((($0) + ($$05161 << 5) | 0)) + 8 | 0);
        $27 = (((($0) + ($$05161 << 5) | 0)) + 12 | 0);
        $28 = (((($0) + ($$05161 << 5) | 0)) + 16 | 0);
        $29 = (((($0) + ($$05161 << 5) | 0)) + 20 | 0);
        $30 = (((($0) + ($$05161 << 5) | 0)) + 24 | 0);
        $31 = (((($0) + ($$05161 << 5) | 0)) + 28 | 0);
        while (1) {
          _secp256k1_rfc6979_hmac_sha256_generate($10, $9);
          _secp256k1_scalar_set_b32($24, $9, $12);
          $32 = HEAP32[$12 >> 2] | 0;
          $33 = ($32 | 0) == (0);
          if (!($33)) {
            continue;
          }
          $34 = HEAP32[$24 >> 2] | 0;
          $35 = HEAP32[$25 >> 2] | 0;
          $36 = $35 | $34;
          $37 = HEAP32[$26 >> 2] | 0;
          $38 = $36 | $37;
          $39 = HEAP32[$27 >> 2] | 0;
          $40 = $38 | $39;
          $41 = HEAP32[$28 >> 2] | 0;
          $42 = $40 | $41;
          $43 = HEAP32[$29 >> 2] | 0;
          $44 = $42 | $43;
          $45 = HEAP32[$30 >> 2] | 0;
          $46 = $44 | $45;
          $47 = HEAP32[$31 >> 2] | 0;
          $48 = $46 | $47;
          $49 = ($48 | 0) == (0);
          if (!($49)) {
            break;
          }
        }
        _secp256k1_scalar_add($11, $11, $24);
      } else {
        $50 = HEAP32[$11 >> 2] | 0;
        $51 = HEAP32[$16 >> 2] | 0;
        $52 = $51 | $50;
        $53 = HEAP32[$17 >> 2] | 0;
        $54 = $52 | $53;
        $55 = HEAP32[$18 >> 2] | 0;
        $56 = $54 | $55;
        $57 = HEAP32[$19 >> 2] | 0;
        $58 = $56 | $57;
        $59 = HEAP32[$20 >> 2] | 0;
        $60 = $58 | $59;
        $61 = HEAP32[$21 >> 2] | 0;
        $62 = $60 | $61;
        $63 = HEAP32[$22 >> 2] | 0;
        $64 = $62 | $63;
        $65 = ($64 | 0) != (0);
        $66 = $65 << 31 >> 31;
        $67 = $50 ^ -1;
        $68 = (_i64Add(($67 | 0), 0, -801750718, 0) | 0);
        $69 = tempRet0;
        $70 = $66 & $68;
        HEAP32[$11 >> 2] = $70;
        $71 = $51 ^ -1;
        $72 = $69 | -1076732276;
        $73 = (_i64Add(($71 | 0), 0, ($72 | 0), 0) | 0);
        $74 = tempRet0;
        $75 = $73 & $66;
        HEAP32[$16 >> 2] = $75;
        $76 = $53 ^ -1;
        $77 = (_i64Add(($76 | 0), 0, -1354194885, 0) | 0);
        $78 = tempRet0;
        $79 = (_i64Add(($77 | 0), ($78 | 0), ($74 | 0), 0) | 0);
        $80 = tempRet0;
        $81 = $79 & $66;
        HEAP32[$17 >> 2] = $81;
        $82 = $55 ^ -1;
        $83 = (_i64Add(($82 | 0), 0, -1162945306, 0) | 0);
        $84 = tempRet0;
        $85 = (_i64Add(($83 | 0), ($84 | 0), ($80 | 0), 0) | 0);
        $86 = tempRet0;
        $87 = $85 & $66;
        HEAP32[$18 >> 2] = $87;
        $88 = $57 ^ -1;
        $89 = (_i64Add(($88 | 0), 0, -2, 0) | 0);
        $90 = tempRet0;
        $91 = (_i64Add(($89 | 0), ($90 | 0), ($86 | 0), 0) | 0);
        $92 = tempRet0;
        $93 = $91 & $66;
        HEAP32[$19 >> 2] = $93;
        $94 = $59 ^ -1;
        $95 = (_i64Add(($94 | 0), 0, -1, 0) | 0);
        $96 = tempRet0;
        $97 = (_i64Add(($95 | 0), ($96 | 0), ($92 | 0), 0) | 0);
        $98 = tempRet0;
        $99 = $97 & $66;
        HEAP32[$20 >> 2] = $99;
        $100 = $61 ^ -1;
        $101 = (_i64Add(($100 | 0), 0, -1, 0) | 0);
        $102 = tempRet0;
        $103 = (_i64Add(($101 | 0), ($102 | 0), ($98 | 0), 0) | 0);
        $104 = tempRet0;
        $105 = $103 & $66;
        HEAP32[$21 >> 2] = $105;
        $106 = $63 ^ -1;
        $107 = (_i64Add(($106 | 0), 0, -1, 0) | 0);
        $108 = tempRet0;
        $109 = (_i64Add(($107 | 0), ($108 | 0), ($104 | 0), 0) | 0);
        $110 = tempRet0;
        $111 = $109 & $66;
        HEAP32[$22 >> 2] = $111;
        $112 = (($0) + ($$05161 << 5) | 0);
        ;HEAP32[$112 >> 2] = HEAP32[$11 >> 2] | 0;
        HEAP32[$112 + 4 >> 2] = HEAP32[$11 + 4 >> 2] | 0;
        HEAP32[$112 + 8 >> 2] = HEAP32[$11 + 8 >> 2] | 0;
        HEAP32[$112 + 12 >> 2] = HEAP32[$11 + 12 >> 2] | 0;
        HEAP32[$112 + 16 >> 2] = HEAP32[$11 + 16 >> 2] | 0;
        HEAP32[$112 + 20 >> 2] = HEAP32[$11 + 20 >> 2] | 0;
        HEAP32[$112 + 24 >> 2] = HEAP32[$11 + 24 >> 2] | 0;
        HEAP32[$112 + 28 >> 2] = HEAP32[$11 + 28 >> 2] | 0;
      }
      $113 = (($3) + ($$05161 << 2) | 0);
      $114 = HEAP32[$113 >> 2] | 0;
      $115 = ($114 | 0) > (0);
      L14: do {
        if ($115) {
          $116 = $$05161 << 2;
          if ($15) {
            $$05057$us = 0;
            $$15356$us = $$05260;
            $$158$us = $$062;
            while (1) {
              _secp256k1_rfc6979_hmac_sha256_generate($10, $9);
              $117 = (($1) + ($$158$us << 5) | 0);
              _secp256k1_scalar_set_b32($117, $9, $12);
              $118 = HEAP32[$12 >> 2] | 0;
              $119 = ($118 | 0) == (0);
              if ($119) {
                $120 = HEAP32[$117 >> 2] | 0;
                $121 = (((($1) + ($$158$us << 5) | 0)) + 4 | 0);
                $122 = HEAP32[$121 >> 2] | 0;
                $123 = $122 | $120;
                $124 = (((($1) + ($$158$us << 5) | 0)) + 8 | 0);
                $125 = HEAP32[$124 >> 2] | 0;
                $126 = $123 | $125;
                $127 = (((($1) + ($$158$us << 5) | 0)) + 12 | 0);
                $128 = HEAP32[$127 >> 2] | 0;
                $129 = $126 | $128;
                $130 = (((($1) + ($$158$us << 5) | 0)) + 16 | 0);
                $131 = HEAP32[$130 >> 2] | 0;
                $132 = $129 | $131;
                $133 = (((($1) + ($$158$us << 5) | 0)) + 20 | 0);
                $134 = HEAP32[$133 >> 2] | 0;
                $135 = $132 | $134;
                $136 = (((($1) + ($$158$us << 5) | 0)) + 24 | 0);
                $137 = HEAP32[$136 >> 2] | 0;
                $138 = $135 | $137;
                $139 = (((($1) + ($$158$us << 5) | 0)) + 28 | 0);
                $140 = HEAP32[$139 >> 2] | 0;
                $141 = $138 | $140;
                $142 = ($141 | 0) == (0);
                $144 = $142;
              } else {
                $144 = 1;
              }
              $143 = $144 ^ 1;
              $145 = $143 & 1;
              $146 = $145 & $$15356$us;
              $147 = (($$158$us) + 1) | 0;
              $148 = (($$05057$us) + 1) | 0;
              $149 = HEAP32[$113 >> 2] | 0;
              $150 = ($148 | 0) < ($149 | 0);
              if ($150) {
                $$05057$us = $148;
                $$15356$us = $146;
                $$158$us = $147;
              } else {
                $$1$lcssa = $147;
                $$153$lcssa = $146;
                break L14;
              }
            }
          } else {
            $$05057 = 0;
            $$15356 = $$05260;
            $$158 = $$062;
          }
          while (1) {
            _secp256k1_rfc6979_hmac_sha256_generate($10, $9);
            $151 = (($$05057) + ($116)) | 0;
            $152 = $151 << 5;
            $$04955 = 0;
            while (1) {
              $153 = (($$04955) + ($152)) | 0;
              $154 = (($2) + ($153) | 0);
              $155 = HEAP8[$154 >> 0] | 0;
              $156 = (($9) + ($$04955) | 0);
              $157 = HEAP8[$156 >> 0] | 0;
              $158 = $157 ^ $155;
              HEAP8[$156 >> 0] = $158;
              HEAP8[$154 >> 0] = $158;
              $159 = (($$04955) + 1) | 0;
              $exitcond = ($159 | 0) == (32);
              if ($exitcond) {
                break;
              } else {
                $$04955 = $159;
              }
            }
            $160 = (($1) + ($$158 << 5) | 0);
            _secp256k1_scalar_set_b32($160, $9, $12);
            $161 = HEAP32[$12 >> 2] | 0;
            $162 = ($161 | 0) == (0);
            if ($162) {
              $163 = HEAP32[$160 >> 2] | 0;
              $164 = (((($1) + ($$158 << 5) | 0)) + 4 | 0);
              $165 = HEAP32[$164 >> 2] | 0;
              $166 = $165 | $163;
              $167 = (((($1) + ($$158 << 5) | 0)) + 8 | 0);
              $168 = HEAP32[$167 >> 2] | 0;
              $169 = $166 | $168;
              $170 = (((($1) + ($$158 << 5) | 0)) + 12 | 0);
              $171 = HEAP32[$170 >> 2] | 0;
              $172 = $169 | $171;
              $173 = (((($1) + ($$158 << 5) | 0)) + 16 | 0);
              $174 = HEAP32[$173 >> 2] | 0;
              $175 = $172 | $174;
              $176 = (((($1) + ($$158 << 5) | 0)) + 20 | 0);
              $177 = HEAP32[$176 >> 2] | 0;
              $178 = $175 | $177;
              $179 = (((($1) + ($$158 << 5) | 0)) + 24 | 0);
              $180 = HEAP32[$179 >> 2] | 0;
              $181 = $178 | $180;
              $182 = (((($1) + ($$158 << 5) | 0)) + 28 | 0);
              $183 = HEAP32[$182 >> 2] | 0;
              $184 = $181 | $183;
              $185 = ($184 | 0) == (0);
              $187 = $185;
            } else {
              $187 = 1;
            }
            $186 = $187 ^ 1;
            $188 = $186 & 1;
            $189 = $188 & $$15356;
            $190 = (($$158) + 1) | 0;
            $191 = (($$05057) + 1) | 0;
            $192 = HEAP32[$113 >> 2] | 0;
            $193 = ($191 | 0) < ($192 | 0);
            if ($193) {
              $$05057 = $191;
              $$15356 = $189;
              $$158 = $190;
            } else {
              $$1$lcssa = $190;
              $$153$lcssa = $189;
              break;
            }
          }
        } else {
          $$1$lcssa = $$062;
          $$153$lcssa = $$05260;
        }
      } while (0);
      $194 = (($$05161) + 1) | 0;
      $exitcond71 = ($194 | 0) == ($4 | 0);
      if ($exitcond71) {
        $$052$lcssa = $$153$lcssa;
        break;
      } else {
        $$05161 = $194;
        $$05260 = $$153$lcssa;
        $$062 = $$1$lcssa;
      }
    }
    STACKTOP = sp;
    return ($$052$lcssa | 0);
  }

  function _emscripten_get_global_libc() {
    var label = 0, sp = 0;
    sp = STACKTOP;
    return (4216 | 0);
  }

  function ___stdio_close($0) {
    $0 = $0 | 0;
    var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $vararg_buffer = sp;
    $1 = ((($0)) + 60 | 0);
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = (_dummy_243($2) | 0);
    HEAP32[$vararg_buffer >> 2] = $3;
    $4 = (___syscall6(6, ($vararg_buffer | 0)) | 0);
    $5 = (___syscall_ret($4) | 0);
    STACKTOP = sp;
    return ($5 | 0);
  }

  function ___stdio_seek($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0,
      $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 32 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32 | 0);
    $vararg_buffer = sp;
    $3 = sp + 20 | 0;
    $4 = ((($0)) + 60 | 0);
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $3;
    HEAP32[$vararg_buffer >> 2] = $5;
    $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
    HEAP32[$vararg_ptr1 >> 2] = 0;
    $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
    HEAP32[$vararg_ptr2 >> 2] = $1;
    $vararg_ptr3 = ((($vararg_buffer)) + 12 | 0);
    HEAP32[$vararg_ptr3 >> 2] = $6;
    $vararg_ptr4 = ((($vararg_buffer)) + 16 | 0);
    HEAP32[$vararg_ptr4 >> 2] = $2;
    $7 = (___syscall140(140, ($vararg_buffer | 0)) | 0);
    $8 = (___syscall_ret($7) | 0);
    $9 = ($8 | 0) < (0);
    if ($9) {
      HEAP32[$3 >> 2] = -1;
      $10 = -1;
    } else {
      $$pre = HEAP32[$3 >> 2] | 0;
      $10 = $$pre;
    }
    STACKTOP = sp;
    return ($10 | 0);
  }

  function ___syscall_ret($0) {
    $0 = $0 | 0;
    var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $1 = ($0 >>> 0) > (4294963200);
    if ($1) {
      $2 = (0 - ($0)) | 0;
      $3 = (___errno_location() | 0);
      HEAP32[$3 >> 2] = $2;
      $$0 = -1;
    } else {
      $$0 = $0;
    }
    return ($$0 | 0);
  }

  function ___errno_location() {
    var $0 = 0, $1 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $0 = (___pthread_self_304() | 0);
    $1 = ((($0)) + 64 | 0);
    return ($1 | 0);
  }

  function ___pthread_self_304() {
    var $0 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $0 = (_pthread_self() | 0);
    return ($0 | 0);
  }

  function _pthread_self() {
    var label = 0, sp = 0;
    sp = STACKTOP;
    return (256 | 0);
  }

  function _dummy_243($0) {
    $0 = $0 | 0;
    var label = 0, sp = 0;
    sp = STACKTOP;
    return ($0 | 0);
  }

  function ___stdio_write($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0,
      $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
    var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0,
      $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
    var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0,
      $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0,
      $vararg_ptr6 = 0;
    var $vararg_ptr7 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 48 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48 | 0);
    $vararg_buffer3 = sp + 16 | 0;
    $vararg_buffer = sp;
    $3 = sp + 32 | 0;
    $4 = ((($0)) + 28 | 0);
    $5 = HEAP32[$4 >> 2] | 0;
    HEAP32[$3 >> 2] = $5;
    $6 = ((($3)) + 4 | 0);
    $7 = ((($0)) + 20 | 0);
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = (($8) - ($5)) | 0;
    HEAP32[$6 >> 2] = $9;
    $10 = ((($3)) + 8 | 0);
    HEAP32[$10 >> 2] = $1;
    $11 = ((($3)) + 12 | 0);
    HEAP32[$11 >> 2] = $2;
    $12 = (($9) + ($2)) | 0;
    $13 = ((($0)) + 60 | 0);
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $3;
    HEAP32[$vararg_buffer >> 2] = $14;
    $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
    HEAP32[$vararg_ptr1 >> 2] = $15;
    $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
    HEAP32[$vararg_ptr2 >> 2] = 2;
    $16 = (___syscall146(146, ($vararg_buffer | 0)) | 0);
    $17 = (___syscall_ret($16) | 0);
    $18 = ($12 | 0) == ($17 | 0);
    L1: do {
      if ($18) {
        label = 3;
      } else {
        $$04756 = 2;
        $$04855 = $12;
        $$04954 = $3;
        $25 = $17;
        while (1) {
          $26 = ($25 | 0) < (0);
          if ($26) {
            break;
          }
          $34 = (($$04855) - ($25)) | 0;
          $35 = ((($$04954)) + 4 | 0);
          $36 = HEAP32[$35 >> 2] | 0;
          $37 = ($25 >>> 0) > ($36 >>> 0);
          $38 = ((($$04954)) + 8 | 0);
          $$150 = $37 ? $38 : $$04954;
          $39 = $37 << 31 >> 31;
          $$1 = (($39) + ($$04756)) | 0;
          $40 = $37 ? $36 : 0;
          $$0 = (($25) - ($40)) | 0;
          $41 = HEAP32[$$150 >> 2] | 0;
          $42 = (($41) + ($$0) | 0);
          HEAP32[$$150 >> 2] = $42;
          $43 = ((($$150)) + 4 | 0);
          $44 = HEAP32[$43 >> 2] | 0;
          $45 = (($44) - ($$0)) | 0;
          HEAP32[$43 >> 2] = $45;
          $46 = HEAP32[$13 >> 2] | 0;
          $47 = $$150;
          HEAP32[$vararg_buffer3 >> 2] = $46;
          $vararg_ptr6 = ((($vararg_buffer3)) + 4 | 0);
          HEAP32[$vararg_ptr6 >> 2] = $47;
          $vararg_ptr7 = ((($vararg_buffer3)) + 8 | 0);
          HEAP32[$vararg_ptr7 >> 2] = $$1;
          $48 = (___syscall146(146, ($vararg_buffer3 | 0)) | 0);
          $49 = (___syscall_ret($48) | 0);
          $50 = ($34 | 0) == ($49 | 0);
          if ($50) {
            label = 3;
            break L1;
          } else {
            $$04756 = $$1;
            $$04855 = $34;
            $$04954 = $$150;
            $25 = $49;
          }
        }
        $27 = ((($0)) + 16 | 0);
        HEAP32[$27 >> 2] = 0;
        HEAP32[$4 >> 2] = 0;
        HEAP32[$7 >> 2] = 0;
        $28 = HEAP32[$0 >> 2] | 0;
        $29 = $28 | 32;
        HEAP32[$0 >> 2] = $29;
        $30 = ($$04756 | 0) == (2);
        if ($30) {
          $$051 = 0;
        } else {
          $31 = ((($$04954)) + 4 | 0);
          $32 = HEAP32[$31 >> 2] | 0;
          $33 = (($2) - ($32)) | 0;
          $$051 = $33;
        }
      }
    } while (0);
    if ((label | 0) == 3) {
      $19 = ((($0)) + 44 | 0);
      $20 = HEAP32[$19 >> 2] | 0;
      $21 = ((($0)) + 48 | 0);
      $22 = HEAP32[$21 >> 2] | 0;
      $23 = (($20) + ($22) | 0);
      $24 = ((($0)) + 16 | 0);
      HEAP32[$24 >> 2] = $23;
      HEAP32[$4 >> 2] = $20;
      HEAP32[$7 >> 2] = $20;
      $$051 = $2;
    }
    STACKTOP = sp;
    return ($$051 | 0);
  }

  function _strerror($0) {
    $0 = $0 | 0;
    var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $1 = (___pthread_self_307() | 0);
    $2 = ((($1)) + 188 | 0);
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = (___strerror_l($0, $3) | 0);
    return ($4 | 0);
  }

  function ___pthread_self_307() {
    var $0 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $0 = (_pthread_self() | 0);
    return ($0 | 0);
  }

  function ___strerror_l($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0,
      $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
    var label = 0, sp = 0;
    sp = STACKTOP;
    $$016 = 0;
    while (1) {
      $3 = (1790 + ($$016) | 0);
      $4 = HEAP8[$3 >> 0] | 0;
      $5 = $4 & 255;
      $6 = ($5 | 0) == ($0 | 0);
      if ($6) {
        label = 2;
        break;
      }
      $7 = (($$016) + 1) | 0;
      $8 = ($7 | 0) == (87);
      if ($8) {
        $$01214 = 1878;
        $$115 = 87;
        label = 5;
        break;
      } else {
        $$016 = $7;
      }
    }
    if ((label | 0) == 2) {
      $2 = ($$016 | 0) == (0);
      if ($2) {
        $$012$lcssa = 1878;
      } else {
        $$01214 = 1878;
        $$115 = $$016;
        label = 5;
      }
    }
    if ((label | 0) == 5) {
      while (1) {
        label = 0;
        $$113 = $$01214;
        while (1) {
          $9 = HEAP8[$$113 >> 0] | 0;
          $10 = ($9 << 24 >> 24) == (0);
          $11 = ((($$113)) + 1 | 0);
          if ($10) {
            break;
          } else {
            $$113 = $11;
          }
        }
        $12 = (($$115) + -1) | 0;
        $13 = ($12 | 0) == (0);
        if ($13) {
          $$012$lcssa = $11;
          break;
        } else {
          $$01214 = $11;
          $$115 = $12;
          label = 5;
        }
      }
    }
    $14 = ((($1)) + 20 | 0);
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = (___lctrans($$012$lcssa, $15) | 0);
    return ($16 | 0);
  }

  function ___lctrans($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $2 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $2 = (___lctrans_impl($0, $1) | 0);
    return ($2 | 0);
  }

  function ___lctrans_impl($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $2 = ($1 | 0) == (0 | 0);
    if ($2) {
      $$0 = 0;
    } else {
      $3 = HEAP32[$1 >> 2] | 0;
      $4 = ((($1)) + 4 | 0);
      $5 = HEAP32[$4 >> 2] | 0;
      $6 = (___mo_lookup($3, $5, $0) | 0);
      $$0 = $6;
    }
    $7 = ($$0 | 0) != (0 | 0);
    $8 = $7 ? $$0 : $0;
    return ($8 | 0);
  }

  function ___mo_lookup($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0,
      $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
    var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0,
      $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
    var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0,
      $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
    var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0,
      $or$cond104 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $3 = HEAP32[$0 >> 2] | 0;
    $4 = (($3) + 1794895138) | 0;
    $5 = ((($0)) + 8 | 0);
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = (_swapc($6, $4) | 0);
    $8 = ((($0)) + 12 | 0);
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = (_swapc($9, $4) | 0);
    $11 = ((($0)) + 16 | 0);
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = (_swapc($12, $4) | 0);
    $14 = $1 >>> 2;
    $15 = ($7 >>> 0) < ($14 >>> 0);
    L1: do {
      if ($15) {
        $16 = $7 << 2;
        $17 = (($1) - ($16)) | 0;
        $18 = ($10 >>> 0) < ($17 >>> 0);
        $19 = ($13 >>> 0) < ($17 >>> 0);
        $or$cond = $18 & $19;
        if ($or$cond) {
          $20 = $13 | $10;
          $21 = $20 & 3;
          $22 = ($21 | 0) == (0);
          if ($22) {
            $23 = $10 >>> 2;
            $24 = $13 >>> 2;
            $$090 = 0;
            $$094 = $7;
            while (1) {
              $25 = $$094 >>> 1;
              $26 = (($$090) + ($25)) | 0;
              $27 = $26 << 1;
              $28 = (($27) + ($23)) | 0;
              $29 = (($0) + ($28 << 2) | 0);
              $30 = HEAP32[$29 >> 2] | 0;
              $31 = (_swapc($30, $4) | 0);
              $32 = (($28) + 1) | 0;
              $33 = (($0) + ($32 << 2) | 0);
              $34 = HEAP32[$33 >> 2] | 0;
              $35 = (_swapc($34, $4) | 0);
              $36 = ($35 >>> 0) < ($1 >>> 0);
              $37 = (($1) - ($35)) | 0;
              $38 = ($31 >>> 0) < ($37 >>> 0);
              $or$cond102 = $36 & $38;
              if (!($or$cond102)) {
                $$4 = 0;
                break L1;
              }
              $39 = (($35) + ($31)) | 0;
              $40 = (($0) + ($39) | 0);
              $41 = HEAP8[$40 >> 0] | 0;
              $42 = ($41 << 24 >> 24) == (0);
              if (!($42)) {
                $$4 = 0;
                break L1;
              }
              $43 = (($0) + ($35) | 0);
              $44 = (_strcmp($2, $43) | 0);
              $45 = ($44 | 0) == (0);
              if ($45) {
                break;
              }
              $62 = ($$094 | 0) == (1);
              $63 = ($44 | 0) < (0);
              $64 = (($$094) - ($25)) | 0;
              $$195 = $63 ? $25 : $64;
              $$191 = $63 ? $$090 : $26;
              if ($62) {
                $$4 = 0;
                break L1;
              } else {
                $$090 = $$191;
                $$094 = $$195;
              }
            }
            $46 = (($27) + ($24)) | 0;
            $47 = (($0) + ($46 << 2) | 0);
            $48 = HEAP32[$47 >> 2] | 0;
            $49 = (_swapc($48, $4) | 0);
            $50 = (($46) + 1) | 0;
            $51 = (($0) + ($50 << 2) | 0);
            $52 = HEAP32[$51 >> 2] | 0;
            $53 = (_swapc($52, $4) | 0);
            $54 = ($53 >>> 0) < ($1 >>> 0);
            $55 = (($1) - ($53)) | 0;
            $56 = ($49 >>> 0) < ($55 >>> 0);
            $or$cond104 = $54 & $56;
            if ($or$cond104) {
              $57 = (($0) + ($53) | 0);
              $58 = (($53) + ($49)) | 0;
              $59 = (($0) + ($58) | 0);
              $60 = HEAP8[$59 >> 0] | 0;
              $61 = ($60 << 24 >> 24) == (0);
              $$ = $61 ? $57 : 0;
              $$4 = $$;
            } else {
              $$4 = 0;
            }
          } else {
            $$4 = 0;
          }
        } else {
          $$4 = 0;
        }
      } else {
        $$4 = 0;
      }
    } while (0);
    return ($$4 | 0);
  }

  function _swapc($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $2 = ($1 | 0) == (0);
    $3 = (_llvm_bswap_i32(($0 | 0)) | 0);
    $$ = $2 ? $0 : $3;
    return ($$ | 0);
  }

  function _strcmp($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0,
      $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
    var sp = 0;
    sp = STACKTOP;
    $2 = HEAP8[$0 >> 0] | 0;
    $3 = HEAP8[$1 >> 0] | 0;
    $4 = ($2 << 24 >> 24) != ($3 << 24 >> 24);
    $5 = ($2 << 24 >> 24) == (0);
    $or$cond9 = $5 | $4;
    if ($or$cond9) {
      $$lcssa = $3;
      $$lcssa8 = $2;
    } else {
      $$011 = $1;
      $$0710 = $0;
      while (1) {
        $6 = ((($$0710)) + 1 | 0);
        $7 = ((($$011)) + 1 | 0);
        $8 = HEAP8[$6 >> 0] | 0;
        $9 = HEAP8[$7 >> 0] | 0;
        $10 = ($8 << 24 >> 24) != ($9 << 24 >> 24);
        $11 = ($8 << 24 >> 24) == (0);
        $or$cond = $11 | $10;
        if ($or$cond) {
          $$lcssa = $9;
          $$lcssa8 = $8;
          break;
        } else {
          $$011 = $7;
          $$0710 = $6;
        }
      }
    }
    $12 = $$lcssa8 & 255;
    $13 = $$lcssa & 255;
    $14 = (($12) - ($13)) | 0;
    return ($14 | 0);
  }

  function _memchr($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0,
      $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0,
      $12 = 0, $13 = 0, $14 = 0;
    var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0,
      $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
    var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0,
      $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $3 = $1 & 255;
    $4 = $0;
    $5 = $4 & 3;
    $6 = ($5 | 0) != (0);
    $7 = ($2 | 0) != (0);
    $or$cond53 = $7 & $6;
    L1: do {
      if ($or$cond53) {
        $8 = $1 & 255;
        $$03555 = $0;
        $$03654 = $2;
        while (1) {
          $9 = HEAP8[$$03555 >> 0] | 0;
          $10 = ($9 << 24 >> 24) == ($8 << 24 >> 24);
          if ($10) {
            $$035$lcssa65 = $$03555;
            $$036$lcssa64 = $$03654;
            label = 6;
            break L1;
          }
          $11 = ((($$03555)) + 1 | 0);
          $12 = (($$03654) + -1) | 0;
          $13 = $11;
          $14 = $13 & 3;
          $15 = ($14 | 0) != (0);
          $16 = ($12 | 0) != (0);
          $or$cond = $16 & $15;
          if ($or$cond) {
            $$03555 = $11;
            $$03654 = $12;
          } else {
            $$035$lcssa = $11;
            $$036$lcssa = $12;
            $$lcssa = $16;
            label = 5;
            break;
          }
        }
      } else {
        $$035$lcssa = $0;
        $$036$lcssa = $2;
        $$lcssa = $7;
        label = 5;
      }
    } while (0);
    if ((label | 0) == 5) {
      if ($$lcssa) {
        $$035$lcssa65 = $$035$lcssa;
        $$036$lcssa64 = $$036$lcssa;
        label = 6;
      } else {
        $$2 = $$035$lcssa;
        $$3 = 0;
      }
    }
    L8: do {
      if ((label | 0) == 6) {
        $17 = HEAP8[$$035$lcssa65 >> 0] | 0;
        $18 = $1 & 255;
        $19 = ($17 << 24 >> 24) == ($18 << 24 >> 24);
        if ($19) {
          $$2 = $$035$lcssa65;
          $$3 = $$036$lcssa64;
        } else {
          $20 = Math_imul($3, 16843009) | 0;
          $21 = ($$036$lcssa64 >>> 0) > (3);
          L11: do {
            if ($21) {
              $$046 = $$035$lcssa65;
              $$13745 = $$036$lcssa64;
              while (1) {
                $22 = HEAP32[$$046 >> 2] | 0;
                $23 = $22 ^ $20;
                $24 = (($23) + -16843009) | 0;
                $25 = $23 & -2139062144;
                $26 = $25 ^ -2139062144;
                $27 = $26 & $24;
                $28 = ($27 | 0) == (0);
                if (!($28)) {
                  break;
                }
                $29 = ((($$046)) + 4 | 0);
                $30 = (($$13745) + -4) | 0;
                $31 = ($30 >>> 0) > (3);
                if ($31) {
                  $$046 = $29;
                  $$13745 = $30;
                } else {
                  $$0$lcssa = $29;
                  $$137$lcssa = $30;
                  label = 11;
                  break L11;
                }
              }
              $$140 = $$046;
              $$23839 = $$13745;
            } else {
              $$0$lcssa = $$035$lcssa65;
              $$137$lcssa = $$036$lcssa64;
              label = 11;
            }
          } while (0);
          if ((label | 0) == 11) {
            $32 = ($$137$lcssa | 0) == (0);
            if ($32) {
              $$2 = $$0$lcssa;
              $$3 = 0;
              break;
            } else {
              $$140 = $$0$lcssa;
              $$23839 = $$137$lcssa;
            }
          }
          while (1) {
            $33 = HEAP8[$$140 >> 0] | 0;
            $34 = ($33 << 24 >> 24) == ($18 << 24 >> 24);
            if ($34) {
              $$2 = $$140;
              $$3 = $$23839;
              break L8;
            }
            $35 = ((($$140)) + 1 | 0);
            $36 = (($$23839) + -1) | 0;
            $37 = ($36 | 0) == (0);
            if ($37) {
              $$2 = $35;
              $$3 = 0;
              break;
            } else {
              $$140 = $35;
              $$23839 = $36;
            }
          }
        }
      }
    } while (0);
    $38 = ($$3 | 0) != (0);
    $39 = $38 ? $$2 : 0;
    return ($39 | 0);
  }

  function _vfprintf($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0,
      $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
    var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0,
      $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
    var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 224 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224 | 0);
    $3 = sp + 120 | 0;
    $4 = sp + 80 | 0;
    $5 = sp;
    $6 = sp + 136 | 0;
    dest = $4;
    stop = dest + 40 | 0;
    do {
      HEAP32[dest >> 2] = 0 | 0;
      dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $vacopy_currentptr = HEAP32[$2 >> 2] | 0;
    HEAP32[$3 >> 2] = $vacopy_currentptr;
    $7 = (_printf_core(0, $1, $3, $5, $4) | 0);
    $8 = ($7 | 0) < (0);
    if ($8) {
      $$0 = -1;
    } else {
      $9 = ((($0)) + 76 | 0);
      $10 = HEAP32[$9 >> 2] | 0;
      $11 = ($10 | 0) > (-1);
      if ($11) {
        $12 = (___lockfile($0) | 0);
        $39 = $12;
      } else {
        $39 = 0;
      }
      $13 = HEAP32[$0 >> 2] | 0;
      $14 = $13 & 32;
      $15 = ((($0)) + 74 | 0);
      $16 = HEAP8[$15 >> 0] | 0;
      $17 = ($16 << 24 >> 24) < (1);
      if ($17) {
        $18 = $13 & -33;
        HEAP32[$0 >> 2] = $18;
      }
      $19 = ((($0)) + 48 | 0);
      $20 = HEAP32[$19 >> 2] | 0;
      $21 = ($20 | 0) == (0);
      if ($21) {
        $23 = ((($0)) + 44 | 0);
        $24 = HEAP32[$23 >> 2] | 0;
        HEAP32[$23 >> 2] = $6;
        $25 = ((($0)) + 28 | 0);
        HEAP32[$25 >> 2] = $6;
        $26 = ((($0)) + 20 | 0);
        HEAP32[$26 >> 2] = $6;
        HEAP32[$19 >> 2] = 80;
        $27 = ((($6)) + 80 | 0);
        $28 = ((($0)) + 16 | 0);
        HEAP32[$28 >> 2] = $27;
        $29 = (_printf_core($0, $1, $3, $5, $4) | 0);
        $30 = ($24 | 0) == (0 | 0);
        if ($30) {
          $$1 = $29;
        } else {
          $31 = ((($0)) + 36 | 0);
          $32 = HEAP32[$31 >> 2] | 0;
          (FUNCTION_TABLE_iiii[$32 & 3]($0, 0, 0) | 0);
          $33 = HEAP32[$26 >> 2] | 0;
          $34 = ($33 | 0) == (0 | 0);
          $$ = $34 ? -1 : $29;
          HEAP32[$23 >> 2] = $24;
          HEAP32[$19 >> 2] = 0;
          HEAP32[$28 >> 2] = 0;
          HEAP32[$25 >> 2] = 0;
          HEAP32[$26 >> 2] = 0;
          $$1 = $$;
        }
      } else {
        $22 = (_printf_core($0, $1, $3, $5, $4) | 0);
        $$1 = $22;
      }
      $35 = HEAP32[$0 >> 2] | 0;
      $36 = $35 & 32;
      $37 = ($36 | 0) == (0);
      $$1$ = $37 ? $$1 : -1;
      $38 = $35 | $14;
      HEAP32[$0 >> 2] = $38;
      $40 = ($39 | 0) == (0);
      if (!($40)) {
        ___unlockfile($0);
      }
      $$0 = $$1$;
    }
    STACKTOP = sp;
    return ($$0 | 0);
  }

  function _printf_core($0, $1, $2, $3, $4) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    $4 = $4 | 0;
    var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0,
      $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0,
      $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
    var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0,
      $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0,
      $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
    var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0,
      $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0,
      $$3257 = 0, $$3265 = 0;
    var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0,
      $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0,
      $104 = 0, $105 = 0;
    var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0,
      $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
    var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0,
      $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
    var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0,
      $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
    var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0,
      $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
    var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0,
      $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
    var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0,
      $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
    var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0,
      $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
    var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0,
      $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
    var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0,
      $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
    var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0,
      $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
    var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0,
      $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
    var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0,
      $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
    var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0,
      $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
    var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0,
      $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
    var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0,
      $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
    var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0,
      $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
    var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0,
      $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0,
      $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0,
      $isdigittmp$ = 0, $isdigittmp274 = 0;
    var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0,
      $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 64 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64 | 0);
    $5 = sp + 16 | 0;
    $6 = sp;
    $7 = sp + 24 | 0;
    $8 = sp + 8 | 0;
    $9 = sp + 20 | 0;
    HEAP32[$5 >> 2] = $1;
    $10 = ($0 | 0) != (0 | 0);
    $11 = ((($7)) + 40 | 0);
    $12 = $11;
    $13 = ((($7)) + 39 | 0);
    $14 = ((($8)) + 4 | 0);
    $$0243 = 0;
    $$0247 = 0;
    $$0269 = 0;
    $21 = $1;
    L1: while (1) {
      $15 = ($$0247 | 0) > (-1);
      do {
        if ($15) {
          $16 = (2147483647 - ($$0247)) | 0;
          $17 = ($$0243 | 0) > ($16 | 0);
          if ($17) {
            $18 = (___errno_location() | 0);
            HEAP32[$18 >> 2] = 75;
            $$1248 = -1;
            break;
          } else {
            $19 = (($$0243) + ($$0247)) | 0;
            $$1248 = $19;
            break;
          }
        } else {
          $$1248 = $$0247;
        }
      } while (0);
      $20 = HEAP8[$21 >> 0] | 0;
      $22 = ($20 << 24 >> 24) == (0);
      if ($22) {
        label = 87;
        break;
      } else {
        $23 = $20;
        $25 = $21;
      }
      L9: while (1) {
        switch ($23 << 24 >> 24) {
          case 37: {
            $$0249306 = $25;
            $27 = $25;
            label = 9;
            break L9;
            break;
          }
          case 0: {
            $$0249$lcssa = $25;
            $39 = $25;
            break L9;
            break;
          }
          default: {
          }
        }
        $24 = ((($25)) + 1 | 0);
        HEAP32[$5 >> 2] = $24;
        $$pre = HEAP8[$24 >> 0] | 0;
        $23 = $$pre;
        $25 = $24;
      }
      L12: do {
        if ((label | 0) == 9) {
          while (1) {
            label = 0;
            $26 = ((($27)) + 1 | 0);
            $28 = HEAP8[$26 >> 0] | 0;
            $29 = ($28 << 24 >> 24) == (37);
            if (!($29)) {
              $$0249$lcssa = $$0249306;
              $39 = $27;
              break L12;
            }
            $30 = ((($$0249306)) + 1 | 0);
            $31 = ((($27)) + 2 | 0);
            HEAP32[$5 >> 2] = $31;
            $32 = HEAP8[$31 >> 0] | 0;
            $33 = ($32 << 24 >> 24) == (37);
            if ($33) {
              $$0249306 = $30;
              $27 = $31;
              label = 9;
            } else {
              $$0249$lcssa = $30;
              $39 = $31;
              break;
            }
          }
        }
      } while (0);
      $34 = $$0249$lcssa;
      $35 = $21;
      $36 = (($34) - ($35)) | 0;
      if ($10) {
        _out($0, $21, $36);
      }
      $37 = ($36 | 0) == (0);
      if (!($37)) {
        $$0269$phi = $$0269;
        $$0243 = $36;
        $$0247 = $$1248;
        $21 = $39;
        $$0269 = $$0269$phi;
        continue;
      }
      $38 = ((($39)) + 1 | 0);
      $40 = HEAP8[$38 >> 0] | 0;
      $41 = $40 << 24 >> 24;
      $isdigittmp = (($41) + -48) | 0;
      $isdigit = ($isdigittmp >>> 0) < (10);
      if ($isdigit) {
        $42 = ((($39)) + 2 | 0);
        $43 = HEAP8[$42 >> 0] | 0;
        $44 = ($43 << 24 >> 24) == (36);
        $45 = ((($39)) + 3 | 0);
        $$377 = $44 ? $45 : $38;
        $$$0269 = $44 ? 1 : $$0269;
        $isdigittmp$ = $44 ? $isdigittmp : -1;
        $$0253 = $isdigittmp$;
        $$1270 = $$$0269;
        $storemerge = $$377;
      } else {
        $$0253 = -1;
        $$1270 = $$0269;
        $storemerge = $38;
      }
      HEAP32[$5 >> 2] = $storemerge;
      $46 = HEAP8[$storemerge >> 0] | 0;
      $47 = $46 << 24 >> 24;
      $48 = (($47) + -32) | 0;
      $49 = ($48 >>> 0) < (32);
      L24: do {
        if ($49) {
          $$0262311 = 0;
          $329 = $46;
          $51 = $48;
          $storemerge273310 = $storemerge;
          while (1) {
            $50 = 1 << $51;
            $52 = $50 & 75913;
            $53 = ($52 | 0) == (0);
            if ($53) {
              $$0262$lcssa = $$0262311;
              $$lcssa295 = $329;
              $62 = $storemerge273310;
              break L24;
            }
            $54 = $50 | $$0262311;
            $55 = ((($storemerge273310)) + 1 | 0);
            HEAP32[$5 >> 2] = $55;
            $56 = HEAP8[$55 >> 0] | 0;
            $57 = $56 << 24 >> 24;
            $58 = (($57) + -32) | 0;
            $59 = ($58 >>> 0) < (32);
            if ($59) {
              $$0262311 = $54;
              $329 = $56;
              $51 = $58;
              $storemerge273310 = $55;
            } else {
              $$0262$lcssa = $54;
              $$lcssa295 = $56;
              $62 = $55;
              break;
            }
          }
        } else {
          $$0262$lcssa = 0;
          $$lcssa295 = $46;
          $62 = $storemerge;
        }
      } while (0);
      $60 = ($$lcssa295 << 24 >> 24) == (42);
      if ($60) {
        $61 = ((($62)) + 1 | 0);
        $63 = HEAP8[$61 >> 0] | 0;
        $64 = $63 << 24 >> 24;
        $isdigittmp276 = (($64) + -48) | 0;
        $isdigit277 = ($isdigittmp276 >>> 0) < (10);
        if ($isdigit277) {
          $65 = ((($62)) + 2 | 0);
          $66 = HEAP8[$65 >> 0] | 0;
          $67 = ($66 << 24 >> 24) == (36);
          if ($67) {
            $68 = (($4) + ($isdigittmp276 << 2) | 0);
            HEAP32[$68 >> 2] = 10;
            $69 = HEAP8[$61 >> 0] | 0;
            $70 = $69 << 24 >> 24;
            $71 = (($70) + -48) | 0;
            $72 = (($3) + ($71 << 3) | 0);
            $73 = $72;
            $74 = $73;
            $75 = HEAP32[$74 >> 2] | 0;
            $76 = (($73) + 4) | 0;
            $77 = $76;
            $78 = HEAP32[$77 >> 2] | 0;
            $79 = ((($62)) + 3 | 0);
            $$0259 = $75;
            $$2271 = 1;
            $storemerge278 = $79;
          } else {
            label = 23;
          }
        } else {
          label = 23;
        }
        if ((label | 0) == 23) {
          label = 0;
          $80 = ($$1270 | 0) == (0);
          if (!($80)) {
            $$0 = -1;
            break;
          }
          if ($10) {
            $arglist_current = HEAP32[$2 >> 2] | 0;
            $81 = $arglist_current;
            $82 = ((0) + 4 | 0);
            $expanded4 = $82;
            $expanded = (($expanded4) - 1) | 0;
            $83 = (($81) + ($expanded)) | 0;
            $84 = ((0) + 4 | 0);
            $expanded8 = $84;
            $expanded7 = (($expanded8) - 1) | 0;
            $expanded6 = $expanded7 ^ -1;
            $85 = $83 & $expanded6;
            $86 = $85;
            $87 = HEAP32[$86 >> 2] | 0;
            $arglist_next = ((($86)) + 4 | 0);
            HEAP32[$2 >> 2] = $arglist_next;
            $$0259 = $87;
            $$2271 = 0;
            $storemerge278 = $61;
          } else {
            $$0259 = 0;
            $$2271 = 0;
            $storemerge278 = $61;
          }
        }
        HEAP32[$5 >> 2] = $storemerge278;
        $88 = ($$0259 | 0) < (0);
        $89 = $$0262$lcssa | 8192;
        $90 = (0 - ($$0259)) | 0;
        $$$0262 = $88 ? $89 : $$0262$lcssa;
        $$$0259 = $88 ? $90 : $$0259;
        $$1260 = $$$0259;
        $$1263 = $$$0262;
        $$3272 = $$2271;
        $94 = $storemerge278;
      } else {
        $91 = (_getint($5) | 0);
        $92 = ($91 | 0) < (0);
        if ($92) {
          $$0 = -1;
          break;
        }
        $$pre346 = HEAP32[$5 >> 2] | 0;
        $$1260 = $91;
        $$1263 = $$0262$lcssa;
        $$3272 = $$1270;
        $94 = $$pre346;
      }
      $93 = HEAP8[$94 >> 0] | 0;
      $95 = ($93 << 24 >> 24) == (46);
      do {
        if ($95) {
          $96 = ((($94)) + 1 | 0);
          $97 = HEAP8[$96 >> 0] | 0;
          $98 = ($97 << 24 >> 24) == (42);
          if (!($98)) {
            $125 = ((($94)) + 1 | 0);
            HEAP32[$5 >> 2] = $125;
            $126 = (_getint($5) | 0);
            $$pre347$pre = HEAP32[$5 >> 2] | 0;
            $$0254 = $126;
            $$pre347 = $$pre347$pre;
            break;
          }
          $99 = ((($94)) + 2 | 0);
          $100 = HEAP8[$99 >> 0] | 0;
          $101 = $100 << 24 >> 24;
          $isdigittmp274 = (($101) + -48) | 0;
          $isdigit275 = ($isdigittmp274 >>> 0) < (10);
          if ($isdigit275) {
            $102 = ((($94)) + 3 | 0);
            $103 = HEAP8[$102 >> 0] | 0;
            $104 = ($103 << 24 >> 24) == (36);
            if ($104) {
              $105 = (($4) + ($isdigittmp274 << 2) | 0);
              HEAP32[$105 >> 2] = 10;
              $106 = HEAP8[$99 >> 0] | 0;
              $107 = $106 << 24 >> 24;
              $108 = (($107) + -48) | 0;
              $109 = (($3) + ($108 << 3) | 0);
              $110 = $109;
              $111 = $110;
              $112 = HEAP32[$111 >> 2] | 0;
              $113 = (($110) + 4) | 0;
              $114 = $113;
              $115 = HEAP32[$114 >> 2] | 0;
              $116 = ((($94)) + 4 | 0);
              HEAP32[$5 >> 2] = $116;
              $$0254 = $112;
              $$pre347 = $116;
              break;
            }
          }
          $117 = ($$3272 | 0) == (0);
          if (!($117)) {
            $$0 = -1;
            break L1;
          }
          if ($10) {
            $arglist_current2 = HEAP32[$2 >> 2] | 0;
            $118 = $arglist_current2;
            $119 = ((0) + 4 | 0);
            $expanded11 = $119;
            $expanded10 = (($expanded11) - 1) | 0;
            $120 = (($118) + ($expanded10)) | 0;
            $121 = ((0) + 4 | 0);
            $expanded15 = $121;
            $expanded14 = (($expanded15) - 1) | 0;
            $expanded13 = $expanded14 ^ -1;
            $122 = $120 & $expanded13;
            $123 = $122;
            $124 = HEAP32[$123 >> 2] | 0;
            $arglist_next3 = ((($123)) + 4 | 0);
            HEAP32[$2 >> 2] = $arglist_next3;
            $330 = $124;
          } else {
            $330 = 0;
          }
          HEAP32[$5 >> 2] = $99;
          $$0254 = $330;
          $$pre347 = $99;
        } else {
          $$0254 = -1;
          $$pre347 = $94;
        }
      } while (0);
      $$0252 = 0;
      $128 = $$pre347;
      while (1) {
        $127 = HEAP8[$128 >> 0] | 0;
        $129 = $127 << 24 >> 24;
        $130 = (($129) + -65) | 0;
        $131 = ($130 >>> 0) > (57);
        if ($131) {
          $$0 = -1;
          break L1;
        }
        $132 = ((($128)) + 1 | 0);
        HEAP32[$5 >> 2] = $132;
        $133 = HEAP8[$128 >> 0] | 0;
        $134 = $133 << 24 >> 24;
        $135 = (($134) + -65) | 0;
        $136 = ((3682 + (($$0252 * 58) | 0) | 0) + ($135) | 0);
        $137 = HEAP8[$136 >> 0] | 0;
        $138 = $137 & 255;
        $139 = (($138) + -1) | 0;
        $140 = ($139 >>> 0) < (8);
        if ($140) {
          $$0252 = $138;
          $128 = $132;
        } else {
          break;
        }
      }
      $141 = ($137 << 24 >> 24) == (0);
      if ($141) {
        $$0 = -1;
        break;
      }
      $142 = ($137 << 24 >> 24) == (19);
      $143 = ($$0253 | 0) > (-1);
      do {
        if ($142) {
          if ($143) {
            $$0 = -1;
            break L1;
          } else {
            label = 49;
          }
        } else {
          if ($143) {
            $144 = (($4) + ($$0253 << 2) | 0);
            HEAP32[$144 >> 2] = $138;
            $145 = (($3) + ($$0253 << 3) | 0);
            $146 = $145;
            $147 = $146;
            $148 = HEAP32[$147 >> 2] | 0;
            $149 = (($146) + 4) | 0;
            $150 = $149;
            $151 = HEAP32[$150 >> 2] | 0;
            $152 = $6;
            $153 = $152;
            HEAP32[$153 >> 2] = $148;
            $154 = (($152) + 4) | 0;
            $155 = $154;
            HEAP32[$155 >> 2] = $151;
            label = 49;
            break;
          }
          if (!($10)) {
            $$0 = 0;
            break L1;
          }
          _pop_arg($6, $138, $2);
        }
      } while (0);
      if ((label | 0) == 49) {
        label = 0;
        if (!($10)) {
          $$0243 = 0;
          $$0247 = $$1248;
          $$0269 = $$3272;
          $21 = $132;
          continue;
        }
      }
      $156 = HEAP8[$128 >> 0] | 0;
      $157 = $156 << 24 >> 24;
      $158 = ($$0252 | 0) != (0);
      $159 = $157 & 15;
      $160 = ($159 | 0) == (3);
      $or$cond281 = $158 & $160;
      $161 = $157 & -33;
      $$0235 = $or$cond281 ? $161 : $157;
      $162 = $$1263 & 8192;
      $163 = ($162 | 0) == (0);
      $164 = $$1263 & -65537;
      $$1263$ = $163 ? $$1263 : $164;
      L71: do {
        switch ($$0235 | 0) {
          case 110: {
            $trunc = $$0252 & 255;
            switch ($trunc << 24 >> 24) {
              case 0: {
                $171 = HEAP32[$6 >> 2] | 0;
                HEAP32[$171 >> 2] = $$1248;
                $$0243 = 0;
                $$0247 = $$1248;
                $$0269 = $$3272;
                $21 = $132;
                continue L1;
                break;
              }
              case 1: {
                $172 = HEAP32[$6 >> 2] | 0;
                HEAP32[$172 >> 2] = $$1248;
                $$0243 = 0;
                $$0247 = $$1248;
                $$0269 = $$3272;
                $21 = $132;
                continue L1;
                break;
              }
              case 2: {
                $173 = ($$1248 | 0) < (0);
                $174 = $173 << 31 >> 31;
                $175 = HEAP32[$6 >> 2] | 0;
                $176 = $175;
                $177 = $176;
                HEAP32[$177 >> 2] = $$1248;
                $178 = (($176) + 4) | 0;
                $179 = $178;
                HEAP32[$179 >> 2] = $174;
                $$0243 = 0;
                $$0247 = $$1248;
                $$0269 = $$3272;
                $21 = $132;
                continue L1;
                break;
              }
              case 3: {
                $180 = $$1248 & 65535;
                $181 = HEAP32[$6 >> 2] | 0;
                HEAP16[$181 >> 1] = $180;
                $$0243 = 0;
                $$0247 = $$1248;
                $$0269 = $$3272;
                $21 = $132;
                continue L1;
                break;
              }
              case 4: {
                $182 = $$1248 & 255;
                $183 = HEAP32[$6 >> 2] | 0;
                HEAP8[$183 >> 0] = $182;
                $$0243 = 0;
                $$0247 = $$1248;
                $$0269 = $$3272;
                $21 = $132;
                continue L1;
                break;
              }
              case 6: {
                $184 = HEAP32[$6 >> 2] | 0;
                HEAP32[$184 >> 2] = $$1248;
                $$0243 = 0;
                $$0247 = $$1248;
                $$0269 = $$3272;
                $21 = $132;
                continue L1;
                break;
              }
              case 7: {
                $185 = ($$1248 | 0) < (0);
                $186 = $185 << 31 >> 31;
                $187 = HEAP32[$6 >> 2] | 0;
                $188 = $187;
                $189 = $188;
                HEAP32[$189 >> 2] = $$1248;
                $190 = (($188) + 4) | 0;
                $191 = $190;
                HEAP32[$191 >> 2] = $186;
                $$0243 = 0;
                $$0247 = $$1248;
                $$0269 = $$3272;
                $21 = $132;
                continue L1;
                break;
              }
              default: {
                $$0243 = 0;
                $$0247 = $$1248;
                $$0269 = $$3272;
                $21 = $132;
                continue L1;
              }
            }
            break;
          }
          case 112: {
            $192 = ($$0254 >>> 0) > (8);
            $193 = $192 ? $$0254 : 8;
            $194 = $$1263$ | 8;
            $$1236 = 120;
            $$1255 = $193;
            $$3265 = $194;
            label = 61;
            break;
          }
          case 88:
          case 120: {
            $$1236 = $$0235;
            $$1255 = $$0254;
            $$3265 = $$1263$;
            label = 61;
            break;
          }
          case 111: {
            $210 = $6;
            $211 = $210;
            $212 = HEAP32[$211 >> 2] | 0;
            $213 = (($210) + 4) | 0;
            $214 = $213;
            $215 = HEAP32[$214 >> 2] | 0;
            $216 = (_fmt_o($212, $215, $11) | 0);
            $217 = $$1263$ & 8;
            $218 = ($217 | 0) == (0);
            $219 = $216;
            $220 = (($12) - ($219)) | 0;
            $221 = ($$0254 | 0) > ($220 | 0);
            $222 = (($220) + 1) | 0;
            $223 = $218 | $221;
            $$0254$$0254$ = $223 ? $$0254 : $222;
            $$0228 = $216;
            $$1233 = 0;
            $$1238 = 4146;
            $$2256 = $$0254$$0254$;
            $$4266 = $$1263$;
            $247 = $212;
            $249 = $215;
            label = 67;
            break;
          }
          case 105:
          case 100: {
            $224 = $6;
            $225 = $224;
            $226 = HEAP32[$225 >> 2] | 0;
            $227 = (($224) + 4) | 0;
            $228 = $227;
            $229 = HEAP32[$228 >> 2] | 0;
            $230 = ($229 | 0) < (0);
            if ($230) {
              $231 = (_i64Subtract(0, 0, ($226 | 0), ($229 | 0)) | 0);
              $232 = tempRet0;
              $233 = $6;
              $234 = $233;
              HEAP32[$234 >> 2] = $231;
              $235 = (($233) + 4) | 0;
              $236 = $235;
              HEAP32[$236 >> 2] = $232;
              $$0232 = 1;
              $$0237 = 4146;
              $242 = $231;
              $243 = $232;
              label = 66;
              break L71;
            } else {
              $237 = $$1263$ & 2048;
              $238 = ($237 | 0) == (0);
              $239 = $$1263$ & 1;
              $240 = ($239 | 0) == (0);
              $$ = $240 ? 4146 : (4148);
              $$$ = $238 ? $$ : (4147);
              $241 = $$1263$ & 2049;
              $narrow = ($241 | 0) != (0);
              $$284$ = $narrow & 1;
              $$0232 = $$284$;
              $$0237 = $$$;
              $242 = $226;
              $243 = $229;
              label = 66;
              break L71;
            }
            break;
          }
          case 117: {
            $165 = $6;
            $166 = $165;
            $167 = HEAP32[$166 >> 2] | 0;
            $168 = (($165) + 4) | 0;
            $169 = $168;
            $170 = HEAP32[$169 >> 2] | 0;
            $$0232 = 0;
            $$0237 = 4146;
            $242 = $167;
            $243 = $170;
            label = 66;
            break;
          }
          case 99: {
            $259 = $6;
            $260 = $259;
            $261 = HEAP32[$260 >> 2] | 0;
            $262 = (($259) + 4) | 0;
            $263 = $262;
            $264 = HEAP32[$263 >> 2] | 0;
            $265 = $261 & 255;
            HEAP8[$13 >> 0] = $265;
            $$2 = $13;
            $$2234 = 0;
            $$2239 = 4146;
            $$2251 = $11;
            $$5 = 1;
            $$6268 = $164;
            break;
          }
          case 109: {
            $266 = (___errno_location() | 0);
            $267 = HEAP32[$266 >> 2] | 0;
            $268 = (_strerror($267) | 0);
            $$1 = $268;
            label = 71;
            break;
          }
          case 115: {
            $269 = HEAP32[$6 >> 2] | 0;
            $270 = ($269 | 0) != (0 | 0);
            $271 = $270 ? $269 : 4156;
            $$1 = $271;
            label = 71;
            break;
          }
          case 67: {
            $278 = $6;
            $279 = $278;
            $280 = HEAP32[$279 >> 2] | 0;
            $281 = (($278) + 4) | 0;
            $282 = $281;
            $283 = HEAP32[$282 >> 2] | 0;
            HEAP32[$8 >> 2] = $280;
            HEAP32[$14 >> 2] = 0;
            HEAP32[$6 >> 2] = $8;
            $$4258355 = -1;
            $331 = $8;
            label = 75;
            break;
          }
          case 83: {
            $$pre349 = HEAP32[$6 >> 2] | 0;
            $284 = ($$0254 | 0) == (0);
            if ($284) {
              _pad($0, 32, $$1260, 0, $$1263$);
              $$0240$lcssa357 = 0;
              label = 84;
            } else {
              $$4258355 = $$0254;
              $331 = $$pre349;
              label = 75;
            }
            break;
          }
          case 65:
          case 71:
          case 70:
          case 69:
          case 97:
          case 103:
          case 102:
          case 101: {
            $306 = +HEAPF64[$6 >> 3];
            $307 = (_fmt_fp($0, $306, $$1260, $$0254, $$1263$, $$0235) | 0);
            $$0243 = $307;
            $$0247 = $$1248;
            $$0269 = $$3272;
            $21 = $132;
            continue L1;
            break;
          }
          default: {
            $$2 = $21;
            $$2234 = 0;
            $$2239 = 4146;
            $$2251 = $11;
            $$5 = $$0254;
            $$6268 = $$1263$;
          }
        }
      } while (0);
      L95: do {
        if ((label | 0) == 61) {
          label = 0;
          $195 = $6;
          $196 = $195;
          $197 = HEAP32[$196 >> 2] | 0;
          $198 = (($195) + 4) | 0;
          $199 = $198;
          $200 = HEAP32[$199 >> 2] | 0;
          $201 = $$1236 & 32;
          $202 = (_fmt_x($197, $200, $11, $201) | 0);
          $203 = ($197 | 0) == (0);
          $204 = ($200 | 0) == (0);
          $205 = $203 & $204;
          $206 = $$3265 & 8;
          $207 = ($206 | 0) == (0);
          $or$cond283 = $207 | $205;
          $208 = $$1236 >> 4;
          $209 = (4146 + ($208) | 0);
          $$289 = $or$cond283 ? 4146 : $209;
          $$290 = $or$cond283 ? 0 : 2;
          $$0228 = $202;
          $$1233 = $$290;
          $$1238 = $$289;
          $$2256 = $$1255;
          $$4266 = $$3265;
          $247 = $197;
          $249 = $200;
          label = 67;
        }
        else if ((label | 0) == 66) {
          label = 0;
          $244 = (_fmt_u($242, $243, $11) | 0);
          $$0228 = $244;
          $$1233 = $$0232;
          $$1238 = $$0237;
          $$2256 = $$0254;
          $$4266 = $$1263$;
          $247 = $242;
          $249 = $243;
          label = 67;
        }
        else if ((label | 0) == 71) {
          label = 0;
          $272 = (_memchr($$1, 0, $$0254) | 0);
          $273 = ($272 | 0) == (0 | 0);
          $274 = $272;
          $275 = $$1;
          $276 = (($274) - ($275)) | 0;
          $277 = (($$1) + ($$0254) | 0);
          $$3257 = $273 ? $$0254 : $276;
          $$1250 = $273 ? $277 : $272;
          $$2 = $$1;
          $$2234 = 0;
          $$2239 = 4146;
          $$2251 = $$1250;
          $$5 = $$3257;
          $$6268 = $164;
        }
        else if ((label | 0) == 75) {
          label = 0;
          $$0229322 = $331;
          $$0240321 = 0;
          $$1244320 = 0;
          while (1) {
            $285 = HEAP32[$$0229322 >> 2] | 0;
            $286 = ($285 | 0) == (0);
            if ($286) {
              $$0240$lcssa = $$0240321;
              $$2245 = $$1244320;
              break;
            }
            $287 = (_wctomb($9, $285) | 0);
            $288 = ($287 | 0) < (0);
            $289 = (($$4258355) - ($$0240321)) | 0;
            $290 = ($287 >>> 0) > ($289 >>> 0);
            $or$cond286 = $288 | $290;
            if ($or$cond286) {
              $$0240$lcssa = $$0240321;
              $$2245 = $287;
              break;
            }
            $291 = ((($$0229322)) + 4 | 0);
            $292 = (($287) + ($$0240321)) | 0;
            $293 = ($$4258355 >>> 0) > ($292 >>> 0);
            if ($293) {
              $$0229322 = $291;
              $$0240321 = $292;
              $$1244320 = $287;
            } else {
              $$0240$lcssa = $292;
              $$2245 = $287;
              break;
            }
          }
          $294 = ($$2245 | 0) < (0);
          if ($294) {
            $$0 = -1;
            break L1;
          }
          _pad($0, 32, $$1260, $$0240$lcssa, $$1263$);
          $295 = ($$0240$lcssa | 0) == (0);
          if ($295) {
            $$0240$lcssa357 = 0;
            label = 84;
          } else {
            $$1230333 = $331;
            $$1241332 = 0;
            while (1) {
              $296 = HEAP32[$$1230333 >> 2] | 0;
              $297 = ($296 | 0) == (0);
              if ($297) {
                $$0240$lcssa357 = $$0240$lcssa;
                label = 84;
                break L95;
              }
              $298 = (_wctomb($9, $296) | 0);
              $299 = (($298) + ($$1241332)) | 0;
              $300 = ($299 | 0) > ($$0240$lcssa | 0);
              if ($300) {
                $$0240$lcssa357 = $$0240$lcssa;
                label = 84;
                break L95;
              }
              $301 = ((($$1230333)) + 4 | 0);
              _out($0, $9, $298);
              $302 = ($299 >>> 0) < ($$0240$lcssa >>> 0);
              if ($302) {
                $$1230333 = $301;
                $$1241332 = $299;
              } else {
                $$0240$lcssa357 = $$0240$lcssa;
                label = 84;
                break;
              }
            }
          }
        }
      } while (0);
      if ((label | 0) == 67) {
        label = 0;
        $245 = ($$2256 | 0) > (-1);
        $246 = $$4266 & -65537;
        $$$4266 = $245 ? $246 : $$4266;
        $248 = ($247 | 0) != (0);
        $250 = ($249 | 0) != (0);
        $251 = $248 | $250;
        $252 = ($$2256 | 0) != (0);
        $or$cond = $252 | $251;
        $253 = $$0228;
        $254 = (($12) - ($253)) | 0;
        $255 = $251 ^ 1;
        $256 = $255 & 1;
        $257 = (($256) + ($254)) | 0;
        $258 = ($$2256 | 0) > ($257 | 0);
        $$2256$ = $258 ? $$2256 : $257;
        $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
        $$0228$ = $or$cond ? $$0228 : $11;
        $$2 = $$0228$;
        $$2234 = $$1233;
        $$2239 = $$1238;
        $$2251 = $11;
        $$5 = $$2256$$$2256;
        $$6268 = $$$4266;
      }
      else if ((label | 0) == 84) {
        label = 0;
        $303 = $$1263$ ^ 8192;
        _pad($0, 32, $$1260, $$0240$lcssa357, $303);
        $304 = ($$1260 | 0) > ($$0240$lcssa357 | 0);
        $305 = $304 ? $$1260 : $$0240$lcssa357;
        $$0243 = $305;
        $$0247 = $$1248;
        $$0269 = $$3272;
        $21 = $132;
        continue;
      }
      $308 = $$2251;
      $309 = $$2;
      $310 = (($308) - ($309)) | 0;
      $311 = ($$5 | 0) < ($310 | 0);
      $$$5 = $311 ? $310 : $$5;
      $312 = (($$$5) + ($$2234)) | 0;
      $313 = ($$1260 | 0) < ($312 | 0);
      $$2261 = $313 ? $312 : $$1260;
      _pad($0, 32, $$2261, $312, $$6268);
      _out($0, $$2239, $$2234);
      $314 = $$6268 ^ 65536;
      _pad($0, 48, $$2261, $312, $314);
      _pad($0, 48, $$$5, $310, 0);
      _out($0, $$2, $310);
      $315 = $$6268 ^ 8192;
      _pad($0, 32, $$2261, $312, $315);
      $$0243 = $$2261;
      $$0247 = $$1248;
      $$0269 = $$3272;
      $21 = $132;
    }
    L114: do {
      if ((label | 0) == 87) {
        $316 = ($0 | 0) == (0 | 0);
        if ($316) {
          $317 = ($$0269 | 0) == (0);
          if ($317) {
            $$0 = 0;
          } else {
            $$2242305 = 1;
            while (1) {
              $318 = (($4) + ($$2242305 << 2) | 0);
              $319 = HEAP32[$318 >> 2] | 0;
              $320 = ($319 | 0) == (0);
              if ($320) {
                $$3303 = $$2242305;
                break;
              }
              $321 = (($3) + ($$2242305 << 3) | 0);
              _pop_arg($321, $319, $2);
              $322 = (($$2242305) + 1) | 0;
              $323 = ($322 | 0) < (10);
              if ($323) {
                $$2242305 = $322;
              } else {
                $$0 = 1;
                break L114;
              }
            }
            while (1) {
              $326 = (($4) + ($$3303 << 2) | 0);
              $327 = HEAP32[$326 >> 2] | 0;
              $328 = ($327 | 0) == (0);
              $324 = (($$3303) + 1) | 0;
              if (!($328)) {
                $$0 = -1;
                break L114;
              }
              $325 = ($324 | 0) < (10);
              if ($325) {
                $$3303 = $324;
              } else {
                $$0 = 1;
                break;
              }
            }
          }
        } else {
          $$0 = $$1248;
        }
      }
    } while (0);
    STACKTOP = sp;
    return ($$0 | 0);
  }

  function ___lockfile($0) {
    $0 = $0 | 0;
    var label = 0, sp = 0;
    sp = STACKTOP;
    return 0;
  }

  function ___unlockfile($0) {
    $0 = $0 | 0;
    var label = 0, sp = 0;
    sp = STACKTOP;
    return;
  }

  function _out($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $3 = HEAP32[$0 >> 2] | 0;
    $4 = $3 & 32;
    $5 = ($4 | 0) == (0);
    if ($5) {
      (___fwritex($1, $2, $0) | 0);
    }
    return;
  }

  function _getint($0) {
    $0 = $0 | 0;
    var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0,
      $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = HEAP8[$1 >> 0] | 0;
    $3 = $2 << 24 >> 24;
    $isdigittmp4 = (($3) + -48) | 0;
    $isdigit5 = ($isdigittmp4 >>> 0) < (10);
    if ($isdigit5) {
      $$06 = 0;
      $7 = $1;
      $isdigittmp7 = $isdigittmp4;
      while (1) {
        $4 = ($$06 * 10) | 0;
        $5 = (($isdigittmp7) + ($4)) | 0;
        $6 = ((($7)) + 1 | 0);
        HEAP32[$0 >> 2] = $6;
        $8 = HEAP8[$6 >> 0] | 0;
        $9 = $8 << 24 >> 24;
        $isdigittmp = (($9) + -48) | 0;
        $isdigit = ($isdigittmp >>> 0) < (10);
        if ($isdigit) {
          $$06 = $5;
          $7 = $6;
          $isdigittmp7 = $isdigittmp;
        } else {
          $$0$lcssa = $5;
          break;
        }
      }
    } else {
      $$0$lcssa = 0;
    }
    return ($$0$lcssa | 0);
  }

  function _pop_arg($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0,
      $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
    var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0,
      $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
    var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0,
      $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
    var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0,
      $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
    var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0,
      $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
    var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0,
      $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0,
      $arglist_current17 = 0;
    var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0,
      $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0,
      $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0,
      $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
    var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0,
      $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0,
      $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0,
      $expanded58 = 0, $expanded59 = 0;
    var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0,
      $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0,
      $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0,
      $expanded86 = 0, $expanded87 = 0;
    var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0,
      sp = 0;
    sp = STACKTOP;
    $3 = ($1 >>> 0) > (20);
    L1: do {
      if (!($3)) {
        do {
          switch ($1 | 0) {
            case 9: {
              $arglist_current = HEAP32[$2 >> 2] | 0;
              $4 = $arglist_current;
              $5 = ((0) + 4 | 0);
              $expanded28 = $5;
              $expanded = (($expanded28) - 1) | 0;
              $6 = (($4) + ($expanded)) | 0;
              $7 = ((0) + 4 | 0);
              $expanded32 = $7;
              $expanded31 = (($expanded32) - 1) | 0;
              $expanded30 = $expanded31 ^ -1;
              $8 = $6 & $expanded30;
              $9 = $8;
              $10 = HEAP32[$9 >> 2] | 0;
              $arglist_next = ((($9)) + 4 | 0);
              HEAP32[$2 >> 2] = $arglist_next;
              HEAP32[$0 >> 2] = $10;
              break L1;
              break;
            }
            case 10: {
              $arglist_current2 = HEAP32[$2 >> 2] | 0;
              $11 = $arglist_current2;
              $12 = ((0) + 4 | 0);
              $expanded35 = $12;
              $expanded34 = (($expanded35) - 1) | 0;
              $13 = (($11) + ($expanded34)) | 0;
              $14 = ((0) + 4 | 0);
              $expanded39 = $14;
              $expanded38 = (($expanded39) - 1) | 0;
              $expanded37 = $expanded38 ^ -1;
              $15 = $13 & $expanded37;
              $16 = $15;
              $17 = HEAP32[$16 >> 2] | 0;
              $arglist_next3 = ((($16)) + 4 | 0);
              HEAP32[$2 >> 2] = $arglist_next3;
              $18 = ($17 | 0) < (0);
              $19 = $18 << 31 >> 31;
              $20 = $0;
              $21 = $20;
              HEAP32[$21 >> 2] = $17;
              $22 = (($20) + 4) | 0;
              $23 = $22;
              HEAP32[$23 >> 2] = $19;
              break L1;
              break;
            }
            case 11: {
              $arglist_current5 = HEAP32[$2 >> 2] | 0;
              $24 = $arglist_current5;
              $25 = ((0) + 4 | 0);
              $expanded42 = $25;
              $expanded41 = (($expanded42) - 1) | 0;
              $26 = (($24) + ($expanded41)) | 0;
              $27 = ((0) + 4 | 0);
              $expanded46 = $27;
              $expanded45 = (($expanded46) - 1) | 0;
              $expanded44 = $expanded45 ^ -1;
              $28 = $26 & $expanded44;
              $29 = $28;
              $30 = HEAP32[$29 >> 2] | 0;
              $arglist_next6 = ((($29)) + 4 | 0);
              HEAP32[$2 >> 2] = $arglist_next6;
              $31 = $0;
              $32 = $31;
              HEAP32[$32 >> 2] = $30;
              $33 = (($31) + 4) | 0;
              $34 = $33;
              HEAP32[$34 >> 2] = 0;
              break L1;
              break;
            }
            case 12: {
              $arglist_current8 = HEAP32[$2 >> 2] | 0;
              $35 = $arglist_current8;
              $36 = ((0) + 8 | 0);
              $expanded49 = $36;
              $expanded48 = (($expanded49) - 1) | 0;
              $37 = (($35) + ($expanded48)) | 0;
              $38 = ((0) + 8 | 0);
              $expanded53 = $38;
              $expanded52 = (($expanded53) - 1) | 0;
              $expanded51 = $expanded52 ^ -1;
              $39 = $37 & $expanded51;
              $40 = $39;
              $41 = $40;
              $42 = $41;
              $43 = HEAP32[$42 >> 2] | 0;
              $44 = (($41) + 4) | 0;
              $45 = $44;
              $46 = HEAP32[$45 >> 2] | 0;
              $arglist_next9 = ((($40)) + 8 | 0);
              HEAP32[$2 >> 2] = $arglist_next9;
              $47 = $0;
              $48 = $47;
              HEAP32[$48 >> 2] = $43;
              $49 = (($47) + 4) | 0;
              $50 = $49;
              HEAP32[$50 >> 2] = $46;
              break L1;
              break;
            }
            case 13: {
              $arglist_current11 = HEAP32[$2 >> 2] | 0;
              $51 = $arglist_current11;
              $52 = ((0) + 4 | 0);
              $expanded56 = $52;
              $expanded55 = (($expanded56) - 1) | 0;
              $53 = (($51) + ($expanded55)) | 0;
              $54 = ((0) + 4 | 0);
              $expanded60 = $54;
              $expanded59 = (($expanded60) - 1) | 0;
              $expanded58 = $expanded59 ^ -1;
              $55 = $53 & $expanded58;
              $56 = $55;
              $57 = HEAP32[$56 >> 2] | 0;
              $arglist_next12 = ((($56)) + 4 | 0);
              HEAP32[$2 >> 2] = $arglist_next12;
              $58 = $57 & 65535;
              $59 = $58 << 16 >> 16;
              $60 = ($59 | 0) < (0);
              $61 = $60 << 31 >> 31;
              $62 = $0;
              $63 = $62;
              HEAP32[$63 >> 2] = $59;
              $64 = (($62) + 4) | 0;
              $65 = $64;
              HEAP32[$65 >> 2] = $61;
              break L1;
              break;
            }
            case 14: {
              $arglist_current14 = HEAP32[$2 >> 2] | 0;
              $66 = $arglist_current14;
              $67 = ((0) + 4 | 0);
              $expanded63 = $67;
              $expanded62 = (($expanded63) - 1) | 0;
              $68 = (($66) + ($expanded62)) | 0;
              $69 = ((0) + 4 | 0);
              $expanded67 = $69;
              $expanded66 = (($expanded67) - 1) | 0;
              $expanded65 = $expanded66 ^ -1;
              $70 = $68 & $expanded65;
              $71 = $70;
              $72 = HEAP32[$71 >> 2] | 0;
              $arglist_next15 = ((($71)) + 4 | 0);
              HEAP32[$2 >> 2] = $arglist_next15;
              $$mask31 = $72 & 65535;
              $73 = $0;
              $74 = $73;
              HEAP32[$74 >> 2] = $$mask31;
              $75 = (($73) + 4) | 0;
              $76 = $75;
              HEAP32[$76 >> 2] = 0;
              break L1;
              break;
            }
            case 15: {
              $arglist_current17 = HEAP32[$2 >> 2] | 0;
              $77 = $arglist_current17;
              $78 = ((0) + 4 | 0);
              $expanded70 = $78;
              $expanded69 = (($expanded70) - 1) | 0;
              $79 = (($77) + ($expanded69)) | 0;
              $80 = ((0) + 4 | 0);
              $expanded74 = $80;
              $expanded73 = (($expanded74) - 1) | 0;
              $expanded72 = $expanded73 ^ -1;
              $81 = $79 & $expanded72;
              $82 = $81;
              $83 = HEAP32[$82 >> 2] | 0;
              $arglist_next18 = ((($82)) + 4 | 0);
              HEAP32[$2 >> 2] = $arglist_next18;
              $84 = $83 & 255;
              $85 = $84 << 24 >> 24;
              $86 = ($85 | 0) < (0);
              $87 = $86 << 31 >> 31;
              $88 = $0;
              $89 = $88;
              HEAP32[$89 >> 2] = $85;
              $90 = (($88) + 4) | 0;
              $91 = $90;
              HEAP32[$91 >> 2] = $87;
              break L1;
              break;
            }
            case 16: {
              $arglist_current20 = HEAP32[$2 >> 2] | 0;
              $92 = $arglist_current20;
              $93 = ((0) + 4 | 0);
              $expanded77 = $93;
              $expanded76 = (($expanded77) - 1) | 0;
              $94 = (($92) + ($expanded76)) | 0;
              $95 = ((0) + 4 | 0);
              $expanded81 = $95;
              $expanded80 = (($expanded81) - 1) | 0;
              $expanded79 = $expanded80 ^ -1;
              $96 = $94 & $expanded79;
              $97 = $96;
              $98 = HEAP32[$97 >> 2] | 0;
              $arglist_next21 = ((($97)) + 4 | 0);
              HEAP32[$2 >> 2] = $arglist_next21;
              $$mask = $98 & 255;
              $99 = $0;
              $100 = $99;
              HEAP32[$100 >> 2] = $$mask;
              $101 = (($99) + 4) | 0;
              $102 = $101;
              HEAP32[$102 >> 2] = 0;
              break L1;
              break;
            }
            case 17: {
              $arglist_current23 = HEAP32[$2 >> 2] | 0;
              $103 = $arglist_current23;
              $104 = ((0) + 8 | 0);
              $expanded84 = $104;
              $expanded83 = (($expanded84) - 1) | 0;
              $105 = (($103) + ($expanded83)) | 0;
              $106 = ((0) + 8 | 0);
              $expanded88 = $106;
              $expanded87 = (($expanded88) - 1) | 0;
              $expanded86 = $expanded87 ^ -1;
              $107 = $105 & $expanded86;
              $108 = $107;
              $109 = +HEAPF64[$108 >> 3];
              $arglist_next24 = ((($108)) + 8 | 0);
              HEAP32[$2 >> 2] = $arglist_next24;
              HEAPF64[$0 >> 3] = $109;
              break L1;
              break;
            }
            case 18: {
              $arglist_current26 = HEAP32[$2 >> 2] | 0;
              $110 = $arglist_current26;
              $111 = ((0) + 8 | 0);
              $expanded91 = $111;
              $expanded90 = (($expanded91) - 1) | 0;
              $112 = (($110) + ($expanded90)) | 0;
              $113 = ((0) + 8 | 0);
              $expanded95 = $113;
              $expanded94 = (($expanded95) - 1) | 0;
              $expanded93 = $expanded94 ^ -1;
              $114 = $112 & $expanded93;
              $115 = $114;
              $116 = +HEAPF64[$115 >> 3];
              $arglist_next27 = ((($115)) + 8 | 0);
              HEAP32[$2 >> 2] = $arglist_next27;
              HEAPF64[$0 >> 3] = $116;
              break L1;
              break;
            }
            default: {
              break L1;
            }
          }
        } while (0);
      }
    } while (0);
    return;
  }

  function _fmt_x($0, $1, $2, $3) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0,
      $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
    var sp = 0;
    sp = STACKTOP;
    $4 = ($0 | 0) == (0);
    $5 = ($1 | 0) == (0);
    $6 = $4 & $5;
    if ($6) {
      $$05$lcssa = $2;
    } else {
      $$056 = $2;
      $15 = $1;
      $8 = $0;
      while (1) {
        $7 = $8 & 15;
        $9 = (4198 + ($7) | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = $10 & 255;
        $12 = $11 | $3;
        $13 = $12 & 255;
        $14 = ((($$056)) + -1 | 0);
        HEAP8[$14 >> 0] = $13;
        $16 = (_bitshift64Lshr(($8 | 0), ($15 | 0), 4) | 0);
        $17 = tempRet0;
        $18 = ($16 | 0) == (0);
        $19 = ($17 | 0) == (0);
        $20 = $18 & $19;
        if ($20) {
          $$05$lcssa = $14;
          break;
        } else {
          $$056 = $14;
          $15 = $17;
          $8 = $16;
        }
      }
    }
    return ($$05$lcssa | 0);
  }

  function _fmt_o($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0,
      $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $3 = ($0 | 0) == (0);
    $4 = ($1 | 0) == (0);
    $5 = $3 & $4;
    if ($5) {
      $$0$lcssa = $2;
    } else {
      $$06 = $2;
      $11 = $1;
      $7 = $0;
      while (1) {
        $6 = $7 & 255;
        $8 = $6 & 7;
        $9 = $8 | 48;
        $10 = ((($$06)) + -1 | 0);
        HEAP8[$10 >> 0] = $9;
        $12 = (_bitshift64Lshr(($7 | 0), ($11 | 0), 3) | 0);
        $13 = tempRet0;
        $14 = ($12 | 0) == (0);
        $15 = ($13 | 0) == (0);
        $16 = $14 & $15;
        if ($16) {
          $$0$lcssa = $10;
          break;
        } else {
          $$06 = $10;
          $11 = $13;
          $7 = $12;
        }
      }
    }
    return ($$0$lcssa | 0);
  }

  function _fmt_u($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0,
      $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
    var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0,
      sp = 0;
    sp = STACKTOP;
    $3 = ($1 >>> 0) > (0);
    $4 = ($0 >>> 0) > (4294967295);
    $5 = ($1 | 0) == (0);
    $6 = $5 & $4;
    $7 = $3 | $6;
    if ($7) {
      $$0914 = $2;
      $8 = $0;
      $9 = $1;
      while (1) {
        $10 = (___uremdi3(($8 | 0), ($9 | 0), 10, 0) | 0);
        $11 = tempRet0;
        $12 = $10 & 255;
        $13 = $12 | 48;
        $14 = ((($$0914)) + -1 | 0);
        HEAP8[$14 >> 0] = $13;
        $15 = (___udivdi3(($8 | 0), ($9 | 0), 10, 0) | 0);
        $16 = tempRet0;
        $17 = ($9 >>> 0) > (9);
        $18 = ($8 >>> 0) > (4294967295);
        $19 = ($9 | 0) == (9);
        $20 = $19 & $18;
        $21 = $17 | $20;
        if ($21) {
          $$0914 = $14;
          $8 = $15;
          $9 = $16;
        } else {
          break;
        }
      }
      $$010$lcssa$off0 = $15;
      $$09$lcssa = $14;
    } else {
      $$010$lcssa$off0 = $0;
      $$09$lcssa = $2;
    }
    $22 = ($$010$lcssa$off0 | 0) == (0);
    if ($22) {
      $$1$lcssa = $$09$lcssa;
    } else {
      $$012 = $$010$lcssa$off0;
      $$111 = $$09$lcssa;
      while (1) {
        $23 = (($$012 >>> 0) % 10) & -1;
        $24 = $23 | 48;
        $25 = $24 & 255;
        $26 = ((($$111)) + -1 | 0);
        HEAP8[$26 >> 0] = $25;
        $27 = (($$012 >>> 0) / 10) & -1;
        $28 = ($$012 >>> 0) < (10);
        if ($28) {
          $$1$lcssa = $26;
          break;
        } else {
          $$012 = $27;
          $$111 = $26;
        }
      }
    }
    return ($$1$lcssa | 0);
  }

  function _pad($0, $1, $2, $3, $4) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    $3 = $3 | 0;
    $4 = $4 | 0;
    var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0,
      $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 256 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256 | 0);
    $5 = sp;
    $6 = $4 & 73728;
    $7 = ($6 | 0) == (0);
    $8 = ($2 | 0) > ($3 | 0);
    $or$cond = $8 & $7;
    if ($or$cond) {
      $9 = (($2) - ($3)) | 0;
      $10 = ($9 >>> 0) < (256);
      $11 = $10 ? $9 : 256;
      _memset(($5 | 0), ($1 | 0), ($11 | 0)) | 0;
      $12 = ($9 >>> 0) > (255);
      if ($12) {
        $13 = (($2) - ($3)) | 0;
        $$011 = $9;
        while (1) {
          _out($0, $5, 256);
          $14 = (($$011) + -256) | 0;
          $15 = ($14 >>> 0) > (255);
          if ($15) {
            $$011 = $14;
          } else {
            break;
          }
        }
        $16 = $13 & 255;
        $$0$lcssa = $16;
      } else {
        $$0$lcssa = $9;
      }
      _out($0, $5, $$0$lcssa);
    }
    STACKTOP = sp;
    return;
  }

  function _wctomb($0, $1) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $2 = ($0 | 0) == (0 | 0);
    if ($2) {
      $$0 = 0;
    } else {
      $3 = (_wcrtomb($0, $1, 0) | 0);
      $$0 = $3;
    }
    return ($$0 | 0);
  }

  function _fmt_fp($0, $1, $2, $3, $4, $5) {
    $0 = $0 | 0;
    $1 = +$1;
    $2 = $2 | 0;
    $3 = $3 | 0;
    $4 = $4 | 0;
    $5 = $5 | 0;
    var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0,
      $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0,
      $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
    var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0,
      $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0,
      $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
    var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0,
      $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0,
      $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
    var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0,
      $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0,
      $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
    var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0,
      $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0,
      $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
    var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0,
      $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0,
      $10 = 0, $100 = 0, $101 = 0, $102 = 0;
    var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0,
      $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
    var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0,
      $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
    var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0,
      $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
    var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0,
      $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
    var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0,
      $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
    var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0,
      $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
    var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0,
      $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
    var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0,
      $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
    var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0,
      $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
    var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0,
      $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
    var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0,
      $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
    var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0,
      $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
    var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0,
      $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
    var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0,
      $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
    var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0,
      $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
    var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0,
      $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
    var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0,
      $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
    var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0,
      $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
    var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0,
      $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
    var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0,
      $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0,
      sp = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 560 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560 | 0);
    $6 = sp + 8 | 0;
    $7 = sp;
    $8 = sp + 524 | 0;
    $9 = $8;
    $10 = sp + 512 | 0;
    HEAP32[$7 >> 2] = 0;
    $11 = ((($10)) + 12 | 0);
    (___DOUBLE_BITS_536($1) | 0);
    $12 = tempRet0;
    $13 = ($12 | 0) < (0);
    if ($13) {
      $14 = -$1;
      $$0471 = $14;
      $$0520 = 1;
      $$0521 = 4163;
    } else {
      $15 = $4 & 2048;
      $16 = ($15 | 0) == (0);
      $17 = $4 & 1;
      $18 = ($17 | 0) == (0);
      $$ = $18 ? (4164) : (4169);
      $$$ = $16 ? $$ : (4166);
      $19 = $4 & 2049;
      $narrow = ($19 | 0) != (0);
      $$534$ = $narrow & 1;
      $$0471 = $1;
      $$0520 = $$534$;
      $$0521 = $$$;
    }
    (___DOUBLE_BITS_536($$0471) | 0);
    $20 = tempRet0;
    $21 = $20 & 2146435072;
    $22 = ($21 >>> 0) < (2146435072);
    $23 = (0) < (0);
    $24 = ($21 | 0) == (2146435072);
    $25 = $24 & $23;
    $26 = $22 | $25;
    do {
      if ($26) {
        $35 = (+_frexpl($$0471, $7));
        $36 = $35 * 2.0;
        $37 = $36 != 0.0;
        if ($37) {
          $38 = HEAP32[$7 >> 2] | 0;
          $39 = (($38) + -1) | 0;
          HEAP32[$7 >> 2] = $39;
        }
        $40 = $5 | 32;
        $41 = ($40 | 0) == (97);
        if ($41) {
          $42 = $5 & 32;
          $43 = ($42 | 0) == (0);
          $44 = ((($$0521)) + 9 | 0);
          $$0521$ = $43 ? $$0521 : $44;
          $45 = $$0520 | 2;
          $46 = ($3 >>> 0) > (11);
          $47 = (12 - ($3)) | 0;
          $48 = ($47 | 0) == (0);
          $49 = $46 | $48;
          do {
            if ($49) {
              $$1472 = $36;
            } else {
              $$0509582 = 8.0;
              $$1508583 = $47;
              while (1) {
                $50 = (($$1508583) + -1) | 0;
                $51 = $$0509582 * 16.0;
                $52 = ($50 | 0) == (0);
                if ($52) {
                  break;
                } else {
                  $$0509582 = $51;
                  $$1508583 = $50;
                }
              }
              $53 = HEAP8[$$0521$ >> 0] | 0;
              $54 = ($53 << 24 >> 24) == (45);
              if ($54) {
                $55 = -$36;
                $56 = $55 - $51;
                $57 = $51 + $56;
                $58 = -$57;
                $$1472 = $58;
                break;
              } else {
                $59 = $36 + $51;
                $60 = $59 - $51;
                $$1472 = $60;
                break;
              }
            }
          } while (0);
          $61 = HEAP32[$7 >> 2] | 0;
          $62 = ($61 | 0) < (0);
          $63 = (0 - ($61)) | 0;
          $64 = $62 ? $63 : $61;
          $65 = ($64 | 0) < (0);
          $66 = $65 << 31 >> 31;
          $67 = (_fmt_u($64, $66, $11) | 0);
          $68 = ($67 | 0) == ($11 | 0);
          if ($68) {
            $69 = ((($10)) + 11 | 0);
            HEAP8[$69 >> 0] = 48;
            $$0511 = $69;
          } else {
            $$0511 = $67;
          }
          $70 = $61 >> 31;
          $71 = $70 & 2;
          $72 = (($71) + 43) | 0;
          $73 = $72 & 255;
          $74 = ((($$0511)) + -1 | 0);
          HEAP8[$74 >> 0] = $73;
          $75 = (($5) + 15) | 0;
          $76 = $75 & 255;
          $77 = ((($$0511)) + -2 | 0);
          HEAP8[$77 >> 0] = $76;
          $notrhs = ($3 | 0) < (1);
          $78 = $4 & 8;
          $79 = ($78 | 0) == (0);
          $$0523 = $8;
          $$2473 = $$1472;
          while (1) {
            $80 = (~~(($$2473)));
            $81 = (4198 + ($80) | 0);
            $82 = HEAP8[$81 >> 0] | 0;
            $83 = $82 & 255;
            $84 = $83 | $42;
            $85 = $84 & 255;
            $86 = ((($$0523)) + 1 | 0);
            HEAP8[$$0523 >> 0] = $85;
            $87 = (+($80 | 0));
            $88 = $$2473 - $87;
            $89 = $88 * 16.0;
            $90 = $86;
            $91 = (($90) - ($9)) | 0;
            $92 = ($91 | 0) == (1);
            if ($92) {
              $notlhs = $89 == 0.0;
              $or$cond3$not = $notrhs & $notlhs;
              $or$cond = $79 & $or$cond3$not;
              if ($or$cond) {
                $$1524 = $86;
              } else {
                $93 = ((($$0523)) + 2 | 0);
                HEAP8[$86 >> 0] = 46;
                $$1524 = $93;
              }
            } else {
              $$1524 = $86;
            }
            $94 = $89 != 0.0;
            if ($94) {
              $$0523 = $$1524;
              $$2473 = $89;
            } else {
              break;
            }
          }
          $95 = ($3 | 0) != (0);
          $96 = $77;
          $97 = $11;
          $98 = $$1524;
          $99 = (($98) - ($9)) | 0;
          $100 = (($97) - ($96)) | 0;
          $101 = (($99) + -2) | 0;
          $102 = ($101 | 0) < ($3 | 0);
          $or$cond537 = $95 & $102;
          $103 = (($3) + 2) | 0;
          $$pn = $or$cond537 ? $103 : $99;
          $$0525 = (($100) + ($45)) | 0;
          $104 = (($$0525) + ($$pn)) | 0;
          _pad($0, 32, $2, $104, $4);
          _out($0, $$0521$, $45);
          $105 = $4 ^ 65536;
          _pad($0, 48, $2, $104, $105);
          _out($0, $8, $99);
          $106 = (($$pn) - ($99)) | 0;
          _pad($0, 48, $106, 0, 0);
          _out($0, $77, $100);
          $107 = $4 ^ 8192;
          _pad($0, 32, $2, $104, $107);
          $$sink562 = $104;
          break;
        }
        $108 = ($3 | 0) < (0);
        $$539 = $108 ? 6 : $3;
        if ($37) {
          $109 = $36 * 268435456.0;
          $110 = HEAP32[$7 >> 2] | 0;
          $111 = (($110) + -28) | 0;
          HEAP32[$7 >> 2] = $111;
          $$3 = $109;
          $$pr = $111;
        } else {
          $$pre = HEAP32[$7 >> 2] | 0;
          $$3 = $36;
          $$pr = $$pre;
        }
        $112 = ($$pr | 0) < (0);
        $113 = ((($6)) + 288 | 0);
        $$556 = $112 ? $6 : $113;
        $$0498 = $$556;
        $$4 = $$3;
        while (1) {
          $114 = (~~(($$4)) >>> 0);
          HEAP32[$$0498 >> 2] = $114;
          $115 = ((($$0498)) + 4 | 0);
          $116 = (+($114 >>> 0));
          $117 = $$4 - $116;
          $118 = $117 * 1.0E+9;
          $119 = $118 != 0.0;
          if ($119) {
            $$0498 = $115;
            $$4 = $118;
          } else {
            break;
          }
        }
        $120 = ($$pr | 0) > (0);
        if ($120) {
          $$1482661 = $$556;
          $$1499660 = $115;
          $121 = $$pr;
          while (1) {
            $122 = ($121 | 0) < (29);
            $123 = $122 ? $121 : 29;
            $$0488653 = ((($$1499660)) + -4 | 0);
            $124 = ($$0488653 >>> 0) < ($$1482661 >>> 0);
            if ($124) {
              $$2483$ph = $$1482661;
            } else {
              $$0488655 = $$0488653;
              $$0497654 = 0;
              while (1) {
                $125 = HEAP32[$$0488655 >> 2] | 0;
                $126 = (_bitshift64Shl(($125 | 0), 0, ($123 | 0)) | 0);
                $127 = tempRet0;
                $128 = (_i64Add(($126 | 0), ($127 | 0), ($$0497654 | 0), 0) | 0);
                $129 = tempRet0;
                $130 = (___uremdi3(($128 | 0), ($129 | 0), 1000000000, 0) | 0);
                $131 = tempRet0;
                HEAP32[$$0488655 >> 2] = $130;
                $132 = (___udivdi3(($128 | 0), ($129 | 0), 1000000000, 0) | 0);
                $133 = tempRet0;
                $$0488 = ((($$0488655)) + -4 | 0);
                $134 = ($$0488 >>> 0) < ($$1482661 >>> 0);
                if ($134) {
                  break;
                } else {
                  $$0488655 = $$0488;
                  $$0497654 = $132;
                }
              }
              $135 = ($132 | 0) == (0);
              if ($135) {
                $$2483$ph = $$1482661;
              } else {
                $136 = ((($$1482661)) + -4 | 0);
                HEAP32[$136 >> 2] = $132;
                $$2483$ph = $136;
              }
            }
            $$2500 = $$1499660;
            while (1) {
              $137 = ($$2500 >>> 0) > ($$2483$ph >>> 0);
              if (!($137)) {
                break;
              }
              $138 = ((($$2500)) + -4 | 0);
              $139 = HEAP32[$138 >> 2] | 0;
              $140 = ($139 | 0) == (0);
              if ($140) {
                $$2500 = $138;
              } else {
                break;
              }
            }
            $141 = HEAP32[$7 >> 2] | 0;
            $142 = (($141) - ($123)) | 0;
            HEAP32[$7 >> 2] = $142;
            $143 = ($142 | 0) > (0);
            if ($143) {
              $$1482661 = $$2483$ph;
              $$1499660 = $$2500;
              $121 = $142;
            } else {
              $$1482$lcssa = $$2483$ph;
              $$1499$lcssa = $$2500;
              $$pr564 = $142;
              break;
            }
          }
        } else {
          $$1482$lcssa = $$556;
          $$1499$lcssa = $115;
          $$pr564 = $$pr;
        }
        $144 = ($$pr564 | 0) < (0);
        if ($144) {
          $145 = (($$539) + 25) | 0;
          $146 = (($145 | 0) / 9) & -1;
          $147 = (($146) + 1) | 0;
          $148 = ($40 | 0) == (102);
          $$3484648 = $$1482$lcssa;
          $$3501647 = $$1499$lcssa;
          $150 = $$pr564;
          while (1) {
            $149 = (0 - ($150)) | 0;
            $151 = ($149 | 0) < (9);
            $152 = $151 ? $149 : 9;
            $153 = ($$3484648 >>> 0) < ($$3501647 >>> 0);
            if ($153) {
              $157 = 1 << $152;
              $158 = (($157) + -1) | 0;
              $159 = 1000000000 >>> $152;
              $$0487642 = 0;
              $$1489641 = $$3484648;
              while (1) {
                $160 = HEAP32[$$1489641 >> 2] | 0;
                $161 = $160 & $158;
                $162 = $160 >>> $152;
                $163 = (($162) + ($$0487642)) | 0;
                HEAP32[$$1489641 >> 2] = $163;
                $164 = Math_imul($161, $159) | 0;
                $165 = ((($$1489641)) + 4 | 0);
                $166 = ($165 >>> 0) < ($$3501647 >>> 0);
                if ($166) {
                  $$0487642 = $164;
                  $$1489641 = $165;
                } else {
                  break;
                }
              }
              $167 = HEAP32[$$3484648 >> 2] | 0;
              $168 = ($167 | 0) == (0);
              $169 = ((($$3484648)) + 4 | 0);
              $$$3484 = $168 ? $169 : $$3484648;
              $170 = ($164 | 0) == (0);
              if ($170) {
                $$$3484692 = $$$3484;
                $$4502 = $$3501647;
              } else {
                $171 = ((($$3501647)) + 4 | 0);
                HEAP32[$$3501647 >> 2] = $164;
                $$$3484692 = $$$3484;
                $$4502 = $171;
              }
            } else {
              $154 = HEAP32[$$3484648 >> 2] | 0;
              $155 = ($154 | 0) == (0);
              $156 = ((($$3484648)) + 4 | 0);
              $$$3484691 = $155 ? $156 : $$3484648;
              $$$3484692 = $$$3484691;
              $$4502 = $$3501647;
            }
            $172 = $148 ? $$556 : $$$3484692;
            $173 = $$4502;
            $174 = $172;
            $175 = (($173) - ($174)) | 0;
            $176 = $175 >> 2;
            $177 = ($176 | 0) > ($147 | 0);
            $178 = (($172) + ($147 << 2) | 0);
            $$$4502 = $177 ? $178 : $$4502;
            $179 = HEAP32[$7 >> 2] | 0;
            $180 = (($179) + ($152)) | 0;
            HEAP32[$7 >> 2] = $180;
            $181 = ($180 | 0) < (0);
            if ($181) {
              $$3484648 = $$$3484692;
              $$3501647 = $$$4502;
              $150 = $180;
            } else {
              $$3484$lcssa = $$$3484692;
              $$3501$lcssa = $$$4502;
              break;
            }
          }
        } else {
          $$3484$lcssa = $$1482$lcssa;
          $$3501$lcssa = $$1499$lcssa;
        }
        $182 = ($$3484$lcssa >>> 0) < ($$3501$lcssa >>> 0);
        $183 = $$556;
        if ($182) {
          $184 = $$3484$lcssa;
          $185 = (($183) - ($184)) | 0;
          $186 = $185 >> 2;
          $187 = ($186 * 9) | 0;
          $188 = HEAP32[$$3484$lcssa >> 2] | 0;
          $189 = ($188 >>> 0) < (10);
          if ($189) {
            $$1515 = $187;
          } else {
            $$0514637 = $187;
            $$0530636 = 10;
            while (1) {
              $190 = ($$0530636 * 10) | 0;
              $191 = (($$0514637) + 1) | 0;
              $192 = ($188 >>> 0) < ($190 >>> 0);
              if ($192) {
                $$1515 = $191;
                break;
              } else {
                $$0514637 = $191;
                $$0530636 = $190;
              }
            }
          }
        } else {
          $$1515 = 0;
        }
        $193 = ($40 | 0) != (102);
        $194 = $193 ? $$1515 : 0;
        $195 = (($$539) - ($194)) | 0;
        $196 = ($40 | 0) == (103);
        $197 = ($$539 | 0) != (0);
        $198 = $197 & $196;
        $$neg = $198 << 31 >> 31;
        $199 = (($195) + ($$neg)) | 0;
        $200 = $$3501$lcssa;
        $201 = (($200) - ($183)) | 0;
        $202 = $201 >> 2;
        $203 = ($202 * 9) | 0;
        $204 = (($203) + -9) | 0;
        $205 = ($199 | 0) < ($204 | 0);
        if ($205) {
          $206 = ((($$556)) + 4 | 0);
          $207 = (($199) + 9216) | 0;
          $208 = (($207 | 0) / 9) & -1;
          $209 = (($208) + -1024) | 0;
          $210 = (($206) + ($209 << 2) | 0);
          $211 = (($207 | 0) % 9) & -1;
          $$0527629 = (($211) + 1) | 0;
          $212 = ($$0527629 | 0) < (9);
          if ($212) {
            $$0527631 = $$0527629;
            $$1531630 = 10;
            while (1) {
              $213 = ($$1531630 * 10) | 0;
              $$0527 = (($$0527631) + 1) | 0;
              $exitcond = ($$0527 | 0) == (9);
              if ($exitcond) {
                $$1531$lcssa = $213;
                break;
              } else {
                $$0527631 = $$0527;
                $$1531630 = $213;
              }
            }
          } else {
            $$1531$lcssa = 10;
          }
          $214 = HEAP32[$210 >> 2] | 0;
          $215 = (($214 >>> 0) % ($$1531$lcssa >>> 0)) & -1;
          $216 = ($215 | 0) == (0);
          $217 = ((($210)) + 4 | 0);
          $218 = ($217 | 0) == ($$3501$lcssa | 0);
          $or$cond541 = $218 & $216;
          if ($or$cond541) {
            $$4492 = $210;
            $$4518 = $$1515;
            $$8 = $$3484$lcssa;
          } else {
            $219 = (($214 >>> 0) / ($$1531$lcssa >>> 0)) & -1;
            $220 = $219 & 1;
            $221 = ($220 | 0) == (0);
            $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
            $222 = (($$1531$lcssa | 0) / 2) & -1;
            $223 = ($215 >>> 0) < ($222 >>> 0);
            $224 = ($215 | 0) == ($222 | 0);
            $or$cond544 = $218 & $224;
            $$559 = $or$cond544 ? 1.0 : 1.5;
            $$$559 = $223 ? 0.5 : $$559;
            $225 = ($$0520 | 0) == (0);
            if ($225) {
              $$1467 = $$$559;
              $$1469 = $$542;
            } else {
              $226 = HEAP8[$$0521 >> 0] | 0;
              $227 = ($226 << 24 >> 24) == (45);
              $228 = -$$542;
              $229 = -$$$559;
              $$$542 = $227 ? $228 : $$542;
              $$$$559 = $227 ? $229 : $$$559;
              $$1467 = $$$$559;
              $$1469 = $$$542;
            }
            $230 = (($214) - ($215)) | 0;
            HEAP32[$210 >> 2] = $230;
            $231 = $$1469 + $$1467;
            $232 = $231 != $$1469;
            if ($232) {
              $233 = (($230) + ($$1531$lcssa)) | 0;
              HEAP32[$210 >> 2] = $233;
              $234 = ($233 >>> 0) > (999999999);
              if ($234) {
                $$5486623 = $$3484$lcssa;
                $$sink545622 = $210;
                while (1) {
                  $235 = ((($$sink545622)) + -4 | 0);
                  HEAP32[$$sink545622 >> 2] = 0;
                  $236 = ($235 >>> 0) < ($$5486623 >>> 0);
                  if ($236) {
                    $237 = ((($$5486623)) + -4 | 0);
                    HEAP32[$237 >> 2] = 0;
                    $$6 = $237;
                  } else {
                    $$6 = $$5486623;
                  }
                  $238 = HEAP32[$235 >> 2] | 0;
                  $239 = (($238) + 1) | 0;
                  HEAP32[$235 >> 2] = $239;
                  $240 = ($239 >>> 0) > (999999999);
                  if ($240) {
                    $$5486623 = $$6;
                    $$sink545622 = $235;
                  } else {
                    $$5486$lcssa = $$6;
                    $$sink545$lcssa = $235;
                    break;
                  }
                }
              } else {
                $$5486$lcssa = $$3484$lcssa;
                $$sink545$lcssa = $210;
              }
              $241 = $$5486$lcssa;
              $242 = (($183) - ($241)) | 0;
              $243 = $242 >> 2;
              $244 = ($243 * 9) | 0;
              $245 = HEAP32[$$5486$lcssa >> 2] | 0;
              $246 = ($245 >>> 0) < (10);
              if ($246) {
                $$4492 = $$sink545$lcssa;
                $$4518 = $244;
                $$8 = $$5486$lcssa;
              } else {
                $$2516618 = $244;
                $$2532617 = 10;
                while (1) {
                  $247 = ($$2532617 * 10) | 0;
                  $248 = (($$2516618) + 1) | 0;
                  $249 = ($245 >>> 0) < ($247 >>> 0);
                  if ($249) {
                    $$4492 = $$sink545$lcssa;
                    $$4518 = $248;
                    $$8 = $$5486$lcssa;
                    break;
                  } else {
                    $$2516618 = $248;
                    $$2532617 = $247;
                  }
                }
              }
            } else {
              $$4492 = $210;
              $$4518 = $$1515;
              $$8 = $$3484$lcssa;
            }
          }
          $250 = ((($$4492)) + 4 | 0);
          $251 = ($$3501$lcssa >>> 0) > ($250 >>> 0);
          $$$3501 = $251 ? $250 : $$3501$lcssa;
          $$5519$ph = $$4518;
          $$7505$ph = $$$3501;
          $$9$ph = $$8;
        } else {
          $$5519$ph = $$1515;
          $$7505$ph = $$3501$lcssa;
          $$9$ph = $$3484$lcssa;
        }
        $$7505 = $$7505$ph;
        while (1) {
          $252 = ($$7505 >>> 0) > ($$9$ph >>> 0);
          if (!($252)) {
            $$lcssa673 = 0;
            break;
          }
          $253 = ((($$7505)) + -4 | 0);
          $254 = HEAP32[$253 >> 2] | 0;
          $255 = ($254 | 0) == (0);
          if ($255) {
            $$7505 = $253;
          } else {
            $$lcssa673 = 1;
            break;
          }
        }
        $256 = (0 - ($$5519$ph)) | 0;
        do {
          if ($196) {
            $not$ = $197 ^ 1;
            $257 = $not$ & 1;
            $$539$ = (($257) + ($$539)) | 0;
            $258 = ($$539$ | 0) > ($$5519$ph | 0);
            $259 = ($$5519$ph | 0) > (-5);
            $or$cond6 = $258 & $259;
            if ($or$cond6) {
              $260 = (($5) + -1) | 0;
              $$neg567 = (($$539$) + -1) | 0;
              $261 = (($$neg567) - ($$5519$ph)) | 0;
              $$0479 = $260;
              $$2476 = $261;
            } else {
              $262 = (($5) + -2) | 0;
              $263 = (($$539$) + -1) | 0;
              $$0479 = $262;
              $$2476 = $263;
            }
            $264 = $4 & 8;
            $265 = ($264 | 0) == (0);
            if ($265) {
              if ($$lcssa673) {
                $266 = ((($$7505)) + -4 | 0);
                $267 = HEAP32[$266 >> 2] | 0;
                $268 = ($267 | 0) == (0);
                if ($268) {
                  $$2529 = 9;
                } else {
                  $269 = (($267 >>> 0) % 10) & -1;
                  $270 = ($269 | 0) == (0);
                  if ($270) {
                    $$1528614 = 0;
                    $$3533613 = 10;
                    while (1) {
                      $271 = ($$3533613 * 10) | 0;
                      $272 = (($$1528614) + 1) | 0;
                      $273 = (($267 >>> 0) % ($271 >>> 0)) & -1;
                      $274 = ($273 | 0) == (0);
                      if ($274) {
                        $$1528614 = $272;
                        $$3533613 = $271;
                      } else {
                        $$2529 = $272;
                        break;
                      }
                    }
                  } else {
                    $$2529 = 0;
                  }
                }
              } else {
                $$2529 = 9;
              }
              $275 = $$0479 | 32;
              $276 = ($275 | 0) == (102);
              $277 = $$7505;
              $278 = (($277) - ($183)) | 0;
              $279 = $278 >> 2;
              $280 = ($279 * 9) | 0;
              $281 = (($280) + -9) | 0;
              if ($276) {
                $282 = (($281) - ($$2529)) | 0;
                $283 = ($282 | 0) > (0);
                $$546 = $283 ? $282 : 0;
                $284 = ($$2476 | 0) < ($$546 | 0);
                $$2476$$547 = $284 ? $$2476 : $$546;
                $$1480 = $$0479;
                $$3477 = $$2476$$547;
                $$pre$phi690Z2D = 0;
                break;
              } else {
                $285 = (($281) + ($$5519$ph)) | 0;
                $286 = (($285) - ($$2529)) | 0;
                $287 = ($286 | 0) > (0);
                $$548 = $287 ? $286 : 0;
                $288 = ($$2476 | 0) < ($$548 | 0);
                $$2476$$549 = $288 ? $$2476 : $$548;
                $$1480 = $$0479;
                $$3477 = $$2476$$549;
                $$pre$phi690Z2D = 0;
                break;
              }
            } else {
              $$1480 = $$0479;
              $$3477 = $$2476;
              $$pre$phi690Z2D = $264;
            }
          } else {
            $$pre689 = $4 & 8;
            $$1480 = $5;
            $$3477 = $$539;
            $$pre$phi690Z2D = $$pre689;
          }
        } while (0);
        $289 = $$3477 | $$pre$phi690Z2D;
        $290 = ($289 | 0) != (0);
        $291 = $290 & 1;
        $292 = $$1480 | 32;
        $293 = ($292 | 0) == (102);
        if ($293) {
          $294 = ($$5519$ph | 0) > (0);
          $295 = $294 ? $$5519$ph : 0;
          $$2513 = 0;
          $$pn566 = $295;
        } else {
          $296 = ($$5519$ph | 0) < (0);
          $297 = $296 ? $256 : $$5519$ph;
          $298 = ($297 | 0) < (0);
          $299 = $298 << 31 >> 31;
          $300 = (_fmt_u($297, $299, $11) | 0);
          $301 = $11;
          $302 = $300;
          $303 = (($301) - ($302)) | 0;
          $304 = ($303 | 0) < (2);
          if ($304) {
            $$1512607 = $300;
            while (1) {
              $305 = ((($$1512607)) + -1 | 0);
              HEAP8[$305 >> 0] = 48;
              $306 = $305;
              $307 = (($301) - ($306)) | 0;
              $308 = ($307 | 0) < (2);
              if ($308) {
                $$1512607 = $305;
              } else {
                $$1512$lcssa = $305;
                break;
              }
            }
          } else {
            $$1512$lcssa = $300;
          }
          $309 = $$5519$ph >> 31;
          $310 = $309 & 2;
          $311 = (($310) + 43) | 0;
          $312 = $311 & 255;
          $313 = ((($$1512$lcssa)) + -1 | 0);
          HEAP8[$313 >> 0] = $312;
          $314 = $$1480 & 255;
          $315 = ((($$1512$lcssa)) + -2 | 0);
          HEAP8[$315 >> 0] = $314;
          $316 = $315;
          $317 = (($301) - ($316)) | 0;
          $$2513 = $315;
          $$pn566 = $317;
        }
        $318 = (($$0520) + 1) | 0;
        $319 = (($318) + ($$3477)) | 0;
        $$1526 = (($319) + ($291)) | 0;
        $320 = (($$1526) + ($$pn566)) | 0;
        _pad($0, 32, $2, $320, $4);
        _out($0, $$0521, $$0520);
        $321 = $4 ^ 65536;
        _pad($0, 48, $2, $320, $321);
        if ($293) {
          $322 = ($$9$ph >>> 0) > ($$556 >>> 0);
          $$0496$$9 = $322 ? $$556 : $$9$ph;
          $323 = ((($8)) + 9 | 0);
          $324 = $323;
          $325 = ((($8)) + 8 | 0);
          $$5493597 = $$0496$$9;
          while (1) {
            $326 = HEAP32[$$5493597 >> 2] | 0;
            $327 = (_fmt_u($326, 0, $323) | 0);
            $328 = ($$5493597 | 0) == ($$0496$$9 | 0);
            if ($328) {
              $334 = ($327 | 0) == ($323 | 0);
              if ($334) {
                HEAP8[$325 >> 0] = 48;
                $$1465 = $325;
              } else {
                $$1465 = $327;
              }
            } else {
              $329 = ($327 >>> 0) > ($8 >>> 0);
              if ($329) {
                $330 = $327;
                $331 = (($330) - ($9)) | 0;
                _memset(($8 | 0), 48, ($331 | 0)) | 0;
                $$0464594 = $327;
                while (1) {
                  $332 = ((($$0464594)) + -1 | 0);
                  $333 = ($332 >>> 0) > ($8 >>> 0);
                  if ($333) {
                    $$0464594 = $332;
                  } else {
                    $$1465 = $332;
                    break;
                  }
                }
              } else {
                $$1465 = $327;
              }
            }
            $335 = $$1465;
            $336 = (($324) - ($335)) | 0;
            _out($0, $$1465, $336);
            $337 = ((($$5493597)) + 4 | 0);
            $338 = ($337 >>> 0) > ($$556 >>> 0);
            if ($338) {
              break;
            } else {
              $$5493597 = $337;
            }
          }
          $339 = ($289 | 0) == (0);
          if (!($339)) {
            _out($0, 4214, 1);
          }
          $340 = ($337 >>> 0) < ($$7505 >>> 0);
          $341 = ($$3477 | 0) > (0);
          $342 = $340 & $341;
          if ($342) {
            $$4478590 = $$3477;
            $$6494589 = $337;
            while (1) {
              $343 = HEAP32[$$6494589 >> 2] | 0;
              $344 = (_fmt_u($343, 0, $323) | 0);
              $345 = ($344 >>> 0) > ($8 >>> 0);
              if ($345) {
                $346 = $344;
                $347 = (($346) - ($9)) | 0;
                _memset(($8 | 0), 48, ($347 | 0)) | 0;
                $$0463584 = $344;
                while (1) {
                  $348 = ((($$0463584)) + -1 | 0);
                  $349 = ($348 >>> 0) > ($8 >>> 0);
                  if ($349) {
                    $$0463584 = $348;
                  } else {
                    $$0463$lcssa = $348;
                    break;
                  }
                }
              } else {
                $$0463$lcssa = $344;
              }
              $350 = ($$4478590 | 0) < (9);
              $351 = $350 ? $$4478590 : 9;
              _out($0, $$0463$lcssa, $351);
              $352 = ((($$6494589)) + 4 | 0);
              $353 = (($$4478590) + -9) | 0;
              $354 = ($352 >>> 0) < ($$7505 >>> 0);
              $355 = ($$4478590 | 0) > (9);
              $356 = $354 & $355;
              if ($356) {
                $$4478590 = $353;
                $$6494589 = $352;
              } else {
                $$4478$lcssa = $353;
                break;
              }
            }
          } else {
            $$4478$lcssa = $$3477;
          }
          $357 = (($$4478$lcssa) + 9) | 0;
          _pad($0, 48, $357, 9, 0);
        } else {
          $358 = ((($$9$ph)) + 4 | 0);
          $$7505$ = $$lcssa673 ? $$7505 : $358;
          $359 = ($$3477 | 0) > (-1);
          if ($359) {
            $360 = ((($8)) + 9 | 0);
            $361 = ($$pre$phi690Z2D | 0) == (0);
            $362 = $360;
            $363 = (0 - ($9)) | 0;
            $364 = ((($8)) + 8 | 0);
            $$5602 = $$3477;
            $$7495601 = $$9$ph;
            while (1) {
              $365 = HEAP32[$$7495601 >> 2] | 0;
              $366 = (_fmt_u($365, 0, $360) | 0);
              $367 = ($366 | 0) == ($360 | 0);
              if ($367) {
                HEAP8[$364 >> 0] = 48;
                $$0 = $364;
              } else {
                $$0 = $366;
              }
              $368 = ($$7495601 | 0) == ($$9$ph | 0);
              do {
                if ($368) {
                  $372 = ((($$0)) + 1 | 0);
                  _out($0, $$0, 1);
                  $373 = ($$5602 | 0) < (1);
                  $or$cond554 = $361 & $373;
                  if ($or$cond554) {
                    $$2 = $372;
                    break;
                  }
                  _out($0, 4214, 1);
                  $$2 = $372;
                } else {
                  $369 = ($$0 >>> 0) > ($8 >>> 0);
                  if (!($369)) {
                    $$2 = $$0;
                    break;
                  }
                  $scevgep684 = (($$0) + ($363) | 0);
                  $scevgep684685 = $scevgep684;
                  _memset(($8 | 0), 48, ($scevgep684685 | 0)) | 0;
                  $$1598 = $$0;
                  while (1) {
                    $370 = ((($$1598)) + -1 | 0);
                    $371 = ($370 >>> 0) > ($8 >>> 0);
                    if ($371) {
                      $$1598 = $370;
                    } else {
                      $$2 = $370;
                      break;
                    }
                  }
                }
              } while (0);
              $374 = $$2;
              $375 = (($362) - ($374)) | 0;
              $376 = ($$5602 | 0) > ($375 | 0);
              $377 = $376 ? $375 : $$5602;
              _out($0, $$2, $377);
              $378 = (($$5602) - ($375)) | 0;
              $379 = ((($$7495601)) + 4 | 0);
              $380 = ($379 >>> 0) < ($$7505$ >>> 0);
              $381 = ($378 | 0) > (-1);
              $382 = $380 & $381;
              if ($382) {
                $$5602 = $378;
                $$7495601 = $379;
              } else {
                $$5$lcssa = $378;
                break;
              }
            }
          } else {
            $$5$lcssa = $$3477;
          }
          $383 = (($$5$lcssa) + 18) | 0;
          _pad($0, 48, $383, 18, 0);
          $384 = $11;
          $385 = $$2513;
          $386 = (($384) - ($385)) | 0;
          _out($0, $$2513, $386);
        }
        $387 = $4 ^ 8192;
        _pad($0, 32, $2, $320, $387);
        $$sink562 = $320;
      } else {
        $27 = $5 & 32;
        $28 = ($27 | 0) != (0);
        $29 = $28 ? 4182 : 4186;
        $30 = ($$0471 != $$0471) | (0.0 != 0.0);
        $31 = $28 ? 4190 : 4194;
        $$0510 = $30 ? $31 : $29;
        $32 = (($$0520) + 3) | 0;
        $33 = $4 & -65537;
        _pad($0, 32, $2, $32, $33);
        _out($0, $$0521, $$0520);
        _out($0, $$0510, 3);
        $34 = $4 ^ 8192;
        _pad($0, 32, $2, $32, $34);
        $$sink562 = $32;
      }
    } while (0);
    $388 = ($$sink562 | 0) < ($2 | 0);
    $$555 = $388 ? $2 : $$sink562;
    STACKTOP = sp;
    return ($$555 | 0);
  }

  function ___DOUBLE_BITS_536($0) {
    $0 = +$0;
    var $1 = 0, $2 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    HEAPF64[tempDoublePtr >> 3] = $0;
    $1 = HEAP32[tempDoublePtr >> 2] | 0;
    $2 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    tempRet0 = ($2);
    return ($1 | 0);
  }

  function _frexpl($0, $1) {
    $0 = +$0;
    $1 = $1 | 0;
    var $2 = 0.0, label = 0, sp = 0;
    sp = STACKTOP;
    $2 = (+_frexp($0, $1));
    return (+$2);
  }

  function _frexp($0, $1) {
    $0 = +$0;
    $1 = $1 | 0;
    var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0,
      $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
    var sp = 0;
    sp = STACKTOP;
    HEAPF64[tempDoublePtr >> 3] = $0;
    $2 = HEAP32[tempDoublePtr >> 2] | 0;
    $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
    $4 = (_bitshift64Lshr(($2 | 0), ($3 | 0), 52) | 0);
    $5 = tempRet0;
    $6 = $4 & 65535;
    $trunc$clear = $6 & 2047;
    switch ($trunc$clear << 16 >> 16) {
      case 0: {
        $7 = $0 != 0.0;
        if ($7) {
          $8 = $0 * 1.8446744073709552E+19;
          $9 = (+_frexp($8, $1));
          $10 = HEAP32[$1 >> 2] | 0;
          $11 = (($10) + -64) | 0;
          $$016 = $9;
          $storemerge = $11;
        } else {
          $$016 = $0;
          $storemerge = 0;
        }
        HEAP32[$1 >> 2] = $storemerge;
        $$0 = $$016;
        break;
      }
      case 2047: {
        $$0 = $0;
        break;
      }
      default: {
        $12 = $4 & 2047;
        $13 = (($12) + -1022) | 0;
        HEAP32[$1 >> 2] = $13;
        $14 = $3 & -2146435073;
        $15 = $14 | 1071644672;
        HEAP32[tempDoublePtr >> 2] = $2;
        HEAP32[tempDoublePtr + 4 >> 2] = $15;
        $16 = +HEAPF64[tempDoublePtr >> 3];
        $$0 = $16;
      }
    }
    return (+$$0);
  }

  function _wcrtomb($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0,
      $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
    var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0,
      $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
    var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0,
      $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $3 = ($0 | 0) == (0 | 0);
    do {
      if ($3) {
        $$0 = 1;
      } else {
        $4 = ($1 >>> 0) < (128);
        if ($4) {
          $5 = $1 & 255;
          HEAP8[$0 >> 0] = $5;
          $$0 = 1;
          break;
        }
        $6 = (___pthread_self_213() | 0);
        $7 = ((($6)) + 188 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = HEAP32[$8 >> 2] | 0;
        $not$ = ($9 | 0) == (0 | 0);
        if ($not$) {
          $10 = $1 & -128;
          $11 = ($10 | 0) == (57216);
          if ($11) {
            $13 = $1 & 255;
            HEAP8[$0 >> 0] = $13;
            $$0 = 1;
            break;
          } else {
            $12 = (___errno_location() | 0);
            HEAP32[$12 >> 2] = 84;
            $$0 = -1;
            break;
          }
        }
        $14 = ($1 >>> 0) < (2048);
        if ($14) {
          $15 = $1 >>> 6;
          $16 = $15 | 192;
          $17 = $16 & 255;
          $18 = ((($0)) + 1 | 0);
          HEAP8[$0 >> 0] = $17;
          $19 = $1 & 63;
          $20 = $19 | 128;
          $21 = $20 & 255;
          HEAP8[$18 >> 0] = $21;
          $$0 = 2;
          break;
        }
        $22 = ($1 >>> 0) < (55296);
        $23 = $1 & -8192;
        $24 = ($23 | 0) == (57344);
        $or$cond = $22 | $24;
        if ($or$cond) {
          $25 = $1 >>> 12;
          $26 = $25 | 224;
          $27 = $26 & 255;
          $28 = ((($0)) + 1 | 0);
          HEAP8[$0 >> 0] = $27;
          $29 = $1 >>> 6;
          $30 = $29 & 63;
          $31 = $30 | 128;
          $32 = $31 & 255;
          $33 = ((($0)) + 2 | 0);
          HEAP8[$28 >> 0] = $32;
          $34 = $1 & 63;
          $35 = $34 | 128;
          $36 = $35 & 255;
          HEAP8[$33 >> 0] = $36;
          $$0 = 3;
          break;
        }
        $37 = (($1) + -65536) | 0;
        $38 = ($37 >>> 0) < (1048576);
        if ($38) {
          $39 = $1 >>> 18;
          $40 = $39 | 240;
          $41 = $40 & 255;
          $42 = ((($0)) + 1 | 0);
          HEAP8[$0 >> 0] = $41;
          $43 = $1 >>> 12;
          $44 = $43 & 63;
          $45 = $44 | 128;
          $46 = $45 & 255;
          $47 = ((($0)) + 2 | 0);
          HEAP8[$42 >> 0] = $46;
          $48 = $1 >>> 6;
          $49 = $48 & 63;
          $50 = $49 | 128;
          $51 = $50 & 255;
          $52 = ((($0)) + 3 | 0);
          HEAP8[$47 >> 0] = $51;
          $53 = $1 & 63;
          $54 = $53 | 128;
          $55 = $54 & 255;
          HEAP8[$52 >> 0] = $55;
          $$0 = 4;
          break;
        } else {
          $56 = (___errno_location() | 0);
          HEAP32[$56 >> 2] = 84;
          $$0 = -1;
          break;
        }
      }
    } while (0);
    return ($$0 | 0);
  }

  function ___pthread_self_213() {
    var $0 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $0 = (_pthread_self() | 0);
    return ($0 | 0);
  }

  function ___fwritex($0, $1, $2) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $2 = $2 | 0;
    var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0,
      $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
    var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0,
      $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
    var label = 0, sp = 0;
    sp = STACKTOP;
    $3 = ((($2)) + 16 | 0);
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) == (0 | 0);
    if ($5) {
      $7 = (___towrite($2) | 0);
      $8 = ($7 | 0) == (0);
      if ($8) {
        $$pre = HEAP32[$3 >> 2] | 0;
        $12 = $$pre;
        label = 5;
      } else {
        $$1 = 0;
      }
    } else {
      $6 = $4;
      $12 = $6;
      label = 5;
    }
    L5: do {
      if ((label | 0) == 5) {
        $9 = ((($2)) + 20 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = (($12) - ($10)) | 0;
        $13 = ($11 >>> 0) < ($1 >>> 0);
        $14 = $10;
        if ($13) {
          $15 = ((($2)) + 36 | 0);
          $16 = HEAP32[$15 >> 2] | 0;
          $17 = (FUNCTION_TABLE_iiii[$16 & 3]($2, $0, $1) | 0);
          $$1 = $17;
          break;
        }
        $18 = ((($2)) + 75 | 0);
        $19 = HEAP8[$18 >> 0] | 0;
        $20 = ($19 << 24 >> 24) > (-1);
        L10: do {
          if ($20) {
            $$038 = $1;
            while (1) {
              $21 = ($$038 | 0) == (0);
              if ($21) {
                $$139 = 0;
                $$141 = $0;
                $$143 = $1;
                $31 = $14;
                break L10;
              }
              $22 = (($$038) + -1) | 0;
              $23 = (($0) + ($22) | 0);
              $24 = HEAP8[$23 >> 0] | 0;
              $25 = ($24 << 24 >> 24) == (10);
              if ($25) {
                break;
              } else {
                $$038 = $22;
              }
            }
            $26 = ((($2)) + 36 | 0);
            $27 = HEAP32[$26 >> 2] | 0;
            $28 = (FUNCTION_TABLE_iiii[$27 & 3]($2, $0, $$038) | 0);
            $29 = ($28 >>> 0) < ($$038 >>> 0);
            if ($29) {
              $$1 = $28;
              break L5;
            }
            $30 = (($0) + ($$038) | 0);
            $$042 = (($1) - ($$038)) | 0;
            $$pre47 = HEAP32[$9 >> 2] | 0;
            $$139 = $$038;
            $$141 = $30;
            $$143 = $$042;
            $31 = $$pre47;
          } else {
            $$139 = 0;
            $$141 = $0;
            $$143 = $1;
            $31 = $14;
          }
        } while (0);
        _memcpy(($31 | 0), ($$141 | 0), ($$143 | 0)) | 0;
        $32 = HEAP32[$9 >> 2] | 0;
        $33 = (($32) + ($$143) | 0);
        HEAP32[$9 >> 2] = $33;
        $34 = (($$139) + ($$143)) | 0;
        $$1 = $34;
      }
    } while (0);
    return ($$1 | 0);
  }

  function ___towrite($0) {
    $0 = $0 | 0;
    var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0,
      $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
    var $9 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $1 = ((($0)) + 74 | 0);
    $2 = HEAP8[$1 >> 0] | 0;
    $3 = $2 << 24 >> 24;
    $4 = (($3) + 255) | 0;
    $5 = $4 | $3;
    $6 = $5 & 255;
    HEAP8[$1 >> 0] = $6;
    $7 = HEAP32[$0 >> 2] | 0;
    $8 = $7 & 8;
    $9 = ($8 | 0) == (0);
    if ($9) {
      $11 = ((($0)) + 8 | 0);
      HEAP32[$11 >> 2] = 0;
      $12 = ((($0)) + 4 | 0);
      HEAP32[$12 >> 2] = 0;
      $13 = ((($0)) + 44 | 0);
      $14 = HEAP32[$13 >> 2] | 0;
      $15 = ((($0)) + 28 | 0);
      HEAP32[$15 >> 2] = $14;
      $16 = ((($0)) + 20 | 0);
      HEAP32[$16 >> 2] = $14;
      $17 = ((($0)) + 48 | 0);
      $18 = HEAP32[$17 >> 2] | 0;
      $19 = (($14) + ($18) | 0);
      $20 = ((($0)) + 16 | 0);
      HEAP32[$20 >> 2] = $19;
      $$0 = 0;
    } else {
      $10 = $7 | 32;
      HEAP32[$0 >> 2] = $10;
      $$0 = -1;
    }
    return ($$0 | 0);
  }

  function _fprintf($0, $1, $varargs) {
    $0 = $0 | 0;
    $1 = $1 | 0;
    $varargs = $varargs | 0;
    var $2 = 0, $3 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $2 = sp;
    HEAP32[$2 >> 2] = $varargs;
    $3 = (_vfprintf($0, $1, $2) | 0);
    STACKTOP = sp;
    return ($3 | 0);
  }

  function _malloc($0) {
    $0 = $0 | 0;
    var $$$0192$i = 0, $$$0193$i = 0, $$$4236$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0,
      $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0,
      $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0;
    var $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0,
      $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$$i = 0, $$0359$i = 0,
      $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0;
    var $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0,
      $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0,
      $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0;
    var $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0,
      $$723948$i = 0, $$749$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i210 = 0,
      $$pre$i212 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0,
      $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0;
    var $$pre10$i$i = 0, $$sink1$i = 0, $$sink1$i$i = 0, $$sink16$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0,
      $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0,
      $1008 = 0, $1009 = 0;
    var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0,
      $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
    var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0,
      $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
    var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0,
      $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
    var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0,
      $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
    var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0,
      $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
    var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0,
      $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
    var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0,
      $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
    var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0,
      $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
    var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0,
      $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
    var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0,
      $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
    var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0,
      $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
    var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0,
      $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
    var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0,
      $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
    var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0,
      $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
    var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0,
      $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
    var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0,
      $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
    var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0,
      $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
    var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0,
      $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
    var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0,
      $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
    var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0,
      $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
    var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0,
      $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
    var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0,
      $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
    var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0,
      $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
    var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0,
      $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
    var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0,
      $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
    var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0,
      $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
    var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0,
      $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
    var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0,
      $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
    var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0,
      $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
    var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0,
      $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
    var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0,
      $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
    var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0,
      $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
    var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0,
      $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
    var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0,
      $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
    var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0,
      $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
    var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0,
      $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
    var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0,
      $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
    var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0,
      $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
    var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0,
      $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
    var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0,
      $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
    var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0,
      $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
    var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0,
      $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
    var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0,
      $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
    var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0,
      $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
    var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0,
      $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
    var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0,
      $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
    var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0,
      $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
    var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0,
      $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
    var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0,
      $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
    var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0,
      $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
    var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0,
      $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
    var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0,
      $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
    var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0,
      $not$$i = 0, $not$$i$i = 0, $not$$i17$i = 0, $not$$i209 = 0, $not$$i216 = 0, $not$1$i = 0, $not$1$i203 = 0,
      $not$5$i = 0, $not$7$i$i = 0, $not$8$i = 0, $not$9$i = 0;
    var $or$cond$i = 0, $or$cond$i214 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0,
      $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i215 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0,
      $or$cond7$i = 0, label = 0, sp = 0;
    sp = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16 | 0);
    $1 = sp;
    $2 = ($0 >>> 0) < (245);
    do {
      if ($2) {
        $3 = ($0 >>> 0) < (11);
        $4 = (($0) + 11) | 0;
        $5 = $4 & -8;
        $6 = $3 ? 16 : $5;
        $7 = $6 >>> 3;
        $8 = HEAP32[1070] | 0;
        $9 = $8 >>> $7;
        $10 = $9 & 3;
        $11 = ($10 | 0) == (0);
        if (!($11)) {
          $12 = $9 & 1;
          $13 = $12 ^ 1;
          $14 = (($13) + ($7)) | 0;
          $15 = $14 << 1;
          $16 = (4320 + ($15 << 2) | 0);
          $17 = ((($16)) + 8 | 0);
          $18 = HEAP32[$17 >> 2] | 0;
          $19 = ((($18)) + 8 | 0);
          $20 = HEAP32[$19 >> 2] | 0;
          $21 = ($16 | 0) == ($20 | 0);
          do {
            if ($21) {
              $22 = 1 << $14;
              $23 = $22 ^ -1;
              $24 = $8 & $23;
              HEAP32[1070] = $24;
            } else {
              $25 = HEAP32[(4296) >> 2] | 0;
              $26 = ($20 >>> 0) < ($25 >>> 0);
              if ($26) {
                _abort();
                // unreachable;
              }
              $27 = ((($20)) + 12 | 0);
              $28 = HEAP32[$27 >> 2] | 0;
              $29 = ($28 | 0) == ($18 | 0);
              if ($29) {
                HEAP32[$27 >> 2] = $16;
                HEAP32[$17 >> 2] = $20;
                break;
              } else {
                _abort();
                // unreachable;
              }
            }
          } while (0);
          $30 = $14 << 3;
          $31 = $30 | 3;
          $32 = ((($18)) + 4 | 0);
          HEAP32[$32 >> 2] = $31;
          $33 = (($18) + ($30) | 0);
          $34 = ((($33)) + 4 | 0);
          $35 = HEAP32[$34 >> 2] | 0;
          $36 = $35 | 1;
          HEAP32[$34 >> 2] = $36;
          $$0 = $19;
          STACKTOP = sp;
          return ($$0 | 0);
        }
        $37 = HEAP32[(4288) >> 2] | 0;
        $38 = ($6 >>> 0) > ($37 >>> 0);
        if ($38) {
          $39 = ($9 | 0) == (0);
          if (!($39)) {
            $40 = $9 << $7;
            $41 = 2 << $7;
            $42 = (0 - ($41)) | 0;
            $43 = $41 | $42;
            $44 = $40 & $43;
            $45 = (0 - ($44)) | 0;
            $46 = $44 & $45;
            $47 = (($46) + -1) | 0;
            $48 = $47 >>> 12;
            $49 = $48 & 16;
            $50 = $47 >>> $49;
            $51 = $50 >>> 5;
            $52 = $51 & 8;
            $53 = $52 | $49;
            $54 = $50 >>> $52;
            $55 = $54 >>> 2;
            $56 = $55 & 4;
            $57 = $53 | $56;
            $58 = $54 >>> $56;
            $59 = $58 >>> 1;
            $60 = $59 & 2;
            $61 = $57 | $60;
            $62 = $58 >>> $60;
            $63 = $62 >>> 1;
            $64 = $63 & 1;
            $65 = $61 | $64;
            $66 = $62 >>> $64;
            $67 = (($65) + ($66)) | 0;
            $68 = $67 << 1;
            $69 = (4320 + ($68 << 2) | 0);
            $70 = ((($69)) + 8 | 0);
            $71 = HEAP32[$70 >> 2] | 0;
            $72 = ((($71)) + 8 | 0);
            $73 = HEAP32[$72 >> 2] | 0;
            $74 = ($69 | 0) == ($73 | 0);
            do {
              if ($74) {
                $75 = 1 << $67;
                $76 = $75 ^ -1;
                $77 = $8 & $76;
                HEAP32[1070] = $77;
                $98 = $77;
              } else {
                $78 = HEAP32[(4296) >> 2] | 0;
                $79 = ($73 >>> 0) < ($78 >>> 0);
                if ($79) {
                  _abort();
                  // unreachable;
                }
                $80 = ((($73)) + 12 | 0);
                $81 = HEAP32[$80 >> 2] | 0;
                $82 = ($81 | 0) == ($71 | 0);
                if ($82) {
                  HEAP32[$80 >> 2] = $69;
                  HEAP32[$70 >> 2] = $73;
                  $98 = $8;
                  break;
                } else {
                  _abort();
                  // unreachable;
                }
              }
            } while (0);
            $83 = $67 << 3;
            $84 = (($83) - ($6)) | 0;
            $85 = $6 | 3;
            $86 = ((($71)) + 4 | 0);
            HEAP32[$86 >> 2] = $85;
            $87 = (($71) + ($6) | 0);
            $88 = $84 | 1;
            $89 = ((($87)) + 4 | 0);
            HEAP32[$89 >> 2] = $88;
            $90 = (($87) + ($84) | 0);
            HEAP32[$90 >> 2] = $84;
            $91 = ($37 | 0) == (0);
            if (!($91)) {
              $92 = HEAP32[(4300) >> 2] | 0;
              $93 = $37 >>> 3;
              $94 = $93 << 1;
              $95 = (4320 + ($94 << 2) | 0);
              $96 = 1 << $93;
              $97 = $98 & $96;
              $99 = ($97 | 0) == (0);
              if ($99) {
                $100 = $98 | $96;
                HEAP32[1070] = $100;
                $$pre = ((($95)) + 8 | 0);
                $$0199 = $95;
                $$pre$phiZ2D = $$pre;
              } else {
                $101 = ((($95)) + 8 | 0);
                $102 = HEAP32[$101 >> 2] | 0;
                $103 = HEAP32[(4296) >> 2] | 0;
                $104 = ($102 >>> 0) < ($103 >>> 0);
                if ($104) {
                  _abort();
                  // unreachable;
                } else {
                  $$0199 = $102;
                  $$pre$phiZ2D = $101;
                }
              }
              HEAP32[$$pre$phiZ2D >> 2] = $92;
              $105 = ((($$0199)) + 12 | 0);
              HEAP32[$105 >> 2] = $92;
              $106 = ((($92)) + 8 | 0);
              HEAP32[$106 >> 2] = $$0199;
              $107 = ((($92)) + 12 | 0);
              HEAP32[$107 >> 2] = $95;
            }
            HEAP32[(4288) >> 2] = $84;
            HEAP32[(4300) >> 2] = $87;
            $$0 = $72;
            STACKTOP = sp;
            return ($$0 | 0);
          }
          $108 = HEAP32[(4284) >> 2] | 0;
          $109 = ($108 | 0) == (0);
          if ($109) {
            $$0197 = $6;
          } else {
            $110 = (0 - ($108)) | 0;
            $111 = $108 & $110;
            $112 = (($111) + -1) | 0;
            $113 = $112 >>> 12;
            $114 = $113 & 16;
            $115 = $112 >>> $114;
            $116 = $115 >>> 5;
            $117 = $116 & 8;
            $118 = $117 | $114;
            $119 = $115 >>> $117;
            $120 = $119 >>> 2;
            $121 = $120 & 4;
            $122 = $118 | $121;
            $123 = $119 >>> $121;
            $124 = $123 >>> 1;
            $125 = $124 & 2;
            $126 = $122 | $125;
            $127 = $123 >>> $125;
            $128 = $127 >>> 1;
            $129 = $128 & 1;
            $130 = $126 | $129;
            $131 = $127 >>> $129;
            $132 = (($130) + ($131)) | 0;
            $133 = (4584 + ($132 << 2) | 0);
            $134 = HEAP32[$133 >> 2] | 0;
            $135 = ((($134)) + 4 | 0);
            $136 = HEAP32[$135 >> 2] | 0;
            $137 = $136 & -8;
            $138 = (($137) - ($6)) | 0;
            $139 = ((($134)) + 16 | 0);
            $140 = HEAP32[$139 >> 2] | 0;
            $not$5$i = ($140 | 0) == (0 | 0);
            $$sink16$i = $not$5$i & 1;
            $141 = (((($134)) + 16 | 0) + ($$sink16$i << 2) | 0);
            $142 = HEAP32[$141 >> 2] | 0;
            $143 = ($142 | 0) == (0 | 0);
            if ($143) {
              $$0192$lcssa$i = $134;
              $$0193$lcssa$i = $138;
            } else {
              $$01928$i = $134;
              $$01937$i = $138;
              $145 = $142;
              while (1) {
                $144 = ((($145)) + 4 | 0);
                $146 = HEAP32[$144 >> 2] | 0;
                $147 = $146 & -8;
                $148 = (($147) - ($6)) | 0;
                $149 = ($148 >>> 0) < ($$01937$i >>> 0);
                $$$0193$i = $149 ? $148 : $$01937$i;
                $$$0192$i = $149 ? $145 : $$01928$i;
                $150 = ((($145)) + 16 | 0);
                $151 = HEAP32[$150 >> 2] | 0;
                $not$$i = ($151 | 0) == (0 | 0);
                $$sink1$i = $not$$i & 1;
                $152 = (((($145)) + 16 | 0) + ($$sink1$i << 2) | 0);
                $153 = HEAP32[$152 >> 2] | 0;
                $154 = ($153 | 0) == (0 | 0);
                if ($154) {
                  $$0192$lcssa$i = $$$0192$i;
                  $$0193$lcssa$i = $$$0193$i;
                  break;
                } else {
                  $$01928$i = $$$0192$i;
                  $$01937$i = $$$0193$i;
                  $145 = $153;
                }
              }
            }
            $155 = HEAP32[(4296) >> 2] | 0;
            $156 = ($$0192$lcssa$i >>> 0) < ($155 >>> 0);
            if ($156) {
              _abort();
              // unreachable;
            }
            $157 = (($$0192$lcssa$i) + ($6) | 0);
            $158 = ($$0192$lcssa$i >>> 0) < ($157 >>> 0);
            if (!($158)) {
              _abort();
              // unreachable;
            }
            $159 = ((($$0192$lcssa$i)) + 24 | 0);
            $160 = HEAP32[$159 >> 2] | 0;
            $161 = ((($$0192$lcssa$i)) + 12 | 0);
            $162 = HEAP32[$161 >> 2] | 0;
            $163 = ($162 | 0) == ($$0192$lcssa$i | 0);
            do {
              if ($163) {
                $173 = ((($$0192$lcssa$i)) + 20 | 0);
                $174 = HEAP32[$173 >> 2] | 0;
                $175 = ($174 | 0) == (0 | 0);
                if ($175) {
                  $176 = ((($$0192$lcssa$i)) + 16 | 0);
                  $177 = HEAP32[$176 >> 2] | 0;
                  $178 = ($177 | 0) == (0 | 0);
                  if ($178) {
                    $$3$i = 0;
                    break;
                  } else {
                    $$1196$i = $177;
                    $$1198$i = $176;
                  }
                } else {
                  $$1196$i = $174;
                  $$1198$i = $173;
                }
                while (1) {
                  $179 = ((($$1196$i)) + 20 | 0);
                  $180 = HEAP32[$179 >> 2] | 0;
                  $181 = ($180 | 0) == (0 | 0);
                  if (!($181)) {
                    $$1196$i = $180;
                    $$1198$i = $179;
                    continue;
                  }
                  $182 = ((($$1196$i)) + 16 | 0);
                  $183 = HEAP32[$182 >> 2] | 0;
                  $184 = ($183 | 0) == (0 | 0);
                  if ($184) {
                    break;
                  } else {
                    $$1196$i = $183;
                    $$1198$i = $182;
                  }
                }
                $185 = ($$1198$i >>> 0) < ($155 >>> 0);
                if ($185) {
                  _abort();
                  // unreachable;
                } else {
                  HEAP32[$$1198$i >> 2] = 0;
                  $$3$i = $$1196$i;
                  break;
                }
              } else {
                $164 = ((($$0192$lcssa$i)) + 8 | 0);
                $165 = HEAP32[$164 >> 2] | 0;
                $166 = ($165 >>> 0) < ($155 >>> 0);
                if ($166) {
                  _abort();
                  // unreachable;
                }
                $167 = ((($165)) + 12 | 0);
                $168 = HEAP32[$167 >> 2] | 0;
                $169 = ($168 | 0) == ($$0192$lcssa$i | 0);
                if (!($169)) {
                  _abort();
                  // unreachable;
                }
                $170 = ((($162)) + 8 | 0);
                $171 = HEAP32[$170 >> 2] | 0;
                $172 = ($171 | 0) == ($$0192$lcssa$i | 0);
                if ($172) {
                  HEAP32[$167 >> 2] = $162;
                  HEAP32[$170 >> 2] = $165;
                  $$3$i = $162;
                  break;
                } else {
                  _abort();
                  // unreachable;
                }
              }
            } while (0);
            $186 = ($160 | 0) == (0 | 0);
            L73: do {
              if (!($186)) {
                $187 = ((($$0192$lcssa$i)) + 28 | 0);
                $188 = HEAP32[$187 >> 2] | 0;
                $189 = (4584 + ($188 << 2) | 0);
                $190 = HEAP32[$189 >> 2] | 0;
                $191 = ($$0192$lcssa$i | 0) == ($190 | 0);
                do {
                  if ($191) {
                    HEAP32[$189 >> 2] = $$3$i;
                    $cond$i = ($$3$i | 0) == (0 | 0);
                    if ($cond$i) {
                      $192 = 1 << $188;
                      $193 = $192 ^ -1;
                      $194 = $108 & $193;
                      HEAP32[(4284) >> 2] = $194;
                      break L73;
                    }
                  } else {
                    $195 = HEAP32[(4296) >> 2] | 0;
                    $196 = ($160 >>> 0) < ($195 >>> 0);
                    if ($196) {
                      _abort();
                      // unreachable;
                    } else {
                      $197 = ((($160)) + 16 | 0);
                      $198 = HEAP32[$197 >> 2] | 0;
                      $not$1$i = ($198 | 0) != ($$0192$lcssa$i | 0);
                      $$sink2$i = $not$1$i & 1;
                      $199 = (((($160)) + 16 | 0) + ($$sink2$i << 2) | 0);
                      HEAP32[$199 >> 2] = $$3$i;
                      $200 = ($$3$i | 0) == (0 | 0);
                      if ($200) {
                        break L73;
                      } else {
                        break;
                      }
                    }
                  }
                } while (0);
                $201 = HEAP32[(4296) >> 2] | 0;
                $202 = ($$3$i >>> 0) < ($201 >>> 0);
                if ($202) {
                  _abort();
                  // unreachable;
                }
                $203 = ((($$3$i)) + 24 | 0);
                HEAP32[$203 >> 2] = $160;
                $204 = ((($$0192$lcssa$i)) + 16 | 0);
                $205 = HEAP32[$204 >> 2] | 0;
                $206 = ($205 | 0) == (0 | 0);
                do {
                  if (!($206)) {
                    $207 = ($205 >>> 0) < ($201 >>> 0);
                    if ($207) {
                      _abort();
                      // unreachable;
                    } else {
                      $208 = ((($$3$i)) + 16 | 0);
                      HEAP32[$208 >> 2] = $205;
                      $209 = ((($205)) + 24 | 0);
                      HEAP32[$209 >> 2] = $$3$i;
                      break;
                    }
                  }
                } while (0);
                $210 = ((($$0192$lcssa$i)) + 20 | 0);
                $211 = HEAP32[$210 >> 2] | 0;
                $212 = ($211 | 0) == (0 | 0);
                if (!($212)) {
                  $213 = HEAP32[(4296) >> 2] | 0;
                  $214 = ($211 >>> 0) < ($213 >>> 0);
                  if ($214) {
                    _abort();
                    // unreachable;
                  } else {
                    $215 = ((($$3$i)) + 20 | 0);
                    HEAP32[$215 >> 2] = $211;
                    $216 = ((($211)) + 24 | 0);
                    HEAP32[$216 >> 2] = $$3$i;
                    break;
                  }
                }
              }
            } while (0);
            $217 = ($$0193$lcssa$i >>> 0) < (16);
            if ($217) {
              $218 = (($$0193$lcssa$i) + ($6)) | 0;
              $219 = $218 | 3;
              $220 = ((($$0192$lcssa$i)) + 4 | 0);
              HEAP32[$220 >> 2] = $219;
              $221 = (($$0192$lcssa$i) + ($218) | 0);
              $222 = ((($221)) + 4 | 0);
              $223 = HEAP32[$222 >> 2] | 0;
              $224 = $223 | 1;
              HEAP32[$222 >> 2] = $224;
            } else {
              $225 = $6 | 3;
              $226 = ((($$0192$lcssa$i)) + 4 | 0);
              HEAP32[$226 >> 2] = $225;
              $227 = $$0193$lcssa$i | 1;
              $228 = ((($157)) + 4 | 0);
              HEAP32[$228 >> 2] = $227;
              $229 = (($157) + ($$0193$lcssa$i) | 0);
              HEAP32[$229 >> 2] = $$0193$lcssa$i;
              $230 = ($37 | 0) == (0);
              if (!($230)) {
                $231 = HEAP32[(4300) >> 2] | 0;
                $232 = $37 >>> 3;
                $233 = $232 << 1;
                $234 = (4320 + ($233 << 2) | 0);
                $235 = 1 << $232;
                $236 = $8 & $235;
                $237 = ($236 | 0) == (0);
                if ($237) {
                  $238 = $8 | $235;
                  HEAP32[1070] = $238;
                  $$pre$i = ((($234)) + 8 | 0);
                  $$0189$i = $234;
                  $$pre$phi$iZ2D = $$pre$i;
                } else {
                  $239 = ((($234)) + 8 | 0);
                  $240 = HEAP32[$239 >> 2] | 0;
                  $241 = HEAP32[(4296) >> 2] | 0;
                  $242 = ($240 >>> 0) < ($241 >>> 0);
                  if ($242) {
                    _abort();
                    // unreachable;
                  } else {
                    $$0189$i = $240;
                    $$pre$phi$iZ2D = $239;
                  }
                }
                HEAP32[$$pre$phi$iZ2D >> 2] = $231;
                $243 = ((($$0189$i)) + 12 | 0);
                HEAP32[$243 >> 2] = $231;
                $244 = ((($231)) + 8 | 0);
                HEAP32[$244 >> 2] = $$0189$i;
                $245 = ((($231)) + 12 | 0);
                HEAP32[$245 >> 2] = $234;
              }
              HEAP32[(4288) >> 2] = $$0193$lcssa$i;
              HEAP32[(4300) >> 2] = $157;
            }
            $246 = ((($$0192$lcssa$i)) + 8 | 0);
            $$0 = $246;
            STACKTOP = sp;
            return ($$0 | 0);
          }
        } else {
          $$0197 = $6;
        }
      } else {
        $247 = ($0 >>> 0) > (4294967231);
        if ($247) {
          $$0197 = -1;
        } else {
          $248 = (($0) + 11) | 0;
          $249 = $248 & -8;
          $250 = HEAP32[(4284) >> 2] | 0;
          $251 = ($250 | 0) == (0);
          if ($251) {
            $$0197 = $249;
          } else {
            $252 = (0 - ($249)) | 0;
            $253 = $248 >>> 8;
            $254 = ($253 | 0) == (0);
            if ($254) {
              $$0358$i = 0;
            } else {
              $255 = ($249 >>> 0) > (16777215);
              if ($255) {
                $$0358$i = 31;
              } else {
                $256 = (($253) + 1048320) | 0;
                $257 = $256 >>> 16;
                $258 = $257 & 8;
                $259 = $253 << $258;
                $260 = (($259) + 520192) | 0;
                $261 = $260 >>> 16;
                $262 = $261 & 4;
                $263 = $262 | $258;
                $264 = $259 << $262;
                $265 = (($264) + 245760) | 0;
                $266 = $265 >>> 16;
                $267 = $266 & 2;
                $268 = $263 | $267;
                $269 = (14 - ($268)) | 0;
                $270 = $264 << $267;
                $271 = $270 >>> 15;
                $272 = (($269) + ($271)) | 0;
                $273 = $272 << 1;
                $274 = (($272) + 7) | 0;
                $275 = $249 >>> $274;
                $276 = $275 & 1;
                $277 = $276 | $273;
                $$0358$i = $277;
              }
            }
            $278 = (4584 + ($$0358$i << 2) | 0);
            $279 = HEAP32[$278 >> 2] | 0;
            $280 = ($279 | 0) == (0 | 0);
            L117: do {
              if ($280) {
                $$2355$i = 0;
                $$3$i201 = 0;
                $$3350$i = $252;
                label = 81;
              } else {
                $281 = ($$0358$i | 0) == (31);
                $282 = $$0358$i >>> 1;
                $283 = (25 - ($282)) | 0;
                $284 = $281 ? 0 : $283;
                $285 = $249 << $284;
                $$0342$i = 0;
                $$0347$i = $252;
                $$0353$i = $279;
                $$0359$i = $285;
                $$0362$i = 0;
                while (1) {
                  $286 = ((($$0353$i)) + 4 | 0);
                  $287 = HEAP32[$286 >> 2] | 0;
                  $288 = $287 & -8;
                  $289 = (($288) - ($249)) | 0;
                  $290 = ($289 >>> 0) < ($$0347$i >>> 0);
                  if ($290) {
                    $291 = ($289 | 0) == (0);
                    if ($291) {
                      $$415$i = $$0353$i;
                      $$435114$i = 0;
                      $$435713$i = $$0353$i;
                      label = 85;
                      break L117;
                    } else {
                      $$1343$i = $$0353$i;
                      $$1348$i = $289;
                    }
                  } else {
                    $$1343$i = $$0342$i;
                    $$1348$i = $$0347$i;
                  }
                  $292 = ((($$0353$i)) + 20 | 0);
                  $293 = HEAP32[$292 >> 2] | 0;
                  $294 = $$0359$i >>> 31;
                  $295 = (((($$0353$i)) + 16 | 0) + ($294 << 2) | 0);
                  $296 = HEAP32[$295 >> 2] | 0;
                  $297 = ($293 | 0) == (0 | 0);
                  $298 = ($293 | 0) == ($296 | 0);
                  $or$cond2$i = $297 | $298;
                  $$1363$i = $or$cond2$i ? $$0362$i : $293;
                  $299 = ($296 | 0) == (0 | 0);
                  $not$8$i = $299 ^ 1;
                  $300 = $not$8$i & 1;
                  $$0359$$i = $$0359$i << $300;
                  if ($299) {
                    $$2355$i = $$1363$i;
                    $$3$i201 = $$1343$i;
                    $$3350$i = $$1348$i;
                    label = 81;
                    break;
                  } else {
                    $$0342$i = $$1343$i;
                    $$0347$i = $$1348$i;
                    $$0353$i = $296;
                    $$0359$i = $$0359$$i;
                    $$0362$i = $$1363$i;
                  }
                }
              }
            } while (0);
            if ((label | 0) == 81) {
              $301 = ($$2355$i | 0) == (0 | 0);
              $302 = ($$3$i201 | 0) == (0 | 0);
              $or$cond$i = $301 & $302;
              if ($or$cond$i) {
                $303 = 2 << $$0358$i;
                $304 = (0 - ($303)) | 0;
                $305 = $303 | $304;
                $306 = $250 & $305;
                $307 = ($306 | 0) == (0);
                if ($307) {
                  $$0197 = $249;
                  break;
                }
                $308 = (0 - ($306)) | 0;
                $309 = $306 & $308;
                $310 = (($309) + -1) | 0;
                $311 = $310 >>> 12;
                $312 = $311 & 16;
                $313 = $310 >>> $312;
                $314 = $313 >>> 5;
                $315 = $314 & 8;
                $316 = $315 | $312;
                $317 = $313 >>> $315;
                $318 = $317 >>> 2;
                $319 = $318 & 4;
                $320 = $316 | $319;
                $321 = $317 >>> $319;
                $322 = $321 >>> 1;
                $323 = $322 & 2;
                $324 = $320 | $323;
                $325 = $321 >>> $323;
                $326 = $325 >>> 1;
                $327 = $326 & 1;
                $328 = $324 | $327;
                $329 = $325 >>> $327;
                $330 = (($328) + ($329)) | 0;
                $331 = (4584 + ($330 << 2) | 0);
                $332 = HEAP32[$331 >> 2] | 0;
                $$4$ph$i = 0;
                $$4357$ph$i = $332;
              } else {
                $$4$ph$i = $$3$i201;
                $$4357$ph$i = $$2355$i;
              }
              $333 = ($$4357$ph$i | 0) == (0 | 0);
              if ($333) {
                $$4$lcssa$i = $$4$ph$i;
                $$4351$lcssa$i = $$3350$i;
              } else {
                $$415$i = $$4$ph$i;
                $$435114$i = $$3350$i;
                $$435713$i = $$4357$ph$i;
                label = 85;
              }
            }
            if ((label | 0) == 85) {
              while (1) {
                label = 0;
                $334 = ((($$435713$i)) + 4 | 0);
                $335 = HEAP32[$334 >> 2] | 0;
                $336 = $335 & -8;
                $337 = (($336) - ($249)) | 0;
                $338 = ($337 >>> 0) < ($$435114$i >>> 0);
                $$$4351$i = $338 ? $337 : $$435114$i;
                $$4357$$4$i = $338 ? $$435713$i : $$415$i;
                $339 = ((($$435713$i)) + 16 | 0);
                $340 = HEAP32[$339 >> 2] | 0;
                $not$1$i203 = ($340 | 0) == (0 | 0);
                $$sink2$i204 = $not$1$i203 & 1;
                $341 = (((($$435713$i)) + 16 | 0) + ($$sink2$i204 << 2) | 0);
                $342 = HEAP32[$341 >> 2] | 0;
                $343 = ($342 | 0) == (0 | 0);
                if ($343) {
                  $$4$lcssa$i = $$4357$$4$i;
                  $$4351$lcssa$i = $$$4351$i;
                  break;
                } else {
                  $$415$i = $$4357$$4$i;
                  $$435114$i = $$$4351$i;
                  $$435713$i = $342;
                  label = 85;
                }
              }
            }
            $344 = ($$4$lcssa$i | 0) == (0 | 0);
            if ($344) {
              $$0197 = $249;
            } else {
              $345 = HEAP32[(4288) >> 2] | 0;
              $346 = (($345) - ($249)) | 0;
              $347 = ($$4351$lcssa$i >>> 0) < ($346 >>> 0);
              if ($347) {
                $348 = HEAP32[(4296) >> 2] | 0;
                $349 = ($$4$lcssa$i >>> 0) < ($348 >>> 0);
                if ($349) {
                  _abort();
                  // unreachable;
                }
                $350 = (($$4$lcssa$i) + ($249) | 0);
                $351 = ($$4$lcssa$i >>> 0) < ($350 >>> 0);
                if (!($351)) {
                  _abort();
                  // unreachable;
                }
                $352 = ((($$4$lcssa$i)) + 24 | 0);
                $353 = HEAP32[$352 >> 2] | 0;
                $354 = ((($$4$lcssa$i)) + 12 | 0);
                $355 = HEAP32[$354 >> 2] | 0;
                $356 = ($355 | 0) == ($$4$lcssa$i | 0);
                do {
                  if ($356) {
                    $366 = ((($$4$lcssa$i)) + 20 | 0);
                    $367 = HEAP32[$366 >> 2] | 0;
                    $368 = ($367 | 0) == (0 | 0);
                    if ($368) {
                      $369 = ((($$4$lcssa$i)) + 16 | 0);
                      $370 = HEAP32[$369 >> 2] | 0;
                      $371 = ($370 | 0) == (0 | 0);
                      if ($371) {
                        $$3372$i = 0;
                        break;
                      } else {
                        $$1370$i = $370;
                        $$1374$i = $369;
                      }
                    } else {
                      $$1370$i = $367;
                      $$1374$i = $366;
                    }
                    while (1) {
                      $372 = ((($$1370$i)) + 20 | 0);
                      $373 = HEAP32[$372 >> 2] | 0;
                      $374 = ($373 | 0) == (0 | 0);
                      if (!($374)) {
                        $$1370$i = $373;
                        $$1374$i = $372;
                        continue;
                      }
                      $375 = ((($$1370$i)) + 16 | 0);
                      $376 = HEAP32[$375 >> 2] | 0;
                      $377 = ($376 | 0) == (0 | 0);
                      if ($377) {
                        break;
                      } else {
                        $$1370$i = $376;
                        $$1374$i = $375;
                      }
                    }
                    $378 = ($$1374$i >>> 0) < ($348 >>> 0);
                    if ($378) {
                      _abort();
                      // unreachable;
                    } else {
                      HEAP32[$$1374$i >> 2] = 0;
                      $$3372$i = $$1370$i;
                      break;
                    }
                  } else {
                    $357 = ((($$4$lcssa$i)) + 8 | 0);
                    $358 = HEAP32[$357 >> 2] | 0;
                    $359 = ($358 >>> 0) < ($348 >>> 0);
                    if ($359) {
                      _abort();
                      // unreachable;
                    }
                    $360 = ((($358)) + 12 | 0);
                    $361 = HEAP32[$360 >> 2] | 0;
                    $362 = ($361 | 0) == ($$4$lcssa$i | 0);
                    if (!($362)) {
                      _abort();
                      // unreachable;
                    }
                    $363 = ((($355)) + 8 | 0);
                    $364 = HEAP32[$363 >> 2] | 0;
                    $365 = ($364 | 0) == ($$4$lcssa$i | 0);
                    if ($365) {
                      HEAP32[$360 >> 2] = $355;
                      HEAP32[$363 >> 2] = $358;
                      $$3372$i = $355;
                      break;
                    } else {
                      _abort();
                      // unreachable;
                    }
                  }
                } while (0);
                $379 = ($353 | 0) == (0 | 0);
                L164: do {
                  if ($379) {
                    $470 = $250;
                  } else {
                    $380 = ((($$4$lcssa$i)) + 28 | 0);
                    $381 = HEAP32[$380 >> 2] | 0;
                    $382 = (4584 + ($381 << 2) | 0);
                    $383 = HEAP32[$382 >> 2] | 0;
                    $384 = ($$4$lcssa$i | 0) == ($383 | 0);
                    do {
                      if ($384) {
                        HEAP32[$382 >> 2] = $$3372$i;
                        $cond$i208 = ($$3372$i | 0) == (0 | 0);
                        if ($cond$i208) {
                          $385 = 1 << $381;
                          $386 = $385 ^ -1;
                          $387 = $250 & $386;
                          HEAP32[(4284) >> 2] = $387;
                          $470 = $387;
                          break L164;
                        }
                      } else {
                        $388 = HEAP32[(4296) >> 2] | 0;
                        $389 = ($353 >>> 0) < ($388 >>> 0);
                        if ($389) {
                          _abort();
                          // unreachable;
                        } else {
                          $390 = ((($353)) + 16 | 0);
                          $391 = HEAP32[$390 >> 2] | 0;
                          $not$$i209 = ($391 | 0) != ($$4$lcssa$i | 0);
                          $$sink3$i = $not$$i209 & 1;
                          $392 = (((($353)) + 16 | 0) + ($$sink3$i << 2) | 0);
                          HEAP32[$392 >> 2] = $$3372$i;
                          $393 = ($$3372$i | 0) == (0 | 0);
                          if ($393) {
                            $470 = $250;
                            break L164;
                          } else {
                            break;
                          }
                        }
                      }
                    } while (0);
                    $394 = HEAP32[(4296) >> 2] | 0;
                    $395 = ($$3372$i >>> 0) < ($394 >>> 0);
                    if ($395) {
                      _abort();
                      // unreachable;
                    }
                    $396 = ((($$3372$i)) + 24 | 0);
                    HEAP32[$396 >> 2] = $353;
                    $397 = ((($$4$lcssa$i)) + 16 | 0);
                    $398 = HEAP32[$397 >> 2] | 0;
                    $399 = ($398 | 0) == (0 | 0);
                    do {
                      if (!($399)) {
                        $400 = ($398 >>> 0) < ($394 >>> 0);
                        if ($400) {
                          _abort();
                          // unreachable;
                        } else {
                          $401 = ((($$3372$i)) + 16 | 0);
                          HEAP32[$401 >> 2] = $398;
                          $402 = ((($398)) + 24 | 0);
                          HEAP32[$402 >> 2] = $$3372$i;
                          break;
                        }
                      }
                    } while (0);
                    $403 = ((($$4$lcssa$i)) + 20 | 0);
                    $404 = HEAP32[$403 >> 2] | 0;
                    $405 = ($404 | 0) == (0 | 0);
                    if ($405) {
                      $470 = $250;
                    } else {
                      $406 = HEAP32[(4296) >> 2] | 0;
                      $407 = ($404 >>> 0) < ($406 >>> 0);
                      if ($407) {
                        _abort();
                        // unreachable;
                      } else {
                        $408 = ((($$3372$i)) + 20 | 0);
                        HEAP32[$408 >> 2] = $404;
                        $409 = ((($404)) + 24 | 0);
                        HEAP32[$409 >> 2] = $$3372$i;
                        $470 = $250;
                        break;
                      }
                    }
                  }
                } while (0);
                $410 = ($$4351$lcssa$i >>> 0) < (16);
                do {
                  if ($410) {
                    $411 = (($$4351$lcssa$i) + ($249)) | 0;
                    $412 = $411 | 3;
                    $413 = ((($$4$lcssa$i)) + 4 | 0);
                    HEAP32[$413 >> 2] = $412;
                    $414 = (($$4$lcssa$i) + ($411) | 0);
                    $415 = ((($414)) + 4 | 0);
                    $416 = HEAP32[$415 >> 2] | 0;
                    $417 = $416 | 1;
                    HEAP32[$415 >> 2] = $417;
                  } else {
                    $418 = $249 | 3;
                    $419 = ((($$4$lcssa$i)) + 4 | 0);
                    HEAP32[$419 >> 2] = $418;
                    $420 = $$4351$lcssa$i | 1;
                    $421 = ((($350)) + 4 | 0);
                    HEAP32[$421 >> 2] = $420;
                    $422 = (($350) + ($$4351$lcssa$i) | 0);
                    HEAP32[$422 >> 2] = $$4351$lcssa$i;
                    $423 = $$4351$lcssa$i >>> 3;
                    $424 = ($$4351$lcssa$i >>> 0) < (256);
                    if ($424) {
                      $425 = $423 << 1;
                      $426 = (4320 + ($425 << 2) | 0);
                      $427 = HEAP32[1070] | 0;
                      $428 = 1 << $423;
                      $429 = $427 & $428;
                      $430 = ($429 | 0) == (0);
                      if ($430) {
                        $431 = $427 | $428;
                        HEAP32[1070] = $431;
                        $$pre$i210 = ((($426)) + 8 | 0);
                        $$0368$i = $426;
                        $$pre$phi$i211Z2D = $$pre$i210;
                      } else {
                        $432 = ((($426)) + 8 | 0);
                        $433 = HEAP32[$432 >> 2] | 0;
                        $434 = HEAP32[(4296) >> 2] | 0;
                        $435 = ($433 >>> 0) < ($434 >>> 0);
                        if ($435) {
                          _abort();
                          // unreachable;
                        } else {
                          $$0368$i = $433;
                          $$pre$phi$i211Z2D = $432;
                        }
                      }
                      HEAP32[$$pre$phi$i211Z2D >> 2] = $350;
                      $436 = ((($$0368$i)) + 12 | 0);
                      HEAP32[$436 >> 2] = $350;
                      $437 = ((($350)) + 8 | 0);
                      HEAP32[$437 >> 2] = $$0368$i;
                      $438 = ((($350)) + 12 | 0);
                      HEAP32[$438 >> 2] = $426;
                      break;
                    }
                    $439 = $$4351$lcssa$i >>> 8;
                    $440 = ($439 | 0) == (0);
                    if ($440) {
                      $$0361$i = 0;
                    } else {
                      $441 = ($$4351$lcssa$i >>> 0) > (16777215);
                      if ($441) {
                        $$0361$i = 31;
                      } else {
                        $442 = (($439) + 1048320) | 0;
                        $443 = $442 >>> 16;
                        $444 = $443 & 8;
                        $445 = $439 << $444;
                        $446 = (($445) + 520192) | 0;
                        $447 = $446 >>> 16;
                        $448 = $447 & 4;
                        $449 = $448 | $444;
                        $450 = $445 << $448;
                        $451 = (($450) + 245760) | 0;
                        $452 = $451 >>> 16;
                        $453 = $452 & 2;
                        $454 = $449 | $453;
                        $455 = (14 - ($454)) | 0;
                        $456 = $450 << $453;
                        $457 = $456 >>> 15;
                        $458 = (($455) + ($457)) | 0;
                        $459 = $458 << 1;
                        $460 = (($458) + 7) | 0;
                        $461 = $$4351$lcssa$i >>> $460;
                        $462 = $461 & 1;
                        $463 = $462 | $459;
                        $$0361$i = $463;
                      }
                    }
                    $464 = (4584 + ($$0361$i << 2) | 0);
                    $465 = ((($350)) + 28 | 0);
                    HEAP32[$465 >> 2] = $$0361$i;
                    $466 = ((($350)) + 16 | 0);
                    $467 = ((($466)) + 4 | 0);
                    HEAP32[$467 >> 2] = 0;
                    HEAP32[$466 >> 2] = 0;
                    $468 = 1 << $$0361$i;
                    $469 = $470 & $468;
                    $471 = ($469 | 0) == (0);
                    if ($471) {
                      $472 = $470 | $468;
                      HEAP32[(4284) >> 2] = $472;
                      HEAP32[$464 >> 2] = $350;
                      $473 = ((($350)) + 24 | 0);
                      HEAP32[$473 >> 2] = $464;
                      $474 = ((($350)) + 12 | 0);
                      HEAP32[$474 >> 2] = $350;
                      $475 = ((($350)) + 8 | 0);
                      HEAP32[$475 >> 2] = $350;
                      break;
                    }
                    $476 = HEAP32[$464 >> 2] | 0;
                    $477 = ($$0361$i | 0) == (31);
                    $478 = $$0361$i >>> 1;
                    $479 = (25 - ($478)) | 0;
                    $480 = $477 ? 0 : $479;
                    $481 = $$4351$lcssa$i << $480;
                    $$0344$i = $481;
                    $$0345$i = $476;
                    while (1) {
                      $482 = ((($$0345$i)) + 4 | 0);
                      $483 = HEAP32[$482 >> 2] | 0;
                      $484 = $483 & -8;
                      $485 = ($484 | 0) == ($$4351$lcssa$i | 0);
                      if ($485) {
                        label = 139;
                        break;
                      }
                      $486 = $$0344$i >>> 31;
                      $487 = (((($$0345$i)) + 16 | 0) + ($486 << 2) | 0);
                      $488 = $$0344$i << 1;
                      $489 = HEAP32[$487 >> 2] | 0;
                      $490 = ($489 | 0) == (0 | 0);
                      if ($490) {
                        label = 136;
                        break;
                      } else {
                        $$0344$i = $488;
                        $$0345$i = $489;
                      }
                    }
                    if ((label | 0) == 136) {
                      $491 = HEAP32[(4296) >> 2] | 0;
                      $492 = ($487 >>> 0) < ($491 >>> 0);
                      if ($492) {
                        _abort();
                        // unreachable;
                      } else {
                        HEAP32[$487 >> 2] = $350;
                        $493 = ((($350)) + 24 | 0);
                        HEAP32[$493 >> 2] = $$0345$i;
                        $494 = ((($350)) + 12 | 0);
                        HEAP32[$494 >> 2] = $350;
                        $495 = ((($350)) + 8 | 0);
                        HEAP32[$495 >> 2] = $350;
                        break;
                      }
                    }
                    else if ((label | 0) == 139) {
                      $496 = ((($$0345$i)) + 8 | 0);
                      $497 = HEAP32[$496 >> 2] | 0;
                      $498 = HEAP32[(4296) >> 2] | 0;
                      $499 = ($497 >>> 0) >= ($498 >>> 0);
                      $not$9$i = ($$0345$i >>> 0) >= ($498 >>> 0);
                      $500 = $499 & $not$9$i;
                      if ($500) {
                        $501 = ((($497)) + 12 | 0);
                        HEAP32[$501 >> 2] = $350;
                        HEAP32[$496 >> 2] = $350;
                        $502 = ((($350)) + 8 | 0);
                        HEAP32[$502 >> 2] = $497;
                        $503 = ((($350)) + 12 | 0);
                        HEAP32[$503 >> 2] = $$0345$i;
                        $504 = ((($350)) + 24 | 0);
                        HEAP32[$504 >> 2] = 0;
                        break;
                      } else {
                        _abort();
                        // unreachable;
                      }
                    }
                  }
                } while (0);
                $505 = ((($$4$lcssa$i)) + 8 | 0);
                $$0 = $505;
                STACKTOP = sp;
                return ($$0 | 0);
              } else {
                $$0197 = $249;
              }
            }
          }
        }
      }
    } while (0);
    $506 = HEAP32[(4288) >> 2] | 0;
    $507 = ($506 >>> 0) < ($$0197 >>> 0);
    if (!($507)) {
      $508 = (($506) - ($$0197)) | 0;
      $509 = HEAP32[(4300) >> 2] | 0;
      $510 = ($508 >>> 0) > (15);
      if ($510) {
        $511 = (($509) + ($$0197) | 0);
        HEAP32[(4300) >> 2] = $511;
        HEAP32[(4288) >> 2] = $508;
        $512 = $508 | 1;
        $513 = ((($511)) + 4 | 0);
        HEAP32[$513 >> 2] = $512;
        $514 = (($511) + ($508) | 0);
        HEAP32[$514 >> 2] = $508;
        $515 = $$0197 | 3;
        $516 = ((($509)) + 4 | 0);
        HEAP32[$516 >> 2] = $515;
      } else {
        HEAP32[(4288) >> 2] = 0;
        HEAP32[(4300) >> 2] = 0;
        $517 = $506 | 3;
        $518 = ((($509)) + 4 | 0);
        HEAP32[$518 >> 2] = $517;
        $519 = (($509) + ($506) | 0);
        $520 = ((($519)) + 4 | 0);
        $521 = HEAP32[$520 >> 2] | 0;
        $522 = $521 | 1;
        HEAP32[$520 >> 2] = $522;
      }
      $523 = ((($509)) + 8 | 0);
      $$0 = $523;
      STACKTOP = sp;
      return ($$0 | 0);
    }
    $524 = HEAP32[(4292) >> 2] | 0;
    $525 = ($524 >>> 0) > ($$0197 >>> 0);
    if ($525) {
      $526 = (($524) - ($$0197)) | 0;
      HEAP32[(4292) >> 2] = $526;
      $527 = HEAP32[(4304) >> 2] | 0;
      $528 = (($527) + ($$0197) | 0);
      HEAP32[(4304) >> 2] = $528;
      $529 = $526 | 1;
      $530 = ((($528)) + 4 | 0);
      HEAP32[$530 >> 2] = $529;
      $531 = $$0197 | 3;
      $532 = ((($527)) + 4 | 0);
      HEAP32[$532 >> 2] = $531;
      $533 = ((($527)) + 8 | 0);
      $$0 = $533;
      STACKTOP = sp;
      return ($$0 | 0);
    }
    $534 = HEAP32[1188] | 0;
    $535 = ($534 | 0) == (0);
    if ($535) {
      HEAP32[(4760) >> 2] = 4096;
      HEAP32[(4756) >> 2] = 4096;
      HEAP32[(4764) >> 2] = -1;
      HEAP32[(4768) >> 2] = -1;
      HEAP32[(4772) >> 2] = 0;
      HEAP32[(4724) >> 2] = 0;
      $536 = $1;
      $537 = $536 & -16;
      $538 = $537 ^ 1431655768;
      HEAP32[$1 >> 2] = $538;
      HEAP32[1188] = $538;
      $542 = 4096;
    } else {
      $$pre$i212 = HEAP32[(4760) >> 2] | 0;
      $542 = $$pre$i212;
    }
    $539 = (($$0197) + 48) | 0;
    $540 = (($$0197) + 47) | 0;
    $541 = (($542) + ($540)) | 0;
    $543 = (0 - ($542)) | 0;
    $544 = $541 & $543;
    $545 = ($544 >>> 0) > ($$0197 >>> 0);
    if (!($545)) {
      $$0 = 0;
      STACKTOP = sp;
      return ($$0 | 0);
    }
    $546 = HEAP32[(4720) >> 2] | 0;
    $547 = ($546 | 0) == (0);
    if (!($547)) {
      $548 = HEAP32[(4712) >> 2] | 0;
      $549 = (($548) + ($544)) | 0;
      $550 = ($549 >>> 0) <= ($548 >>> 0);
      $551 = ($549 >>> 0) > ($546 >>> 0);
      $or$cond1$i = $550 | $551;
      if ($or$cond1$i) {
        $$0 = 0;
        STACKTOP = sp;
        return ($$0 | 0);
      }
    }
    $552 = HEAP32[(4724) >> 2] | 0;
    $553 = $552 & 4;
    $554 = ($553 | 0) == (0);
    L244: do {
      if ($554) {
        $555 = HEAP32[(4304) >> 2] | 0;
        $556 = ($555 | 0) == (0 | 0);
        L246: do {
          if ($556) {
            label = 163;
          } else {
            $$0$i$i = (4728);
            while (1) {
              $557 = HEAP32[$$0$i$i >> 2] | 0;
              $558 = ($557 >>> 0) > ($555 >>> 0);
              if (!($558)) {
                $559 = ((($$0$i$i)) + 4 | 0);
                $560 = HEAP32[$559 >> 2] | 0;
                $561 = (($557) + ($560) | 0);
                $562 = ($561 >>> 0) > ($555 >>> 0);
                if ($562) {
                  break;
                }
              }
              $563 = ((($$0$i$i)) + 8 | 0);
              $564 = HEAP32[$563 >> 2] | 0;
              $565 = ($564 | 0) == (0 | 0);
              if ($565) {
                label = 163;
                break L246;
              } else {
                $$0$i$i = $564;
              }
            }
            $588 = (($541) - ($524)) | 0;
            $589 = $588 & $543;
            $590 = ($589 >>> 0) < (2147483647);
            if ($590) {
              $591 = (_sbrk(($589 | 0)) | 0);
              $592 = HEAP32[$$0$i$i >> 2] | 0;
              $593 = HEAP32[$559 >> 2] | 0;
              $594 = (($592) + ($593) | 0);
              $595 = ($591 | 0) == ($594 | 0);
              if ($595) {
                $596 = ($591 | 0) == ((-1) | 0);
                if ($596) {
                  $$2234253237$i = $589;
                } else {
                  $$723948$i = $589;
                  $$749$i = $591;
                  label = 180;
                  break L244;
                }
              } else {
                $$2247$ph$i = $591;
                $$2253$ph$i = $589;
                label = 171;
              }
            } else {
              $$2234253237$i = 0;
            }
          }
        } while (0);
        do {
          if ((label | 0) == 163) {
            $566 = (_sbrk(0) | 0);
            $567 = ($566 | 0) == ((-1) | 0);
            if ($567) {
              $$2234253237$i = 0;
            } else {
              $568 = $566;
              $569 = HEAP32[(4756) >> 2] | 0;
              $570 = (($569) + -1) | 0;
              $571 = $570 & $568;
              $572 = ($571 | 0) == (0);
              $573 = (($570) + ($568)) | 0;
              $574 = (0 - ($569)) | 0;
              $575 = $573 & $574;
              $576 = (($575) - ($568)) | 0;
              $577 = $572 ? 0 : $576;
              $$$i = (($577) + ($544)) | 0;
              $578 = HEAP32[(4712) >> 2] | 0;
              $579 = (($$$i) + ($578)) | 0;
              $580 = ($$$i >>> 0) > ($$0197 >>> 0);
              $581 = ($$$i >>> 0) < (2147483647);
              $or$cond$i214 = $580 & $581;
              if ($or$cond$i214) {
                $582 = HEAP32[(4720) >> 2] | 0;
                $583 = ($582 | 0) == (0);
                if (!($583)) {
                  $584 = ($579 >>> 0) <= ($578 >>> 0);
                  $585 = ($579 >>> 0) > ($582 >>> 0);
                  $or$cond2$i215 = $584 | $585;
                  if ($or$cond2$i215) {
                    $$2234253237$i = 0;
                    break;
                  }
                }
                $586 = (_sbrk(($$$i | 0)) | 0);
                $587 = ($586 | 0) == ($566 | 0);
                if ($587) {
                  $$723948$i = $$$i;
                  $$749$i = $566;
                  label = 180;
                  break L244;
                } else {
                  $$2247$ph$i = $586;
                  $$2253$ph$i = $$$i;
                  label = 171;
                }
              } else {
                $$2234253237$i = 0;
              }
            }
          }
        } while (0);
        do {
          if ((label | 0) == 171) {
            $597 = (0 - ($$2253$ph$i)) | 0;
            $598 = ($$2247$ph$i | 0) != ((-1) | 0);
            $599 = ($$2253$ph$i >>> 0) < (2147483647);
            $or$cond7$i = $599 & $598;
            $600 = ($539 >>> 0) > ($$2253$ph$i >>> 0);
            $or$cond10$i = $600 & $or$cond7$i;
            if (!($or$cond10$i)) {
              $610 = ($$2247$ph$i | 0) == ((-1) | 0);
              if ($610) {
                $$2234253237$i = 0;
                break;
              } else {
                $$723948$i = $$2253$ph$i;
                $$749$i = $$2247$ph$i;
                label = 180;
                break L244;
              }
            }
            $601 = HEAP32[(4760) >> 2] | 0;
            $602 = (($540) - ($$2253$ph$i)) | 0;
            $603 = (($602) + ($601)) | 0;
            $604 = (0 - ($601)) | 0;
            $605 = $603 & $604;
            $606 = ($605 >>> 0) < (2147483647);
            if (!($606)) {
              $$723948$i = $$2253$ph$i;
              $$749$i = $$2247$ph$i;
              label = 180;
              break L244;
            }
            $607 = (_sbrk(($605 | 0)) | 0);
            $608 = ($607 | 0) == ((-1) | 0);
            if ($608) {
              (_sbrk(($597 | 0)) | 0);
              $$2234253237$i = 0;
              break;
            } else {
              $609 = (($605) + ($$2253$ph$i)) | 0;
              $$723948$i = $609;
              $$749$i = $$2247$ph$i;
              label = 180;
              break L244;
            }
          }
        } while (0);
        $611 = HEAP32[(4724) >> 2] | 0;
        $612 = $611 | 4;
        HEAP32[(4724) >> 2] = $612;
        $$4236$i = $$2234253237$i;
        label = 178;
      } else {
        $$4236$i = 0;
        label = 178;
      }
    } while (0);
    if ((label | 0) == 178) {
      $613 = ($544 >>> 0) < (2147483647);
      if ($613) {
        $614 = (_sbrk(($544 | 0)) | 0);
        $615 = (_sbrk(0) | 0);
        $616 = ($614 | 0) != ((-1) | 0);
        $617 = ($615 | 0) != ((-1) | 0);
        $or$cond5$i = $616 & $617;
        $618 = ($614 >>> 0) < ($615 >>> 0);
        $or$cond11$i = $618 & $or$cond5$i;
        $619 = $615;
        $620 = $614;
        $621 = (($619) - ($620)) | 0;
        $622 = (($$0197) + 40) | 0;
        $623 = ($621 >>> 0) > ($622 >>> 0);
        $$$4236$i = $623 ? $621 : $$4236$i;
        $or$cond11$not$i = $or$cond11$i ^ 1;
        $624 = ($614 | 0) == ((-1) | 0);
        $not$$i216 = $623 ^ 1;
        $625 = $624 | $not$$i216;
        $or$cond50$i = $625 | $or$cond11$not$i;
        if (!($or$cond50$i)) {
          $$723948$i = $$$4236$i;
          $$749$i = $614;
          label = 180;
        }
      }
    }
    if ((label | 0) == 180) {
      $626 = HEAP32[(4712) >> 2] | 0;
      $627 = (($626) + ($$723948$i)) | 0;
      HEAP32[(4712) >> 2] = $627;
      $628 = HEAP32[(4716) >> 2] | 0;
      $629 = ($627 >>> 0) > ($628 >>> 0);
      if ($629) {
        HEAP32[(4716) >> 2] = $627;
      }
      $630 = HEAP32[(4304) >> 2] | 0;
      $631 = ($630 | 0) == (0 | 0);
      do {
        if ($631) {
          $632 = HEAP32[(4296) >> 2] | 0;
          $633 = ($632 | 0) == (0 | 0);
          $634 = ($$749$i >>> 0) < ($632 >>> 0);
          $or$cond12$i = $633 | $634;
          if ($or$cond12$i) {
            HEAP32[(4296) >> 2] = $$749$i;
          }
          HEAP32[(4728) >> 2] = $$749$i;
          HEAP32[(4732) >> 2] = $$723948$i;
          HEAP32[(4740) >> 2] = 0;
          $635 = HEAP32[1188] | 0;
          HEAP32[(4316) >> 2] = $635;
          HEAP32[(4312) >> 2] = -1;
          $$01$i$i = 0;
          while (1) {
            $636 = $$01$i$i << 1;
            $637 = (4320 + ($636 << 2) | 0);
            $638 = ((($637)) + 12 | 0);
            HEAP32[$638 >> 2] = $637;
            $639 = ((($637)) + 8 | 0);
            HEAP32[$639 >> 2] = $637;
            $640 = (($$01$i$i) + 1) | 0;
            $exitcond$i$i = ($640 | 0) == (32);
            if ($exitcond$i$i) {
              break;
            } else {
              $$01$i$i = $640;
            }
          }
          $641 = (($$723948$i) + -40) | 0;
          $642 = ((($$749$i)) + 8 | 0);
          $643 = $642;
          $644 = $643 & 7;
          $645 = ($644 | 0) == (0);
          $646 = (0 - ($643)) | 0;
          $647 = $646 & 7;
          $648 = $645 ? 0 : $647;
          $649 = (($$749$i) + ($648) | 0);
          $650 = (($641) - ($648)) | 0;
          HEAP32[(4304) >> 2] = $649;
          HEAP32[(4292) >> 2] = $650;
          $651 = $650 | 1;
          $652 = ((($649)) + 4 | 0);
          HEAP32[$652 >> 2] = $651;
          $653 = (($649) + ($650) | 0);
          $654 = ((($653)) + 4 | 0);
          HEAP32[$654 >> 2] = 40;
          $655 = HEAP32[(4768) >> 2] | 0;
          HEAP32[(4308) >> 2] = $655;
        } else {
          $$024371$i = (4728);
          while (1) {
            $656 = HEAP32[$$024371$i >> 2] | 0;
            $657 = ((($$024371$i)) + 4 | 0);
            $658 = HEAP32[$657 >> 2] | 0;
            $659 = (($656) + ($658) | 0);
            $660 = ($$749$i | 0) == ($659 | 0);
            if ($660) {
              label = 190;
              break;
            }
            $661 = ((($$024371$i)) + 8 | 0);
            $662 = HEAP32[$661 >> 2] | 0;
            $663 = ($662 | 0) == (0 | 0);
            if ($663) {
              break;
            } else {
              $$024371$i = $662;
            }
          }
          if ((label | 0) == 190) {
            $664 = ((($$024371$i)) + 12 | 0);
            $665 = HEAP32[$664 >> 2] | 0;
            $666 = $665 & 8;
            $667 = ($666 | 0) == (0);
            if ($667) {
              $668 = ($630 >>> 0) >= ($656 >>> 0);
              $669 = ($630 >>> 0) < ($$749$i >>> 0);
              $or$cond51$i = $669 & $668;
              if ($or$cond51$i) {
                $670 = (($658) + ($$723948$i)) | 0;
                HEAP32[$657 >> 2] = $670;
                $671 = HEAP32[(4292) >> 2] | 0;
                $672 = ((($630)) + 8 | 0);
                $673 = $672;
                $674 = $673 & 7;
                $675 = ($674 | 0) == (0);
                $676 = (0 - ($673)) | 0;
                $677 = $676 & 7;
                $678 = $675 ? 0 : $677;
                $679 = (($630) + ($678) | 0);
                $680 = (($$723948$i) - ($678)) | 0;
                $681 = (($671) + ($680)) | 0;
                HEAP32[(4304) >> 2] = $679;
                HEAP32[(4292) >> 2] = $681;
                $682 = $681 | 1;
                $683 = ((($679)) + 4 | 0);
                HEAP32[$683 >> 2] = $682;
                $684 = (($679) + ($681) | 0);
                $685 = ((($684)) + 4 | 0);
                HEAP32[$685 >> 2] = 40;
                $686 = HEAP32[(4768) >> 2] | 0;
                HEAP32[(4308) >> 2] = $686;
                break;
              }
            }
          }
          $687 = HEAP32[(4296) >> 2] | 0;
          $688 = ($$749$i >>> 0) < ($687 >>> 0);
          if ($688) {
            HEAP32[(4296) >> 2] = $$749$i;
            $752 = $$749$i;
          } else {
            $752 = $687;
          }
          $689 = (($$749$i) + ($$723948$i) | 0);
          $$124470$i = (4728);
          while (1) {
            $690 = HEAP32[$$124470$i >> 2] | 0;
            $691 = ($690 | 0) == ($689 | 0);
            if ($691) {
              label = 198;
              break;
            }
            $692 = ((($$124470$i)) + 8 | 0);
            $693 = HEAP32[$692 >> 2] | 0;
            $694 = ($693 | 0) == (0 | 0);
            if ($694) {
              break;
            } else {
              $$124470$i = $693;
            }
          }
          if ((label | 0) == 198) {
            $695 = ((($$124470$i)) + 12 | 0);
            $696 = HEAP32[$695 >> 2] | 0;
            $697 = $696 & 8;
            $698 = ($697 | 0) == (0);
            if ($698) {
              HEAP32[$$124470$i >> 2] = $$749$i;
              $699 = ((($$124470$i)) + 4 | 0);
              $700 = HEAP32[$699 >> 2] | 0;
              $701 = (($700) + ($$723948$i)) | 0;
              HEAP32[$699 >> 2] = $701;
              $702 = ((($$749$i)) + 8 | 0);
              $703 = $702;
              $704 = $703 & 7;
              $705 = ($704 | 0) == (0);
              $706 = (0 - ($703)) | 0;
              $707 = $706 & 7;
              $708 = $705 ? 0 : $707;
              $709 = (($$749$i) + ($708) | 0);
              $710 = ((($689)) + 8 | 0);
              $711 = $710;
              $712 = $711 & 7;
              $713 = ($712 | 0) == (0);
              $714 = (0 - ($711)) | 0;
              $715 = $714 & 7;
              $716 = $713 ? 0 : $715;
              $717 = (($689) + ($716) | 0);
              $718 = $717;
              $719 = $709;
              $720 = (($718) - ($719)) | 0;
              $721 = (($709) + ($$0197) | 0);
              $722 = (($720) - ($$0197)) | 0;
              $723 = $$0197 | 3;
              $724 = ((($709)) + 4 | 0);
              HEAP32[$724 >> 2] = $723;
              $725 = ($717 | 0) == ($630 | 0);
              do {
                if ($725) {
                  $726 = HEAP32[(4292) >> 2] | 0;
                  $727 = (($726) + ($722)) | 0;
                  HEAP32[(4292) >> 2] = $727;
                  HEAP32[(4304) >> 2] = $721;
                  $728 = $727 | 1;
                  $729 = ((($721)) + 4 | 0);
                  HEAP32[$729 >> 2] = $728;
                } else {
                  $730 = HEAP32[(4300) >> 2] | 0;
                  $731 = ($717 | 0) == ($730 | 0);
                  if ($731) {
                    $732 = HEAP32[(4288) >> 2] | 0;
                    $733 = (($732) + ($722)) | 0;
                    HEAP32[(4288) >> 2] = $733;
                    HEAP32[(4300) >> 2] = $721;
                    $734 = $733 | 1;
                    $735 = ((($721)) + 4 | 0);
                    HEAP32[$735 >> 2] = $734;
                    $736 = (($721) + ($733) | 0);
                    HEAP32[$736 >> 2] = $733;
                    break;
                  }
                  $737 = ((($717)) + 4 | 0);
                  $738 = HEAP32[$737 >> 2] | 0;
                  $739 = $738 & 3;
                  $740 = ($739 | 0) == (1);
                  if ($740) {
                    $741 = $738 & -8;
                    $742 = $738 >>> 3;
                    $743 = ($738 >>> 0) < (256);
                    L314: do {
                      if ($743) {
                        $744 = ((($717)) + 8 | 0);
                        $745 = HEAP32[$744 >> 2] | 0;
                        $746 = ((($717)) + 12 | 0);
                        $747 = HEAP32[$746 >> 2] | 0;
                        $748 = $742 << 1;
                        $749 = (4320 + ($748 << 2) | 0);
                        $750 = ($745 | 0) == ($749 | 0);
                        do {
                          if (!($750)) {
                            $751 = ($745 >>> 0) < ($752 >>> 0);
                            if ($751) {
                              _abort();
                              // unreachable;
                            }
                            $753 = ((($745)) + 12 | 0);
                            $754 = HEAP32[$753 >> 2] | 0;
                            $755 = ($754 | 0) == ($717 | 0);
                            if ($755) {
                              break;
                            }
                            _abort();
                            // unreachable;
                          }
                        } while (0);
                        $756 = ($747 | 0) == ($745 | 0);
                        if ($756) {
                          $757 = 1 << $742;
                          $758 = $757 ^ -1;
                          $759 = HEAP32[1070] | 0;
                          $760 = $759 & $758;
                          HEAP32[1070] = $760;
                          break;
                        }
                        $761 = ($747 | 0) == ($749 | 0);
                        do {
                          if ($761) {
                            $$pre10$i$i = ((($747)) + 8 | 0);
                            $$pre$phi11$i$iZ2D = $$pre10$i$i;
                          } else {
                            $762 = ($747 >>> 0) < ($752 >>> 0);
                            if ($762) {
                              _abort();
                              // unreachable;
                            }
                            $763 = ((($747)) + 8 | 0);
                            $764 = HEAP32[$763 >> 2] | 0;
                            $765 = ($764 | 0) == ($717 | 0);
                            if ($765) {
                              $$pre$phi11$i$iZ2D = $763;
                              break;
                            }
                            _abort();
                            // unreachable;
                          }
                        } while (0);
                        $766 = ((($745)) + 12 | 0);
                        HEAP32[$766 >> 2] = $747;
                        HEAP32[$$pre$phi11$i$iZ2D >> 2] = $745;
                      } else {
                        $767 = ((($717)) + 24 | 0);
                        $768 = HEAP32[$767 >> 2] | 0;
                        $769 = ((($717)) + 12 | 0);
                        $770 = HEAP32[$769 >> 2] | 0;
                        $771 = ($770 | 0) == ($717 | 0);
                        do {
                          if ($771) {
                            $781 = ((($717)) + 16 | 0);
                            $782 = ((($781)) + 4 | 0);
                            $783 = HEAP32[$782 >> 2] | 0;
                            $784 = ($783 | 0) == (0 | 0);
                            if ($784) {
                              $785 = HEAP32[$781 >> 2] | 0;
                              $786 = ($785 | 0) == (0 | 0);
                              if ($786) {
                                $$3$i$i = 0;
                                break;
                              } else {
                                $$1291$i$i = $785;
                                $$1293$i$i = $781;
                              }
                            } else {
                              $$1291$i$i = $783;
                              $$1293$i$i = $782;
                            }
                            while (1) {
                              $787 = ((($$1291$i$i)) + 20 | 0);
                              $788 = HEAP32[$787 >> 2] | 0;
                              $789 = ($788 | 0) == (0 | 0);
                              if (!($789)) {
                                $$1291$i$i = $788;
                                $$1293$i$i = $787;
                                continue;
                              }
                              $790 = ((($$1291$i$i)) + 16 | 0);
                              $791 = HEAP32[$790 >> 2] | 0;
                              $792 = ($791 | 0) == (0 | 0);
                              if ($792) {
                                break;
                              } else {
                                $$1291$i$i = $791;
                                $$1293$i$i = $790;
                              }
                            }
                            $793 = ($$1293$i$i >>> 0) < ($752 >>> 0);
                            if ($793) {
                              _abort();
                              // unreachable;
                            } else {
                              HEAP32[$$1293$i$i >> 2] = 0;
                              $$3$i$i = $$1291$i$i;
                              break;
                            }
                          } else {
                            $772 = ((($717)) + 8 | 0);
                            $773 = HEAP32[$772 >> 2] | 0;
                            $774 = ($773 >>> 0) < ($752 >>> 0);
                            if ($774) {
                              _abort();
                              // unreachable;
                            }
                            $775 = ((($773)) + 12 | 0);
                            $776 = HEAP32[$775 >> 2] | 0;
                            $777 = ($776 | 0) == ($717 | 0);
                            if (!($777)) {
                              _abort();
                              // unreachable;
                            }
                            $778 = ((($770)) + 8 | 0);
                            $779 = HEAP32[$778 >> 2] | 0;
                            $780 = ($779 | 0) == ($717 | 0);
                            if ($780) {
                              HEAP32[$775 >> 2] = $770;
                              HEAP32[$778 >> 2] = $773;
                              $$3$i$i = $770;
                              break;
                            } else {
                              _abort();
                              // unreachable;
                            }
                          }
                        } while (0);
                        $794 = ($768 | 0) == (0 | 0);
                        if ($794) {
                          break;
                        }
                        $795 = ((($717)) + 28 | 0);
                        $796 = HEAP32[$795 >> 2] | 0;
                        $797 = (4584 + ($796 << 2) | 0);
                        $798 = HEAP32[$797 >> 2] | 0;
                        $799 = ($717 | 0) == ($798 | 0);
                        do {
                          if ($799) {
                            HEAP32[$797 >> 2] = $$3$i$i;
                            $cond$i$i = ($$3$i$i | 0) == (0 | 0);
                            if (!($cond$i$i)) {
                              break;
                            }
                            $800 = 1 << $796;
                            $801 = $800 ^ -1;
                            $802 = HEAP32[(4284) >> 2] | 0;
                            $803 = $802 & $801;
                            HEAP32[(4284) >> 2] = $803;
                            break L314;
                          } else {
                            $804 = HEAP32[(4296) >> 2] | 0;
                            $805 = ($768 >>> 0) < ($804 >>> 0);
                            if ($805) {
                              _abort();
                              // unreachable;
                            } else {
                              $806 = ((($768)) + 16 | 0);
                              $807 = HEAP32[$806 >> 2] | 0;
                              $not$$i17$i = ($807 | 0) != ($717 | 0);
                              $$sink1$i$i = $not$$i17$i & 1;
                              $808 = (((($768)) + 16 | 0) + ($$sink1$i$i << 2) | 0);
                              HEAP32[$808 >> 2] = $$3$i$i;
                              $809 = ($$3$i$i | 0) == (0 | 0);
                              if ($809) {
                                break L314;
                              } else {
                                break;
                              }
                            }
                          }
                        } while (0);
                        $810 = HEAP32[(4296) >> 2] | 0;
                        $811 = ($$3$i$i >>> 0) < ($810 >>> 0);
                        if ($811) {
                          _abort();
                          // unreachable;
                        }
                        $812 = ((($$3$i$i)) + 24 | 0);
                        HEAP32[$812 >> 2] = $768;
                        $813 = ((($717)) + 16 | 0);
                        $814 = HEAP32[$813 >> 2] | 0;
                        $815 = ($814 | 0) == (0 | 0);
                        do {
                          if (!($815)) {
                            $816 = ($814 >>> 0) < ($810 >>> 0);
                            if ($816) {
                              _abort();
                              // unreachable;
                            } else {
                              $817 = ((($$3$i$i)) + 16 | 0);
                              HEAP32[$817 >> 2] = $814;
                              $818 = ((($814)) + 24 | 0);
                              HEAP32[$818 >> 2] = $$3$i$i;
                              break;
                            }
                          }
                        } while (0);
                        $819 = ((($813)) + 4 | 0);
                        $820 = HEAP32[$819 >> 2] | 0;
                        $821 = ($820 | 0) == (0 | 0);
                        if ($821) {
                          break;
                        }
                        $822 = HEAP32[(4296) >> 2] | 0;
                        $823 = ($820 >>> 0) < ($822 >>> 0);
                        if ($823) {
                          _abort();
                          // unreachable;
                        } else {
                          $824 = ((($$3$i$i)) + 20 | 0);
                          HEAP32[$824 >> 2] = $820;
                          $825 = ((($820)) + 24 | 0);
                          HEAP32[$825 >> 2] = $$3$i$i;
                          break;
                        }
                      }
                    } while (0);
                    $826 = (($717) + ($741) | 0);
                    $827 = (($741) + ($722)) | 0;
                    $$0$i18$i = $826;
                    $$0287$i$i = $827;
                  } else {
                    $$0$i18$i = $717;
                    $$0287$i$i = $722;
                  }
                  $828 = ((($$0$i18$i)) + 4 | 0);
                  $829 = HEAP32[$828 >> 2] | 0;
                  $830 = $829 & -2;
                  HEAP32[$828 >> 2] = $830;
                  $831 = $$0287$i$i | 1;
                  $832 = ((($721)) + 4 | 0);
                  HEAP32[$832 >> 2] = $831;
                  $833 = (($721) + ($$0287$i$i) | 0);
                  HEAP32[$833 >> 2] = $$0287$i$i;
                  $834 = $$0287$i$i >>> 3;
                  $835 = ($$0287$i$i >>> 0) < (256);
                  if ($835) {
                    $836 = $834 << 1;
                    $837 = (4320 + ($836 << 2) | 0);
                    $838 = HEAP32[1070] | 0;
                    $839 = 1 << $834;
                    $840 = $838 & $839;
                    $841 = ($840 | 0) == (0);
                    do {
                      if ($841) {
                        $842 = $838 | $839;
                        HEAP32[1070] = $842;
                        $$pre$i19$i = ((($837)) + 8 | 0);
                        $$0295$i$i = $837;
                        $$pre$phi$i20$iZ2D = $$pre$i19$i;
                      } else {
                        $843 = ((($837)) + 8 | 0);
                        $844 = HEAP32[$843 >> 2] | 0;
                        $845 = HEAP32[(4296) >> 2] | 0;
                        $846 = ($844 >>> 0) < ($845 >>> 0);
                        if (!($846)) {
                          $$0295$i$i = $844;
                          $$pre$phi$i20$iZ2D = $843;
                          break;
                        }
                        _abort();
                        // unreachable;
                      }
                    } while (0);
                    HEAP32[$$pre$phi$i20$iZ2D >> 2] = $721;
                    $847 = ((($$0295$i$i)) + 12 | 0);
                    HEAP32[$847 >> 2] = $721;
                    $848 = ((($721)) + 8 | 0);
                    HEAP32[$848 >> 2] = $$0295$i$i;
                    $849 = ((($721)) + 12 | 0);
                    HEAP32[$849 >> 2] = $837;
                    break;
                  }
                  $850 = $$0287$i$i >>> 8;
                  $851 = ($850 | 0) == (0);
                  do {
                    if ($851) {
                      $$0296$i$i = 0;
                    } else {
                      $852 = ($$0287$i$i >>> 0) > (16777215);
                      if ($852) {
                        $$0296$i$i = 31;
                        break;
                      }
                      $853 = (($850) + 1048320) | 0;
                      $854 = $853 >>> 16;
                      $855 = $854 & 8;
                      $856 = $850 << $855;
                      $857 = (($856) + 520192) | 0;
                      $858 = $857 >>> 16;
                      $859 = $858 & 4;
                      $860 = $859 | $855;
                      $861 = $856 << $859;
                      $862 = (($861) + 245760) | 0;
                      $863 = $862 >>> 16;
                      $864 = $863 & 2;
                      $865 = $860 | $864;
                      $866 = (14 - ($865)) | 0;
                      $867 = $861 << $864;
                      $868 = $867 >>> 15;
                      $869 = (($866) + ($868)) | 0;
                      $870 = $869 << 1;
                      $871 = (($869) + 7) | 0;
                      $872 = $$0287$i$i >>> $871;
                      $873 = $872 & 1;
                      $874 = $873 | $870;
                      $$0296$i$i = $874;
                    }
                  } while (0);
                  $875 = (4584 + ($$0296$i$i << 2) | 0);
                  $876 = ((($721)) + 28 | 0);
                  HEAP32[$876 >> 2] = $$0296$i$i;
                  $877 = ((($721)) + 16 | 0);
                  $878 = ((($877)) + 4 | 0);
                  HEAP32[$878 >> 2] = 0;
                  HEAP32[$877 >> 2] = 0;
                  $879 = HEAP32[(4284) >> 2] | 0;
                  $880 = 1 << $$0296$i$i;
                  $881 = $879 & $880;
                  $882 = ($881 | 0) == (0);
                  if ($882) {
                    $883 = $879 | $880;
                    HEAP32[(4284) >> 2] = $883;
                    HEAP32[$875 >> 2] = $721;
                    $884 = ((($721)) + 24 | 0);
                    HEAP32[$884 >> 2] = $875;
                    $885 = ((($721)) + 12 | 0);
                    HEAP32[$885 >> 2] = $721;
                    $886 = ((($721)) + 8 | 0);
                    HEAP32[$886 >> 2] = $721;
                    break;
                  }
                  $887 = HEAP32[$875 >> 2] | 0;
                  $888 = ($$0296$i$i | 0) == (31);
                  $889 = $$0296$i$i >>> 1;
                  $890 = (25 - ($889)) | 0;
                  $891 = $888 ? 0 : $890;
                  $892 = $$0287$i$i << $891;
                  $$0288$i$i = $892;
                  $$0289$i$i = $887;
                  while (1) {
                    $893 = ((($$0289$i$i)) + 4 | 0);
                    $894 = HEAP32[$893 >> 2] | 0;
                    $895 = $894 & -8;
                    $896 = ($895 | 0) == ($$0287$i$i | 0);
                    if ($896) {
                      label = 265;
                      break;
                    }
                    $897 = $$0288$i$i >>> 31;
                    $898 = (((($$0289$i$i)) + 16 | 0) + ($897 << 2) | 0);
                    $899 = $$0288$i$i << 1;
                    $900 = HEAP32[$898 >> 2] | 0;
                    $901 = ($900 | 0) == (0 | 0);
                    if ($901) {
                      label = 262;
                      break;
                    } else {
                      $$0288$i$i = $899;
                      $$0289$i$i = $900;
                    }
                  }
                  if ((label | 0) == 262) {
                    $902 = HEAP32[(4296) >> 2] | 0;
                    $903 = ($898 >>> 0) < ($902 >>> 0);
                    if ($903) {
                      _abort();
                      // unreachable;
                    } else {
                      HEAP32[$898 >> 2] = $721;
                      $904 = ((($721)) + 24 | 0);
                      HEAP32[$904 >> 2] = $$0289$i$i;
                      $905 = ((($721)) + 12 | 0);
                      HEAP32[$905 >> 2] = $721;
                      $906 = ((($721)) + 8 | 0);
                      HEAP32[$906 >> 2] = $721;
                      break;
                    }
                  }
                  else if ((label | 0) == 265) {
                    $907 = ((($$0289$i$i)) + 8 | 0);
                    $908 = HEAP32[$907 >> 2] | 0;
                    $909 = HEAP32[(4296) >> 2] | 0;
                    $910 = ($908 >>> 0) >= ($909 >>> 0);
                    $not$7$i$i = ($$0289$i$i >>> 0) >= ($909 >>> 0);
                    $911 = $910 & $not$7$i$i;
                    if ($911) {
                      $912 = ((($908)) + 12 | 0);
                      HEAP32[$912 >> 2] = $721;
                      HEAP32[$907 >> 2] = $721;
                      $913 = ((($721)) + 8 | 0);
                      HEAP32[$913 >> 2] = $908;
                      $914 = ((($721)) + 12 | 0);
                      HEAP32[$914 >> 2] = $$0289$i$i;
                      $915 = ((($721)) + 24 | 0);
                      HEAP32[$915 >> 2] = 0;
                      break;
                    } else {
                      _abort();
                      // unreachable;
                    }
                  }
                }
              } while (0);
              $1047 = ((($709)) + 8 | 0);
              $$0 = $1047;
              STACKTOP = sp;
              return ($$0 | 0);
            }
          }
          $$0$i$i$i = (4728);
          while (1) {
            $916 = HEAP32[$$0$i$i$i >> 2] | 0;
            $917 = ($916 >>> 0) > ($630 >>> 0);
            if (!($917)) {
              $918 = ((($$0$i$i$i)) + 4 | 0);
              $919 = HEAP32[$918 >> 2] | 0;
              $920 = (($916) + ($919) | 0);
              $921 = ($920 >>> 0) > ($630 >>> 0);
              if ($921) {
                break;
              }
            }
            $922 = ((($$0$i$i$i)) + 8 | 0);
            $923 = HEAP32[$922 >> 2] | 0;
            $$0$i$i$i = $923;
          }
          $924 = ((($920)) + -47 | 0);
          $925 = ((($924)) + 8 | 0);
          $926 = $925;
          $927 = $926 & 7;
          $928 = ($927 | 0) == (0);
          $929 = (0 - ($926)) | 0;
          $930 = $929 & 7;
          $931 = $928 ? 0 : $930;
          $932 = (($924) + ($931) | 0);
          $933 = ((($630)) + 16 | 0);
          $934 = ($932 >>> 0) < ($933 >>> 0);
          $935 = $934 ? $630 : $932;
          $936 = ((($935)) + 8 | 0);
          $937 = ((($935)) + 24 | 0);
          $938 = (($$723948$i) + -40) | 0;
          $939 = ((($$749$i)) + 8 | 0);
          $940 = $939;
          $941 = $940 & 7;
          $942 = ($941 | 0) == (0);
          $943 = (0 - ($940)) | 0;
          $944 = $943 & 7;
          $945 = $942 ? 0 : $944;
          $946 = (($$749$i) + ($945) | 0);
          $947 = (($938) - ($945)) | 0;
          HEAP32[(4304) >> 2] = $946;
          HEAP32[(4292) >> 2] = $947;
          $948 = $947 | 1;
          $949 = ((($946)) + 4 | 0);
          HEAP32[$949 >> 2] = $948;
          $950 = (($946) + ($947) | 0);
          $951 = ((($950)) + 4 | 0);
          HEAP32[$951 >> 2] = 40;
          $952 = HEAP32[(4768) >> 2] | 0;
          HEAP32[(4308) >> 2] = $952;
          $953 = ((($935)) + 4 | 0);
          HEAP32[$953 >> 2] = 27;
          ;HEAP32[$936 >> 2] = HEAP32[(4728) >> 2] | 0;
          HEAP32[$936 + 4 >> 2] = HEAP32[(4728) + 4 >> 2] | 0;
          HEAP32[$936 + 8 >> 2] = HEAP32[(4728) + 8 >> 2] | 0;
          HEAP32[$936 + 12 >> 2] = HEAP32[(4728) + 12 >> 2] | 0;
          HEAP32[(4728) >> 2] = $$749$i;
          HEAP32[(4732) >> 2] = $$723948$i;
          HEAP32[(4740) >> 2] = 0;
          HEAP32[(4736) >> 2] = $936;
          $955 = $937;
          while (1) {
            $954 = ((($955)) + 4 | 0);
            HEAP32[$954 >> 2] = 7;
            $956 = ((($955)) + 8 | 0);
            $957 = ($956 >>> 0) < ($920 >>> 0);
            if ($957) {
              $955 = $954;
            } else {
              break;
            }
          }
          $958 = ($935 | 0) == ($630 | 0);
          if (!($958)) {
            $959 = $935;
            $960 = $630;
            $961 = (($959) - ($960)) | 0;
            $962 = HEAP32[$953 >> 2] | 0;
            $963 = $962 & -2;
            HEAP32[$953 >> 2] = $963;
            $964 = $961 | 1;
            $965 = ((($630)) + 4 | 0);
            HEAP32[$965 >> 2] = $964;
            HEAP32[$935 >> 2] = $961;
            $966 = $961 >>> 3;
            $967 = ($961 >>> 0) < (256);
            if ($967) {
              $968 = $966 << 1;
              $969 = (4320 + ($968 << 2) | 0);
              $970 = HEAP32[1070] | 0;
              $971 = 1 << $966;
              $972 = $970 & $971;
              $973 = ($972 | 0) == (0);
              if ($973) {
                $974 = $970 | $971;
                HEAP32[1070] = $974;
                $$pre$i$i = ((($969)) + 8 | 0);
                $$0211$i$i = $969;
                $$pre$phi$i$iZ2D = $$pre$i$i;
              } else {
                $975 = ((($969)) + 8 | 0);
                $976 = HEAP32[$975 >> 2] | 0;
                $977 = HEAP32[(4296) >> 2] | 0;
                $978 = ($976 >>> 0) < ($977 >>> 0);
                if ($978) {
                  _abort();
                  // unreachable;
                } else {
                  $$0211$i$i = $976;
                  $$pre$phi$i$iZ2D = $975;
                }
              }
              HEAP32[$$pre$phi$i$iZ2D >> 2] = $630;
              $979 = ((($$0211$i$i)) + 12 | 0);
              HEAP32[$979 >> 2] = $630;
              $980 = ((($630)) + 8 | 0);
              HEAP32[$980 >> 2] = $$0211$i$i;
              $981 = ((($630)) + 12 | 0);
              HEAP32[$981 >> 2] = $969;
              break;
            }
            $982 = $961 >>> 8;
            $983 = ($982 | 0) == (0);
            if ($983) {
              $$0212$i$i = 0;
            } else {
              $984 = ($961 >>> 0) > (16777215);
              if ($984) {
                $$0212$i$i = 31;
              } else {
                $985 = (($982) + 1048320) | 0;
                $986 = $985 >>> 16;
                $987 = $986 & 8;
                $988 = $982 << $987;
                $989 = (($988) + 520192) | 0;
                $990 = $989 >>> 16;
                $991 = $990 & 4;
                $992 = $991 | $987;
                $993 = $988 << $991;
                $994 = (($993) + 245760) | 0;
                $995 = $994 >>> 16;
                $996 = $995 & 2;
                $997 = $992 | $996;
                $998 = (14 - ($997)) | 0;
                $999 = $993 << $996;
                $1000 = $999 >>> 15;
                $1001 = (($998) + ($1000)) | 0;
                $1002 = $1001 << 1;
                $1003 = (($1001) + 7) | 0;
                $1004 = $961 >>> $1003;
                $1005 = $1004 & 1;
                $1006 = $1005 | $1002;
                $$0212$i$i = $1006;
              }
            }
            $1007 = (4584 + ($$0212$i$i << 2) | 0);
            $1008 = ((($630)) + 28 | 0);
            HEAP32[$1008 >> 2] = $$0212$i$i;
            $1009 = ((($630)) + 20 | 0);
            HEAP32[$1009 >> 2] = 0;
            HEAP32[$933 >> 2] = 0;
            $1010 = HEAP32[(4284) >> 2] | 0;
            $1011 = 1 << $$0212$i$i;
            $1012 = $1010 & $1011;
            $1013 = ($1012 | 0) == (0);
            if ($1013) {
              $1014 = $1010 | $1011;
              HEAP32[(4284) >> 2] = $1014;
              HEAP32[$1007 >> 2] = $630;
              $1015 = ((($630)) + 24 | 0);
              HEAP32[$1015 >> 2] = $1007;
              $1016 = ((($630)) + 12 | 0);
              HEAP32[$1016 >> 2] = $630;
              $1017 = ((($630)) + 8 | 0);
              HEAP32[$1017 >> 2] = $630;
              break;
            }
            $1018 = HEAP32[$1007 >> 2] | 0;
            $1019 = ($$0212$i$i | 0) == (31);
            $1020 = $$0212$i$i >>> 1;
            $1021 = (25 - ($1020)) | 0;
            $1022 = $1019 ? 0 : $1021;
            $1023 = $961 << $1022;
            $$0206$i$i = $1023;
            $$0207$i$i = $1018;
            while (1) {
              $1024 = ((($$0207$i$i)) + 4 | 0);
              $1025 = HEAP32[$1024 >> 2] | 0;
              $1026 = $1025 & -8;
              $1027 = ($1026 | 0) == ($961 | 0);
              if ($1027) {
                label = 292;
                break;
              }
              $1028 = $$0206$i$i >>> 31;
              $1029 = (((($$0207$i$i)) + 16 | 0) + ($1028 << 2) | 0);
              $1030 = $$0206$i$i << 1;
              $1031 = HEAP32[$1029 >> 2] | 0;
              $1032 = ($1031 | 0) == (0 | 0);
              if ($1032) {
                label = 289;
                break;
              } else {
                $$0206$i$i = $1030;
                $$0207$i$i = $1031;
              }
            }
            if ((label | 0) == 289) {
              $1033 = HEAP32[(4296) >> 2] | 0;
              $1034 = ($1029 >>> 0) < ($1033 >>> 0);
              if ($1034) {
                _abort();
                // unreachable;
              } else {
                HEAP32[$1029 >> 2] = $630;
                $1035 = ((($630)) + 24 | 0);
                HEAP32[$1035 >> 2] = $$0207$i$i;
                $1036 = ((($630)) + 12 | 0);
                HEAP32[$1036 >> 2] = $630;
                $1037 = ((($630)) + 8 | 0);
                HEAP32[$1037 >> 2] = $630;
                break;
              }
            }
            else if ((label | 0) == 292) {
              $1038 = ((($$0207$i$i)) + 8 | 0);
              $1039 = HEAP32[$1038 >> 2] | 0;
              $1040 = HEAP32[(4296) >> 2] | 0;
              $1041 = ($1039 >>> 0) >= ($1040 >>> 0);
              $not$$i$i = ($$0207$i$i >>> 0) >= ($1040 >>> 0);
              $1042 = $1041 & $not$$i$i;
              if ($1042) {
                $1043 = ((($1039)) + 12 | 0);
                HEAP32[$1043 >> 2] = $630;
                HEAP32[$1038 >> 2] = $630;
                $1044 = ((($630)) + 8 | 0);
                HEAP32[$1044 >> 2] = $1039;
                $1045 = ((($630)) + 12 | 0);
                HEAP32[$1045 >> 2] = $$0207$i$i;
                $1046 = ((($630)) + 24 | 0);
                HEAP32[$1046 >> 2] = 0;
                break;
              } else {
                _abort();
                // unreachable;
              }
            }
          }
        }
      } while (0);
      $1048 = HEAP32[(4292) >> 2] | 0;
      $1049 = ($1048 >>> 0) > ($$0197 >>> 0);
      if ($1049) {
        $1050 = (($1048) - ($$0197)) | 0;
        HEAP32[(4292) >> 2] = $1050;
        $1051 = HEAP32[(4304) >> 2] | 0;
        $1052 = (($1051) + ($$0197) | 0);
        HEAP32[(4304) >> 2] = $1052;
        $1053 = $1050 | 1;
        $1054 = ((($1052)) + 4 | 0);
        HEAP32[$1054 >> 2] = $1053;
        $1055 = $$0197 | 3;
        $1056 = ((($1051)) + 4 | 0);
        HEAP32[$1056 >> 2] = $1055;
        $1057 = ((($1051)) + 8 | 0);
        $$0 = $1057;
        STACKTOP = sp;
        return ($$0 | 0);
      }
    }
    $1058 = (___errno_location() | 0);
    HEAP32[$1058 >> 2] = 12;
    $$0 = 0;
    STACKTOP = sp;
    return ($$0 | 0);
  }

  function _free($0) {
    $0 = $0 | 0;
    var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0,
      $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre = 0, $$pre$phi443Z2D = 0,
      $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $$pre442 = 0;
    var $$pre444 = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0,
      $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
    var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0,
      $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
    var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0,
      $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
    var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0,
      $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
    var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0,
      $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
    var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0,
      $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
    var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0,
      $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
    var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0,
      $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
    var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0,
      $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
    var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0,
      $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
    var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0,
      $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
    var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0,
      $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
    var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0,
      $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
    var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0,
      $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
    var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0,
      $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
    var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0,
      $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
    var $99 = 0, $cond421 = 0, $cond422 = 0, $not$ = 0, $not$405 = 0, $not$437 = 0, label = 0, sp = 0;
    sp = STACKTOP;
    $1 = ($0 | 0) == (0 | 0);
    if ($1) {
      return;
    }
    $2 = ((($0)) + -8 | 0);
    $3 = HEAP32[(4296) >> 2] | 0;
    $4 = ($2 >>> 0) < ($3 >>> 0);
    if ($4) {
      _abort();
      // unreachable;
    }
    $5 = ((($0)) + -4 | 0);
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6 & 3;
    $8 = ($7 | 0) == (1);
    if ($8) {
      _abort();
      // unreachable;
    }
    $9 = $6 & -8;
    $10 = (($2) + ($9) | 0);
    $11 = $6 & 1;
    $12 = ($11 | 0) == (0);
    L10: do {
      if ($12) {
        $13 = HEAP32[$2 >> 2] | 0;
        $14 = ($7 | 0) == (0);
        if ($14) {
          return;
        }
        $15 = (0 - ($13)) | 0;
        $16 = (($2) + ($15) | 0);
        $17 = (($13) + ($9)) | 0;
        $18 = ($16 >>> 0) < ($3 >>> 0);
        if ($18) {
          _abort();
          // unreachable;
        }
        $19 = HEAP32[(4300) >> 2] | 0;
        $20 = ($16 | 0) == ($19 | 0);
        if ($20) {
          $104 = ((($10)) + 4 | 0);
          $105 = HEAP32[$104 >> 2] | 0;
          $106 = $105 & 3;
          $107 = ($106 | 0) == (3);
          if (!($107)) {
            $$1 = $16;
            $$1382 = $17;
            $112 = $16;
            break;
          }
          $108 = (($16) + ($17) | 0);
          $109 = ((($16)) + 4 | 0);
          $110 = $17 | 1;
          $111 = $105 & -2;
          HEAP32[(4288) >> 2] = $17;
          HEAP32[$104 >> 2] = $111;
          HEAP32[$109 >> 2] = $110;
          HEAP32[$108 >> 2] = $17;
          return;
        }
        $21 = $13 >>> 3;
        $22 = ($13 >>> 0) < (256);
        if ($22) {
          $23 = ((($16)) + 8 | 0);
          $24 = HEAP32[$23 >> 2] | 0;
          $25 = ((($16)) + 12 | 0);
          $26 = HEAP32[$25 >> 2] | 0;
          $27 = $21 << 1;
          $28 = (4320 + ($27 << 2) | 0);
          $29 = ($24 | 0) == ($28 | 0);
          if (!($29)) {
            $30 = ($24 >>> 0) < ($3 >>> 0);
            if ($30) {
              _abort();
              // unreachable;
            }
            $31 = ((($24)) + 12 | 0);
            $32 = HEAP32[$31 >> 2] | 0;
            $33 = ($32 | 0) == ($16 | 0);
            if (!($33)) {
              _abort();
              // unreachable;
            }
          }
          $34 = ($26 | 0) == ($24 | 0);
          if ($34) {
            $35 = 1 << $21;
            $36 = $35 ^ -1;
            $37 = HEAP32[1070] | 0;
            $38 = $37 & $36;
            HEAP32[1070] = $38;
            $$1 = $16;
            $$1382 = $17;
            $112 = $16;
            break;
          }
          $39 = ($26 | 0) == ($28 | 0);
          if ($39) {
            $$pre444 = ((($26)) + 8 | 0);
            $$pre$phi445Z2D = $$pre444;
          } else {
            $40 = ($26 >>> 0) < ($3 >>> 0);
            if ($40) {
              _abort();
              // unreachable;
            }
            $41 = ((($26)) + 8 | 0);
            $42 = HEAP32[$41 >> 2] | 0;
            $43 = ($42 | 0) == ($16 | 0);
            if ($43) {
              $$pre$phi445Z2D = $41;
            } else {
              _abort();
              // unreachable;
            }
          }
          $44 = ((($24)) + 12 | 0);
          HEAP32[$44 >> 2] = $26;
          HEAP32[$$pre$phi445Z2D >> 2] = $24;
          $$1 = $16;
          $$1382 = $17;
          $112 = $16;
          break;
        }
        $45 = ((($16)) + 24 | 0);
        $46 = HEAP32[$45 >> 2] | 0;
        $47 = ((($16)) + 12 | 0);
        $48 = HEAP32[$47 >> 2] | 0;
        $49 = ($48 | 0) == ($16 | 0);
        do {
          if ($49) {
            $59 = ((($16)) + 16 | 0);
            $60 = ((($59)) + 4 | 0);
            $61 = HEAP32[$60 >> 2] | 0;
            $62 = ($61 | 0) == (0 | 0);
            if ($62) {
              $63 = HEAP32[$59 >> 2] | 0;
              $64 = ($63 | 0) == (0 | 0);
              if ($64) {
                $$3 = 0;
                break;
              } else {
                $$1387 = $63;
                $$1390 = $59;
              }
            } else {
              $$1387 = $61;
              $$1390 = $60;
            }
            while (1) {
              $65 = ((($$1387)) + 20 | 0);
              $66 = HEAP32[$65 >> 2] | 0;
              $67 = ($66 | 0) == (0 | 0);
              if (!($67)) {
                $$1387 = $66;
                $$1390 = $65;
                continue;
              }
              $68 = ((($$1387)) + 16 | 0);
              $69 = HEAP32[$68 >> 2] | 0;
              $70 = ($69 | 0) == (0 | 0);
              if ($70) {
                break;
              } else {
                $$1387 = $69;
                $$1390 = $68;
              }
            }
            $71 = ($$1390 >>> 0) < ($3 >>> 0);
            if ($71) {
              _abort();
              // unreachable;
            } else {
              HEAP32[$$1390 >> 2] = 0;
              $$3 = $$1387;
              break;
            }
          } else {
            $50 = ((($16)) + 8 | 0);
            $51 = HEAP32[$50 >> 2] | 0;
            $52 = ($51 >>> 0) < ($3 >>> 0);
            if ($52) {
              _abort();
              // unreachable;
            }
            $53 = ((($51)) + 12 | 0);
            $54 = HEAP32[$53 >> 2] | 0;
            $55 = ($54 | 0) == ($16 | 0);
            if (!($55)) {
              _abort();
              // unreachable;
            }
            $56 = ((($48)) + 8 | 0);
            $57 = HEAP32[$56 >> 2] | 0;
            $58 = ($57 | 0) == ($16 | 0);
            if ($58) {
              HEAP32[$53 >> 2] = $48;
              HEAP32[$56 >> 2] = $51;
              $$3 = $48;
              break;
            } else {
              _abort();
              // unreachable;
            }
          }
        } while (0);
        $72 = ($46 | 0) == (0 | 0);
        if ($72) {
          $$1 = $16;
          $$1382 = $17;
          $112 = $16;
        } else {
          $73 = ((($16)) + 28 | 0);
          $74 = HEAP32[$73 >> 2] | 0;
          $75 = (4584 + ($74 << 2) | 0);
          $76 = HEAP32[$75 >> 2] | 0;
          $77 = ($16 | 0) == ($76 | 0);
          do {
            if ($77) {
              HEAP32[$75 >> 2] = $$3;
              $cond421 = ($$3 | 0) == (0 | 0);
              if ($cond421) {
                $78 = 1 << $74;
                $79 = $78 ^ -1;
                $80 = HEAP32[(4284) >> 2] | 0;
                $81 = $80 & $79;
                HEAP32[(4284) >> 2] = $81;
                $$1 = $16;
                $$1382 = $17;
                $112 = $16;
                break L10;
              }
            } else {
              $82 = HEAP32[(4296) >> 2] | 0;
              $83 = ($46 >>> 0) < ($82 >>> 0);
              if ($83) {
                _abort();
                // unreachable;
              } else {
                $84 = ((($46)) + 16 | 0);
                $85 = HEAP32[$84 >> 2] | 0;
                $not$405 = ($85 | 0) != ($16 | 0);
                $$sink3 = $not$405 & 1;
                $86 = (((($46)) + 16 | 0) + ($$sink3 << 2) | 0);
                HEAP32[$86 >> 2] = $$3;
                $87 = ($$3 | 0) == (0 | 0);
                if ($87) {
                  $$1 = $16;
                  $$1382 = $17;
                  $112 = $16;
                  break L10;
                } else {
                  break;
                }
              }
            }
          } while (0);
          $88 = HEAP32[(4296) >> 2] | 0;
          $89 = ($$3 >>> 0) < ($88 >>> 0);
          if ($89) {
            _abort();
            // unreachable;
          }
          $90 = ((($$3)) + 24 | 0);
          HEAP32[$90 >> 2] = $46;
          $91 = ((($16)) + 16 | 0);
          $92 = HEAP32[$91 >> 2] | 0;
          $93 = ($92 | 0) == (0 | 0);
          do {
            if (!($93)) {
              $94 = ($92 >>> 0) < ($88 >>> 0);
              if ($94) {
                _abort();
                // unreachable;
              } else {
                $95 = ((($$3)) + 16 | 0);
                HEAP32[$95 >> 2] = $92;
                $96 = ((($92)) + 24 | 0);
                HEAP32[$96 >> 2] = $$3;
                break;
              }
            }
          } while (0);
          $97 = ((($91)) + 4 | 0);
          $98 = HEAP32[$97 >> 2] | 0;
          $99 = ($98 | 0) == (0 | 0);
          if ($99) {
            $$1 = $16;
            $$1382 = $17;
            $112 = $16;
          } else {
            $100 = HEAP32[(4296) >> 2] | 0;
            $101 = ($98 >>> 0) < ($100 >>> 0);
            if ($101) {
              _abort();
              // unreachable;
            } else {
              $102 = ((($$3)) + 20 | 0);
              HEAP32[$102 >> 2] = $98;
              $103 = ((($98)) + 24 | 0);
              HEAP32[$103 >> 2] = $$3;
              $$1 = $16;
              $$1382 = $17;
              $112 = $16;
              break;
            }
          }
        }
      } else {
        $$1 = $2;
        $$1382 = $9;
        $112 = $2;
      }
    } while (0);
    $113 = ($112 >>> 0) < ($10 >>> 0);
    if (!($113)) {
      _abort();
      // unreachable;
    }
    $114 = ((($10)) + 4 | 0);
    $115 = HEAP32[$114 >> 2] | 0;
    $116 = $115 & 1;
    $117 = ($116 | 0) == (0);
    if ($117) {
      _abort();
      // unreachable;
    }
    $118 = $115 & 2;
    $119 = ($118 | 0) == (0);
    if ($119) {
      $120 = HEAP32[(4304) >> 2] | 0;
      $121 = ($10 | 0) == ($120 | 0);
      $122 = HEAP32[(4300) >> 2] | 0;
      if ($121) {
        $123 = HEAP32[(4292) >> 2] | 0;
        $124 = (($123) + ($$1382)) | 0;
        HEAP32[(4292) >> 2] = $124;
        HEAP32[(4304) >> 2] = $$1;
        $125 = $124 | 1;
        $126 = ((($$1)) + 4 | 0);
        HEAP32[$126 >> 2] = $125;
        $127 = ($$1 | 0) == ($122 | 0);
        if (!($127)) {
          return;
        }
        HEAP32[(4300) >> 2] = 0;
        HEAP32[(4288) >> 2] = 0;
        return;
      }
      $128 = ($10 | 0) == ($122 | 0);
      if ($128) {
        $129 = HEAP32[(4288) >> 2] | 0;
        $130 = (($129) + ($$1382)) | 0;
        HEAP32[(4288) >> 2] = $130;
        HEAP32[(4300) >> 2] = $112;
        $131 = $130 | 1;
        $132 = ((($$1)) + 4 | 0);
        HEAP32[$132 >> 2] = $131;
        $133 = (($112) + ($130) | 0);
        HEAP32[$133 >> 2] = $130;
        return;
      }
      $134 = $115 & -8;
      $135 = (($134) + ($$1382)) | 0;
      $136 = $115 >>> 3;
      $137 = ($115 >>> 0) < (256);
      L108: do {
        if ($137) {
          $138 = ((($10)) + 8 | 0);
          $139 = HEAP32[$138 >> 2] | 0;
          $140 = ((($10)) + 12 | 0);
          $141 = HEAP32[$140 >> 2] | 0;
          $142 = $136 << 1;
          $143 = (4320 + ($142 << 2) | 0);
          $144 = ($139 | 0) == ($143 | 0);
          if (!($144)) {
            $145 = HEAP32[(4296) >> 2] | 0;
            $146 = ($139 >>> 0) < ($145 >>> 0);
            if ($146) {
              _abort();
              // unreachable;
            }
            $147 = ((($139)) + 12 | 0);
            $148 = HEAP32[$147 >> 2] | 0;
            $149 = ($148 | 0) == ($10 | 0);
            if (!($149)) {
              _abort();
              // unreachable;
            }
          }
          $150 = ($141 | 0) == ($139 | 0);
          if ($150) {
            $151 = 1 << $136;
            $152 = $151 ^ -1;
            $153 = HEAP32[1070] | 0;
            $154 = $153 & $152;
            HEAP32[1070] = $154;
            break;
          }
          $155 = ($141 | 0) == ($143 | 0);
          if ($155) {
            $$pre442 = ((($141)) + 8 | 0);
            $$pre$phi443Z2D = $$pre442;
          } else {
            $156 = HEAP32[(4296) >> 2] | 0;
            $157 = ($141 >>> 0) < ($156 >>> 0);
            if ($157) {
              _abort();
              // unreachable;
            }
            $158 = ((($141)) + 8 | 0);
            $159 = HEAP32[$158 >> 2] | 0;
            $160 = ($159 | 0) == ($10 | 0);
            if ($160) {
              $$pre$phi443Z2D = $158;
            } else {
              _abort();
              // unreachable;
            }
          }
          $161 = ((($139)) + 12 | 0);
          HEAP32[$161 >> 2] = $141;
          HEAP32[$$pre$phi443Z2D >> 2] = $139;
        } else {
          $162 = ((($10)) + 24 | 0);
          $163 = HEAP32[$162 >> 2] | 0;
          $164 = ((($10)) + 12 | 0);
          $165 = HEAP32[$164 >> 2] | 0;
          $166 = ($165 | 0) == ($10 | 0);
          do {
            if ($166) {
              $177 = ((($10)) + 16 | 0);
              $178 = ((($177)) + 4 | 0);
              $179 = HEAP32[$178 >> 2] | 0;
              $180 = ($179 | 0) == (0 | 0);
              if ($180) {
                $181 = HEAP32[$177 >> 2] | 0;
                $182 = ($181 | 0) == (0 | 0);
                if ($182) {
                  $$3400 = 0;
                  break;
                } else {
                  $$1398 = $181;
                  $$1402 = $177;
                }
              } else {
                $$1398 = $179;
                $$1402 = $178;
              }
              while (1) {
                $183 = ((($$1398)) + 20 | 0);
                $184 = HEAP32[$183 >> 2] | 0;
                $185 = ($184 | 0) == (0 | 0);
                if (!($185)) {
                  $$1398 = $184;
                  $$1402 = $183;
                  continue;
                }
                $186 = ((($$1398)) + 16 | 0);
                $187 = HEAP32[$186 >> 2] | 0;
                $188 = ($187 | 0) == (0 | 0);
                if ($188) {
                  break;
                } else {
                  $$1398 = $187;
                  $$1402 = $186;
                }
              }
              $189 = HEAP32[(4296) >> 2] | 0;
              $190 = ($$1402 >>> 0) < ($189 >>> 0);
              if ($190) {
                _abort();
                // unreachable;
              } else {
                HEAP32[$$1402 >> 2] = 0;
                $$3400 = $$1398;
                break;
              }
            } else {
              $167 = ((($10)) + 8 | 0);
              $168 = HEAP32[$167 >> 2] | 0;
              $169 = HEAP32[(4296) >> 2] | 0;
              $170 = ($168 >>> 0) < ($169 >>> 0);
              if ($170) {
                _abort();
                // unreachable;
              }
              $171 = ((($168)) + 12 | 0);
              $172 = HEAP32[$171 >> 2] | 0;
              $173 = ($172 | 0) == ($10 | 0);
              if (!($173)) {
                _abort();
                // unreachable;
              }
              $174 = ((($165)) + 8 | 0);
              $175 = HEAP32[$174 >> 2] | 0;
              $176 = ($175 | 0) == ($10 | 0);
              if ($176) {
                HEAP32[$171 >> 2] = $165;
                HEAP32[$174 >> 2] = $168;
                $$3400 = $165;
                break;
              } else {
                _abort();
                // unreachable;
              }
            }
          } while (0);
          $191 = ($163 | 0) == (0 | 0);
          if (!($191)) {
            $192 = ((($10)) + 28 | 0);
            $193 = HEAP32[$192 >> 2] | 0;
            $194 = (4584 + ($193 << 2) | 0);
            $195 = HEAP32[$194 >> 2] | 0;
            $196 = ($10 | 0) == ($195 | 0);
            do {
              if ($196) {
                HEAP32[$194 >> 2] = $$3400;
                $cond422 = ($$3400 | 0) == (0 | 0);
                if ($cond422) {
                  $197 = 1 << $193;
                  $198 = $197 ^ -1;
                  $199 = HEAP32[(4284) >> 2] | 0;
                  $200 = $199 & $198;
                  HEAP32[(4284) >> 2] = $200;
                  break L108;
                }
              } else {
                $201 = HEAP32[(4296) >> 2] | 0;
                $202 = ($163 >>> 0) < ($201 >>> 0);
                if ($202) {
                  _abort();
                  // unreachable;
                } else {
                  $203 = ((($163)) + 16 | 0);
                  $204 = HEAP32[$203 >> 2] | 0;
                  $not$ = ($204 | 0) != ($10 | 0);
                  $$sink5 = $not$ & 1;
                  $205 = (((($163)) + 16 | 0) + ($$sink5 << 2) | 0);
                  HEAP32[$205 >> 2] = $$3400;
                  $206 = ($$3400 | 0) == (0 | 0);
                  if ($206) {
                    break L108;
                  } else {
                    break;
                  }
                }
              }
            } while (0);
            $207 = HEAP32[(4296) >> 2] | 0;
            $208 = ($$3400 >>> 0) < ($207 >>> 0);
            if ($208) {
              _abort();
              // unreachable;
            }
            $209 = ((($$3400)) + 24 | 0);
            HEAP32[$209 >> 2] = $163;
            $210 = ((($10)) + 16 | 0);
            $211 = HEAP32[$210 >> 2] | 0;
            $212 = ($211 | 0) == (0 | 0);
            do {
              if (!($212)) {
                $213 = ($211 >>> 0) < ($207 >>> 0);
                if ($213) {
                  _abort();
                  // unreachable;
                } else {
                  $214 = ((($$3400)) + 16 | 0);
                  HEAP32[$214 >> 2] = $211;
                  $215 = ((($211)) + 24 | 0);
                  HEAP32[$215 >> 2] = $$3400;
                  break;
                }
              }
            } while (0);
            $216 = ((($210)) + 4 | 0);
            $217 = HEAP32[$216 >> 2] | 0;
            $218 = ($217 | 0) == (0 | 0);
            if (!($218)) {
              $219 = HEAP32[(4296) >> 2] | 0;
              $220 = ($217 >>> 0) < ($219 >>> 0);
              if ($220) {
                _abort();
                // unreachable;
              } else {
                $221 = ((($$3400)) + 20 | 0);
                HEAP32[$221 >> 2] = $217;
                $222 = ((($217)) + 24 | 0);
                HEAP32[$222 >> 2] = $$3400;
                break;
              }
            }
          }
        }
      } while (0);
      $223 = $135 | 1;
      $224 = ((($$1)) + 4 | 0);
      HEAP32[$224 >> 2] = $223;
      $225 = (($112) + ($135) | 0);
      HEAP32[$225 >> 2] = $135;
      $226 = HEAP32[(4300) >> 2] | 0;
      $227 = ($$1 | 0) == ($226 | 0);
      if ($227) {
        HEAP32[(4288) >> 2] = $135;
        return;
      } else {
        $$2 = $135;
      }
    } else {
      $228 = $115 & -2;
      HEAP32[$114 >> 2] = $228;
      $229 = $$1382 | 1;
      $230 = ((($$1)) + 4 | 0);
      HEAP32[$230 >> 2] = $229;
      $231 = (($112) + ($$1382) | 0);
      HEAP32[$231 >> 2] = $$1382;
      $$2 = $$1382;
    }
    $232 = $$2 >>> 3;
    $233 = ($$2 >>> 0) < (256);
    if ($233) {
      $234 = $232 << 1;
      $235 = (4320 + ($234 << 2) | 0);
      $236 = HEAP32[1070] | 0;
      $237 = 1 << $232;
      $238 = $236 & $237;
      $239 = ($238 | 0) == (0);
      if ($239) {
        $240 = $236 | $237;
        HEAP32[1070] = $240;
        $$pre = ((($235)) + 8 | 0);
        $$0403 = $235;
        $$pre$phiZ2D = $$pre;
      } else {
        $241 = ((($235)) + 8 | 0);
        $242 = HEAP32[$241 >> 2] | 0;
        $243 = HEAP32[(4296) >> 2] | 0;
        $244 = ($242 >>> 0) < ($243 >>> 0);
        if ($244) {
          _abort();
          // unreachable;
        } else {
          $$0403 = $242;
          $$pre$phiZ2D = $241;
        }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $$1;
      $245 = ((($$0403)) + 12 | 0);
      HEAP32[$245 >> 2] = $$1;
      $246 = ((($$1)) + 8 | 0);
      HEAP32[$246 >> 2] = $$0403;
      $247 = ((($$1)) + 12 | 0);
      HEAP32[$247 >> 2] = $235;
      return;
    }
    $248 = $$2 >>> 8;
    $249 = ($248 | 0) == (0);
    if ($249) {
      $$0396 = 0;
    } else {
      $250 = ($$2 >>> 0) > (16777215);
      if ($250) {
        $$0396 = 31;
      } else {
        $251 = (($248) + 1048320) | 0;
        $252 = $251 >>> 16;
        $253 = $252 & 8;
        $254 = $248 << $253;
        $255 = (($254) + 520192) | 0;
        $256 = $255 >>> 16;
        $257 = $256 & 4;
        $258 = $257 | $253;
        $259 = $254 << $257;
        $260 = (($259) + 245760) | 0;
        $261 = $260 >>> 16;
        $262 = $261 & 2;
        $263 = $258 | $262;
        $264 = (14 - ($263)) | 0;
        $265 = $259 << $262;
        $266 = $265 >>> 15;
        $267 = (($264) + ($266)) | 0;
        $268 = $267 << 1;
        $269 = (($267) + 7) | 0;
        $270 = $$2 >>> $269;
        $271 = $270 & 1;
        $272 = $271 | $268;
        $$0396 = $272;
      }
    }
    $273 = (4584 + ($$0396 << 2) | 0);
    $274 = ((($$1)) + 28 | 0);
    HEAP32[$274 >> 2] = $$0396;
    $275 = ((($$1)) + 16 | 0);
    $276 = ((($$1)) + 20 | 0);
    HEAP32[$276 >> 2] = 0;
    HEAP32[$275 >> 2] = 0;
    $277 = HEAP32[(4284) >> 2] | 0;
    $278 = 1 << $$0396;
    $279 = $277 & $278;
    $280 = ($279 | 0) == (0);
    do {
      if ($280) {
        $281 = $277 | $278;
        HEAP32[(4284) >> 2] = $281;
        HEAP32[$273 >> 2] = $$1;
        $282 = ((($$1)) + 24 | 0);
        HEAP32[$282 >> 2] = $273;
        $283 = ((($$1)) + 12 | 0);
        HEAP32[$283 >> 2] = $$1;
        $284 = ((($$1)) + 8 | 0);
        HEAP32[$284 >> 2] = $$1;
      } else {
        $285 = HEAP32[$273 >> 2] | 0;
        $286 = ($$0396 | 0) == (31);
        $287 = $$0396 >>> 1;
        $288 = (25 - ($287)) | 0;
        $289 = $286 ? 0 : $288;
        $290 = $$2 << $289;
        $$0383 = $290;
        $$0384 = $285;
        while (1) {
          $291 = ((($$0384)) + 4 | 0);
          $292 = HEAP32[$291 >> 2] | 0;
          $293 = $292 & -8;
          $294 = ($293 | 0) == ($$2 | 0);
          if ($294) {
            label = 124;
            break;
          }
          $295 = $$0383 >>> 31;
          $296 = (((($$0384)) + 16 | 0) + ($295 << 2) | 0);
          $297 = $$0383 << 1;
          $298 = HEAP32[$296 >> 2] | 0;
          $299 = ($298 | 0) == (0 | 0);
          if ($299) {
            label = 121;
            break;
          } else {
            $$0383 = $297;
            $$0384 = $298;
          }
        }
        if ((label | 0) == 121) {
          $300 = HEAP32[(4296) >> 2] | 0;
          $301 = ($296 >>> 0) < ($300 >>> 0);
          if ($301) {
            _abort();
            // unreachable;
          } else {
            HEAP32[$296 >> 2] = $$1;
            $302 = ((($$1)) + 24 | 0);
            HEAP32[$302 >> 2] = $$0384;
            $303 = ((($$1)) + 12 | 0);
            HEAP32[$303 >> 2] = $$1;
            $304 = ((($$1)) + 8 | 0);
            HEAP32[$304 >> 2] = $$1;
            break;
          }
        }
        else if ((label | 0) == 124) {
          $305 = ((($$0384)) + 8 | 0);
          $306 = HEAP32[$305 >> 2] | 0;
          $307 = HEAP32[(4296) >> 2] | 0;
          $308 = ($306 >>> 0) >= ($307 >>> 0);
          $not$437 = ($$0384 >>> 0) >= ($307 >>> 0);
          $309 = $308 & $not$437;
          if ($309) {
            $310 = ((($306)) + 12 | 0);
            HEAP32[$310 >> 2] = $$1;
            HEAP32[$305 >> 2] = $$1;
            $311 = ((($$1)) + 8 | 0);
            HEAP32[$311 >> 2] = $306;
            $312 = ((($$1)) + 12 | 0);
            HEAP32[$312 >> 2] = $$0384;
            $313 = ((($$1)) + 24 | 0);
            HEAP32[$313 >> 2] = 0;
            break;
          } else {
            _abort();
            // unreachable;
          }
        }
      }
    } while (0);
    $314 = HEAP32[(4312) >> 2] | 0;
    $315 = (($314) + -1) | 0;
    HEAP32[(4312) >> 2] = $315;
    $316 = ($315 | 0) == (0);
    if ($316) {
      $$0212$in$i = (4736);
    } else {
      return;
    }
    while (1) {
      $$0212$i = HEAP32[$$0212$in$i >> 2] | 0;
      $317 = ($$0212$i | 0) == (0 | 0);
      $318 = ((($$0212$i)) + 8 | 0);
      if ($317) {
        break;
      } else {
        $$0212$in$i = $318;
      }
    }
    HEAP32[(4312) >> 2] = -1;
    return;
  }

  function runPostSets() {
  }

  function _bitshift64Ashr(low, high, bits) {
    low = low | 0;
    high = high | 0;
    bits = bits | 0;
    var ander = 0;
    if ((bits | 0) < 32) {
      ander = ((1 << bits) - 1) | 0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high & ander) << (32 - bits));
    }
    tempRet0 = (high | 0) < 0 ? -1 : 0;
    return (high >> (bits - 32)) | 0;
  }

  function _i64Subtract(a, b, c, d) {
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    var l = 0, h = 0;
    l = (a - c) >>> 0;
    h = (b - d) >>> 0;
    h = (b - d - (((c >>> 0) > (a >>> 0)) | 0)) >>> 0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h, l | 0) | 0);
  }

  function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a | 0;
    b = b | 0;
    c = c | 0;
    d = d | 0;
    var l = 0, h = 0;
    l = (a + c) >>> 0;
    h = (b + d + (((l >>> 0) < (a >>> 0)) | 0)) >>> 0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h, l | 0) | 0);
  }

  function _memset(ptr, value, num) {
    ptr = ptr | 0;
    value = value | 0;
    num = num | 0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num) | 0;

    value = value & 0xff;
    if ((num | 0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr & 3) != 0) {
        HEAP8[((ptr) >> 0)] = value;
        ptr = (ptr + 1) | 0;
      }

      aligned_end = (end & -4) | 0;
      block_aligned_end = (aligned_end - 64) | 0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while ((ptr | 0) <= (block_aligned_end | 0)) {
        HEAP32[((ptr) >> 2)] = value4;
        HEAP32[(((ptr) + (4)) >> 2)] = value4;
        HEAP32[(((ptr) + (8)) >> 2)] = value4;
        HEAP32[(((ptr) + (12)) >> 2)] = value4;
        HEAP32[(((ptr) + (16)) >> 2)] = value4;
        HEAP32[(((ptr) + (20)) >> 2)] = value4;
        HEAP32[(((ptr) + (24)) >> 2)] = value4;
        HEAP32[(((ptr) + (28)) >> 2)] = value4;
        HEAP32[(((ptr) + (32)) >> 2)] = value4;
        HEAP32[(((ptr) + (36)) >> 2)] = value4;
        HEAP32[(((ptr) + (40)) >> 2)] = value4;
        HEAP32[(((ptr) + (44)) >> 2)] = value4;
        HEAP32[(((ptr) + (48)) >> 2)] = value4;
        HEAP32[(((ptr) + (52)) >> 2)] = value4;
        HEAP32[(((ptr) + (56)) >> 2)] = value4;
        HEAP32[(((ptr) + (60)) >> 2)] = value4;
        ptr = (ptr + 64) | 0;
      }

      while ((ptr | 0) < (aligned_end | 0)) {
        HEAP32[((ptr) >> 2)] = value4;
        ptr = (ptr + 4) | 0;
      }
    }
    // The remaining bytes.
    while ((ptr | 0) < (end | 0)) {
      HEAP8[((ptr) >> 0)] = value;
      ptr = (ptr + 1) | 0;
    }
    return (end - num) | 0;
  }

  function _bitshift64Lshr(low, high, bits) {
    low = low | 0;
    high = high | 0;
    bits = bits | 0;
    var ander = 0;
    if ((bits | 0) < 32) {
      ander = ((1 << bits) - 1) | 0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high & ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32)) | 0;
  }

  function _bitshift64Shl(low, high, bits) {
    low = low | 0;
    high = high | 0;
    bits = bits | 0;
    var ander = 0;
    if ((bits | 0) < 32) {
      ander = ((1 << bits) - 1) | 0;
      tempRet0 = (high << bits) | ((low & (ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }

  function _memcpy(dest, src, num) {
    dest = dest | 0;
    src = src | 0;
    num = num | 0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num | 0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
    }

    ret = dest | 0;
    dest_end = (dest + num) | 0;
    if ((dest & 3) == (src & 3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num | 0) == 0) return ret | 0;
        HEAP8[((dest) >> 0)] = ((HEAP8[((src) >> 0)]) | 0);
        dest = (dest + 1) | 0;
        src = (src + 1) | 0;
        num = (num - 1) | 0;
      }
      aligned_dest_end = (dest_end & -4) | 0;
      block_aligned_dest_end = (aligned_dest_end - 64) | 0;
      while ((dest | 0) <= (block_aligned_dest_end | 0)) {
        HEAP32[((dest) >> 2)] = ((HEAP32[((src) >> 2)]) | 0);
        HEAP32[(((dest) + (4)) >> 2)] = ((HEAP32[(((src) + (4)) >> 2)]) | 0);
        HEAP32[(((dest) + (8)) >> 2)] = ((HEAP32[(((src) + (8)) >> 2)]) | 0);
        HEAP32[(((dest) + (12)) >> 2)] = ((HEAP32[(((src) + (12)) >> 2)]) | 0);
        HEAP32[(((dest) + (16)) >> 2)] = ((HEAP32[(((src) + (16)) >> 2)]) | 0);
        HEAP32[(((dest) + (20)) >> 2)] = ((HEAP32[(((src) + (20)) >> 2)]) | 0);
        HEAP32[(((dest) + (24)) >> 2)] = ((HEAP32[(((src) + (24)) >> 2)]) | 0);
        HEAP32[(((dest) + (28)) >> 2)] = ((HEAP32[(((src) + (28)) >> 2)]) | 0);
        HEAP32[(((dest) + (32)) >> 2)] = ((HEAP32[(((src) + (32)) >> 2)]) | 0);
        HEAP32[(((dest) + (36)) >> 2)] = ((HEAP32[(((src) + (36)) >> 2)]) | 0);
        HEAP32[(((dest) + (40)) >> 2)] = ((HEAP32[(((src) + (40)) >> 2)]) | 0);
        HEAP32[(((dest) + (44)) >> 2)] = ((HEAP32[(((src) + (44)) >> 2)]) | 0);
        HEAP32[(((dest) + (48)) >> 2)] = ((HEAP32[(((src) + (48)) >> 2)]) | 0);
        HEAP32[(((dest) + (52)) >> 2)] = ((HEAP32[(((src) + (52)) >> 2)]) | 0);
        HEAP32[(((dest) + (56)) >> 2)] = ((HEAP32[(((src) + (56)) >> 2)]) | 0);
        HEAP32[(((dest) + (60)) >> 2)] = ((HEAP32[(((src) + (60)) >> 2)]) | 0);
        dest = (dest + 64) | 0;
        src = (src + 64) | 0;
      }
      while ((dest | 0) < (aligned_dest_end | 0)) {
        HEAP32[((dest) >> 2)] = ((HEAP32[((src) >> 2)]) | 0);
        dest = (dest + 4) | 0;
        src = (src + 4) | 0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4) | 0;
      while ((dest | 0) < (aligned_dest_end | 0)) {
        HEAP8[((dest) >> 0)] = ((HEAP8[((src) >> 0)]) | 0);
        HEAP8[(((dest) + (1)) >> 0)] = ((HEAP8[(((src) + (1)) >> 0)]) | 0);
        HEAP8[(((dest) + (2)) >> 0)] = ((HEAP8[(((src) + (2)) >> 0)]) | 0);
        HEAP8[(((dest) + (3)) >> 0)] = ((HEAP8[(((src) + (3)) >> 0)]) | 0);
        dest = (dest + 4) | 0;
        src = (src + 4) | 0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest | 0) < (dest_end | 0)) {
      HEAP8[((dest) >> 0)] = ((HEAP8[((src) >> 0)]) | 0);
      dest = (dest + 1) | 0;
      src = (src + 1) | 0;
    }
    return ret | 0;
  }

  function _llvm_cttz_i32(x) {
    x = x | 0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8) + (x & 0xff)) >> 0)]) | 0);
    if ((ret | 0) < 8) return ret | 0;
    ret = ((HEAP8[(((cttz_i8) + ((x >> 8) & 0xff)) >> 0)]) | 0);
    if ((ret | 0) < 8) return (ret + 8) | 0;
    ret = ((HEAP8[(((cttz_i8) + ((x >> 16) & 0xff)) >> 0)]) | 0);
    if ((ret | 0) < 8) return (ret + 16) | 0;
    return (((HEAP8[(((cttz_i8) + (x >>> 24)) >> 0)]) | 0) + 24) | 0;
  }

  function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0,
      $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0,
      $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0,
      $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0,
      $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0,
      $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0,
      $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0,
      $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0,
      $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0,
      $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0,
      $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
  }

  function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
  }

  function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
  }

  function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
  }

  function _sbrk(increment) {
    increment = increment | 0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16) | 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop | 0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory() | 0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop;
    totalMemory = getTotalMemory() | 0;
    if ((newDynamicTop | 0) > (totalMemory | 0)) {
      if ((enlargeMemory() | 0) == 0) {
        HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop | 0;
  }

  function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
  }

  function _llvm_bswap_i32(x) {
    x = x | 0;
    return (((x & 0xff) << 24) | (((x >> 8) & 0xff) << 16) | (((x >> 16) & 0xff) << 8) | (x >>> 24)) | 0;
  }

  function _llvm_ctlz_i64(l, h, isZeroUndef) {
    l = l | 0;
    h = h | 0;
    isZeroUndef = isZeroUndef | 0;
    var ret = 0;
    ret = Math_clz32(h) | 0;
    if ((ret | 0) == 32) ret = ret + (Math_clz32(l) | 0) | 0;
    tempRet0 = 0;
    return ret | 0;
  }


  function dynCall_ii(index, a1) {
    index = index | 0;
    a1 = a1 | 0;
    return FUNCTION_TABLE_ii[index & 1](a1 | 0) | 0;
  }


  function dynCall_iiii(index, a1, a2, a3) {
    index = index | 0;
    a1 = a1 | 0;
    a2 = a2 | 0;
    a3 = a3 | 0;
    return FUNCTION_TABLE_iiii[index & 3](a1 | 0, a2 | 0, a3 | 0) | 0;
  }

  function b0(p0) {
    p0 = p0 | 0;
    nullFunc_ii(0);
    return 0;
  }

  function b1(p0, p1, p2) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    p2 = p2 | 0;
    nullFunc_iiii(1);
    return 0;
  }

// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_ii = [b0, ___stdio_close];
  var FUNCTION_TABLE_iiii = [b1, b1, ___stdio_write, ___stdio_seek];

  return {
    stackSave: stackSave,
    getTempRet0: getTempRet0,
    _llvm_cttz_i32: _llvm_cttz_i32,
    setThrew: setThrew,
    _bitshift64Lshr: _bitshift64Lshr,
    _bitshift64Shl: _bitshift64Shl,
    _llvm_ctlz_i64: _llvm_ctlz_i64,
    stackRestore: stackRestore,
    _bitshift64Ashr: _bitshift64Ashr,
    _memset: _memset,
    _sbrk: _sbrk,
    _secp256k1_pedersen_commit: _secp256k1_pedersen_commit,
    _memcpy: _memcpy,
    _llvm_bswap_i32: _llvm_bswap_i32,
    ___muldi3: ___muldi3,
    ___uremdi3: ___uremdi3,
    stackAlloc: stackAlloc,
    _secp256k1_context_destroy: _secp256k1_context_destroy,
    _i64Subtract: _i64Subtract,
    ___udivmoddi4: ___udivmoddi4,
    setTempRet0: setTempRet0,
    _secp256k1_rangeproof_sign: _secp256k1_rangeproof_sign,
    _i64Add: _i64Add,
    _emscripten_get_global_libc: _emscripten_get_global_libc,
    ___udivdi3: ___udivdi3,
    ___errno_location: ___errno_location,
    _secp256k1_pedersen_verify_tally: _secp256k1_pedersen_verify_tally,
    ___muldsi3: ___muldsi3,
    _free: _free,
    runPostSets: runPostSets,
    establishStackSpace: establishStackSpace,
    _secp256k1_pedersen_blind_sum: _secp256k1_pedersen_blind_sum,
    _malloc: _malloc,
    _secp256k1_context_create: _secp256k1_context_create,
    _secp256k1_rangeproof_info: _secp256k1_rangeproof_info,
    stackAlloc: stackAlloc,
    stackSave: stackSave,
    stackRestore: stackRestore,
    establishStackSpace: establishStackSpace,
    setThrew: setThrew,
    setTempRet0: setTempRet0,
    getTempRet0: getTempRet0,
    dynCall_ii: dynCall_ii,
    dynCall_iiii: dynCall_iiii
  };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real_stackSave = asm["stackSave"];
asm["stackSave"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"];
asm["getTempRet0"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"];
asm["_llvm_cttz_i32"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_cttz_i32.apply(null, arguments);
};

var real_setThrew = asm["setThrew"];
asm["setThrew"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"];
asm["_bitshift64Lshr"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"];
asm["_bitshift64Shl"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__llvm_ctlz_i64 = asm["_llvm_ctlz_i64"];
asm["_llvm_ctlz_i64"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_ctlz_i64.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"];
asm["_bitshift64Ashr"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Ashr.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"];
asm["_sbrk"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__secp256k1_pedersen_commit = asm["_secp256k1_pedersen_commit"];
asm["_secp256k1_pedersen_commit"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__secp256k1_pedersen_commit.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"];
asm["_llvm_bswap_i32"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"];
asm["___muldi3"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"];
asm["___uremdi3"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real__secp256k1_context_destroy = asm["_secp256k1_context_destroy"];
asm["_secp256k1_context_destroy"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__secp256k1_context_destroy.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"];
asm["_i64Subtract"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"];
asm["___udivmoddi4"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivmoddi4.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"];
asm["setTempRet0"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real__secp256k1_rangeproof_sign = asm["_secp256k1_rangeproof_sign"];
asm["_secp256k1_rangeproof_sign"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__secp256k1_rangeproof_sign.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"];
asm["_i64Add"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"];
asm["_emscripten_get_global_libc"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"];
asm["___udivdi3"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"];
asm["___errno_location"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real__secp256k1_pedersen_verify_tally = asm["_secp256k1_pedersen_verify_tally"];
asm["_secp256k1_pedersen_verify_tally"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__secp256k1_pedersen_verify_tally.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"];
asm["___muldsi3"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldsi3.apply(null, arguments);
};

var real__free = asm["_free"];
asm["_free"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"];
asm["establishStackSpace"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real__secp256k1_pedersen_blind_sum = asm["_secp256k1_pedersen_blind_sum"];
asm["_secp256k1_pedersen_blind_sum"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__secp256k1_pedersen_blind_sum.apply(null, arguments);
};

var real__malloc = asm["_malloc"];
asm["_malloc"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__secp256k1_context_create = asm["_secp256k1_context_create"];
asm["_secp256k1_context_create"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__secp256k1_context_create.apply(null, arguments);
};

var real__secp256k1_rangeproof_info = asm["_secp256k1_rangeproof_info"];
asm["_secp256k1_rangeproof_info"] = function () {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__secp256k1_rangeproof_info.apply(null, arguments);
};
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _llvm_ctlz_i64 = Module["_llvm_ctlz_i64"] = asm["_llvm_ctlz_i64"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _secp256k1_pedersen_commit = Module["_secp256k1_pedersen_commit"] = asm["_secp256k1_pedersen_commit"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _secp256k1_context_destroy = Module["_secp256k1_context_destroy"] = asm["_secp256k1_context_destroy"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _secp256k1_rangeproof_sign = Module["_secp256k1_rangeproof_sign"] = asm["_secp256k1_rangeproof_sign"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _secp256k1_pedersen_verify_tally = Module["_secp256k1_pedersen_verify_tally"] = asm["_secp256k1_pedersen_verify_tally"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _secp256k1_pedersen_blind_sum = Module["_secp256k1_pedersen_blind_sum"] = asm["_secp256k1_pedersen_blind_sum"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _secp256k1_context_create = Module["_secp256k1_context_create"] = asm["_secp256k1_context_create"];
var _secp256k1_rangeproof_info = Module["_secp256k1_rangeproof_info"] = asm["_secp256k1_rangeproof_info"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;


/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length + 1;

  function pad() {
    for (var i = 0; i < 4 - 1; i++) {
      argv.push(0);
    }
  }

  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL)];
  pad();
  for (var i = 0; i < argc - 1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch (e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}


/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function () {
      setTimeout(function () {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}

Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}

Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function (decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}

Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}


// {{MODULE_ADDITIONS}}
